/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __esm = (fn3, res) => function __init() {
  return fn3 && (res = (0, fn3[__getOwnPropNames(fn3)[0]])(fn3 = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to2, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to2, key) && key !== except)
        __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to2;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/universal-user-agent/dist-node/index.js
var require_dist_node = __commonJS({
  "node_modules/universal-user-agent/dist-node/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function getUserAgent3() {
      if (typeof navigator === "object" && "userAgent" in navigator) {
        return navigator.userAgent;
      }
      if (typeof process === "object" && process.version !== void 0) {
        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
      }
      return "<environment undetectable>";
    }
    exports.getUserAgent = getUserAgent3;
  }
});

// node_modules/before-after-hook/lib/register.js
var require_register = __commonJS({
  "node_modules/before-after-hook/lib/register.js"(exports, module2) {
    module2.exports = register;
    function register(state, name, method, options) {
      if (typeof method !== "function") {
        throw new Error("method for before hook must be a function");
      }
      if (!options) {
        options = {};
      }
      if (Array.isArray(name)) {
        return name.reverse().reduce(function(callback, name2) {
          return register.bind(null, state, name2, callback, options);
        }, method)();
      }
      return Promise.resolve().then(function() {
        if (!state.registry[name]) {
          return method(options);
        }
        return state.registry[name].reduce(function(method2, registered) {
          return registered.hook.bind(null, method2, options);
        }, method)();
      });
    }
  }
});

// node_modules/before-after-hook/lib/add.js
var require_add = __commonJS({
  "node_modules/before-after-hook/lib/add.js"(exports, module2) {
    module2.exports = addHook;
    function addHook(state, kind, name, hook2) {
      var orig = hook2;
      if (!state.registry[name]) {
        state.registry[name] = [];
      }
      if (kind === "before") {
        hook2 = function(method, options) {
          return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
        };
      }
      if (kind === "after") {
        hook2 = function(method, options) {
          var result;
          return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
            result = result_;
            return orig(result, options);
          }).then(function() {
            return result;
          });
        };
      }
      if (kind === "error") {
        hook2 = function(method, options) {
          return Promise.resolve().then(method.bind(null, options)).catch(function(error) {
            return orig(error, options);
          });
        };
      }
      state.registry[name].push({
        hook: hook2,
        orig
      });
    }
  }
});

// node_modules/before-after-hook/lib/remove.js
var require_remove = __commonJS({
  "node_modules/before-after-hook/lib/remove.js"(exports, module2) {
    module2.exports = removeHook;
    function removeHook(state, name, method) {
      if (!state.registry[name]) {
        return;
      }
      var index2 = state.registry[name].map(function(registered) {
        return registered.orig;
      }).indexOf(method);
      if (index2 === -1) {
        return;
      }
      state.registry[name].splice(index2, 1);
    }
  }
});

// node_modules/before-after-hook/index.js
var require_before_after_hook = __commonJS({
  "node_modules/before-after-hook/index.js"(exports, module2) {
    var register = require_register();
    var addHook = require_add();
    var removeHook = require_remove();
    var bind = Function.bind;
    var bindable = bind.bind(bind);
    function bindApi(hook2, state, name) {
      var removeHookRef = bindable(removeHook, null).apply(
        null,
        name ? [state, name] : [state]
      );
      hook2.api = { remove: removeHookRef };
      hook2.remove = removeHookRef;
      ["before", "error", "after", "wrap"].forEach(function(kind) {
        var args = name ? [state, kind, name] : [state, kind];
        hook2[kind] = hook2.api[kind] = bindable(addHook, null).apply(null, args);
      });
    }
    function HookSingular() {
      var singularHookName = "h";
      var singularHookState = {
        registry: {}
      };
      var singularHook = register.bind(null, singularHookState, singularHookName);
      bindApi(singularHook, singularHookState, singularHookName);
      return singularHook;
    }
    function HookCollection() {
      var state = {
        registry: {}
      };
      var hook2 = register.bind(null, state);
      bindApi(hook2, state);
      return hook2;
    }
    var collectionHookDeprecationMessageDisplayed = false;
    function Hook() {
      if (!collectionHookDeprecationMessageDisplayed) {
        console.warn(
          '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
        );
        collectionHookDeprecationMessageDisplayed = true;
      }
      return HookCollection();
    }
    Hook.Singular = HookSingular.bind();
    Hook.Collection = HookCollection.bind();
    module2.exports = Hook;
    module2.exports.Hook = Hook;
    module2.exports.Singular = Hook.Singular;
    module2.exports.Collection = Hook.Collection;
  }
});

// node_modules/@octokit/endpoint/dist-web/index.js
function lowercaseKeys(object) {
  if (!object) {
    return {};
  }
  return Object.keys(object).reduce((newObj, key) => {
    newObj[key.toLowerCase()] = object[key];
    return newObj;
  }, {});
}
function isPlainObject(value) {
  if (typeof value !== "object" || value === null)
    return false;
  if (Object.prototype.toString.call(value) !== "[object Object]")
    return false;
  const proto = Object.getPrototypeOf(value);
  if (proto === null)
    return true;
  const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
}
function mergeDeep(defaults, options) {
  const result = Object.assign({}, defaults);
  Object.keys(options).forEach((key) => {
    if (isPlainObject(options[key])) {
      if (!(key in defaults))
        Object.assign(result, { [key]: options[key] });
      else
        result[key] = mergeDeep(defaults[key], options[key]);
    } else {
      Object.assign(result, { [key]: options[key] });
    }
  });
  return result;
}
function removeUndefinedProperties(obj) {
  for (const key in obj) {
    if (obj[key] === void 0) {
      delete obj[key];
    }
  }
  return obj;
}
function merge(defaults, route, options) {
  var _a3;
  if (typeof route === "string") {
    let [method, url] = route.split(" ");
    options = Object.assign(url ? { method, url } : { url: method }, options);
  } else {
    options = Object.assign({}, route);
  }
  options.headers = lowercaseKeys(options.headers);
  removeUndefinedProperties(options);
  removeUndefinedProperties(options.headers);
  const mergedOptions = mergeDeep(defaults || {}, options);
  if (options.url === "/graphql") {
    if (defaults && ((_a3 = defaults.mediaType.previews) == null ? void 0 : _a3.length)) {
      mergedOptions.mediaType.previews = defaults.mediaType.previews.filter(
        (preview) => !mergedOptions.mediaType.previews.includes(preview)
      ).concat(mergedOptions.mediaType.previews);
    }
    mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview) => preview.replace(/-preview/, ""));
  }
  return mergedOptions;
}
function addQueryParameters(url, parameters) {
  const separator = /\?/.test(url) ? "&" : "?";
  const names = Object.keys(parameters);
  if (names.length === 0) {
    return url;
  }
  return url + separator + names.map((name) => {
    if (name === "q") {
      return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
    }
    return `${name}=${encodeURIComponent(parameters[name])}`;
  }).join("&");
}
function removeNonChars(variableName) {
  return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
}
function extractUrlVariableNames(url) {
  const matches = url.match(urlVariableRegex);
  if (!matches) {
    return [];
  }
  return matches.map(removeNonChars).reduce((a, b2) => a.concat(b2), []);
}
function omit(object, keysToOmit) {
  const result = { __proto__: null };
  for (const key of Object.keys(object)) {
    if (keysToOmit.indexOf(key) === -1) {
      result[key] = object[key];
    }
  }
  return result;
}
function encodeReserved(str) {
  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
    if (!/%[0-9A-Fa-f]/.test(part)) {
      part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
    }
    return part;
  }).join("");
}
function encodeUnreserved(str) {
  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
function encodeValue(operator, value, key) {
  value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
  if (key) {
    return encodeUnreserved(key) + "=" + value;
  } else {
    return value;
  }
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function isKeyOperator(operator) {
  return operator === ";" || operator === "&" || operator === "?";
}
function getValues(context, operator, key, modifier) {
  var value = context[key], result = [];
  if (isDefined(value) && value !== "") {
    if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
      value = value.toString();
      if (modifier && modifier !== "*") {
        value = value.substring(0, parseInt(modifier, 10));
      }
      result.push(
        encodeValue(operator, value, isKeyOperator(operator) ? key : "")
      );
    } else {
      if (modifier === "*") {
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            result.push(
              encodeValue(operator, value2, isKeyOperator(operator) ? key : "")
            );
          });
        } else {
          Object.keys(value).forEach(function(k3) {
            if (isDefined(value[k3])) {
              result.push(encodeValue(operator, value[k3], k3));
            }
          });
        }
      } else {
        const tmp = [];
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function(value2) {
            tmp.push(encodeValue(operator, value2));
          });
        } else {
          Object.keys(value).forEach(function(k3) {
            if (isDefined(value[k3])) {
              tmp.push(encodeUnreserved(k3));
              tmp.push(encodeValue(operator, value[k3].toString()));
            }
          });
        }
        if (isKeyOperator(operator)) {
          result.push(encodeUnreserved(key) + "=" + tmp.join(","));
        } else if (tmp.length !== 0) {
          result.push(tmp.join(","));
        }
      }
    }
  } else {
    if (operator === ";") {
      if (isDefined(value)) {
        result.push(encodeUnreserved(key));
      }
    } else if (value === "" && (operator === "&" || operator === "?")) {
      result.push(encodeUnreserved(key) + "=");
    } else if (value === "") {
      result.push("");
    }
  }
  return result;
}
function parseUrl(template) {
  return {
    expand: expand.bind(null, template)
  };
}
function expand(template, context) {
  var operators = ["+", "#", ".", "/", ";", "?", "&"];
  template = template.replace(
    /\{([^\{\}]+)\}|([^\{\}]+)/g,
    function(_2, expression, literal) {
      if (expression) {
        let operator = "";
        const values = [];
        if (operators.indexOf(expression.charAt(0)) !== -1) {
          operator = expression.charAt(0);
          expression = expression.substr(1);
        }
        expression.split(/,/g).forEach(function(variable) {
          var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
          values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
        });
        if (operator && operator !== "+") {
          var separator = ",";
          if (operator === "?") {
            separator = "&";
          } else if (operator !== "#") {
            separator = operator;
          }
          return (values.length !== 0 ? operator : "") + values.join(separator);
        } else {
          return values.join(",");
        }
      } else {
        return encodeReserved(literal);
      }
    }
  );
  if (template === "/") {
    return template;
  } else {
    return template.replace(/\/$/, "");
  }
}
function parse(options) {
  var _a3;
  let method = options.method.toUpperCase();
  let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
  let headers = Object.assign({}, options.headers);
  let body;
  let parameters = omit(options, [
    "method",
    "baseUrl",
    "url",
    "headers",
    "request",
    "mediaType"
  ]);
  const urlVariableNames = extractUrlVariableNames(url);
  url = parseUrl(url).expand(parameters);
  if (!/^http/.test(url)) {
    url = options.baseUrl + url;
  }
  const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
  const remainingParameters = omit(parameters, omittedParameters);
  const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
  if (!isBinaryRequest) {
    if (options.mediaType.format) {
      headers.accept = headers.accept.split(/,/).map(
        (format) => format.replace(
          /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
          `application/vnd$1$2.${options.mediaType.format}`
        )
      ).join(",");
    }
    if (url.endsWith("/graphql")) {
      if ((_a3 = options.mediaType.previews) == null ? void 0 : _a3.length) {
        const previewsFromAcceptHeader = headers.accept.match(/[\w-]+(?=-preview)/g) || [];
        headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
          const format = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
          return `application/vnd.github.${preview}-preview${format}`;
        }).join(",");
      }
    }
  }
  if (["GET", "HEAD"].includes(method)) {
    url = addQueryParameters(url, remainingParameters);
  } else {
    if ("data" in remainingParameters) {
      body = remainingParameters.data;
    } else {
      if (Object.keys(remainingParameters).length) {
        body = remainingParameters;
      }
    }
  }
  if (!headers["content-type"] && typeof body !== "undefined") {
    headers["content-type"] = "application/json; charset=utf-8";
  }
  if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
    body = "";
  }
  return Object.assign(
    { method, url, headers },
    typeof body !== "undefined" ? { body } : null,
    options.request ? { request: options.request } : null
  );
}
function endpointWithDefaults(defaults, route, options) {
  return parse(merge(defaults, route, options));
}
function withDefaults(oldDefaults, newDefaults) {
  const DEFAULTS2 = merge(oldDefaults, newDefaults);
  const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
  return Object.assign(endpoint2, {
    DEFAULTS: DEFAULTS2,
    defaults: withDefaults.bind(null, DEFAULTS2),
    merge: merge.bind(null, DEFAULTS2),
    parse
  });
}
var import_universal_user_agent, VERSION2, userAgent, DEFAULTS, urlVariableRegex, endpoint;
var init_dist_web = __esm({
  "node_modules/@octokit/endpoint/dist-web/index.js"() {
    import_universal_user_agent = __toESM(require_dist_node());
    VERSION2 = "9.0.4";
    userAgent = `octokit-endpoint.js/${VERSION2} ${(0, import_universal_user_agent.getUserAgent)()}`;
    DEFAULTS = {
      method: "GET",
      baseUrl: "https://api.github.com",
      headers: {
        accept: "application/vnd.github.v3+json",
        "user-agent": userAgent
      },
      mediaType: {
        format: ""
      }
    };
    urlVariableRegex = /\{[^}]+\}/g;
    endpoint = withDefaults(null, DEFAULTS);
  }
});

// node_modules/deprecation/dist-web/index.js
var Deprecation;
var init_dist_web2 = __esm({
  "node_modules/deprecation/dist-web/index.js"() {
    Deprecation = class extends Error {
      constructor(message) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "Deprecation";
      }
    };
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports, module2) {
    module2.exports = wrappy;
    function wrappy(fn3, cb) {
      if (fn3 && cb)
        return wrappy(fn3)(cb);
      if (typeof fn3 !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn3).forEach(function(k3) {
        wrapper[k3] = fn3[k3];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn3.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k3) {
            ret[k3] = cb2[k3];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once2);
    module2.exports.strict = wrappy(onceStrict);
    once2.proto = once2(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once2(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once2(fn3) {
      var f2 = function() {
        if (f2.called)
          return f2.value;
        f2.called = true;
        return f2.value = fn3.apply(this, arguments);
      };
      f2.called = false;
      return f2;
    }
    function onceStrict(fn3) {
      var f2 = function() {
        if (f2.called)
          throw new Error(f2.onceError);
        f2.called = true;
        return f2.value = fn3.apply(this, arguments);
      };
      var name = fn3.name || "Function wrapped with `once`";
      f2.onceError = name + " shouldn't be called more than once";
      f2.called = false;
      return f2;
    }
  }
});

// node_modules/@octokit/request-error/dist-web/index.js
var import_once, logOnceCode, logOnceHeaders, RequestError;
var init_dist_web3 = __esm({
  "node_modules/@octokit/request-error/dist-web/index.js"() {
    init_dist_web2();
    import_once = __toESM(require_once());
    logOnceCode = (0, import_once.default)((deprecation) => console.warn(deprecation));
    logOnceHeaders = (0, import_once.default)((deprecation) => console.warn(deprecation));
    RequestError = class extends Error {
      constructor(message, statusCode, options) {
        super(message);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
        this.name = "HttpError";
        this.status = statusCode;
        let headers;
        if ("headers" in options && typeof options.headers !== "undefined") {
          headers = options.headers;
        }
        if ("response" in options) {
          this.response = options.response;
          headers = options.response.headers;
        }
        const requestCopy = Object.assign({}, options.request);
        if (options.request.headers.authorization) {
          requestCopy.headers = Object.assign({}, options.request.headers, {
            authorization: options.request.headers.authorization.replace(
              / .*$/,
              " [REDACTED]"
            )
          });
        }
        requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
        this.request = requestCopy;
        Object.defineProperty(this, "code", {
          get() {
            logOnceCode(
              new Deprecation(
                "[@octokit/request-error] `error.code` is deprecated, use `error.status`."
              )
            );
            return statusCode;
          }
        });
        Object.defineProperty(this, "headers", {
          get() {
            logOnceHeaders(
              new Deprecation(
                "[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."
              )
            );
            return headers || {};
          }
        });
      }
    };
  }
});

// node_modules/@octokit/request/dist-web/index.js
var dist_web_exports = {};
__export(dist_web_exports, {
  request: () => request
});
function isPlainObject2(value) {
  if (typeof value !== "object" || value === null)
    return false;
  if (Object.prototype.toString.call(value) !== "[object Object]")
    return false;
  const proto = Object.getPrototypeOf(value);
  if (proto === null)
    return true;
  const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
}
function getBufferResponse(response) {
  return response.arrayBuffer();
}
function fetchWrapper(requestOptions) {
  var _a3, _b, _c;
  const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
  const parseSuccessResponseBody = ((_a3 = requestOptions.request) == null ? void 0 : _a3.parseSuccessResponseBody) !== false;
  if (isPlainObject2(requestOptions.body) || Array.isArray(requestOptions.body)) {
    requestOptions.body = JSON.stringify(requestOptions.body);
  }
  let headers = {};
  let status;
  let url;
  let { fetch: fetch2 } = globalThis;
  if ((_b = requestOptions.request) == null ? void 0 : _b.fetch) {
    fetch2 = requestOptions.request.fetch;
  }
  if (!fetch2) {
    throw new Error(
      "fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing"
    );
  }
  return fetch2(requestOptions.url, {
    method: requestOptions.method,
    body: requestOptions.body,
    headers: requestOptions.headers,
    signal: (_c = requestOptions.request) == null ? void 0 : _c.signal,
    // duplex must be set if request.body is ReadableStream or Async Iterables.
    // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.
    ...requestOptions.body && { duplex: "half" }
  }).then(async (response) => {
    url = response.url;
    status = response.status;
    for (const keyAndValue of response.headers) {
      headers[keyAndValue[0]] = keyAndValue[1];
    }
    if ("deprecation" in headers) {
      const matches = headers.link && headers.link.match(/<([^>]+)>; rel="deprecation"/);
      const deprecationLink = matches && matches.pop();
      log.warn(
        `[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`
      );
    }
    if (status === 204 || status === 205) {
      return;
    }
    if (requestOptions.method === "HEAD") {
      if (status < 400) {
        return;
      }
      throw new RequestError(response.statusText, status, {
        response: {
          url,
          status,
          headers,
          data: void 0
        },
        request: requestOptions
      });
    }
    if (status === 304) {
      throw new RequestError("Not modified", status, {
        response: {
          url,
          status,
          headers,
          data: await getResponseData(response)
        },
        request: requestOptions
      });
    }
    if (status >= 400) {
      const data2 = await getResponseData(response);
      const error = new RequestError(toErrorMessage(data2), status, {
        response: {
          url,
          status,
          headers,
          data: data2
        },
        request: requestOptions
      });
      throw error;
    }
    return parseSuccessResponseBody ? await getResponseData(response) : response.body;
  }).then((data2) => {
    return {
      status,
      url,
      headers,
      data: data2
    };
  }).catch((error) => {
    if (error instanceof RequestError)
      throw error;
    else if (error.name === "AbortError")
      throw error;
    let message = error.message;
    if (error.name === "TypeError" && "cause" in error) {
      if (error.cause instanceof Error) {
        message = error.cause.message;
      } else if (typeof error.cause === "string") {
        message = error.cause;
      }
    }
    throw new RequestError(message, 500, {
      request: requestOptions
    });
  });
}
async function getResponseData(response) {
  const contentType = response.headers.get("content-type");
  if (/application\/json/.test(contentType)) {
    return response.json().catch(() => response.text()).catch(() => "");
  }
  if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
    return response.text();
  }
  return getBufferResponse(response);
}
function toErrorMessage(data2) {
  if (typeof data2 === "string")
    return data2;
  let suffix;
  if ("documentation_url" in data2) {
    suffix = ` - ${data2.documentation_url}`;
  } else {
    suffix = "";
  }
  if ("message" in data2) {
    if (Array.isArray(data2.errors)) {
      return `${data2.message}: ${data2.errors.map(JSON.stringify).join(", ")}${suffix}`;
    }
    return `${data2.message}${suffix}`;
  }
  return `Unknown error: ${JSON.stringify(data2)}`;
}
function withDefaults2(oldEndpoint, newDefaults) {
  const endpoint2 = oldEndpoint.defaults(newDefaults);
  const newApi = function(route, parameters) {
    const endpointOptions = endpoint2.merge(route, parameters);
    if (!endpointOptions.request || !endpointOptions.request.hook) {
      return fetchWrapper(endpoint2.parse(endpointOptions));
    }
    const request2 = (route2, parameters2) => {
      return fetchWrapper(
        endpoint2.parse(endpoint2.merge(route2, parameters2))
      );
    };
    Object.assign(request2, {
      endpoint: endpoint2,
      defaults: withDefaults2.bind(null, endpoint2)
    });
    return endpointOptions.request.hook(request2, endpointOptions);
  };
  return Object.assign(newApi, {
    endpoint: endpoint2,
    defaults: withDefaults2.bind(null, endpoint2)
  });
}
var import_universal_user_agent2, VERSION3, request;
var init_dist_web4 = __esm({
  "node_modules/@octokit/request/dist-web/index.js"() {
    init_dist_web();
    import_universal_user_agent2 = __toESM(require_dist_node());
    init_dist_web3();
    VERSION3 = "8.2.0";
    request = withDefaults2(endpoint, {
      headers: {
        "user-agent": `octokit-request.js/${VERSION3} ${(0, import_universal_user_agent2.getUserAgent)()}`
      }
    });
  }
});

// node_modules/@octokit/graphql/dist-node/index.js
var require_dist_node2 = __commonJS({
  "node_modules/@octokit/graphql/dist-node/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to2, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to2, key) && key !== except)
            __defProp2(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to2;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      GraphqlResponseError: () => GraphqlResponseError,
      graphql: () => graphql2,
      withCustomRequest: () => withCustomRequest
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_request3 = (init_dist_web4(), __toCommonJS(dist_web_exports));
    var import_universal_user_agent3 = require_dist_node();
    var VERSION6 = "7.0.2";
    var import_request2 = (init_dist_web4(), __toCommonJS(dist_web_exports));
    var import_request = (init_dist_web4(), __toCommonJS(dist_web_exports));
    function _buildMessageForResponseErrors(data2) {
      return `Request failed due to following response errors:
` + data2.errors.map((e) => ` - ${e.message}`).join("\n");
    }
    var GraphqlResponseError = class extends Error {
      constructor(request2, headers, response) {
        super(_buildMessageForResponseErrors(response));
        this.request = request2;
        this.headers = headers;
        this.response = response;
        this.name = "GraphqlResponseError";
        this.errors = response.errors;
        this.data = response.data;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
      }
    };
    var NON_VARIABLE_OPTIONS = [
      "method",
      "baseUrl",
      "url",
      "headers",
      "request",
      "query",
      "mediaType"
    ];
    var FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
    var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
    function graphql(request2, query, options) {
      if (options) {
        if (typeof query === "string" && "query" in options) {
          return Promise.reject(
            new Error(`[@octokit/graphql] "query" cannot be used as variable name`)
          );
        }
        for (const key in options) {
          if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key))
            continue;
          return Promise.reject(
            new Error(
              `[@octokit/graphql] "${key}" cannot be used as variable name`
            )
          );
        }
      }
      const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
      const requestOptions = Object.keys(
        parsedOptions
      ).reduce((result, key) => {
        if (NON_VARIABLE_OPTIONS.includes(key)) {
          result[key] = parsedOptions[key];
          return result;
        }
        if (!result.variables) {
          result.variables = {};
        }
        result.variables[key] = parsedOptions[key];
        return result;
      }, {});
      const baseUrl = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
      if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
        requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
      }
      return request2(requestOptions).then((response) => {
        if (response.data.errors) {
          const headers = {};
          for (const key of Object.keys(response.headers)) {
            headers[key] = response.headers[key];
          }
          throw new GraphqlResponseError(
            requestOptions,
            headers,
            response.data
          );
        }
        return response.data.data;
      });
    }
    function withDefaults3(request2, newDefaults) {
      const newRequest = request2.defaults(newDefaults);
      const newApi = (query, options) => {
        return graphql(newRequest, query, options);
      };
      return Object.assign(newApi, {
        defaults: withDefaults3.bind(null, newRequest),
        endpoint: newRequest.endpoint
      });
    }
    var graphql2 = withDefaults3(import_request3.request, {
      headers: {
        "user-agent": `octokit-graphql.js/${VERSION6} ${(0, import_universal_user_agent3.getUserAgent)()}`
      },
      method: "POST",
      url: "/graphql"
    });
    function withCustomRequest(customRequest) {
      return withDefaults3(customRequest, {
        method: "POST",
        url: "/graphql"
      });
    }
  }
});

// node_modules/@octokit/auth-token/dist-web/index.js
var dist_web_exports2 = {};
__export(dist_web_exports2, {
  createTokenAuth: () => createTokenAuth
});
async function auth(token) {
  const isApp = token.split(/\./).length === 3;
  const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
  const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
  const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
  return {
    type: "token",
    token,
    tokenType
  };
}
function withAuthorizationPrefix(token) {
  if (token.split(/\./).length === 3) {
    return `bearer ${token}`;
  }
  return `token ${token}`;
}
async function hook(token, request2, route, parameters) {
  const endpoint2 = request2.endpoint.merge(
    route,
    parameters
  );
  endpoint2.headers.authorization = withAuthorizationPrefix(token);
  return request2(endpoint2);
}
var REGEX_IS_INSTALLATION_LEGACY, REGEX_IS_INSTALLATION, REGEX_IS_USER_TO_SERVER, createTokenAuth;
var init_dist_web5 = __esm({
  "node_modules/@octokit/auth-token/dist-web/index.js"() {
    REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
    REGEX_IS_INSTALLATION = /^ghs_/;
    REGEX_IS_USER_TO_SERVER = /^ghu_/;
    createTokenAuth = function createTokenAuth2(token) {
      if (!token) {
        throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
      }
      if (typeof token !== "string") {
        throw new Error(
          "[@octokit/auth-token] Token passed to createTokenAuth is not a string"
        );
      }
      token = token.replace(/^(token|bearer) +/i, "");
      return Object.assign(auth.bind(null, token), {
        hook: hook.bind(null, token)
      });
    };
  }
});

// node_modules/@octokit/core/dist-node/index.js
var require_dist_node3 = __commonJS({
  "node_modules/@octokit/core/dist-node/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to2, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to2, key) && key !== except)
            __defProp2(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to2;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      Octokit: () => Octokit
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_universal_user_agent3 = require_dist_node();
    var import_before_after_hook = require_before_after_hook();
    var import_request = (init_dist_web4(), __toCommonJS(dist_web_exports));
    var import_graphql = require_dist_node2();
    var import_auth_token = (init_dist_web5(), __toCommonJS(dist_web_exports2));
    var VERSION6 = "5.1.0";
    var noop2 = () => {
    };
    var consoleWarn = console.warn.bind(console);
    var consoleError = console.error.bind(console);
    var userAgentTrail = `octokit-core.js/${VERSION6} ${(0, import_universal_user_agent3.getUserAgent)()}`;
    var _a3;
    var Octokit = (_a3 = class {
      static defaults(defaults) {
        const OctokitWithDefaults = class extends this {
          constructor(...args) {
            const options = args[0] || {};
            if (typeof defaults === "function") {
              super(defaults(options));
              return;
            }
            super(
              Object.assign(
                {},
                defaults,
                options,
                options.userAgent && defaults.userAgent ? {
                  userAgent: `${options.userAgent} ${defaults.userAgent}`
                } : null
              )
            );
          }
        };
        return OctokitWithDefaults;
      }
      /**
       * Attach a plugin (or many) to your Octokit instance.
       *
       * @example
       * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
       */
      static plugin(...newPlugins) {
        var _a4;
        const currentPlugins = this.plugins;
        const NewOctokit = (_a4 = class extends this {
        }, (() => {
          _a4.plugins = currentPlugins.concat(
            newPlugins.filter((plugin) => !currentPlugins.includes(plugin))
          );
        })(), _a4);
        return NewOctokit;
      }
      constructor(options = {}) {
        const hook2 = new import_before_after_hook.Collection();
        const requestDefaults = {
          baseUrl: import_request.request.endpoint.DEFAULTS.baseUrl,
          headers: {},
          request: Object.assign({}, options.request, {
            // @ts-ignore internal usage only, no need to type
            hook: hook2.bind(null, "request")
          }),
          mediaType: {
            previews: [],
            format: ""
          }
        };
        requestDefaults.headers["user-agent"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;
        if (options.baseUrl) {
          requestDefaults.baseUrl = options.baseUrl;
        }
        if (options.previews) {
          requestDefaults.mediaType.previews = options.previews;
        }
        if (options.timeZone) {
          requestDefaults.headers["time-zone"] = options.timeZone;
        }
        this.request = import_request.request.defaults(requestDefaults);
        this.graphql = (0, import_graphql.withCustomRequest)(this.request).defaults(requestDefaults);
        this.log = Object.assign(
          {
            debug: noop2,
            info: noop2,
            warn: consoleWarn,
            error: consoleError
          },
          options.log
        );
        this.hook = hook2;
        if (!options.authStrategy) {
          if (!options.auth) {
            this.auth = async () => ({
              type: "unauthenticated"
            });
          } else {
            const auth2 = (0, import_auth_token.createTokenAuth)(options.auth);
            hook2.wrap("request", auth2.hook);
            this.auth = auth2;
          }
        } else {
          const { authStrategy, ...otherOptions } = options;
          const auth2 = authStrategy(
            Object.assign(
              {
                request: this.request,
                log: this.log,
                // we pass the current octokit instance as well as its constructor options
                // to allow for authentication strategies that return a new octokit instance
                // that shares the same internal state as the current one. The original
                // requirement for this was the "event-octokit" authentication strategy
                // of https://github.com/probot/octokit-auth-probot.
                octokit: this,
                octokitOptions: otherOptions
              },
              options.auth
            )
          );
          hook2.wrap("request", auth2.hook);
          this.auth = auth2;
        }
        const classConstructor = this.constructor;
        for (let i = 0; i < classConstructor.plugins.length; ++i) {
          Object.assign(this, classConstructor.plugins[i](this, options));
        }
      }
    }, (() => {
      _a3.VERSION = VERSION6;
    })(), (() => {
      _a3.plugins = [];
    })(), _a3);
  }
});

// node_modules/@octokit/plugin-request-log/dist-web/index.js
var dist_web_exports3 = {};
__export(dist_web_exports3, {
  requestLog: () => requestLog
});
function requestLog(octokit) {
  octokit.hook.wrap("request", (request2, options) => {
    octokit.log.debug("request", options);
    const start = Date.now();
    const requestOptions = octokit.request.endpoint.parse(options);
    const path = requestOptions.url.replace(options.baseUrl, "");
    return request2(options).then((response) => {
      octokit.log.info(
        `${requestOptions.method} ${path} - ${response.status} in ${Date.now() - start}ms`
      );
      return response;
    }).catch((error) => {
      octokit.log.info(
        `${requestOptions.method} ${path} - ${error.status} in ${Date.now() - start}ms`
      );
      throw error;
    });
  });
}
var VERSION4;
var init_dist_web6 = __esm({
  "node_modules/@octokit/plugin-request-log/dist-web/index.js"() {
    VERSION4 = "4.0.0";
    requestLog.VERSION = VERSION4;
  }
});

// node_modules/@octokit/plugin-paginate-rest/dist-node/index.js
var require_dist_node4 = __commonJS({
  "node_modules/@octokit/plugin-paginate-rest/dist-node/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to2, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to2, key) && key !== except)
            __defProp2(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to2;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      composePaginateRest: () => composePaginateRest,
      isPaginatingEndpoint: () => isPaginatingEndpoint,
      paginateRest: () => paginateRest,
      paginatingEndpoints: () => paginatingEndpoints
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var VERSION6 = "9.1.5";
    function normalizePaginatedListResponse(response) {
      if (!response.data) {
        return {
          ...response,
          data: []
        };
      }
      const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
      if (!responseNeedsNormalization)
        return response;
      const incompleteResults = response.data.incomplete_results;
      const repositorySelection = response.data.repository_selection;
      const totalCount = response.data.total_count;
      delete response.data.incomplete_results;
      delete response.data.repository_selection;
      delete response.data.total_count;
      const namespaceKey = Object.keys(response.data)[0];
      const data2 = response.data[namespaceKey];
      response.data = data2;
      if (typeof incompleteResults !== "undefined") {
        response.data.incomplete_results = incompleteResults;
      }
      if (typeof repositorySelection !== "undefined") {
        response.data.repository_selection = repositorySelection;
      }
      response.data.total_count = totalCount;
      return response;
    }
    function iterator(octokit, route, parameters) {
      const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
      const requestMethod = typeof route === "function" ? route : octokit.request;
      const method = options.method;
      const headers = options.headers;
      let url = options.url;
      return {
        [Symbol.asyncIterator]: () => ({
          async next() {
            if (!url)
              return { done: true };
            try {
              const response = await requestMethod({ method, url, headers });
              const normalizedResponse = normalizePaginatedListResponse(response);
              url = ((normalizedResponse.headers.link || "").match(
                /<([^>]+)>;\s*rel="next"/
              ) || [])[1];
              return { value: normalizedResponse };
            } catch (error) {
              if (error.status !== 409)
                throw error;
              url = "";
              return {
                value: {
                  status: 200,
                  headers: {},
                  data: []
                }
              };
            }
          }
        })
      };
    }
    function paginate(octokit, route, parameters, mapFn) {
      if (typeof parameters === "function") {
        mapFn = parameters;
        parameters = void 0;
      }
      return gather(
        octokit,
        [],
        iterator(octokit, route, parameters)[Symbol.asyncIterator](),
        mapFn
      );
    }
    function gather(octokit, results, iterator2, mapFn) {
      return iterator2.next().then((result) => {
        if (result.done) {
          return results;
        }
        let earlyExit = false;
        function done() {
          earlyExit = true;
        }
        results = results.concat(
          mapFn ? mapFn(result.value, done) : result.value.data
        );
        if (earlyExit) {
          return results;
        }
        return gather(octokit, results, iterator2, mapFn);
      });
    }
    var composePaginateRest = Object.assign(paginate, {
      iterator
    });
    var paginatingEndpoints = [
      "GET /advisories",
      "GET /app/hook/deliveries",
      "GET /app/installation-requests",
      "GET /app/installations",
      "GET /assignments/{assignment_id}/accepted_assignments",
      "GET /classrooms",
      "GET /classrooms/{classroom_id}/assignments",
      "GET /enterprises/{enterprise}/dependabot/alerts",
      "GET /enterprises/{enterprise}/secret-scanning/alerts",
      "GET /events",
      "GET /gists",
      "GET /gists/public",
      "GET /gists/starred",
      "GET /gists/{gist_id}/comments",
      "GET /gists/{gist_id}/commits",
      "GET /gists/{gist_id}/forks",
      "GET /installation/repositories",
      "GET /issues",
      "GET /licenses",
      "GET /marketplace_listing/plans",
      "GET /marketplace_listing/plans/{plan_id}/accounts",
      "GET /marketplace_listing/stubbed/plans",
      "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
      "GET /networks/{owner}/{repo}/events",
      "GET /notifications",
      "GET /organizations",
      "GET /orgs/{org}/actions/cache/usage-by-repository",
      "GET /orgs/{org}/actions/permissions/repositories",
      "GET /orgs/{org}/actions/runners",
      "GET /orgs/{org}/actions/secrets",
      "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
      "GET /orgs/{org}/actions/variables",
      "GET /orgs/{org}/actions/variables/{name}/repositories",
      "GET /orgs/{org}/blocks",
      "GET /orgs/{org}/code-scanning/alerts",
      "GET /orgs/{org}/codespaces",
      "GET /orgs/{org}/codespaces/secrets",
      "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
      "GET /orgs/{org}/copilot/billing/seats",
      "GET /orgs/{org}/dependabot/alerts",
      "GET /orgs/{org}/dependabot/secrets",
      "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
      "GET /orgs/{org}/events",
      "GET /orgs/{org}/failed_invitations",
      "GET /orgs/{org}/hooks",
      "GET /orgs/{org}/hooks/{hook_id}/deliveries",
      "GET /orgs/{org}/installations",
      "GET /orgs/{org}/invitations",
      "GET /orgs/{org}/invitations/{invitation_id}/teams",
      "GET /orgs/{org}/issues",
      "GET /orgs/{org}/members",
      "GET /orgs/{org}/members/{username}/codespaces",
      "GET /orgs/{org}/migrations",
      "GET /orgs/{org}/migrations/{migration_id}/repositories",
      "GET /orgs/{org}/outside_collaborators",
      "GET /orgs/{org}/packages",
      "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
      "GET /orgs/{org}/personal-access-token-requests",
      "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
      "GET /orgs/{org}/personal-access-tokens",
      "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
      "GET /orgs/{org}/projects",
      "GET /orgs/{org}/properties/values",
      "GET /orgs/{org}/public_members",
      "GET /orgs/{org}/repos",
      "GET /orgs/{org}/rulesets",
      "GET /orgs/{org}/rulesets/rule-suites",
      "GET /orgs/{org}/secret-scanning/alerts",
      "GET /orgs/{org}/security-advisories",
      "GET /orgs/{org}/teams",
      "GET /orgs/{org}/teams/{team_slug}/discussions",
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
      "GET /orgs/{org}/teams/{team_slug}/invitations",
      "GET /orgs/{org}/teams/{team_slug}/members",
      "GET /orgs/{org}/teams/{team_slug}/projects",
      "GET /orgs/{org}/teams/{team_slug}/repos",
      "GET /orgs/{org}/teams/{team_slug}/teams",
      "GET /projects/columns/{column_id}/cards",
      "GET /projects/{project_id}/collaborators",
      "GET /projects/{project_id}/columns",
      "GET /repos/{owner}/{repo}/actions/artifacts",
      "GET /repos/{owner}/{repo}/actions/caches",
      "GET /repos/{owner}/{repo}/actions/organization-secrets",
      "GET /repos/{owner}/{repo}/actions/organization-variables",
      "GET /repos/{owner}/{repo}/actions/runners",
      "GET /repos/{owner}/{repo}/actions/runs",
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
      "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
      "GET /repos/{owner}/{repo}/actions/secrets",
      "GET /repos/{owner}/{repo}/actions/variables",
      "GET /repos/{owner}/{repo}/actions/workflows",
      "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
      "GET /repos/{owner}/{repo}/activity",
      "GET /repos/{owner}/{repo}/assignees",
      "GET /repos/{owner}/{repo}/branches",
      "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
      "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
      "GET /repos/{owner}/{repo}/code-scanning/alerts",
      "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
      "GET /repos/{owner}/{repo}/code-scanning/analyses",
      "GET /repos/{owner}/{repo}/codespaces",
      "GET /repos/{owner}/{repo}/codespaces/devcontainers",
      "GET /repos/{owner}/{repo}/codespaces/secrets",
      "GET /repos/{owner}/{repo}/collaborators",
      "GET /repos/{owner}/{repo}/comments",
      "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
      "GET /repos/{owner}/{repo}/commits",
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
      "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
      "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
      "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
      "GET /repos/{owner}/{repo}/commits/{ref}/status",
      "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
      "GET /repos/{owner}/{repo}/contributors",
      "GET /repos/{owner}/{repo}/dependabot/alerts",
      "GET /repos/{owner}/{repo}/dependabot/secrets",
      "GET /repos/{owner}/{repo}/deployments",
      "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
      "GET /repos/{owner}/{repo}/environments",
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
      "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
      "GET /repos/{owner}/{repo}/events",
      "GET /repos/{owner}/{repo}/forks",
      "GET /repos/{owner}/{repo}/hooks",
      "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
      "GET /repos/{owner}/{repo}/invitations",
      "GET /repos/{owner}/{repo}/issues",
      "GET /repos/{owner}/{repo}/issues/comments",
      "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
      "GET /repos/{owner}/{repo}/issues/events",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
      "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
      "GET /repos/{owner}/{repo}/keys",
      "GET /repos/{owner}/{repo}/labels",
      "GET /repos/{owner}/{repo}/milestones",
      "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
      "GET /repos/{owner}/{repo}/notifications",
      "GET /repos/{owner}/{repo}/pages/builds",
      "GET /repos/{owner}/{repo}/projects",
      "GET /repos/{owner}/{repo}/pulls",
      "GET /repos/{owner}/{repo}/pulls/comments",
      "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
      "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
      "GET /repos/{owner}/{repo}/releases",
      "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
      "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
      "GET /repos/{owner}/{repo}/rules/branches/{branch}",
      "GET /repos/{owner}/{repo}/rulesets",
      "GET /repos/{owner}/{repo}/rulesets/rule-suites",
      "GET /repos/{owner}/{repo}/secret-scanning/alerts",
      "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
      "GET /repos/{owner}/{repo}/security-advisories",
      "GET /repos/{owner}/{repo}/stargazers",
      "GET /repos/{owner}/{repo}/subscribers",
      "GET /repos/{owner}/{repo}/tags",
      "GET /repos/{owner}/{repo}/teams",
      "GET /repos/{owner}/{repo}/topics",
      "GET /repositories",
      "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
      "GET /repositories/{repository_id}/environments/{environment_name}/variables",
      "GET /search/code",
      "GET /search/commits",
      "GET /search/issues",
      "GET /search/labels",
      "GET /search/repositories",
      "GET /search/topics",
      "GET /search/users",
      "GET /teams/{team_id}/discussions",
      "GET /teams/{team_id}/discussions/{discussion_number}/comments",
      "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
      "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
      "GET /teams/{team_id}/invitations",
      "GET /teams/{team_id}/members",
      "GET /teams/{team_id}/projects",
      "GET /teams/{team_id}/repos",
      "GET /teams/{team_id}/teams",
      "GET /user/blocks",
      "GET /user/codespaces",
      "GET /user/codespaces/secrets",
      "GET /user/emails",
      "GET /user/followers",
      "GET /user/following",
      "GET /user/gpg_keys",
      "GET /user/installations",
      "GET /user/installations/{installation_id}/repositories",
      "GET /user/issues",
      "GET /user/keys",
      "GET /user/marketplace_purchases",
      "GET /user/marketplace_purchases/stubbed",
      "GET /user/memberships/orgs",
      "GET /user/migrations",
      "GET /user/migrations/{migration_id}/repositories",
      "GET /user/orgs",
      "GET /user/packages",
      "GET /user/packages/{package_type}/{package_name}/versions",
      "GET /user/public_emails",
      "GET /user/repos",
      "GET /user/repository_invitations",
      "GET /user/social_accounts",
      "GET /user/ssh_signing_keys",
      "GET /user/starred",
      "GET /user/subscriptions",
      "GET /user/teams",
      "GET /users",
      "GET /users/{username}/events",
      "GET /users/{username}/events/orgs/{org}",
      "GET /users/{username}/events/public",
      "GET /users/{username}/followers",
      "GET /users/{username}/following",
      "GET /users/{username}/gists",
      "GET /users/{username}/gpg_keys",
      "GET /users/{username}/keys",
      "GET /users/{username}/orgs",
      "GET /users/{username}/packages",
      "GET /users/{username}/projects",
      "GET /users/{username}/received_events",
      "GET /users/{username}/received_events/public",
      "GET /users/{username}/repos",
      "GET /users/{username}/social_accounts",
      "GET /users/{username}/ssh_signing_keys",
      "GET /users/{username}/starred",
      "GET /users/{username}/subscriptions"
    ];
    function isPaginatingEndpoint(arg) {
      if (typeof arg === "string") {
        return paginatingEndpoints.includes(arg);
      } else {
        return false;
      }
    }
    function paginateRest(octokit) {
      return {
        paginate: Object.assign(paginate.bind(null, octokit), {
          iterator: iterator.bind(null, octokit)
        })
      };
    }
    paginateRest.VERSION = VERSION6;
  }
});

// node_modules/@octokit/plugin-rest-endpoint-methods/dist-web/index.js
var dist_web_exports4 = {};
__export(dist_web_exports4, {
  legacyRestEndpointMethods: () => legacyRestEndpointMethods,
  restEndpointMethods: () => restEndpointMethods
});
function endpointsToMethods(octokit) {
  const newMethods = {};
  for (const scope of endpointMethodsMap.keys()) {
    newMethods[scope] = new Proxy({ octokit, scope, cache: {} }, handler);
  }
  return newMethods;
}
function decorate(octokit, scope, methodName, defaults, decorations) {
  const requestWithDefaults = octokit.request.defaults(defaults);
  function withDecorations(...args) {
    let options = requestWithDefaults.endpoint.merge(...args);
    if (decorations.mapToData) {
      options = Object.assign({}, options, {
        data: options[decorations.mapToData],
        [decorations.mapToData]: void 0
      });
      return requestWithDefaults(options);
    }
    if (decorations.renamed) {
      const [newScope, newMethodName] = decorations.renamed;
      octokit.log.warn(
        `octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`
      );
    }
    if (decorations.deprecated) {
      octokit.log.warn(decorations.deprecated);
    }
    if (decorations.renamedParameters) {
      const options2 = requestWithDefaults.endpoint.merge(...args);
      for (const [name, alias] of Object.entries(
        decorations.renamedParameters
      )) {
        if (name in options2) {
          octokit.log.warn(
            `"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`
          );
          if (!(alias in options2)) {
            options2[alias] = options2[name];
          }
          delete options2[name];
        }
      }
      return requestWithDefaults(options2);
    }
    return requestWithDefaults(...args);
  }
  return Object.assign(withDecorations, requestWithDefaults);
}
function restEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit);
  return {
    rest: api
  };
}
function legacyRestEndpointMethods(octokit) {
  const api = endpointsToMethods(octokit);
  return {
    ...api,
    rest: api
  };
}
var VERSION5, Endpoints, endpoints_default, endpointMethodsMap, handler;
var init_dist_web7 = __esm({
  "node_modules/@octokit/plugin-rest-endpoint-methods/dist-web/index.js"() {
    VERSION5 = "10.2.0";
    Endpoints = {
      actions: {
        addCustomLabelsToSelfHostedRunnerForOrg: [
          "POST /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        addCustomLabelsToSelfHostedRunnerForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        addSelectedRepoToOrgSecret: [
          "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
        ],
        addSelectedRepoToOrgVariable: [
          "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
        ],
        approveWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"
        ],
        cancelWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"
        ],
        createEnvironmentVariable: [
          "POST /repositories/{repository_id}/environments/{environment_name}/variables"
        ],
        createOrUpdateEnvironmentSecret: [
          "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
        createOrUpdateRepoSecret: [
          "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"
        ],
        createOrgVariable: ["POST /orgs/{org}/actions/variables"],
        createRegistrationTokenForOrg: [
          "POST /orgs/{org}/actions/runners/registration-token"
        ],
        createRegistrationTokenForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/registration-token"
        ],
        createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
        createRemoveTokenForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/remove-token"
        ],
        createRepoVariable: ["POST /repos/{owner}/{repo}/actions/variables"],
        createWorkflowDispatch: [
          "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
        ],
        deleteActionsCacheById: [
          "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"
        ],
        deleteActionsCacheByKey: [
          "DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"
        ],
        deleteArtifact: [
          "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"
        ],
        deleteEnvironmentSecret: [
          "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        deleteEnvironmentVariable: [
          "DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
        deleteOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}"],
        deleteRepoSecret: [
          "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"
        ],
        deleteRepoVariable: [
          "DELETE /repos/{owner}/{repo}/actions/variables/{name}"
        ],
        deleteSelfHostedRunnerFromOrg: [
          "DELETE /orgs/{org}/actions/runners/{runner_id}"
        ],
        deleteSelfHostedRunnerFromRepo: [
          "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"
        ],
        deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
        deleteWorkflowRunLogs: [
          "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
        ],
        disableSelectedRepositoryGithubActionsOrganization: [
          "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"
        ],
        disableWorkflow: [
          "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"
        ],
        downloadArtifact: [
          "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"
        ],
        downloadJobLogsForWorkflowRun: [
          "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"
        ],
        downloadWorkflowRunAttemptLogs: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"
        ],
        downloadWorkflowRunLogs: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"
        ],
        enableSelectedRepositoryGithubActionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"
        ],
        enableWorkflow: [
          "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"
        ],
        forceCancelWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"
        ],
        generateRunnerJitconfigForOrg: [
          "POST /orgs/{org}/actions/runners/generate-jitconfig"
        ],
        generateRunnerJitconfigForRepo: [
          "POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"
        ],
        getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
        getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
        getActionsCacheUsageByRepoForOrg: [
          "GET /orgs/{org}/actions/cache/usage-by-repository"
        ],
        getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
        getAllowedActionsOrganization: [
          "GET /orgs/{org}/actions/permissions/selected-actions"
        ],
        getAllowedActionsRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions/selected-actions"
        ],
        getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
        getEnvironmentPublicKey: [
          "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"
        ],
        getEnvironmentSecret: [
          "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"
        ],
        getEnvironmentVariable: [
          "GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        getGithubActionsDefaultWorkflowPermissionsOrganization: [
          "GET /orgs/{org}/actions/permissions/workflow"
        ],
        getGithubActionsDefaultWorkflowPermissionsRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions/workflow"
        ],
        getGithubActionsPermissionsOrganization: [
          "GET /orgs/{org}/actions/permissions"
        ],
        getGithubActionsPermissionsRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions"
        ],
        getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
        getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
        getOrgVariable: ["GET /orgs/{org}/actions/variables/{name}"],
        getPendingDeploymentsForRun: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
        ],
        getRepoPermissions: [
          "GET /repos/{owner}/{repo}/actions/permissions",
          {},
          { renamed: ["actions", "getGithubActionsPermissionsRepository"] }
        ],
        getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
        getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
        getRepoVariable: ["GET /repos/{owner}/{repo}/actions/variables/{name}"],
        getReviewsForRun: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"
        ],
        getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
        getSelfHostedRunnerForRepo: [
          "GET /repos/{owner}/{repo}/actions/runners/{runner_id}"
        ],
        getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
        getWorkflowAccessToRepository: [
          "GET /repos/{owner}/{repo}/actions/permissions/access"
        ],
        getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
        getWorkflowRunAttempt: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"
        ],
        getWorkflowRunUsage: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"
        ],
        getWorkflowUsage: [
          "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"
        ],
        listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
        listEnvironmentSecrets: [
          "GET /repositories/{repository_id}/environments/{environment_name}/secrets"
        ],
        listEnvironmentVariables: [
          "GET /repositories/{repository_id}/environments/{environment_name}/variables"
        ],
        listJobsForWorkflowRun: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"
        ],
        listJobsForWorkflowRunAttempt: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"
        ],
        listLabelsForSelfHostedRunnerForOrg: [
          "GET /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        listLabelsForSelfHostedRunnerForRepo: [
          "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
        listOrgVariables: ["GET /orgs/{org}/actions/variables"],
        listRepoOrganizationSecrets: [
          "GET /repos/{owner}/{repo}/actions/organization-secrets"
        ],
        listRepoOrganizationVariables: [
          "GET /repos/{owner}/{repo}/actions/organization-variables"
        ],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
        listRepoVariables: ["GET /repos/{owner}/{repo}/actions/variables"],
        listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
        listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
        listRunnerApplicationsForRepo: [
          "GET /repos/{owner}/{repo}/actions/runners/downloads"
        ],
        listSelectedReposForOrgSecret: [
          "GET /orgs/{org}/actions/secrets/{secret_name}/repositories"
        ],
        listSelectedReposForOrgVariable: [
          "GET /orgs/{org}/actions/variables/{name}/repositories"
        ],
        listSelectedRepositoriesEnabledGithubActionsOrganization: [
          "GET /orgs/{org}/actions/permissions/repositories"
        ],
        listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
        listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
        listWorkflowRunArtifacts: [
          "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"
        ],
        listWorkflowRuns: [
          "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"
        ],
        listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
        reRunJobForWorkflowRun: [
          "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"
        ],
        reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
        reRunWorkflowFailedJobs: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"
        ],
        removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
          "DELETE /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
          "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        removeCustomLabelFromSelfHostedRunnerForOrg: [
          "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"
        ],
        removeCustomLabelFromSelfHostedRunnerForRepo: [
          "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"
        ],
        removeSelectedRepoFromOrgSecret: [
          "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"
        ],
        removeSelectedRepoFromOrgVariable: [
          "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"
        ],
        reviewCustomGatesForRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"
        ],
        reviewPendingDeploymentsForRun: [
          "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"
        ],
        setAllowedActionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/selected-actions"
        ],
        setAllowedActionsRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"
        ],
        setCustomLabelsForSelfHostedRunnerForOrg: [
          "PUT /orgs/{org}/actions/runners/{runner_id}/labels"
        ],
        setCustomLabelsForSelfHostedRunnerForRepo: [
          "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"
        ],
        setGithubActionsDefaultWorkflowPermissionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/workflow"
        ],
        setGithubActionsDefaultWorkflowPermissionsRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions/workflow"
        ],
        setGithubActionsPermissionsOrganization: [
          "PUT /orgs/{org}/actions/permissions"
        ],
        setGithubActionsPermissionsRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions"
        ],
        setSelectedReposForOrgSecret: [
          "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"
        ],
        setSelectedReposForOrgVariable: [
          "PUT /orgs/{org}/actions/variables/{name}/repositories"
        ],
        setSelectedRepositoriesEnabledGithubActionsOrganization: [
          "PUT /orgs/{org}/actions/permissions/repositories"
        ],
        setWorkflowAccessToRepository: [
          "PUT /repos/{owner}/{repo}/actions/permissions/access"
        ],
        updateEnvironmentVariable: [
          "PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"
        ],
        updateOrgVariable: ["PATCH /orgs/{org}/actions/variables/{name}"],
        updateRepoVariable: [
          "PATCH /repos/{owner}/{repo}/actions/variables/{name}"
        ]
      },
      activity: {
        checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
        deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
        deleteThreadSubscription: [
          "DELETE /notifications/threads/{thread_id}/subscription"
        ],
        getFeeds: ["GET /feeds"],
        getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
        getThread: ["GET /notifications/threads/{thread_id}"],
        getThreadSubscriptionForAuthenticatedUser: [
          "GET /notifications/threads/{thread_id}/subscription"
        ],
        listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
        listNotificationsForAuthenticatedUser: ["GET /notifications"],
        listOrgEventsForAuthenticatedUser: [
          "GET /users/{username}/events/orgs/{org}"
        ],
        listPublicEvents: ["GET /events"],
        listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
        listPublicEventsForUser: ["GET /users/{username}/events/public"],
        listPublicOrgEvents: ["GET /orgs/{org}/events"],
        listReceivedEventsForUser: ["GET /users/{username}/received_events"],
        listReceivedPublicEventsForUser: [
          "GET /users/{username}/received_events/public"
        ],
        listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
        listRepoNotificationsForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/notifications"
        ],
        listReposStarredByAuthenticatedUser: ["GET /user/starred"],
        listReposStarredByUser: ["GET /users/{username}/starred"],
        listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
        listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
        listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
        listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
        markNotificationsAsRead: ["PUT /notifications"],
        markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
        markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
        setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
        setThreadSubscription: [
          "PUT /notifications/threads/{thread_id}/subscription"
        ],
        starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
        unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
      },
      apps: {
        addRepoToInstallation: [
          "PUT /user/installations/{installation_id}/repositories/{repository_id}",
          {},
          { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
        ],
        addRepoToInstallationForAuthenticatedUser: [
          "PUT /user/installations/{installation_id}/repositories/{repository_id}"
        ],
        checkToken: ["POST /applications/{client_id}/token"],
        createFromManifest: ["POST /app-manifests/{code}/conversions"],
        createInstallationAccessToken: [
          "POST /app/installations/{installation_id}/access_tokens"
        ],
        deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
        deleteInstallation: ["DELETE /app/installations/{installation_id}"],
        deleteToken: ["DELETE /applications/{client_id}/token"],
        getAuthenticated: ["GET /app"],
        getBySlug: ["GET /apps/{app_slug}"],
        getInstallation: ["GET /app/installations/{installation_id}"],
        getOrgInstallation: ["GET /orgs/{org}/installation"],
        getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
        getSubscriptionPlanForAccount: [
          "GET /marketplace_listing/accounts/{account_id}"
        ],
        getSubscriptionPlanForAccountStubbed: [
          "GET /marketplace_listing/stubbed/accounts/{account_id}"
        ],
        getUserInstallation: ["GET /users/{username}/installation"],
        getWebhookConfigForApp: ["GET /app/hook/config"],
        getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
        listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
        listAccountsForPlanStubbed: [
          "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"
        ],
        listInstallationReposForAuthenticatedUser: [
          "GET /user/installations/{installation_id}/repositories"
        ],
        listInstallationRequestsForAuthenticatedApp: [
          "GET /app/installation-requests"
        ],
        listInstallations: ["GET /app/installations"],
        listInstallationsForAuthenticatedUser: ["GET /user/installations"],
        listPlans: ["GET /marketplace_listing/plans"],
        listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
        listReposAccessibleToInstallation: ["GET /installation/repositories"],
        listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
        listSubscriptionsForAuthenticatedUserStubbed: [
          "GET /user/marketplace_purchases/stubbed"
        ],
        listWebhookDeliveries: ["GET /app/hook/deliveries"],
        redeliverWebhookDelivery: [
          "POST /app/hook/deliveries/{delivery_id}/attempts"
        ],
        removeRepoFromInstallation: [
          "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
          {},
          { renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
        ],
        removeRepoFromInstallationForAuthenticatedUser: [
          "DELETE /user/installations/{installation_id}/repositories/{repository_id}"
        ],
        resetToken: ["PATCH /applications/{client_id}/token"],
        revokeInstallationAccessToken: ["DELETE /installation/token"],
        scopeToken: ["POST /applications/{client_id}/token/scoped"],
        suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
        unsuspendInstallation: [
          "DELETE /app/installations/{installation_id}/suspended"
        ],
        updateWebhookConfigForApp: ["PATCH /app/hook/config"]
      },
      billing: {
        getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
        getGithubActionsBillingUser: [
          "GET /users/{username}/settings/billing/actions"
        ],
        getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
        getGithubPackagesBillingUser: [
          "GET /users/{username}/settings/billing/packages"
        ],
        getSharedStorageBillingOrg: [
          "GET /orgs/{org}/settings/billing/shared-storage"
        ],
        getSharedStorageBillingUser: [
          "GET /users/{username}/settings/billing/shared-storage"
        ]
      },
      checks: {
        create: ["POST /repos/{owner}/{repo}/check-runs"],
        createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
        get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
        getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
        listAnnotations: [
          "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"
        ],
        listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
        listForSuite: [
          "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"
        ],
        listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
        rerequestRun: [
          "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"
        ],
        rerequestSuite: [
          "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"
        ],
        setSuitesPreferences: [
          "PATCH /repos/{owner}/{repo}/check-suites/preferences"
        ],
        update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
      },
      codeScanning: {
        deleteAnalysis: [
          "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"
        ],
        getAlert: [
          "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
          {},
          { renamedParameters: { alert_id: "alert_number" } }
        ],
        getAnalysis: [
          "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"
        ],
        getCodeqlDatabase: [
          "GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"
        ],
        getDefaultSetup: ["GET /repos/{owner}/{repo}/code-scanning/default-setup"],
        getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
        listAlertInstances: [
          "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"
        ],
        listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
        listAlertsInstances: [
          "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
          {},
          { renamed: ["codeScanning", "listAlertInstances"] }
        ],
        listCodeqlDatabases: [
          "GET /repos/{owner}/{repo}/code-scanning/codeql/databases"
        ],
        listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
        updateAlert: [
          "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"
        ],
        updateDefaultSetup: [
          "PATCH /repos/{owner}/{repo}/code-scanning/default-setup"
        ],
        uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
      },
      codesOfConduct: {
        getAllCodesOfConduct: ["GET /codes_of_conduct"],
        getConductCode: ["GET /codes_of_conduct/{key}"]
      },
      codespaces: {
        addRepositoryForSecretForAuthenticatedUser: [
          "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        addSelectedRepoToOrgSecret: [
          "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        checkPermissionsForDevcontainer: [
          "GET /repos/{owner}/{repo}/codespaces/permissions_check"
        ],
        codespaceMachinesForAuthenticatedUser: [
          "GET /user/codespaces/{codespace_name}/machines"
        ],
        createForAuthenticatedUser: ["POST /user/codespaces"],
        createOrUpdateOrgSecret: [
          "PUT /orgs/{org}/codespaces/secrets/{secret_name}"
        ],
        createOrUpdateRepoSecret: [
          "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        createOrUpdateSecretForAuthenticatedUser: [
          "PUT /user/codespaces/secrets/{secret_name}"
        ],
        createWithPrForAuthenticatedUser: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"
        ],
        createWithRepoForAuthenticatedUser: [
          "POST /repos/{owner}/{repo}/codespaces"
        ],
        deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
        deleteFromOrganization: [
          "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"
        ],
        deleteOrgSecret: ["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],
        deleteRepoSecret: [
          "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        deleteSecretForAuthenticatedUser: [
          "DELETE /user/codespaces/secrets/{secret_name}"
        ],
        exportForAuthenticatedUser: [
          "POST /user/codespaces/{codespace_name}/exports"
        ],
        getCodespacesForUserInOrg: [
          "GET /orgs/{org}/members/{username}/codespaces"
        ],
        getExportDetailsForAuthenticatedUser: [
          "GET /user/codespaces/{codespace_name}/exports/{export_id}"
        ],
        getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
        getOrgPublicKey: ["GET /orgs/{org}/codespaces/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}"],
        getPublicKeyForAuthenticatedUser: [
          "GET /user/codespaces/secrets/public-key"
        ],
        getRepoPublicKey: [
          "GET /repos/{owner}/{repo}/codespaces/secrets/public-key"
        ],
        getRepoSecret: [
          "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"
        ],
        getSecretForAuthenticatedUser: [
          "GET /user/codespaces/secrets/{secret_name}"
        ],
        listDevcontainersInRepositoryForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces/devcontainers"
        ],
        listForAuthenticatedUser: ["GET /user/codespaces"],
        listInOrganization: [
          "GET /orgs/{org}/codespaces",
          {},
          { renamedParameters: { org_id: "org" } }
        ],
        listInRepositoryForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces"
        ],
        listOrgSecrets: ["GET /orgs/{org}/codespaces/secrets"],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
        listRepositoriesForSecretForAuthenticatedUser: [
          "GET /user/codespaces/secrets/{secret_name}/repositories"
        ],
        listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
        listSelectedReposForOrgSecret: [
          "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
        ],
        preFlightWithRepoForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces/new"
        ],
        publishForAuthenticatedUser: [
          "POST /user/codespaces/{codespace_name}/publish"
        ],
        removeRepositoryForSecretForAuthenticatedUser: [
          "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        removeSelectedRepoFromOrgSecret: [
          "DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"
        ],
        repoMachinesForAuthenticatedUser: [
          "GET /repos/{owner}/{repo}/codespaces/machines"
        ],
        setRepositoriesForSecretForAuthenticatedUser: [
          "PUT /user/codespaces/secrets/{secret_name}/repositories"
        ],
        setSelectedReposForOrgSecret: [
          "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"
        ],
        startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
        stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
        stopInOrganization: [
          "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"
        ],
        updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
      },
      copilot: {
        addCopilotForBusinessSeatsForTeams: [
          "POST /orgs/{org}/copilot/billing/selected_teams"
        ],
        addCopilotForBusinessSeatsForUsers: [
          "POST /orgs/{org}/copilot/billing/selected_users"
        ],
        cancelCopilotSeatAssignmentForTeams: [
          "DELETE /orgs/{org}/copilot/billing/selected_teams"
        ],
        cancelCopilotSeatAssignmentForUsers: [
          "DELETE /orgs/{org}/copilot/billing/selected_users"
        ],
        getCopilotOrganizationDetails: ["GET /orgs/{org}/copilot/billing"],
        getCopilotSeatDetailsForUser: [
          "GET /orgs/{org}/members/{username}/copilot"
        ],
        listCopilotSeats: ["GET /orgs/{org}/copilot/billing/seats"]
      },
      dependabot: {
        addSelectedRepoToOrgSecret: [
          "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
        ],
        createOrUpdateOrgSecret: [
          "PUT /orgs/{org}/dependabot/secrets/{secret_name}"
        ],
        createOrUpdateRepoSecret: [
          "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
        deleteRepoSecret: [
          "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        getAlert: ["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],
        getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
        getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
        getRepoPublicKey: [
          "GET /repos/{owner}/{repo}/dependabot/secrets/public-key"
        ],
        getRepoSecret: [
          "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"
        ],
        listAlertsForEnterprise: [
          "GET /enterprises/{enterprise}/dependabot/alerts"
        ],
        listAlertsForOrg: ["GET /orgs/{org}/dependabot/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/dependabot/alerts"],
        listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
        listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
        listSelectedReposForOrgSecret: [
          "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
        ],
        removeSelectedRepoFromOrgSecret: [
          "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"
        ],
        setSelectedReposForOrgSecret: [
          "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"
        ],
        updateAlert: [
          "PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"
        ]
      },
      dependencyGraph: {
        createRepositorySnapshot: [
          "POST /repos/{owner}/{repo}/dependency-graph/snapshots"
        ],
        diffRange: [
          "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"
        ],
        exportSbom: ["GET /repos/{owner}/{repo}/dependency-graph/sbom"]
      },
      emojis: { get: ["GET /emojis"] },
      gists: {
        checkIsStarred: ["GET /gists/{gist_id}/star"],
        create: ["POST /gists"],
        createComment: ["POST /gists/{gist_id}/comments"],
        delete: ["DELETE /gists/{gist_id}"],
        deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
        fork: ["POST /gists/{gist_id}/forks"],
        get: ["GET /gists/{gist_id}"],
        getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
        getRevision: ["GET /gists/{gist_id}/{sha}"],
        list: ["GET /gists"],
        listComments: ["GET /gists/{gist_id}/comments"],
        listCommits: ["GET /gists/{gist_id}/commits"],
        listForUser: ["GET /users/{username}/gists"],
        listForks: ["GET /gists/{gist_id}/forks"],
        listPublic: ["GET /gists/public"],
        listStarred: ["GET /gists/starred"],
        star: ["PUT /gists/{gist_id}/star"],
        unstar: ["DELETE /gists/{gist_id}/star"],
        update: ["PATCH /gists/{gist_id}"],
        updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
      },
      git: {
        createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
        createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
        createRef: ["POST /repos/{owner}/{repo}/git/refs"],
        createTag: ["POST /repos/{owner}/{repo}/git/tags"],
        createTree: ["POST /repos/{owner}/{repo}/git/trees"],
        deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
        getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
        getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
        getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
        getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
        getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
        listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
        updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
      },
      gitignore: {
        getAllTemplates: ["GET /gitignore/templates"],
        getTemplate: ["GET /gitignore/templates/{name}"]
      },
      interactions: {
        getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
        getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
        getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
        getRestrictionsForYourPublicRepos: [
          "GET /user/interaction-limits",
          {},
          { renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
        ],
        removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
        removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
        removeRestrictionsForRepo: [
          "DELETE /repos/{owner}/{repo}/interaction-limits"
        ],
        removeRestrictionsForYourPublicRepos: [
          "DELETE /user/interaction-limits",
          {},
          { renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
        ],
        setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
        setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
        setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
        setRestrictionsForYourPublicRepos: [
          "PUT /user/interaction-limits",
          {},
          { renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
        ]
      },
      issues: {
        addAssignees: [
          "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"
        ],
        addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
        checkUserCanBeAssignedToIssue: [
          "GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"
        ],
        create: ["POST /repos/{owner}/{repo}/issues"],
        createComment: [
          "POST /repos/{owner}/{repo}/issues/{issue_number}/comments"
        ],
        createLabel: ["POST /repos/{owner}/{repo}/labels"],
        createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
        deleteComment: [
          "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"
        ],
        deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
        deleteMilestone: [
          "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"
        ],
        get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
        getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
        getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
        getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
        list: ["GET /issues"],
        listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
        listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
        listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
        listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
        listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
        listEventsForTimeline: [
          "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"
        ],
        listForAuthenticatedUser: ["GET /user/issues"],
        listForOrg: ["GET /orgs/{org}/issues"],
        listForRepo: ["GET /repos/{owner}/{repo}/issues"],
        listLabelsForMilestone: [
          "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"
        ],
        listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
        listLabelsOnIssue: [
          "GET /repos/{owner}/{repo}/issues/{issue_number}/labels"
        ],
        listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
        lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        removeAllLabels: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"
        ],
        removeAssignees: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"
        ],
        removeLabel: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"
        ],
        setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
        unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
        update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
        updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
        updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
        updateMilestone: [
          "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"
        ]
      },
      licenses: {
        get: ["GET /licenses/{license}"],
        getAllCommonlyUsed: ["GET /licenses"],
        getForRepo: ["GET /repos/{owner}/{repo}/license"]
      },
      markdown: {
        render: ["POST /markdown"],
        renderRaw: [
          "POST /markdown/raw",
          { headers: { "content-type": "text/plain; charset=utf-8" } }
        ]
      },
      meta: {
        get: ["GET /meta"],
        getAllVersions: ["GET /versions"],
        getOctocat: ["GET /octocat"],
        getZen: ["GET /zen"],
        root: ["GET /"]
      },
      migrations: {
        cancelImport: [
          "DELETE /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import"
          }
        ],
        deleteArchiveForAuthenticatedUser: [
          "DELETE /user/migrations/{migration_id}/archive"
        ],
        deleteArchiveForOrg: [
          "DELETE /orgs/{org}/migrations/{migration_id}/archive"
        ],
        downloadArchiveForOrg: [
          "GET /orgs/{org}/migrations/{migration_id}/archive"
        ],
        getArchiveForAuthenticatedUser: [
          "GET /user/migrations/{migration_id}/archive"
        ],
        getCommitAuthors: [
          "GET /repos/{owner}/{repo}/import/authors",
          {},
          {
            deprecated: "octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors"
          }
        ],
        getImportStatus: [
          "GET /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status"
          }
        ],
        getLargeFiles: [
          "GET /repos/{owner}/{repo}/import/large_files",
          {},
          {
            deprecated: "octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files"
          }
        ],
        getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
        getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
        listForAuthenticatedUser: ["GET /user/migrations"],
        listForOrg: ["GET /orgs/{org}/migrations"],
        listReposForAuthenticatedUser: [
          "GET /user/migrations/{migration_id}/repositories"
        ],
        listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
        listReposForUser: [
          "GET /user/migrations/{migration_id}/repositories",
          {},
          { renamed: ["migrations", "listReposForAuthenticatedUser"] }
        ],
        mapCommitAuthor: [
          "PATCH /repos/{owner}/{repo}/import/authors/{author_id}",
          {},
          {
            deprecated: "octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author"
          }
        ],
        setLfsPreference: [
          "PATCH /repos/{owner}/{repo}/import/lfs",
          {},
          {
            deprecated: "octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference"
          }
        ],
        startForAuthenticatedUser: ["POST /user/migrations"],
        startForOrg: ["POST /orgs/{org}/migrations"],
        startImport: [
          "PUT /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import"
          }
        ],
        unlockRepoForAuthenticatedUser: [
          "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"
        ],
        unlockRepoForOrg: [
          "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"
        ],
        updateImport: [
          "PATCH /repos/{owner}/{repo}/import",
          {},
          {
            deprecated: "octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import"
          }
        ]
      },
      orgs: {
        addSecurityManagerTeam: [
          "PUT /orgs/{org}/security-managers/teams/{team_slug}"
        ],
        blockUser: ["PUT /orgs/{org}/blocks/{username}"],
        cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
        checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
        checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
        checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
        convertMemberToOutsideCollaborator: [
          "PUT /orgs/{org}/outside_collaborators/{username}"
        ],
        createInvitation: ["POST /orgs/{org}/invitations"],
        createOrUpdateCustomProperties: ["PATCH /orgs/{org}/properties/schema"],
        createOrUpdateCustomPropertiesValuesForRepos: [
          "PATCH /orgs/{org}/properties/values"
        ],
        createOrUpdateCustomProperty: [
          "PUT /orgs/{org}/properties/schema/{custom_property_name}"
        ],
        createWebhook: ["POST /orgs/{org}/hooks"],
        delete: ["DELETE /orgs/{org}"],
        deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
        enableOrDisableSecurityProductOnAllOrgRepos: [
          "POST /orgs/{org}/{security_product}/{enablement}"
        ],
        get: ["GET /orgs/{org}"],
        getAllCustomProperties: ["GET /orgs/{org}/properties/schema"],
        getCustomProperty: [
          "GET /orgs/{org}/properties/schema/{custom_property_name}"
        ],
        getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
        getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
        getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
        getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
        getWebhookDelivery: [
          "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"
        ],
        list: ["GET /organizations"],
        listAppInstallations: ["GET /orgs/{org}/installations"],
        listBlockedUsers: ["GET /orgs/{org}/blocks"],
        listCustomPropertiesValuesForRepos: ["GET /orgs/{org}/properties/values"],
        listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
        listForAuthenticatedUser: ["GET /user/orgs"],
        listForUser: ["GET /users/{username}/orgs"],
        listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
        listMembers: ["GET /orgs/{org}/members"],
        listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
        listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
        listPatGrantRepositories: [
          "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"
        ],
        listPatGrantRequestRepositories: [
          "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"
        ],
        listPatGrantRequests: ["GET /orgs/{org}/personal-access-token-requests"],
        listPatGrants: ["GET /orgs/{org}/personal-access-tokens"],
        listPendingInvitations: ["GET /orgs/{org}/invitations"],
        listPublicMembers: ["GET /orgs/{org}/public_members"],
        listSecurityManagerTeams: ["GET /orgs/{org}/security-managers"],
        listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
        listWebhooks: ["GET /orgs/{org}/hooks"],
        pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: [
          "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
        ],
        removeCustomProperty: [
          "DELETE /orgs/{org}/properties/schema/{custom_property_name}"
        ],
        removeMember: ["DELETE /orgs/{org}/members/{username}"],
        removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
        removeOutsideCollaborator: [
          "DELETE /orgs/{org}/outside_collaborators/{username}"
        ],
        removePublicMembershipForAuthenticatedUser: [
          "DELETE /orgs/{org}/public_members/{username}"
        ],
        removeSecurityManagerTeam: [
          "DELETE /orgs/{org}/security-managers/teams/{team_slug}"
        ],
        reviewPatGrantRequest: [
          "POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"
        ],
        reviewPatGrantRequestsInBulk: [
          "POST /orgs/{org}/personal-access-token-requests"
        ],
        setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
        setPublicMembershipForAuthenticatedUser: [
          "PUT /orgs/{org}/public_members/{username}"
        ],
        unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
        update: ["PATCH /orgs/{org}"],
        updateMembershipForAuthenticatedUser: [
          "PATCH /user/memberships/orgs/{org}"
        ],
        updatePatAccess: ["POST /orgs/{org}/personal-access-tokens/{pat_id}"],
        updatePatAccesses: ["POST /orgs/{org}/personal-access-tokens"],
        updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
        updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
      },
      packages: {
        deletePackageForAuthenticatedUser: [
          "DELETE /user/packages/{package_type}/{package_name}"
        ],
        deletePackageForOrg: [
          "DELETE /orgs/{org}/packages/{package_type}/{package_name}"
        ],
        deletePackageForUser: [
          "DELETE /users/{username}/packages/{package_type}/{package_name}"
        ],
        deletePackageVersionForAuthenticatedUser: [
          "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        deletePackageVersionForOrg: [
          "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        deletePackageVersionForUser: [
          "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getAllPackageVersionsForAPackageOwnedByAnOrg: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
          {},
          { renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
        ],
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}/versions",
          {},
          {
            renamed: [
              "packages",
              "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"
            ]
          }
        ],
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}/versions"
        ],
        getAllPackageVersionsForPackageOwnedByOrg: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}/versions"
        ],
        getAllPackageVersionsForPackageOwnedByUser: [
          "GET /users/{username}/packages/{package_type}/{package_name}/versions"
        ],
        getPackageForAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}"
        ],
        getPackageForOrganization: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}"
        ],
        getPackageForUser: [
          "GET /users/{username}/packages/{package_type}/{package_name}"
        ],
        getPackageVersionForAuthenticatedUser: [
          "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getPackageVersionForOrganization: [
          "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        getPackageVersionForUser: [
          "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"
        ],
        listDockerMigrationConflictingPackagesForAuthenticatedUser: [
          "GET /user/docker/conflicts"
        ],
        listDockerMigrationConflictingPackagesForOrganization: [
          "GET /orgs/{org}/docker/conflicts"
        ],
        listDockerMigrationConflictingPackagesForUser: [
          "GET /users/{username}/docker/conflicts"
        ],
        listPackagesForAuthenticatedUser: ["GET /user/packages"],
        listPackagesForOrganization: ["GET /orgs/{org}/packages"],
        listPackagesForUser: ["GET /users/{username}/packages"],
        restorePackageForAuthenticatedUser: [
          "POST /user/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageForOrg: [
          "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageForUser: [
          "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"
        ],
        restorePackageVersionForAuthenticatedUser: [
          "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ],
        restorePackageVersionForOrg: [
          "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ],
        restorePackageVersionForUser: [
          "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"
        ]
      },
      projects: {
        addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
        createCard: ["POST /projects/columns/{column_id}/cards"],
        createColumn: ["POST /projects/{project_id}/columns"],
        createForAuthenticatedUser: ["POST /user/projects"],
        createForOrg: ["POST /orgs/{org}/projects"],
        createForRepo: ["POST /repos/{owner}/{repo}/projects"],
        delete: ["DELETE /projects/{project_id}"],
        deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
        deleteColumn: ["DELETE /projects/columns/{column_id}"],
        get: ["GET /projects/{project_id}"],
        getCard: ["GET /projects/columns/cards/{card_id}"],
        getColumn: ["GET /projects/columns/{column_id}"],
        getPermissionForUser: [
          "GET /projects/{project_id}/collaborators/{username}/permission"
        ],
        listCards: ["GET /projects/columns/{column_id}/cards"],
        listCollaborators: ["GET /projects/{project_id}/collaborators"],
        listColumns: ["GET /projects/{project_id}/columns"],
        listForOrg: ["GET /orgs/{org}/projects"],
        listForRepo: ["GET /repos/{owner}/{repo}/projects"],
        listForUser: ["GET /users/{username}/projects"],
        moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
        moveColumn: ["POST /projects/columns/{column_id}/moves"],
        removeCollaborator: [
          "DELETE /projects/{project_id}/collaborators/{username}"
        ],
        update: ["PATCH /projects/{project_id}"],
        updateCard: ["PATCH /projects/columns/cards/{card_id}"],
        updateColumn: ["PATCH /projects/columns/{column_id}"]
      },
      pulls: {
        checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        create: ["POST /repos/{owner}/{repo}/pulls"],
        createReplyForReviewComment: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"
        ],
        createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        createReviewComment: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"
        ],
        deletePendingReview: [
          "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        deleteReviewComment: [
          "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"
        ],
        dismissReview: [
          "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"
        ],
        get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
        getReview: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
        list: ["GET /repos/{owner}/{repo}/pulls"],
        listCommentsForReview: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"
        ],
        listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
        listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
        listRequestedReviewers: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        listReviewComments: [
          "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"
        ],
        listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
        listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
        merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
        removeRequestedReviewers: [
          "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        requestReviewers: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"
        ],
        submitReview: [
          "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"
        ],
        update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
        updateBranch: [
          "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"
        ],
        updateReview: [
          "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"
        ],
        updateReviewComment: [
          "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"
        ]
      },
      rateLimit: { get: ["GET /rate_limit"] },
      reactions: {
        createForCommitComment: [
          "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"
        ],
        createForIssue: [
          "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"
        ],
        createForIssueComment: [
          "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
        ],
        createForPullRequestReviewComment: [
          "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
        ],
        createForRelease: [
          "POST /repos/{owner}/{repo}/releases/{release_id}/reactions"
        ],
        createForTeamDiscussionCommentInOrg: [
          "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        ],
        createForTeamDiscussionInOrg: [
          "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
        ],
        deleteForCommitComment: [
          "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForIssue: [
          "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"
        ],
        deleteForIssueComment: [
          "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForPullRequestComment: [
          "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"
        ],
        deleteForRelease: [
          "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"
        ],
        deleteForTeamDiscussion: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"
        ],
        deleteForTeamDiscussionComment: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"
        ],
        listForCommitComment: [
          "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"
        ],
        listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
        listForIssueComment: [
          "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"
        ],
        listForPullRequestReviewComment: [
          "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"
        ],
        listForRelease: [
          "GET /repos/{owner}/{repo}/releases/{release_id}/reactions"
        ],
        listForTeamDiscussionCommentInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"
        ],
        listForTeamDiscussionInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"
        ]
      },
      repos: {
        acceptInvitation: [
          "PATCH /user/repository_invitations/{invitation_id}",
          {},
          { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
        ],
        acceptInvitationForAuthenticatedUser: [
          "PATCH /user/repository_invitations/{invitation_id}"
        ],
        addAppAccessRestrictions: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          {},
          { mapToData: "apps" }
        ],
        addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
        addStatusCheckContexts: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          {},
          { mapToData: "contexts" }
        ],
        addTeamAccessRestrictions: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          {},
          { mapToData: "teams" }
        ],
        addUserAccessRestrictions: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          {},
          { mapToData: "users" }
        ],
        checkAutomatedSecurityFixes: [
          "GET /repos/{owner}/{repo}/automated-security-fixes"
        ],
        checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
        checkVulnerabilityAlerts: [
          "GET /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
        compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
        compareCommitsWithBasehead: [
          "GET /repos/{owner}/{repo}/compare/{basehead}"
        ],
        createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
        createCommitComment: [
          "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"
        ],
        createCommitSignatureProtection: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
        createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
        createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
        createDeploymentBranchPolicy: [
          "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
        ],
        createDeploymentProtectionRule: [
          "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
        ],
        createDeploymentStatus: [
          "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
        ],
        createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
        createForAuthenticatedUser: ["POST /user/repos"],
        createFork: ["POST /repos/{owner}/{repo}/forks"],
        createInOrg: ["POST /orgs/{org}/repos"],
        createOrUpdateEnvironment: [
          "PUT /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
        createOrgRuleset: ["POST /orgs/{org}/rulesets"],
        createPagesDeployment: ["POST /repos/{owner}/{repo}/pages/deployment"],
        createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
        createRelease: ["POST /repos/{owner}/{repo}/releases"],
        createRepoRuleset: ["POST /repos/{owner}/{repo}/rulesets"],
        createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
        createUsingTemplate: [
          "POST /repos/{template_owner}/{template_repo}/generate"
        ],
        createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
        declineInvitation: [
          "DELETE /user/repository_invitations/{invitation_id}",
          {},
          { renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
        ],
        declineInvitationForAuthenticatedUser: [
          "DELETE /user/repository_invitations/{invitation_id}"
        ],
        delete: ["DELETE /repos/{owner}/{repo}"],
        deleteAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
        ],
        deleteAdminBranchProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        deleteAnEnvironment: [
          "DELETE /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        deleteBranchProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
        deleteCommitSignatureProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
        deleteDeployment: [
          "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"
        ],
        deleteDeploymentBranchPolicy: [
          "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
        deleteInvitation: [
          "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"
        ],
        deleteOrgRuleset: ["DELETE /orgs/{org}/rulesets/{ruleset_id}"],
        deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
        deletePullRequestReviewProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
        deleteReleaseAsset: [
          "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"
        ],
        deleteRepoRuleset: ["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
        deleteTagProtection: [
          "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"
        ],
        deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
        disableAutomatedSecurityFixes: [
          "DELETE /repos/{owner}/{repo}/automated-security-fixes"
        ],
        disableDeploymentProtectionRule: [
          "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
        ],
        disablePrivateVulnerabilityReporting: [
          "DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"
        ],
        disableVulnerabilityAlerts: [
          "DELETE /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        downloadArchive: [
          "GET /repos/{owner}/{repo}/zipball/{ref}",
          {},
          { renamed: ["repos", "downloadZipballArchive"] }
        ],
        downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
        downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
        enableAutomatedSecurityFixes: [
          "PUT /repos/{owner}/{repo}/automated-security-fixes"
        ],
        enablePrivateVulnerabilityReporting: [
          "PUT /repos/{owner}/{repo}/private-vulnerability-reporting"
        ],
        enableVulnerabilityAlerts: [
          "PUT /repos/{owner}/{repo}/vulnerability-alerts"
        ],
        generateReleaseNotes: [
          "POST /repos/{owner}/{repo}/releases/generate-notes"
        ],
        get: ["GET /repos/{owner}/{repo}"],
        getAccessRestrictions: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"
        ],
        getAdminBranchProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        getAllDeploymentProtectionRules: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"
        ],
        getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
        getAllStatusCheckContexts: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"
        ],
        getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
        getAppsWithAccessToProtectedBranch: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"
        ],
        getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
        getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
        getBranchProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        getBranchRules: ["GET /repos/{owner}/{repo}/rules/branches/{branch}"],
        getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
        getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
        getCollaboratorPermissionLevel: [
          "GET /repos/{owner}/{repo}/collaborators/{username}/permission"
        ],
        getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
        getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
        getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
        getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
        getCommitSignatureProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"
        ],
        getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
        getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
        getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
        getCustomDeploymentProtectionRule: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"
        ],
        getCustomPropertiesValues: ["GET /repos/{owner}/{repo}/properties/values"],
        getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
        getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
        getDeploymentBranchPolicy: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        getDeploymentStatus: [
          "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"
        ],
        getEnvironment: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}"
        ],
        getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
        getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
        getOrgRuleSuite: ["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],
        getOrgRuleSuites: ["GET /orgs/{org}/rulesets/rule-suites"],
        getOrgRuleset: ["GET /orgs/{org}/rulesets/{ruleset_id}"],
        getOrgRulesets: ["GET /orgs/{org}/rulesets"],
        getPages: ["GET /repos/{owner}/{repo}/pages"],
        getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
        getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
        getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
        getPullRequestReviewProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
        getReadme: ["GET /repos/{owner}/{repo}/readme"],
        getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
        getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
        getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
        getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
        getRepoRuleSuite: [
          "GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"
        ],
        getRepoRuleSuites: ["GET /repos/{owner}/{repo}/rulesets/rule-suites"],
        getRepoRuleset: ["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
        getRepoRulesets: ["GET /repos/{owner}/{repo}/rulesets"],
        getStatusChecksProtection: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        getTeamsWithAccessToProtectedBranch: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"
        ],
        getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
        getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
        getUsersWithAccessToProtectedBranch: [
          "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"
        ],
        getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
        getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
        getWebhookConfigForRepo: [
          "GET /repos/{owner}/{repo}/hooks/{hook_id}/config"
        ],
        getWebhookDelivery: [
          "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"
        ],
        listActivities: ["GET /repos/{owner}/{repo}/activity"],
        listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
        listBranches: ["GET /repos/{owner}/{repo}/branches"],
        listBranchesForHeadCommit: [
          "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"
        ],
        listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
        listCommentsForCommit: [
          "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"
        ],
        listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
        listCommitStatusesForRef: [
          "GET /repos/{owner}/{repo}/commits/{ref}/statuses"
        ],
        listCommits: ["GET /repos/{owner}/{repo}/commits"],
        listContributors: ["GET /repos/{owner}/{repo}/contributors"],
        listCustomDeploymentRuleIntegrations: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"
        ],
        listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
        listDeploymentBranchPolicies: [
          "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"
        ],
        listDeploymentStatuses: [
          "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"
        ],
        listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
        listForAuthenticatedUser: ["GET /user/repos"],
        listForOrg: ["GET /orgs/{org}/repos"],
        listForUser: ["GET /users/{username}/repos"],
        listForks: ["GET /repos/{owner}/{repo}/forks"],
        listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
        listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
        listLanguages: ["GET /repos/{owner}/{repo}/languages"],
        listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
        listPublic: ["GET /repositories"],
        listPullRequestsAssociatedWithCommit: [
          "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"
        ],
        listReleaseAssets: [
          "GET /repos/{owner}/{repo}/releases/{release_id}/assets"
        ],
        listReleases: ["GET /repos/{owner}/{repo}/releases"],
        listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
        listTags: ["GET /repos/{owner}/{repo}/tags"],
        listTeams: ["GET /repos/{owner}/{repo}/teams"],
        listWebhookDeliveries: [
          "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"
        ],
        listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
        merge: ["POST /repos/{owner}/{repo}/merges"],
        mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
        pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
        redeliverWebhookDelivery: [
          "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"
        ],
        removeAppAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          {},
          { mapToData: "apps" }
        ],
        removeCollaborator: [
          "DELETE /repos/{owner}/{repo}/collaborators/{username}"
        ],
        removeStatusCheckContexts: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          {},
          { mapToData: "contexts" }
        ],
        removeStatusCheckProtection: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        removeTeamAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          {},
          { mapToData: "teams" }
        ],
        removeUserAccessRestrictions: [
          "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          {},
          { mapToData: "users" }
        ],
        renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
        replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
        requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
        setAdminBranchProtection: [
          "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"
        ],
        setAppAccessRestrictions: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          {},
          { mapToData: "apps" }
        ],
        setStatusCheckContexts: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          {},
          { mapToData: "contexts" }
        ],
        setTeamAccessRestrictions: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          {},
          { mapToData: "teams" }
        ],
        setUserAccessRestrictions: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          {},
          { mapToData: "users" }
        ],
        testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
        transfer: ["POST /repos/{owner}/{repo}/transfer"],
        update: ["PATCH /repos/{owner}/{repo}"],
        updateBranchProtection: [
          "PUT /repos/{owner}/{repo}/branches/{branch}/protection"
        ],
        updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
        updateDeploymentBranchPolicy: [
          "PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"
        ],
        updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
        updateInvitation: [
          "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"
        ],
        updateOrgRuleset: ["PUT /orgs/{org}/rulesets/{ruleset_id}"],
        updatePullRequestReviewProtection: [
          "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"
        ],
        updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
        updateReleaseAsset: [
          "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"
        ],
        updateRepoRuleset: ["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
        updateStatusCheckPotection: [
          "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
          {},
          { renamed: ["repos", "updateStatusCheckProtection"] }
        ],
        updateStatusCheckProtection: [
          "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"
        ],
        updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
        updateWebhookConfigForRepo: [
          "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"
        ],
        uploadReleaseAsset: [
          "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
          { baseUrl: "https://uploads.github.com" }
        ]
      },
      search: {
        code: ["GET /search/code"],
        commits: ["GET /search/commits"],
        issuesAndPullRequests: ["GET /search/issues"],
        labels: ["GET /search/labels"],
        repos: ["GET /search/repositories"],
        topics: ["GET /search/topics"],
        users: ["GET /search/users"]
      },
      secretScanning: {
        getAlert: [
          "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
        ],
        listAlertsForEnterprise: [
          "GET /enterprises/{enterprise}/secret-scanning/alerts"
        ],
        listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
        listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
        listLocationsForAlert: [
          "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
        ],
        updateAlert: [
          "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
        ]
      },
      securityAdvisories: {
        createPrivateVulnerabilityReport: [
          "POST /repos/{owner}/{repo}/security-advisories/reports"
        ],
        createRepositoryAdvisory: [
          "POST /repos/{owner}/{repo}/security-advisories"
        ],
        createRepositoryAdvisoryCveRequest: [
          "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"
        ],
        getGlobalAdvisory: ["GET /advisories/{ghsa_id}"],
        getRepositoryAdvisory: [
          "GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
        ],
        listGlobalAdvisories: ["GET /advisories"],
        listOrgRepositoryAdvisories: ["GET /orgs/{org}/security-advisories"],
        listRepositoryAdvisories: ["GET /repos/{owner}/{repo}/security-advisories"],
        updateRepositoryAdvisory: [
          "PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"
        ]
      },
      teams: {
        addOrUpdateMembershipForUserInOrg: [
          "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        addOrUpdateProjectPermissionsInOrg: [
          "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        addOrUpdateRepoPermissionsInOrg: [
          "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        checkPermissionsForProjectInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        checkPermissionsForRepoInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        create: ["POST /orgs/{org}/teams"],
        createDiscussionCommentInOrg: [
          "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
        ],
        createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
        deleteDiscussionCommentInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        deleteDiscussionInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
        getByName: ["GET /orgs/{org}/teams/{team_slug}"],
        getDiscussionCommentInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        getDiscussionInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        getMembershipForUserInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        list: ["GET /orgs/{org}/teams"],
        listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
        listDiscussionCommentsInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"
        ],
        listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
        listForAuthenticatedUser: ["GET /user/teams"],
        listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
        listPendingInvitationsInOrg: [
          "GET /orgs/{org}/teams/{team_slug}/invitations"
        ],
        listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
        listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
        removeMembershipForUserInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"
        ],
        removeProjectInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"
        ],
        removeRepoInOrg: [
          "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"
        ],
        updateDiscussionCommentInOrg: [
          "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"
        ],
        updateDiscussionInOrg: [
          "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"
        ],
        updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
      },
      users: {
        addEmailForAuthenticated: [
          "POST /user/emails",
          {},
          { renamed: ["users", "addEmailForAuthenticatedUser"] }
        ],
        addEmailForAuthenticatedUser: ["POST /user/emails"],
        addSocialAccountForAuthenticatedUser: ["POST /user/social_accounts"],
        block: ["PUT /user/blocks/{username}"],
        checkBlocked: ["GET /user/blocks/{username}"],
        checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
        checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
        createGpgKeyForAuthenticated: [
          "POST /user/gpg_keys",
          {},
          { renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
        ],
        createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
        createPublicSshKeyForAuthenticated: [
          "POST /user/keys",
          {},
          { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
        ],
        createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
        createSshSigningKeyForAuthenticatedUser: ["POST /user/ssh_signing_keys"],
        deleteEmailForAuthenticated: [
          "DELETE /user/emails",
          {},
          { renamed: ["users", "deleteEmailForAuthenticatedUser"] }
        ],
        deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
        deleteGpgKeyForAuthenticated: [
          "DELETE /user/gpg_keys/{gpg_key_id}",
          {},
          { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
        ],
        deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
        deletePublicSshKeyForAuthenticated: [
          "DELETE /user/keys/{key_id}",
          {},
          { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
        ],
        deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
        deleteSocialAccountForAuthenticatedUser: ["DELETE /user/social_accounts"],
        deleteSshSigningKeyForAuthenticatedUser: [
          "DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"
        ],
        follow: ["PUT /user/following/{username}"],
        getAuthenticated: ["GET /user"],
        getByUsername: ["GET /users/{username}"],
        getContextForUser: ["GET /users/{username}/hovercard"],
        getGpgKeyForAuthenticated: [
          "GET /user/gpg_keys/{gpg_key_id}",
          {},
          { renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
        ],
        getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
        getPublicSshKeyForAuthenticated: [
          "GET /user/keys/{key_id}",
          {},
          { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
        ],
        getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
        getSshSigningKeyForAuthenticatedUser: [
          "GET /user/ssh_signing_keys/{ssh_signing_key_id}"
        ],
        list: ["GET /users"],
        listBlockedByAuthenticated: [
          "GET /user/blocks",
          {},
          { renamed: ["users", "listBlockedByAuthenticatedUser"] }
        ],
        listBlockedByAuthenticatedUser: ["GET /user/blocks"],
        listEmailsForAuthenticated: [
          "GET /user/emails",
          {},
          { renamed: ["users", "listEmailsForAuthenticatedUser"] }
        ],
        listEmailsForAuthenticatedUser: ["GET /user/emails"],
        listFollowedByAuthenticated: [
          "GET /user/following",
          {},
          { renamed: ["users", "listFollowedByAuthenticatedUser"] }
        ],
        listFollowedByAuthenticatedUser: ["GET /user/following"],
        listFollowersForAuthenticatedUser: ["GET /user/followers"],
        listFollowersForUser: ["GET /users/{username}/followers"],
        listFollowingForUser: ["GET /users/{username}/following"],
        listGpgKeysForAuthenticated: [
          "GET /user/gpg_keys",
          {},
          { renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
        ],
        listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
        listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
        listPublicEmailsForAuthenticated: [
          "GET /user/public_emails",
          {},
          { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
        ],
        listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
        listPublicKeysForUser: ["GET /users/{username}/keys"],
        listPublicSshKeysForAuthenticated: [
          "GET /user/keys",
          {},
          { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
        ],
        listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
        listSocialAccountsForAuthenticatedUser: ["GET /user/social_accounts"],
        listSocialAccountsForUser: ["GET /users/{username}/social_accounts"],
        listSshSigningKeysForAuthenticatedUser: ["GET /user/ssh_signing_keys"],
        listSshSigningKeysForUser: ["GET /users/{username}/ssh_signing_keys"],
        setPrimaryEmailVisibilityForAuthenticated: [
          "PATCH /user/email/visibility",
          {},
          { renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
        ],
        setPrimaryEmailVisibilityForAuthenticatedUser: [
          "PATCH /user/email/visibility"
        ],
        unblock: ["DELETE /user/blocks/{username}"],
        unfollow: ["DELETE /user/following/{username}"],
        updateAuthenticated: ["PATCH /user"]
      }
    };
    endpoints_default = Endpoints;
    endpointMethodsMap = /* @__PURE__ */ new Map();
    for (const [scope, endpoints] of Object.entries(endpoints_default)) {
      for (const [methodName, endpoint2] of Object.entries(endpoints)) {
        const [route, defaults, decorations] = endpoint2;
        const [method, url] = route.split(/ /);
        const endpointDefaults = Object.assign(
          {
            method,
            url
          },
          defaults
        );
        if (!endpointMethodsMap.has(scope)) {
          endpointMethodsMap.set(scope, /* @__PURE__ */ new Map());
        }
        endpointMethodsMap.get(scope).set(methodName, {
          scope,
          methodName,
          endpointDefaults,
          decorations
        });
      }
    }
    handler = {
      has({ scope }, methodName) {
        return endpointMethodsMap.get(scope).has(methodName);
      },
      getOwnPropertyDescriptor(target, methodName) {
        return {
          value: this.get(target, methodName),
          // ensures method is in the cache
          configurable: true,
          writable: true,
          enumerable: true
        };
      },
      defineProperty(target, methodName, descriptor) {
        Object.defineProperty(target.cache, methodName, descriptor);
        return true;
      },
      deleteProperty(target, methodName) {
        delete target.cache[methodName];
        return true;
      },
      ownKeys({ scope }) {
        return [...endpointMethodsMap.get(scope).keys()];
      },
      set(target, methodName, value) {
        return target.cache[methodName] = value;
      },
      get({ octokit, scope, cache }, methodName) {
        if (cache[methodName]) {
          return cache[methodName];
        }
        const method = endpointMethodsMap.get(scope).get(methodName);
        if (!method) {
          return void 0;
        }
        const { endpointDefaults, decorations } = method;
        if (decorations) {
          cache[methodName] = decorate(
            octokit,
            scope,
            methodName,
            endpointDefaults,
            decorations
          );
        } else {
          cache[methodName] = octokit.request.defaults(endpointDefaults);
        }
        return cache[methodName];
      }
    };
    restEndpointMethods.VERSION = VERSION5;
    legacyRestEndpointMethods.VERSION = VERSION5;
  }
});

// node_modules/@octokit/rest/dist-node/index.js
var require_dist_node5 = __commonJS({
  "node_modules/@octokit/rest/dist-node/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to2, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to2, key) && key !== except)
            __defProp2(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to2;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var dist_src_exports = {};
    __export2(dist_src_exports, {
      Octokit: () => Octokit
    });
    module2.exports = __toCommonJS2(dist_src_exports);
    var import_core = require_dist_node3();
    var import_plugin_request_log = (init_dist_web6(), __toCommonJS(dist_web_exports3));
    var import_plugin_paginate_rest = require_dist_node4();
    var import_plugin_rest_endpoint_methods = (init_dist_web7(), __toCommonJS(dist_web_exports4));
    var VERSION6 = "20.0.2";
    var Octokit = import_core.Octokit.plugin(
      import_plugin_request_log.requestLog,
      import_plugin_rest_endpoint_methods.legacyRestEndpointMethods,
      import_plugin_paginate_rest.paginateRest
    ).defaults({
      userAgent: `octokit-rest.js/${VERSION6}`
    });
  }
});

// node_modules/nunjucks/browser/nunjucks.js
var require_nunjucks = __commonJS({
  "node_modules/nunjucks/browser/nunjucks.js"(exports, module2) {
    (function webpackUniversalModuleDefinition(root3, factory) {
      if (typeof exports === "object" && typeof module2 === "object")
        module2.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports === "object")
        exports["nunjucks"] = factory();
      else
        root3["nunjucks"] = factory();
    })(typeof self !== "undefined" ? self : exports, function() {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module3 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
            module3.l = true;
            return module3.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, {
                /******/
                configurable: false,
                /******/
                enumerable: true,
                /******/
                get: getter
                /******/
              });
            }
          };
          __webpack_require__.n = function(module3) {
            var getter = module3 && module3.__esModule ? (
              /******/
              function getDefault() {
                return module3["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module3;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 11);
        }([
          /* 0 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            var ArrayProto = Array.prototype;
            var ObjProto = Object.prototype;
            var escapeMap = {
              "&": "&amp;",
              '"': "&quot;",
              "'": "&#39;",
              "<": "&lt;",
              ">": "&gt;",
              "\\": "&#92;"
            };
            var escapeRegex2 = /[&"'<>\\]/g;
            var exports2 = module3.exports = {};
            function hasOwnProp(obj, k3) {
              return ObjProto.hasOwnProperty.call(obj, k3);
            }
            exports2.hasOwnProp = hasOwnProp;
            function lookupEscape(ch) {
              return escapeMap[ch];
            }
            function _prettifyError(path, withInternals, err) {
              if (!err.Update) {
                err = new exports2.TemplateError(err);
              }
              err.Update(path);
              if (!withInternals) {
                var old = err;
                err = new Error(old.message);
                err.name = old.name;
              }
              return err;
            }
            exports2._prettifyError = _prettifyError;
            function TemplateError(message, lineno, colno) {
              var err;
              var cause;
              if (message instanceof Error) {
                cause = message;
                message = cause.name + ": " + cause.message;
              }
              if (Object.setPrototypeOf) {
                err = new Error(message);
                Object.setPrototypeOf(err, TemplateError.prototype);
              } else {
                err = this;
                Object.defineProperty(err, "message", {
                  enumerable: false,
                  writable: true,
                  value: message
                });
              }
              Object.defineProperty(err, "name", {
                value: "Template render error"
              });
              if (Error.captureStackTrace) {
                Error.captureStackTrace(err, this.constructor);
              }
              var getStack;
              if (cause) {
                var stackDescriptor = Object.getOwnPropertyDescriptor(cause, "stack");
                getStack = stackDescriptor && (stackDescriptor.get || function() {
                  return stackDescriptor.value;
                });
                if (!getStack) {
                  getStack = function getStack2() {
                    return cause.stack;
                  };
                }
              } else {
                var stack = new Error(message).stack;
                getStack = function getStack2() {
                  return stack;
                };
              }
              Object.defineProperty(err, "stack", {
                get: function get2() {
                  return getStack.call(err);
                }
              });
              Object.defineProperty(err, "cause", {
                value: cause
              });
              err.lineno = lineno;
              err.colno = colno;
              err.firstUpdate = true;
              err.Update = function Update(path) {
                var msg = "(" + (path || "unknown path") + ")";
                if (this.firstUpdate) {
                  if (this.lineno && this.colno) {
                    msg += " [Line " + this.lineno + ", Column " + this.colno + "]";
                  } else if (this.lineno) {
                    msg += " [Line " + this.lineno + "]";
                  }
                }
                msg += "\n ";
                if (this.firstUpdate) {
                  msg += " ";
                }
                this.message = msg + (this.message || "");
                this.firstUpdate = false;
                return this;
              };
              return err;
            }
            if (Object.setPrototypeOf) {
              Object.setPrototypeOf(TemplateError.prototype, Error.prototype);
            } else {
              TemplateError.prototype = Object.create(Error.prototype, {
                constructor: {
                  value: TemplateError
                }
              });
            }
            exports2.TemplateError = TemplateError;
            function escape2(val2) {
              return val2.replace(escapeRegex2, lookupEscape);
            }
            exports2.escape = escape2;
            function isFunction(obj) {
              return ObjProto.toString.call(obj) === "[object Function]";
            }
            exports2.isFunction = isFunction;
            function isArray(obj) {
              return ObjProto.toString.call(obj) === "[object Array]";
            }
            exports2.isArray = isArray;
            function isString(obj) {
              return ObjProto.toString.call(obj) === "[object String]";
            }
            exports2.isString = isString;
            function isObject(obj) {
              return ObjProto.toString.call(obj) === "[object Object]";
            }
            exports2.isObject = isObject;
            function _prepareAttributeParts(attr3) {
              if (!attr3) {
                return [];
              }
              if (typeof attr3 === "string") {
                return attr3.split(".");
              }
              return [attr3];
            }
            function getAttrGetter(attribute) {
              var parts = _prepareAttributeParts(attribute);
              return function attrGetter(item) {
                var _item = item;
                for (var i = 0; i < parts.length; i++) {
                  var part = parts[i];
                  if (hasOwnProp(_item, part)) {
                    _item = _item[part];
                  } else {
                    return void 0;
                  }
                }
                return _item;
              };
            }
            exports2.getAttrGetter = getAttrGetter;
            function groupBy(obj, val2, throwOnUndefined) {
              var result = {};
              var iterator = isFunction(val2) ? val2 : getAttrGetter(val2);
              for (var i = 0; i < obj.length; i++) {
                var value = obj[i];
                var key = iterator(value, i);
                if (key === void 0 && throwOnUndefined === true) {
                  throw new TypeError('groupby: attribute "' + val2 + '" resolved to undefined');
                }
                (result[key] || (result[key] = [])).push(value);
              }
              return result;
            }
            exports2.groupBy = groupBy;
            function toArray2(obj) {
              return Array.prototype.slice.call(obj);
            }
            exports2.toArray = toArray2;
            function without(array) {
              var result = [];
              if (!array) {
                return result;
              }
              var length = array.length;
              var contains3 = toArray2(arguments).slice(1);
              var index2 = -1;
              while (++index2 < length) {
                if (indexOf(contains3, array[index2]) === -1) {
                  result.push(array[index2]);
                }
              }
              return result;
            }
            exports2.without = without;
            function repeat(char_, n) {
              var str = "";
              for (var i = 0; i < n; i++) {
                str += char_;
              }
              return str;
            }
            exports2.repeat = repeat;
            function each2(obj, func, context) {
              if (obj == null) {
                return;
              }
              if (ArrayProto.forEach && obj.forEach === ArrayProto.forEach) {
                obj.forEach(func, context);
              } else if (obj.length === +obj.length) {
                for (var i = 0, l = obj.length; i < l; i++) {
                  func.call(context, obj[i], i, obj);
                }
              }
            }
            exports2.each = each2;
            function map2(obj, func) {
              var results = [];
              if (obj == null) {
                return results;
              }
              if (ArrayProto.map && obj.map === ArrayProto.map) {
                return obj.map(func);
              }
              for (var i = 0; i < obj.length; i++) {
                results[results.length] = func(obj[i], i);
              }
              if (obj.length === +obj.length) {
                results.length = obj.length;
              }
              return results;
            }
            exports2.map = map2;
            function asyncIter(arr, iter, cb) {
              var i = -1;
              function next2() {
                i++;
                if (i < arr.length) {
                  iter(arr[i], i, next2, cb);
                } else {
                  cb();
                }
              }
              next2();
            }
            exports2.asyncIter = asyncIter;
            function asyncFor(obj, iter, cb) {
              var keys = keys_(obj || {});
              var len = keys.length;
              var i = -1;
              function next2() {
                i++;
                var k3 = keys[i];
                if (i < len) {
                  iter(k3, obj[k3], i, len, next2);
                } else {
                  cb();
                }
              }
              next2();
            }
            exports2.asyncFor = asyncFor;
            function indexOf(arr, searchElement, fromIndex) {
              return Array.prototype.indexOf.call(arr || [], searchElement, fromIndex);
            }
            exports2.indexOf = indexOf;
            function keys_(obj) {
              var arr = [];
              for (var k3 in obj) {
                if (hasOwnProp(obj, k3)) {
                  arr.push(k3);
                }
              }
              return arr;
            }
            exports2.keys = keys_;
            function _entries(obj) {
              return keys_(obj).map(function(k3) {
                return [k3, obj[k3]];
              });
            }
            exports2._entries = _entries;
            function _values(obj) {
              return keys_(obj).map(function(k3) {
                return obj[k3];
              });
            }
            exports2._values = _values;
            function extend(obj1, obj2) {
              obj1 = obj1 || {};
              keys_(obj2).forEach(function(k3) {
                obj1[k3] = obj2[k3];
              });
              return obj1;
            }
            exports2._assign = exports2.extend = extend;
            function inOperator(key, val2) {
              if (isArray(val2) || isString(val2)) {
                return val2.indexOf(key) !== -1;
              } else if (isObject(val2)) {
                return key in val2;
              }
              throw new Error('Cannot use "in" operator to search for "' + key + '" in unexpected types.');
            }
            exports2.inOperator = inOperator;
          },
          /* 1 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            function _defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              Object.defineProperty(Constructor, "prototype", { writable: false });
              return Constructor;
            }
            function _toPropertyKey(arg) {
              var key = _toPrimitive(arg, "string");
              return typeof key === "symbol" ? key : String(key);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            var EventEmitter = __webpack_require__(16);
            var lib = __webpack_require__(0);
            function parentWrap(parent2, prop2) {
              if (typeof parent2 !== "function" || typeof prop2 !== "function") {
                return prop2;
              }
              return function wrap2() {
                var tmp = this.parent;
                this.parent = parent2;
                var res = prop2.apply(this, arguments);
                this.parent = tmp;
                return res;
              };
            }
            function extendClass(cls, name, props) {
              props = props || {};
              lib.keys(props).forEach(function(k3) {
                props[k3] = parentWrap(cls.prototype[k3], props[k3]);
              });
              var subclass = /* @__PURE__ */ function(_cls) {
                _inheritsLoose(subclass2, _cls);
                function subclass2() {
                  return _cls.apply(this, arguments) || this;
                }
                _createClass(subclass2, [{
                  key: "typename",
                  get: function get2() {
                    return name;
                  }
                }]);
                return subclass2;
              }(cls);
              lib._assign(subclass.prototype, props);
              return subclass;
            }
            var Obj = /* @__PURE__ */ function() {
              function Obj2() {
                this.init.apply(this, arguments);
              }
              var _proto = Obj2.prototype;
              _proto.init = function init2() {
              };
              Obj2.extend = function extend(name, props) {
                if (typeof name === "object") {
                  props = name;
                  name = "anonymous";
                }
                return extendClass(this, name, props);
              };
              _createClass(Obj2, [{
                key: "typename",
                get: function get2() {
                  return this.constructor.name;
                }
              }]);
              return Obj2;
            }();
            var EmitterObj = /* @__PURE__ */ function(_EventEmitter) {
              _inheritsLoose(EmitterObj2, _EventEmitter);
              function EmitterObj2() {
                var _this2;
                var _this;
                _this = _EventEmitter.call(this) || this;
                (_this2 = _this).init.apply(_this2, arguments);
                return _this;
              }
              var _proto2 = EmitterObj2.prototype;
              _proto2.init = function init2() {
              };
              EmitterObj2.extend = function extend(name, props) {
                if (typeof name === "object") {
                  props = name;
                  name = "anonymous";
                }
                return extendClass(this, name, props);
              };
              _createClass(EmitterObj2, [{
                key: "typename",
                get: function get2() {
                  return this.constructor.name;
                }
              }]);
              return EmitterObj2;
            }(EventEmitter);
            module3.exports = {
              Obj,
              EmitterObj
            };
          },
          /* 2 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            var lib = __webpack_require__(0);
            var arrayFrom = Array.from;
            var supportsIterators = typeof Symbol === "function" && Symbol.iterator && typeof arrayFrom === "function";
            var Frame = /* @__PURE__ */ function() {
              function Frame2(parent2, isolateWrites) {
                this.variables = /* @__PURE__ */ Object.create(null);
                this.parent = parent2;
                this.topLevel = false;
                this.isolateWrites = isolateWrites;
              }
              var _proto = Frame2.prototype;
              _proto.set = function set(name, val2, resolveUp) {
                var parts = name.split(".");
                var obj = this.variables;
                var frame = this;
                if (resolveUp) {
                  if (frame = this.resolve(parts[0], true)) {
                    frame.set(name, val2);
                    return;
                  }
                }
                for (var i = 0; i < parts.length - 1; i++) {
                  var id = parts[i];
                  if (!obj[id]) {
                    obj[id] = {};
                  }
                  obj = obj[id];
                }
                obj[parts[parts.length - 1]] = val2;
              };
              _proto.get = function get2(name) {
                var val2 = this.variables[name];
                if (val2 !== void 0) {
                  return val2;
                }
                return null;
              };
              _proto.lookup = function lookup(name) {
                var p = this.parent;
                var val2 = this.variables[name];
                if (val2 !== void 0) {
                  return val2;
                }
                return p && p.lookup(name);
              };
              _proto.resolve = function resolve(name, forWrite) {
                var p = forWrite && this.isolateWrites ? void 0 : this.parent;
                var val2 = this.variables[name];
                if (val2 !== void 0) {
                  return this;
                }
                return p && p.resolve(name);
              };
              _proto.push = function push(isolateWrites) {
                return new Frame2(this, isolateWrites);
              };
              _proto.pop = function pop() {
                return this.parent;
              };
              return Frame2;
            }();
            function makeMacro(argNames, kwargNames, func) {
              return function macro() {
                for (var _len = arguments.length, macroArgs = new Array(_len), _key = 0; _key < _len; _key++) {
                  macroArgs[_key] = arguments[_key];
                }
                var argCount = numArgs(macroArgs);
                var args;
                var kwargs = getKeywordArgs(macroArgs);
                if (argCount > argNames.length) {
                  args = macroArgs.slice(0, argNames.length);
                  macroArgs.slice(args.length, argCount).forEach(function(val2, i2) {
                    if (i2 < kwargNames.length) {
                      kwargs[kwargNames[i2]] = val2;
                    }
                  });
                  args.push(kwargs);
                } else if (argCount < argNames.length) {
                  args = macroArgs.slice(0, argCount);
                  for (var i = argCount; i < argNames.length; i++) {
                    var arg = argNames[i];
                    args.push(kwargs[arg]);
                    delete kwargs[arg];
                  }
                  args.push(kwargs);
                } else {
                  args = macroArgs;
                }
                return func.apply(this, args);
              };
            }
            function makeKeywordArgs(obj) {
              obj.__keywords = true;
              return obj;
            }
            function isKeywordArgs(obj) {
              return obj && Object.prototype.hasOwnProperty.call(obj, "__keywords");
            }
            function getKeywordArgs(args) {
              var len = args.length;
              if (len) {
                var lastArg = args[len - 1];
                if (isKeywordArgs(lastArg)) {
                  return lastArg;
                }
              }
              return {};
            }
            function numArgs(args) {
              var len = args.length;
              if (len === 0) {
                return 0;
              }
              var lastArg = args[len - 1];
              if (isKeywordArgs(lastArg)) {
                return len - 1;
              } else {
                return len;
              }
            }
            function SafeString(val2) {
              if (typeof val2 !== "string") {
                return val2;
              }
              this.val = val2;
              this.length = val2.length;
            }
            SafeString.prototype = Object.create(String.prototype, {
              length: {
                writable: true,
                configurable: true,
                value: 0
              }
            });
            SafeString.prototype.valueOf = function valueOf() {
              return this.val;
            };
            SafeString.prototype.toString = function toString2() {
              return this.val;
            };
            function copySafeness(dest, target) {
              if (dest instanceof SafeString) {
                return new SafeString(target);
              }
              return target.toString();
            }
            function markSafe(val2) {
              var type = typeof val2;
              if (type === "string") {
                return new SafeString(val2);
              } else if (type !== "function") {
                return val2;
              } else {
                return function wrapSafe(args) {
                  var ret = val2.apply(this, arguments);
                  if (typeof ret === "string") {
                    return new SafeString(ret);
                  }
                  return ret;
                };
              }
            }
            function suppressValue(val2, autoescape) {
              val2 = val2 !== void 0 && val2 !== null ? val2 : "";
              if (autoescape && !(val2 instanceof SafeString)) {
                val2 = lib.escape(val2.toString());
              }
              return val2;
            }
            function ensureDefined(val2, lineno, colno) {
              if (val2 === null || val2 === void 0) {
                throw new lib.TemplateError("attempted to output null or undefined value", lineno + 1, colno + 1);
              }
              return val2;
            }
            function memberLookup(obj, val2) {
              if (obj === void 0 || obj === null) {
                return void 0;
              }
              if (typeof obj[val2] === "function") {
                return function() {
                  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                  }
                  return obj[val2].apply(obj, args);
                };
              }
              return obj[val2];
            }
            function callWrap(obj, name, context, args) {
              if (!obj) {
                throw new Error("Unable to call `" + name + "`, which is undefined or falsey");
              } else if (typeof obj !== "function") {
                throw new Error("Unable to call `" + name + "`, which is not a function");
              }
              return obj.apply(context, args);
            }
            function contextOrFrameLookup(context, frame, name) {
              var val2 = frame.lookup(name);
              return val2 !== void 0 ? val2 : context.lookup(name);
            }
            function handleError(error, lineno, colno) {
              if (error.lineno) {
                return error;
              } else {
                return new lib.TemplateError(error, lineno, colno);
              }
            }
            function asyncEach(arr, dimen, iter, cb) {
              if (lib.isArray(arr)) {
                var len = arr.length;
                lib.asyncIter(arr, function iterCallback(item, i, next2) {
                  switch (dimen) {
                    case 1:
                      iter(item, i, len, next2);
                      break;
                    case 2:
                      iter(item[0], item[1], i, len, next2);
                      break;
                    case 3:
                      iter(item[0], item[1], item[2], i, len, next2);
                      break;
                    default:
                      item.push(i, len, next2);
                      iter.apply(this, item);
                  }
                }, cb);
              } else {
                lib.asyncFor(arr, function iterCallback(key, val2, i, len2, next2) {
                  iter(key, val2, i, len2, next2);
                }, cb);
              }
            }
            function asyncAll(arr, dimen, func, cb) {
              var finished = 0;
              var len;
              var outputArr;
              function done(i2, output) {
                finished++;
                outputArr[i2] = output;
                if (finished === len) {
                  cb(null, outputArr.join(""));
                }
              }
              if (lib.isArray(arr)) {
                len = arr.length;
                outputArr = new Array(len);
                if (len === 0) {
                  cb(null, "");
                } else {
                  for (var i = 0; i < arr.length; i++) {
                    var item = arr[i];
                    switch (dimen) {
                      case 1:
                        func(item, i, len, done);
                        break;
                      case 2:
                        func(item[0], item[1], i, len, done);
                        break;
                      case 3:
                        func(item[0], item[1], item[2], i, len, done);
                        break;
                      default:
                        item.push(i, len, done);
                        func.apply(this, item);
                    }
                  }
                }
              } else {
                var keys = lib.keys(arr || {});
                len = keys.length;
                outputArr = new Array(len);
                if (len === 0) {
                  cb(null, "");
                } else {
                  for (var _i2 = 0; _i2 < keys.length; _i2++) {
                    var k3 = keys[_i2];
                    func(k3, arr[k3], _i2, len, done);
                  }
                }
              }
            }
            function fromIterator(arr) {
              if (typeof arr !== "object" || arr === null || lib.isArray(arr)) {
                return arr;
              } else if (supportsIterators && Symbol.iterator in arr) {
                return arrayFrom(arr);
              } else {
                return arr;
              }
            }
            module3.exports = {
              Frame,
              makeMacro,
              makeKeywordArgs,
              numArgs,
              suppressValue,
              ensureDefined,
              memberLookup,
              contextOrFrameLookup,
              callWrap,
              handleError,
              isArray: lib.isArray,
              keys: lib.keys,
              SafeString,
              copySafeness,
              markSafe,
              asyncEach,
              asyncAll,
              inOperator: lib.inOperator,
              fromIterator
            };
          },
          /* 3 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            function _defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
              }
            }
            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps)
                _defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                _defineProperties(Constructor, staticProps);
              Object.defineProperty(Constructor, "prototype", { writable: false });
              return Constructor;
            }
            function _toPropertyKey(arg) {
              var key = _toPrimitive(arg, "string");
              return typeof key === "symbol" ? key : String(key);
            }
            function _toPrimitive(input, hint) {
              if (typeof input !== "object" || input === null)
                return input;
              var prim = input[Symbol.toPrimitive];
              if (prim !== void 0) {
                var res = prim.call(input, hint || "default");
                if (typeof res !== "object")
                  return res;
                throw new TypeError("@@toPrimitive must return a primitive value.");
              }
              return (hint === "string" ? String : Number)(input);
            }
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            var _require = __webpack_require__(1), Obj = _require.Obj;
            function traverseAndCheck(obj, type, results) {
              if (obj instanceof type) {
                results.push(obj);
              }
              if (obj instanceof Node2) {
                obj.findAll(type, results);
              }
            }
            var Node2 = /* @__PURE__ */ function(_Obj) {
              _inheritsLoose(Node3, _Obj);
              function Node3() {
                return _Obj.apply(this, arguments) || this;
              }
              var _proto = Node3.prototype;
              _proto.init = function init2(lineno, colno) {
                var _arguments = arguments, _this = this;
                for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                  args[_key - 2] = arguments[_key];
                }
                this.lineno = lineno;
                this.colno = colno;
                this.fields.forEach(function(field, i) {
                  var val2 = _arguments[i + 2];
                  if (val2 === void 0) {
                    val2 = null;
                  }
                  _this[field] = val2;
                });
              };
              _proto.findAll = function findAll2(type, results) {
                var _this2 = this;
                results = results || [];
                if (this instanceof NodeList) {
                  this.children.forEach(function(child) {
                    return traverseAndCheck(child, type, results);
                  });
                } else {
                  this.fields.forEach(function(field) {
                    return traverseAndCheck(_this2[field], type, results);
                  });
                }
                return results;
              };
              _proto.iterFields = function iterFields(func) {
                var _this3 = this;
                this.fields.forEach(function(field) {
                  func(_this3[field], field);
                });
              };
              return Node3;
            }(Obj);
            var Value = /* @__PURE__ */ function(_Node) {
              _inheritsLoose(Value2, _Node);
              function Value2() {
                return _Node.apply(this, arguments) || this;
              }
              _createClass(Value2, [{
                key: "typename",
                get: function get2() {
                  return "Value";
                }
              }, {
                key: "fields",
                get: function get2() {
                  return ["value"];
                }
              }]);
              return Value2;
            }(Node2);
            var NodeList = /* @__PURE__ */ function(_Node2) {
              _inheritsLoose(NodeList2, _Node2);
              function NodeList2() {
                return _Node2.apply(this, arguments) || this;
              }
              var _proto2 = NodeList2.prototype;
              _proto2.init = function init2(lineno, colno, nodes) {
                _Node2.prototype.init.call(this, lineno, colno, nodes || []);
              };
              _proto2.addChild = function addChild(node) {
                this.children.push(node);
              };
              _createClass(NodeList2, [{
                key: "typename",
                get: function get2() {
                  return "NodeList";
                }
              }, {
                key: "fields",
                get: function get2() {
                  return ["children"];
                }
              }]);
              return NodeList2;
            }(Node2);
            var Root2 = NodeList.extend("Root");
            var Literal = Value.extend("Literal");
            var _Symbol = Value.extend("Symbol");
            var Group = NodeList.extend("Group");
            var ArrayNode = NodeList.extend("Array");
            var Pair = Node2.extend("Pair", {
              fields: ["key", "value"]
            });
            var Dict = NodeList.extend("Dict");
            var LookupVal = Node2.extend("LookupVal", {
              fields: ["target", "val"]
            });
            var If = Node2.extend("If", {
              fields: ["cond", "body", "else_"]
            });
            var IfAsync = If.extend("IfAsync");
            var InlineIf = Node2.extend("InlineIf", {
              fields: ["cond", "body", "else_"]
            });
            var For = Node2.extend("For", {
              fields: ["arr", "name", "body", "else_"]
            });
            var AsyncEach = For.extend("AsyncEach");
            var AsyncAll = For.extend("AsyncAll");
            var Macro = Node2.extend("Macro", {
              fields: ["name", "args", "body"]
            });
            var Caller = Macro.extend("Caller");
            var Import = Node2.extend("Import", {
              fields: ["template", "target", "withContext"]
            });
            var FromImport = /* @__PURE__ */ function(_Node3) {
              _inheritsLoose(FromImport2, _Node3);
              function FromImport2() {
                return _Node3.apply(this, arguments) || this;
              }
              var _proto3 = FromImport2.prototype;
              _proto3.init = function init2(lineno, colno, template, names, withContext) {
                _Node3.prototype.init.call(this, lineno, colno, template, names || new NodeList(), withContext);
              };
              _createClass(FromImport2, [{
                key: "typename",
                get: function get2() {
                  return "FromImport";
                }
              }, {
                key: "fields",
                get: function get2() {
                  return ["template", "names", "withContext"];
                }
              }]);
              return FromImport2;
            }(Node2);
            var FunCall = Node2.extend("FunCall", {
              fields: ["name", "args"]
            });
            var Filter = FunCall.extend("Filter");
            var FilterAsync = Filter.extend("FilterAsync", {
              fields: ["name", "args", "symbol"]
            });
            var KeywordArgs = Dict.extend("KeywordArgs");
            var Block = Node2.extend("Block", {
              fields: ["name", "body"]
            });
            var Super = Node2.extend("Super", {
              fields: ["blockName", "symbol"]
            });
            var TemplateRef = Node2.extend("TemplateRef", {
              fields: ["template"]
            });
            var Extends = TemplateRef.extend("Extends");
            var Include = Node2.extend("Include", {
              fields: ["template", "ignoreMissing"]
            });
            var Set2 = Node2.extend("Set", {
              fields: ["targets", "value"]
            });
            var Switch = Node2.extend("Switch", {
              fields: ["expr", "cases", "default"]
            });
            var Case = Node2.extend("Case", {
              fields: ["cond", "body"]
            });
            var Output = NodeList.extend("Output");
            var Capture = Node2.extend("Capture", {
              fields: ["body"]
            });
            var TemplateData = Literal.extend("TemplateData");
            var UnaryOp = Node2.extend("UnaryOp", {
              fields: ["target"]
            });
            var BinOp = Node2.extend("BinOp", {
              fields: ["left", "right"]
            });
            var In4 = BinOp.extend("In");
            var Is3 = BinOp.extend("Is");
            var Or4 = BinOp.extend("Or");
            var And = BinOp.extend("And");
            var Not = UnaryOp.extend("Not");
            var Add = BinOp.extend("Add");
            var Concat = BinOp.extend("Concat");
            var Sub = BinOp.extend("Sub");
            var Mul = BinOp.extend("Mul");
            var Div = BinOp.extend("Div");
            var FloorDiv = BinOp.extend("FloorDiv");
            var Mod = BinOp.extend("Mod");
            var Pow = BinOp.extend("Pow");
            var Neg = UnaryOp.extend("Neg");
            var Pos = UnaryOp.extend("Pos");
            var Compare = Node2.extend("Compare", {
              fields: ["expr", "ops"]
            });
            var CompareOperand = Node2.extend("CompareOperand", {
              fields: ["expr", "type"]
            });
            var CallExtension = Node2.extend("CallExtension", {
              init: function init2(ext, prop2, args, contentArgs) {
                this.parent();
                this.extName = ext.__name || ext;
                this.prop = prop2;
                this.args = args || new NodeList();
                this.contentArgs = contentArgs || [];
                this.autoescape = ext.autoescape;
              },
              fields: ["extName", "prop", "args", "contentArgs"]
            });
            var CallExtensionAsync = CallExtension.extend("CallExtensionAsync");
            function print(str, indent, inline) {
              var lines = str.split("\n");
              lines.forEach(function(line, i) {
                if (line && (inline && i > 0 || !inline)) {
                  process.stdout.write(" ".repeat(indent));
                }
                var nl2 = i === lines.length - 1 ? "" : "\n";
                process.stdout.write("" + line + nl2);
              });
            }
            function printNodes(node, indent) {
              indent = indent || 0;
              print(node.typename + ": ", indent);
              if (node instanceof NodeList) {
                print("\n");
                node.children.forEach(function(n) {
                  printNodes(n, indent + 2);
                });
              } else if (node instanceof CallExtension) {
                print(node.extName + "." + node.prop + "\n");
                if (node.args) {
                  printNodes(node.args, indent + 2);
                }
                if (node.contentArgs) {
                  node.contentArgs.forEach(function(n) {
                    printNodes(n, indent + 2);
                  });
                }
              } else {
                var nodes = [];
                var props = null;
                node.iterFields(function(val2, fieldName) {
                  if (val2 instanceof Node2) {
                    nodes.push([fieldName, val2]);
                  } else {
                    props = props || {};
                    props[fieldName] = val2;
                  }
                });
                if (props) {
                  print(JSON.stringify(props, null, 2) + "\n", null, true);
                } else {
                  print("\n");
                }
                nodes.forEach(function(_ref) {
                  var fieldName = _ref[0], n = _ref[1];
                  print("[" + fieldName + "] =>", indent + 2);
                  printNodes(n, indent + 4);
                });
              }
            }
            module3.exports = {
              Node: Node2,
              Root: Root2,
              NodeList,
              Value,
              Literal,
              Symbol: _Symbol,
              Group,
              Array: ArrayNode,
              Pair,
              Dict,
              Output,
              Capture,
              TemplateData,
              If,
              IfAsync,
              InlineIf,
              For,
              AsyncEach,
              AsyncAll,
              Macro,
              Caller,
              Import,
              FromImport,
              FunCall,
              Filter,
              FilterAsync,
              KeywordArgs,
              Block,
              Super,
              Extends,
              Include,
              Set: Set2,
              Switch,
              Case,
              LookupVal,
              BinOp,
              In: In4,
              Is: Is3,
              Or: Or4,
              And,
              Not,
              Add,
              Concat,
              Sub,
              Mul,
              Div,
              FloorDiv,
              Mod,
              Pow,
              Neg,
              Pos,
              Compare,
              CompareOperand,
              CallExtension,
              CallExtensionAsync,
              printNodes
            };
          },
          /* 4 */
          /***/
          function(module3, exports2) {
          },
          /* 5 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            var parser = __webpack_require__(8);
            var transformer = __webpack_require__(17);
            var nodes = __webpack_require__(3);
            var _require = __webpack_require__(0), TemplateError = _require.TemplateError;
            var _require2 = __webpack_require__(2), Frame = _require2.Frame;
            var _require3 = __webpack_require__(1), Obj = _require3.Obj;
            var compareOps = {
              "==": "==",
              "===": "===",
              "!=": "!=",
              "!==": "!==",
              "<": "<",
              ">": ">",
              "<=": "<=",
              ">=": ">="
            };
            var Compiler = /* @__PURE__ */ function(_Obj) {
              _inheritsLoose(Compiler2, _Obj);
              function Compiler2() {
                return _Obj.apply(this, arguments) || this;
              }
              var _proto = Compiler2.prototype;
              _proto.init = function init2(templateName, throwOnUndefined) {
                this.templateName = templateName;
                this.codebuf = [];
                this.lastId = 0;
                this.buffer = null;
                this.bufferStack = [];
                this._scopeClosers = "";
                this.inBlock = false;
                this.throwOnUndefined = throwOnUndefined;
              };
              _proto.fail = function fail(msg, lineno, colno) {
                if (lineno !== void 0) {
                  lineno += 1;
                }
                if (colno !== void 0) {
                  colno += 1;
                }
                throw new TemplateError(msg, lineno, colno);
              };
              _proto._pushBuffer = function _pushBuffer() {
                var id = this._tmpid();
                this.bufferStack.push(this.buffer);
                this.buffer = id;
                this._emit("var " + this.buffer + ' = "";');
                return id;
              };
              _proto._popBuffer = function _popBuffer() {
                this.buffer = this.bufferStack.pop();
              };
              _proto._emit = function _emit(code) {
                this.codebuf.push(code);
              };
              _proto._emitLine = function _emitLine(code) {
                this._emit(code + "\n");
              };
              _proto._emitLines = function _emitLines() {
                var _this = this;
                for (var _len = arguments.length, lines = new Array(_len), _key = 0; _key < _len; _key++) {
                  lines[_key] = arguments[_key];
                }
                lines.forEach(function(line) {
                  return _this._emitLine(line);
                });
              };
              _proto._emitFuncBegin = function _emitFuncBegin(node, name) {
                this.buffer = "output";
                this._scopeClosers = "";
                this._emitLine("function " + name + "(env, context, frame, runtime, cb) {");
                this._emitLine("var lineno = " + node.lineno + ";");
                this._emitLine("var colno = " + node.colno + ";");
                this._emitLine("var " + this.buffer + ' = "";');
                this._emitLine("try {");
              };
              _proto._emitFuncEnd = function _emitFuncEnd(noReturn) {
                if (!noReturn) {
                  this._emitLine("cb(null, " + this.buffer + ");");
                }
                this._closeScopeLevels();
                this._emitLine("} catch (e) {");
                this._emitLine("  cb(runtime.handleError(e, lineno, colno));");
                this._emitLine("}");
                this._emitLine("}");
                this.buffer = null;
              };
              _proto._addScopeLevel = function _addScopeLevel() {
                this._scopeClosers += "})";
              };
              _proto._closeScopeLevels = function _closeScopeLevels() {
                this._emitLine(this._scopeClosers + ";");
                this._scopeClosers = "";
              };
              _proto._withScopedSyntax = function _withScopedSyntax(func) {
                var _scopeClosers = this._scopeClosers;
                this._scopeClosers = "";
                func.call(this);
                this._closeScopeLevels();
                this._scopeClosers = _scopeClosers;
              };
              _proto._makeCallback = function _makeCallback(res) {
                var err = this._tmpid();
                return "function(" + err + (res ? "," + res : "") + ") {\nif(" + err + ") { cb(" + err + "); return; }";
              };
              _proto._tmpid = function _tmpid() {
                this.lastId++;
                return "t_" + this.lastId;
              };
              _proto._templateName = function _templateName() {
                return this.templateName == null ? "undefined" : JSON.stringify(this.templateName);
              };
              _proto._compileChildren = function _compileChildren(node, frame) {
                var _this2 = this;
                node.children.forEach(function(child) {
                  _this2.compile(child, frame);
                });
              };
              _proto._compileAggregate = function _compileAggregate(node, frame, startChar, endChar) {
                var _this3 = this;
                if (startChar) {
                  this._emit(startChar);
                }
                node.children.forEach(function(child, i) {
                  if (i > 0) {
                    _this3._emit(",");
                  }
                  _this3.compile(child, frame);
                });
                if (endChar) {
                  this._emit(endChar);
                }
              };
              _proto._compileExpression = function _compileExpression(node, frame) {
                this.assertType(node, nodes.Literal, nodes.Symbol, nodes.Group, nodes.Array, nodes.Dict, nodes.FunCall, nodes.Caller, nodes.Filter, nodes.LookupVal, nodes.Compare, nodes.InlineIf, nodes.In, nodes.Is, nodes.And, nodes.Or, nodes.Not, nodes.Add, nodes.Concat, nodes.Sub, nodes.Mul, nodes.Div, nodes.FloorDiv, nodes.Mod, nodes.Pow, nodes.Neg, nodes.Pos, nodes.Compare, nodes.NodeList);
                this.compile(node, frame);
              };
              _proto.assertType = function assertType(node) {
                for (var _len2 = arguments.length, types = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  types[_key2 - 1] = arguments[_key2];
                }
                if (!types.some(function(t8) {
                  return node instanceof t8;
                })) {
                  this.fail("assertType: invalid type: " + node.typename, node.lineno, node.colno);
                }
              };
              _proto.compileCallExtension = function compileCallExtension(node, frame, async) {
                var _this4 = this;
                var args = node.args;
                var contentArgs = node.contentArgs;
                var autoescape = typeof node.autoescape === "boolean" ? node.autoescape : true;
                if (!async) {
                  this._emit(this.buffer + " += runtime.suppressValue(");
                }
                this._emit('env.getExtension("' + node.extName + '")["' + node.prop + '"](');
                this._emit("context");
                if (args || contentArgs) {
                  this._emit(",");
                }
                if (args) {
                  if (!(args instanceof nodes.NodeList)) {
                    this.fail("compileCallExtension: arguments must be a NodeList, use `parser.parseSignature`");
                  }
                  args.children.forEach(function(arg, i) {
                    _this4._compileExpression(arg, frame);
                    if (i !== args.children.length - 1 || contentArgs.length) {
                      _this4._emit(",");
                    }
                  });
                }
                if (contentArgs.length) {
                  contentArgs.forEach(function(arg, i) {
                    if (i > 0) {
                      _this4._emit(",");
                    }
                    if (arg) {
                      _this4._emitLine("function(cb) {");
                      _this4._emitLine("if(!cb) { cb = function(err) { if(err) { throw err; }}}");
                      var id = _this4._pushBuffer();
                      _this4._withScopedSyntax(function() {
                        _this4.compile(arg, frame);
                        _this4._emitLine("cb(null, " + id + ");");
                      });
                      _this4._popBuffer();
                      _this4._emitLine("return " + id + ";");
                      _this4._emitLine("}");
                    } else {
                      _this4._emit("null");
                    }
                  });
                }
                if (async) {
                  var res = this._tmpid();
                  this._emitLine(", " + this._makeCallback(res));
                  this._emitLine(this.buffer + " += runtime.suppressValue(" + res + ", " + autoescape + " && env.opts.autoescape);");
                  this._addScopeLevel();
                } else {
                  this._emit(")");
                  this._emit(", " + autoescape + " && env.opts.autoescape);\n");
                }
              };
              _proto.compileCallExtensionAsync = function compileCallExtensionAsync(node, frame) {
                this.compileCallExtension(node, frame, true);
              };
              _proto.compileNodeList = function compileNodeList(node, frame) {
                this._compileChildren(node, frame);
              };
              _proto.compileLiteral = function compileLiteral(node) {
                if (typeof node.value === "string") {
                  var val2 = node.value.replace(/\\/g, "\\\\");
                  val2 = val2.replace(/"/g, '\\"');
                  val2 = val2.replace(/\n/g, "\\n");
                  val2 = val2.replace(/\r/g, "\\r");
                  val2 = val2.replace(/\t/g, "\\t");
                  val2 = val2.replace(/\u2028/g, "\\u2028");
                  this._emit('"' + val2 + '"');
                } else if (node.value === null) {
                  this._emit("null");
                } else {
                  this._emit(node.value.toString());
                }
              };
              _proto.compileSymbol = function compileSymbol(node, frame) {
                var name = node.value;
                var v3 = frame.lookup(name);
                if (v3) {
                  this._emit(v3);
                } else {
                  this._emit('runtime.contextOrFrameLookup(context, frame, "' + name + '")');
                }
              };
              _proto.compileGroup = function compileGroup(node, frame) {
                this._compileAggregate(node, frame, "(", ")");
              };
              _proto.compileArray = function compileArray(node, frame) {
                this._compileAggregate(node, frame, "[", "]");
              };
              _proto.compileDict = function compileDict(node, frame) {
                this._compileAggregate(node, frame, "{", "}");
              };
              _proto.compilePair = function compilePair(node, frame) {
                var key = node.key;
                var val2 = node.value;
                if (key instanceof nodes.Symbol) {
                  key = new nodes.Literal(key.lineno, key.colno, key.value);
                } else if (!(key instanceof nodes.Literal && typeof key.value === "string")) {
                  this.fail("compilePair: Dict keys must be strings or names", key.lineno, key.colno);
                }
                this.compile(key, frame);
                this._emit(": ");
                this._compileExpression(val2, frame);
              };
              _proto.compileInlineIf = function compileInlineIf(node, frame) {
                this._emit("(");
                this.compile(node.cond, frame);
                this._emit("?");
                this.compile(node.body, frame);
                this._emit(":");
                if (node.else_ !== null) {
                  this.compile(node.else_, frame);
                } else {
                  this._emit('""');
                }
                this._emit(")");
              };
              _proto.compileIn = function compileIn(node, frame) {
                this._emit("runtime.inOperator(");
                this.compile(node.left, frame);
                this._emit(",");
                this.compile(node.right, frame);
                this._emit(")");
              };
              _proto.compileIs = function compileIs(node, frame) {
                var right = node.right.name ? node.right.name.value : node.right.value;
                this._emit('env.getTest("' + right + '").call(context, ');
                this.compile(node.left, frame);
                if (node.right.args) {
                  this._emit(",");
                  this.compile(node.right.args, frame);
                }
                this._emit(") === true");
              };
              _proto._binOpEmitter = function _binOpEmitter(node, frame, str) {
                this.compile(node.left, frame);
                this._emit(str);
                this.compile(node.right, frame);
              };
              _proto.compileOr = function compileOr(node, frame) {
                return this._binOpEmitter(node, frame, " || ");
              };
              _proto.compileAnd = function compileAnd(node, frame) {
                return this._binOpEmitter(node, frame, " && ");
              };
              _proto.compileAdd = function compileAdd(node, frame) {
                return this._binOpEmitter(node, frame, " + ");
              };
              _proto.compileConcat = function compileConcat(node, frame) {
                return this._binOpEmitter(node, frame, ' + "" + ');
              };
              _proto.compileSub = function compileSub(node, frame) {
                return this._binOpEmitter(node, frame, " - ");
              };
              _proto.compileMul = function compileMul(node, frame) {
                return this._binOpEmitter(node, frame, " * ");
              };
              _proto.compileDiv = function compileDiv(node, frame) {
                return this._binOpEmitter(node, frame, " / ");
              };
              _proto.compileMod = function compileMod(node, frame) {
                return this._binOpEmitter(node, frame, " % ");
              };
              _proto.compileNot = function compileNot(node, frame) {
                this._emit("!");
                this.compile(node.target, frame);
              };
              _proto.compileFloorDiv = function compileFloorDiv(node, frame) {
                this._emit("Math.floor(");
                this.compile(node.left, frame);
                this._emit(" / ");
                this.compile(node.right, frame);
                this._emit(")");
              };
              _proto.compilePow = function compilePow(node, frame) {
                this._emit("Math.pow(");
                this.compile(node.left, frame);
                this._emit(", ");
                this.compile(node.right, frame);
                this._emit(")");
              };
              _proto.compileNeg = function compileNeg(node, frame) {
                this._emit("-");
                this.compile(node.target, frame);
              };
              _proto.compilePos = function compilePos(node, frame) {
                this._emit("+");
                this.compile(node.target, frame);
              };
              _proto.compileCompare = function compileCompare(node, frame) {
                var _this5 = this;
                this.compile(node.expr, frame);
                node.ops.forEach(function(op) {
                  _this5._emit(" " + compareOps[op.type] + " ");
                  _this5.compile(op.expr, frame);
                });
              };
              _proto.compileLookupVal = function compileLookupVal(node, frame) {
                this._emit("runtime.memberLookup((");
                this._compileExpression(node.target, frame);
                this._emit("),");
                this._compileExpression(node.val, frame);
                this._emit(")");
              };
              _proto._getNodeName = function _getNodeName(node) {
                switch (node.typename) {
                  case "Symbol":
                    return node.value;
                  case "FunCall":
                    return "the return value of (" + this._getNodeName(node.name) + ")";
                  case "LookupVal":
                    return this._getNodeName(node.target) + '["' + this._getNodeName(node.val) + '"]';
                  case "Literal":
                    return node.value.toString();
                  default:
                    return "--expression--";
                }
              };
              _proto.compileFunCall = function compileFunCall(node, frame) {
                this._emit("(lineno = " + node.lineno + ", colno = " + node.colno + ", ");
                this._emit("runtime.callWrap(");
                this._compileExpression(node.name, frame);
                this._emit(', "' + this._getNodeName(node.name).replace(/"/g, '\\"') + '", context, ');
                this._compileAggregate(node.args, frame, "[", "])");
                this._emit(")");
              };
              _proto.compileFilter = function compileFilter(node, frame) {
                var name = node.name;
                this.assertType(name, nodes.Symbol);
                this._emit('env.getFilter("' + name.value + '").call(context, ');
                this._compileAggregate(node.args, frame);
                this._emit(")");
              };
              _proto.compileFilterAsync = function compileFilterAsync(node, frame) {
                var name = node.name;
                var symbol = node.symbol.value;
                this.assertType(name, nodes.Symbol);
                frame.set(symbol, symbol);
                this._emit('env.getFilter("' + name.value + '").call(context, ');
                this._compileAggregate(node.args, frame);
                this._emitLine(", " + this._makeCallback(symbol));
                this._addScopeLevel();
              };
              _proto.compileKeywordArgs = function compileKeywordArgs(node, frame) {
                this._emit("runtime.makeKeywordArgs(");
                this.compileDict(node, frame);
                this._emit(")");
              };
              _proto.compileSet = function compileSet(node, frame) {
                var _this6 = this;
                var ids = [];
                node.targets.forEach(function(target) {
                  var name = target.value;
                  var id = frame.lookup(name);
                  if (id === null || id === void 0) {
                    id = _this6._tmpid();
                    _this6._emitLine("var " + id + ";");
                  }
                  ids.push(id);
                });
                if (node.value) {
                  this._emit(ids.join(" = ") + " = ");
                  this._compileExpression(node.value, frame);
                  this._emitLine(";");
                } else {
                  this._emit(ids.join(" = ") + " = ");
                  this.compile(node.body, frame);
                  this._emitLine(";");
                }
                node.targets.forEach(function(target, i) {
                  var id = ids[i];
                  var name = target.value;
                  _this6._emitLine('frame.set("' + name + '", ' + id + ", true);");
                  _this6._emitLine("if(frame.topLevel) {");
                  _this6._emitLine('context.setVariable("' + name + '", ' + id + ");");
                  _this6._emitLine("}");
                  if (name.charAt(0) !== "_") {
                    _this6._emitLine("if(frame.topLevel) {");
                    _this6._emitLine('context.addExport("' + name + '", ' + id + ");");
                    _this6._emitLine("}");
                  }
                });
              };
              _proto.compileSwitch = function compileSwitch(node, frame) {
                var _this7 = this;
                this._emit("switch (");
                this.compile(node.expr, frame);
                this._emit(") {");
                node.cases.forEach(function(c, i) {
                  _this7._emit("case ");
                  _this7.compile(c.cond, frame);
                  _this7._emit(": ");
                  _this7.compile(c.body, frame);
                  if (c.body.children.length) {
                    _this7._emitLine("break;");
                  }
                });
                if (node.default) {
                  this._emit("default:");
                  this.compile(node.default, frame);
                }
                this._emit("}");
              };
              _proto.compileIf = function compileIf(node, frame, async) {
                var _this8 = this;
                this._emit("if(");
                this._compileExpression(node.cond, frame);
                this._emitLine(") {");
                this._withScopedSyntax(function() {
                  _this8.compile(node.body, frame);
                  if (async) {
                    _this8._emit("cb()");
                  }
                });
                if (node.else_) {
                  this._emitLine("}\nelse {");
                  this._withScopedSyntax(function() {
                    _this8.compile(node.else_, frame);
                    if (async) {
                      _this8._emit("cb()");
                    }
                  });
                } else if (async) {
                  this._emitLine("}\nelse {");
                  this._emit("cb()");
                }
                this._emitLine("}");
              };
              _proto.compileIfAsync = function compileIfAsync(node, frame) {
                this._emit("(function(cb) {");
                this.compileIf(node, frame, true);
                this._emit("})(" + this._makeCallback());
                this._addScopeLevel();
              };
              _proto._emitLoopBindings = function _emitLoopBindings(node, arr, i, len) {
                var _this9 = this;
                var bindings = [{
                  name: "index",
                  val: i + " + 1"
                }, {
                  name: "index0",
                  val: i
                }, {
                  name: "revindex",
                  val: len + " - " + i
                }, {
                  name: "revindex0",
                  val: len + " - " + i + " - 1"
                }, {
                  name: "first",
                  val: i + " === 0"
                }, {
                  name: "last",
                  val: i + " === " + len + " - 1"
                }, {
                  name: "length",
                  val: len
                }];
                bindings.forEach(function(b2) {
                  _this9._emitLine('frame.set("loop.' + b2.name + '", ' + b2.val + ");");
                });
              };
              _proto.compileFor = function compileFor(node, frame) {
                var _this10 = this;
                var i = this._tmpid();
                var len = this._tmpid();
                var arr = this._tmpid();
                frame = frame.push();
                this._emitLine("frame = frame.push();");
                this._emit("var " + arr + " = ");
                this._compileExpression(node.arr, frame);
                this._emitLine(";");
                this._emit("if(" + arr + ") {");
                this._emitLine(arr + " = runtime.fromIterator(" + arr + ");");
                if (node.name instanceof nodes.Array) {
                  this._emitLine("var " + i + ";");
                  this._emitLine("if(runtime.isArray(" + arr + ")) {");
                  this._emitLine("var " + len + " = " + arr + ".length;");
                  this._emitLine("for(" + i + "=0; " + i + " < " + arr + ".length; " + i + "++) {");
                  node.name.children.forEach(function(child, u) {
                    var tid = _this10._tmpid();
                    _this10._emitLine("var " + tid + " = " + arr + "[" + i + "][" + u + "];");
                    _this10._emitLine('frame.set("' + child + '", ' + arr + "[" + i + "][" + u + "]);");
                    frame.set(node.name.children[u].value, tid);
                  });
                  this._emitLoopBindings(node, arr, i, len);
                  this._withScopedSyntax(function() {
                    _this10.compile(node.body, frame);
                  });
                  this._emitLine("}");
                  this._emitLine("} else {");
                  var _node$name$children = node.name.children, key = _node$name$children[0], val2 = _node$name$children[1];
                  var k3 = this._tmpid();
                  var v3 = this._tmpid();
                  frame.set(key.value, k3);
                  frame.set(val2.value, v3);
                  this._emitLine(i + " = -1;");
                  this._emitLine("var " + len + " = runtime.keys(" + arr + ").length;");
                  this._emitLine("for(var " + k3 + " in " + arr + ") {");
                  this._emitLine(i + "++;");
                  this._emitLine("var " + v3 + " = " + arr + "[" + k3 + "];");
                  this._emitLine('frame.set("' + key.value + '", ' + k3 + ");");
                  this._emitLine('frame.set("' + val2.value + '", ' + v3 + ");");
                  this._emitLoopBindings(node, arr, i, len);
                  this._withScopedSyntax(function() {
                    _this10.compile(node.body, frame);
                  });
                  this._emitLine("}");
                  this._emitLine("}");
                } else {
                  var _v = this._tmpid();
                  frame.set(node.name.value, _v);
                  this._emitLine("var " + len + " = " + arr + ".length;");
                  this._emitLine("for(var " + i + "=0; " + i + " < " + arr + ".length; " + i + "++) {");
                  this._emitLine("var " + _v + " = " + arr + "[" + i + "];");
                  this._emitLine('frame.set("' + node.name.value + '", ' + _v + ");");
                  this._emitLoopBindings(node, arr, i, len);
                  this._withScopedSyntax(function() {
                    _this10.compile(node.body, frame);
                  });
                  this._emitLine("}");
                }
                this._emitLine("}");
                if (node.else_) {
                  this._emitLine("if (!" + len + ") {");
                  this.compile(node.else_, frame);
                  this._emitLine("}");
                }
                this._emitLine("frame = frame.pop();");
              };
              _proto._compileAsyncLoop = function _compileAsyncLoop(node, frame, parallel) {
                var _this11 = this;
                var i = this._tmpid();
                var len = this._tmpid();
                var arr = this._tmpid();
                var asyncMethod = parallel ? "asyncAll" : "asyncEach";
                frame = frame.push();
                this._emitLine("frame = frame.push();");
                this._emit("var " + arr + " = runtime.fromIterator(");
                this._compileExpression(node.arr, frame);
                this._emitLine(");");
                if (node.name instanceof nodes.Array) {
                  var arrayLen = node.name.children.length;
                  this._emit("runtime." + asyncMethod + "(" + arr + ", " + arrayLen + ", function(");
                  node.name.children.forEach(function(name) {
                    _this11._emit(name.value + ",");
                  });
                  this._emit(i + "," + len + ",next) {");
                  node.name.children.forEach(function(name) {
                    var id2 = name.value;
                    frame.set(id2, id2);
                    _this11._emitLine('frame.set("' + id2 + '", ' + id2 + ");");
                  });
                } else {
                  var id = node.name.value;
                  this._emitLine("runtime." + asyncMethod + "(" + arr + ", 1, function(" + id + ", " + i + ", " + len + ",next) {");
                  this._emitLine('frame.set("' + id + '", ' + id + ");");
                  frame.set(id, id);
                }
                this._emitLoopBindings(node, arr, i, len);
                this._withScopedSyntax(function() {
                  var buf;
                  if (parallel) {
                    buf = _this11._pushBuffer();
                  }
                  _this11.compile(node.body, frame);
                  _this11._emitLine("next(" + i + (buf ? "," + buf : "") + ");");
                  if (parallel) {
                    _this11._popBuffer();
                  }
                });
                var output = this._tmpid();
                this._emitLine("}, " + this._makeCallback(output));
                this._addScopeLevel();
                if (parallel) {
                  this._emitLine(this.buffer + " += " + output + ";");
                }
                if (node.else_) {
                  this._emitLine("if (!" + arr + ".length) {");
                  this.compile(node.else_, frame);
                  this._emitLine("}");
                }
                this._emitLine("frame = frame.pop();");
              };
              _proto.compileAsyncEach = function compileAsyncEach(node, frame) {
                this._compileAsyncLoop(node, frame);
              };
              _proto.compileAsyncAll = function compileAsyncAll(node, frame) {
                this._compileAsyncLoop(node, frame, true);
              };
              _proto._compileMacro = function _compileMacro(node, frame) {
                var _this12 = this;
                var args = [];
                var kwargs = null;
                var funcId = "macro_" + this._tmpid();
                var keepFrame = frame !== void 0;
                node.args.children.forEach(function(arg, i) {
                  if (i === node.args.children.length - 1 && arg instanceof nodes.Dict) {
                    kwargs = arg;
                  } else {
                    _this12.assertType(arg, nodes.Symbol);
                    args.push(arg);
                  }
                });
                var realNames = [].concat(args.map(function(n) {
                  return "l_" + n.value;
                }), ["kwargs"]);
                var argNames = args.map(function(n) {
                  return '"' + n.value + '"';
                });
                var kwargNames = (kwargs && kwargs.children || []).map(function(n) {
                  return '"' + n.key.value + '"';
                });
                var currFrame;
                if (keepFrame) {
                  currFrame = frame.push(true);
                } else {
                  currFrame = new Frame();
                }
                this._emitLines("var " + funcId + " = runtime.makeMacro(", "[" + argNames.join(", ") + "], ", "[" + kwargNames.join(", ") + "], ", "function (" + realNames.join(", ") + ") {", "var callerFrame = frame;", "frame = " + (keepFrame ? "frame.push(true);" : "new runtime.Frame();"), "kwargs = kwargs || {};", 'if (Object.prototype.hasOwnProperty.call(kwargs, "caller")) {', 'frame.set("caller", kwargs.caller); }');
                args.forEach(function(arg) {
                  _this12._emitLine('frame.set("' + arg.value + '", l_' + arg.value + ");");
                  currFrame.set(arg.value, "l_" + arg.value);
                });
                if (kwargs) {
                  kwargs.children.forEach(function(pair) {
                    var name = pair.key.value;
                    _this12._emit('frame.set("' + name + '", ');
                    _this12._emit('Object.prototype.hasOwnProperty.call(kwargs, "' + name + '")');
                    _this12._emit(' ? kwargs["' + name + '"] : ');
                    _this12._compileExpression(pair.value, currFrame);
                    _this12._emit(");");
                  });
                }
                var bufferId = this._pushBuffer();
                this._withScopedSyntax(function() {
                  _this12.compile(node.body, currFrame);
                });
                this._emitLine("frame = " + (keepFrame ? "frame.pop();" : "callerFrame;"));
                this._emitLine("return new runtime.SafeString(" + bufferId + ");");
                this._emitLine("});");
                this._popBuffer();
                return funcId;
              };
              _proto.compileMacro = function compileMacro(node, frame) {
                var funcId = this._compileMacro(node);
                var name = node.name.value;
                frame.set(name, funcId);
                if (frame.parent) {
                  this._emitLine('frame.set("' + name + '", ' + funcId + ");");
                } else {
                  if (node.name.value.charAt(0) !== "_") {
                    this._emitLine('context.addExport("' + name + '");');
                  }
                  this._emitLine('context.setVariable("' + name + '", ' + funcId + ");");
                }
              };
              _proto.compileCaller = function compileCaller(node, frame) {
                this._emit("(function (){");
                var funcId = this._compileMacro(node, frame);
                this._emit("return " + funcId + ";})()");
              };
              _proto._compileGetTemplate = function _compileGetTemplate(node, frame, eagerCompile, ignoreMissing) {
                var parentTemplateId = this._tmpid();
                var parentName = this._templateName();
                var cb = this._makeCallback(parentTemplateId);
                var eagerCompileArg = eagerCompile ? "true" : "false";
                var ignoreMissingArg = ignoreMissing ? "true" : "false";
                this._emit("env.getTemplate(");
                this._compileExpression(node.template, frame);
                this._emitLine(", " + eagerCompileArg + ", " + parentName + ", " + ignoreMissingArg + ", " + cb);
                return parentTemplateId;
              };
              _proto.compileImport = function compileImport(node, frame) {
                var target = node.target.value;
                var id = this._compileGetTemplate(node, frame, false, false);
                this._addScopeLevel();
                this._emitLine(id + ".getExported(" + (node.withContext ? "context.getVariables(), frame, " : "") + this._makeCallback(id));
                this._addScopeLevel();
                frame.set(target, id);
                if (frame.parent) {
                  this._emitLine('frame.set("' + target + '", ' + id + ");");
                } else {
                  this._emitLine('context.setVariable("' + target + '", ' + id + ");");
                }
              };
              _proto.compileFromImport = function compileFromImport(node, frame) {
                var _this13 = this;
                var importedId = this._compileGetTemplate(node, frame, false, false);
                this._addScopeLevel();
                this._emitLine(importedId + ".getExported(" + (node.withContext ? "context.getVariables(), frame, " : "") + this._makeCallback(importedId));
                this._addScopeLevel();
                node.names.children.forEach(function(nameNode) {
                  var name;
                  var alias;
                  var id = _this13._tmpid();
                  if (nameNode instanceof nodes.Pair) {
                    name = nameNode.key.value;
                    alias = nameNode.value.value;
                  } else {
                    name = nameNode.value;
                    alias = name;
                  }
                  _this13._emitLine("if(Object.prototype.hasOwnProperty.call(" + importedId + ', "' + name + '")) {');
                  _this13._emitLine("var " + id + " = " + importedId + "." + name + ";");
                  _this13._emitLine("} else {");
                  _this13._emitLine(`cb(new Error("cannot import '` + name + `'")); return;`);
                  _this13._emitLine("}");
                  frame.set(alias, id);
                  if (frame.parent) {
                    _this13._emitLine('frame.set("' + alias + '", ' + id + ");");
                  } else {
                    _this13._emitLine('context.setVariable("' + alias + '", ' + id + ");");
                  }
                });
              };
              _proto.compileBlock = function compileBlock(node) {
                var id = this._tmpid();
                if (!this.inBlock) {
                  this._emit('(parentTemplate ? function(e, c, f, r, cb) { cb(""); } : ');
                }
                this._emit('context.getBlock("' + node.name.value + '")');
                if (!this.inBlock) {
                  this._emit(")");
                }
                this._emitLine("(env, context, frame, runtime, " + this._makeCallback(id));
                this._emitLine(this.buffer + " += " + id + ";");
                this._addScopeLevel();
              };
              _proto.compileSuper = function compileSuper(node, frame) {
                var name = node.blockName.value;
                var id = node.symbol.value;
                var cb = this._makeCallback(id);
                this._emitLine('context.getSuper(env, "' + name + '", b_' + name + ", frame, runtime, " + cb);
                this._emitLine(id + " = runtime.markSafe(" + id + ");");
                this._addScopeLevel();
                frame.set(id, id);
              };
              _proto.compileExtends = function compileExtends(node, frame) {
                var k3 = this._tmpid();
                var parentTemplateId = this._compileGetTemplate(node, frame, true, false);
                this._emitLine("parentTemplate = " + parentTemplateId);
                this._emitLine("for(var " + k3 + " in parentTemplate.blocks) {");
                this._emitLine("context.addBlock(" + k3 + ", parentTemplate.blocks[" + k3 + "]);");
                this._emitLine("}");
                this._addScopeLevel();
              };
              _proto.compileInclude = function compileInclude(node, frame) {
                this._emitLine("var tasks = [];");
                this._emitLine("tasks.push(");
                this._emitLine("function(callback) {");
                var id = this._compileGetTemplate(node, frame, false, node.ignoreMissing);
                this._emitLine("callback(null," + id + ");});");
                this._emitLine("});");
                var id2 = this._tmpid();
                this._emitLine("tasks.push(");
                this._emitLine("function(template, callback){");
                this._emitLine("template.render(context.getVariables(), frame, " + this._makeCallback(id2));
                this._emitLine("callback(null," + id2 + ");});");
                this._emitLine("});");
                this._emitLine("tasks.push(");
                this._emitLine("function(result, callback){");
                this._emitLine(this.buffer + " += result;");
                this._emitLine("callback(null);");
                this._emitLine("});");
                this._emitLine("env.waterfall(tasks, function(){");
                this._addScopeLevel();
              };
              _proto.compileTemplateData = function compileTemplateData(node, frame) {
                this.compileLiteral(node, frame);
              };
              _proto.compileCapture = function compileCapture(node, frame) {
                var _this14 = this;
                var buffer = this.buffer;
                this.buffer = "output";
                this._emitLine("(function() {");
                this._emitLine('var output = "";');
                this._withScopedSyntax(function() {
                  _this14.compile(node.body, frame);
                });
                this._emitLine("return output;");
                this._emitLine("})()");
                this.buffer = buffer;
              };
              _proto.compileOutput = function compileOutput(node, frame) {
                var _this15 = this;
                var children3 = node.children;
                children3.forEach(function(child) {
                  if (child instanceof nodes.TemplateData) {
                    if (child.value) {
                      _this15._emit(_this15.buffer + " += ");
                      _this15.compileLiteral(child, frame);
                      _this15._emitLine(";");
                    }
                  } else {
                    _this15._emit(_this15.buffer + " += runtime.suppressValue(");
                    if (_this15.throwOnUndefined) {
                      _this15._emit("runtime.ensureDefined(");
                    }
                    _this15.compile(child, frame);
                    if (_this15.throwOnUndefined) {
                      _this15._emit("," + node.lineno + "," + node.colno + ")");
                    }
                    _this15._emit(", env.opts.autoescape);\n");
                  }
                });
              };
              _proto.compileRoot = function compileRoot(node, frame) {
                var _this16 = this;
                if (frame) {
                  this.fail("compileRoot: root node can't have frame");
                }
                frame = new Frame();
                this._emitFuncBegin(node, "root");
                this._emitLine("var parentTemplate = null;");
                this._compileChildren(node, frame);
                this._emitLine("if(parentTemplate) {");
                this._emitLine("parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);");
                this._emitLine("} else {");
                this._emitLine("cb(null, " + this.buffer + ");");
                this._emitLine("}");
                this._emitFuncEnd(true);
                this.inBlock = true;
                var blockNames = [];
                var blocks = node.findAll(nodes.Block);
                blocks.forEach(function(block, i) {
                  var name = block.name.value;
                  if (blockNames.indexOf(name) !== -1) {
                    throw new Error('Block "' + name + '" defined more than once.');
                  }
                  blockNames.push(name);
                  _this16._emitFuncBegin(block, "b_" + name);
                  var tmpFrame = new Frame();
                  _this16._emitLine("var frame = frame.push(true);");
                  _this16.compile(block.body, tmpFrame);
                  _this16._emitFuncEnd();
                });
                this._emitLine("return {");
                blocks.forEach(function(block, i) {
                  var blockName = "b_" + block.name.value;
                  _this16._emitLine(blockName + ": " + blockName + ",");
                });
                this._emitLine("root: root\n};");
              };
              _proto.compile = function compile4(node, frame) {
                var _compile = this["compile" + node.typename];
                if (_compile) {
                  _compile.call(this, node, frame);
                } else {
                  this.fail("compile: Cannot compile node: " + node.typename, node.lineno, node.colno);
                }
              };
              _proto.getCode = function getCode() {
                return this.codebuf.join("");
              };
              return Compiler2;
            }(Obj);
            module3.exports = {
              compile: function compile4(src, asyncFilters, extensions, name, opts) {
                if (opts === void 0) {
                  opts = {};
                }
                var c = new Compiler(name, opts.throwOnUndefined);
                var preprocessors = (extensions || []).map(function(ext) {
                  return ext.preprocess;
                }).filter(function(f2) {
                  return !!f2;
                });
                var processedSrc = preprocessors.reduce(function(s, processor) {
                  return processor(s);
                }, src);
                c.compile(transformer.transform(parser.parse(processedSrc, extensions, opts), asyncFilters, name));
                return c.getCode();
              },
              Compiler
            };
          },
          /* 6 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            var path = __webpack_require__(4);
            var _require = __webpack_require__(1), EmitterObj = _require.EmitterObj;
            module3.exports = /* @__PURE__ */ function(_EmitterObj) {
              _inheritsLoose(Loader, _EmitterObj);
              function Loader() {
                return _EmitterObj.apply(this, arguments) || this;
              }
              var _proto = Loader.prototype;
              _proto.resolve = function resolve(from, to2) {
                return path.resolve(path.dirname(from), to2);
              };
              _proto.isRelative = function isRelative(filename) {
                return filename.indexOf("./") === 0 || filename.indexOf("../") === 0;
              };
              return Loader;
            }(EmitterObj);
          },
          /* 7 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            var asap = __webpack_require__(12);
            var _waterfall = __webpack_require__(15);
            var lib = __webpack_require__(0);
            var compiler = __webpack_require__(5);
            var filters2 = __webpack_require__(18);
            var _require = __webpack_require__(10), FileSystemLoader = _require.FileSystemLoader, WebLoader = _require.WebLoader, PrecompiledLoader = _require.PrecompiledLoader;
            var tests = __webpack_require__(20);
            var globals2 = __webpack_require__(21);
            var _require2 = __webpack_require__(1), Obj = _require2.Obj, EmitterObj = _require2.EmitterObj;
            var globalRuntime = __webpack_require__(2);
            var handleError = globalRuntime.handleError, Frame = globalRuntime.Frame;
            var expressApp = __webpack_require__(22);
            function callbackAsap(cb, err, res) {
              asap(function() {
                cb(err, res);
              });
            }
            var noopTmplSrc = {
              type: "code",
              obj: {
                root: function root3(env, context, frame, runtime, cb) {
                  try {
                    cb(null, "");
                  } catch (e) {
                    cb(handleError(e, null, null));
                  }
                }
              }
            };
            var Environment = /* @__PURE__ */ function(_EmitterObj) {
              _inheritsLoose(Environment2, _EmitterObj);
              function Environment2() {
                return _EmitterObj.apply(this, arguments) || this;
              }
              var _proto = Environment2.prototype;
              _proto.init = function init2(loaders, opts) {
                var _this = this;
                opts = this.opts = opts || {};
                this.opts.dev = !!opts.dev;
                this.opts.autoescape = opts.autoescape != null ? opts.autoescape : true;
                this.opts.throwOnUndefined = !!opts.throwOnUndefined;
                this.opts.trimBlocks = !!opts.trimBlocks;
                this.opts.lstripBlocks = !!opts.lstripBlocks;
                this.loaders = [];
                if (!loaders) {
                  if (FileSystemLoader) {
                    this.loaders = [new FileSystemLoader("views")];
                  } else if (WebLoader) {
                    this.loaders = [new WebLoader("/views")];
                  }
                } else {
                  this.loaders = lib.isArray(loaders) ? loaders : [loaders];
                }
                if (typeof window !== "undefined" && window.nunjucksPrecompiled) {
                  this.loaders.unshift(new PrecompiledLoader(window.nunjucksPrecompiled));
                }
                this._initLoaders();
                this.globals = globals2();
                this.filters = {};
                this.tests = {};
                this.asyncFilters = [];
                this.extensions = {};
                this.extensionsList = [];
                lib._entries(filters2).forEach(function(_ref) {
                  var name = _ref[0], filter4 = _ref[1];
                  return _this.addFilter(name, filter4);
                });
                lib._entries(tests).forEach(function(_ref2) {
                  var name = _ref2[0], test = _ref2[1];
                  return _this.addTest(name, test);
                });
              };
              _proto._initLoaders = function _initLoaders() {
                var _this2 = this;
                this.loaders.forEach(function(loader) {
                  loader.cache = {};
                  if (typeof loader.on === "function") {
                    loader.on("update", function(name, fullname) {
                      loader.cache[name] = null;
                      _this2.emit("update", name, fullname, loader);
                    });
                    loader.on("load", function(name, source) {
                      _this2.emit("load", name, source, loader);
                    });
                  }
                });
              };
              _proto.invalidateCache = function invalidateCache() {
                this.loaders.forEach(function(loader) {
                  loader.cache = {};
                });
              };
              _proto.addExtension = function addExtension(name, extension) {
                extension.__name = name;
                this.extensions[name] = extension;
                this.extensionsList.push(extension);
                return this;
              };
              _proto.removeExtension = function removeExtension(name) {
                var extension = this.getExtension(name);
                if (!extension) {
                  return;
                }
                this.extensionsList = lib.without(this.extensionsList, extension);
                delete this.extensions[name];
              };
              _proto.getExtension = function getExtension(name) {
                return this.extensions[name];
              };
              _proto.hasExtension = function hasExtension(name) {
                return !!this.extensions[name];
              };
              _proto.addGlobal = function addGlobal(name, value) {
                this.globals[name] = value;
                return this;
              };
              _proto.getGlobal = function getGlobal(name) {
                if (typeof this.globals[name] === "undefined") {
                  throw new Error("global not found: " + name);
                }
                return this.globals[name];
              };
              _proto.addFilter = function addFilter(name, func, async) {
                var wrapped = func;
                if (async) {
                  this.asyncFilters.push(name);
                }
                this.filters[name] = wrapped;
                return this;
              };
              _proto.getFilter = function getFilter(name) {
                if (!this.filters[name]) {
                  throw new Error("filter not found: " + name);
                }
                return this.filters[name];
              };
              _proto.addTest = function addTest(name, func) {
                this.tests[name] = func;
                return this;
              };
              _proto.getTest = function getTest(name) {
                if (!this.tests[name]) {
                  throw new Error("test not found: " + name);
                }
                return this.tests[name];
              };
              _proto.resolveTemplate = function resolveTemplate(loader, parentName, filename) {
                var isRelative = loader.isRelative && parentName ? loader.isRelative(filename) : false;
                return isRelative && loader.resolve ? loader.resolve(parentName, filename) : filename;
              };
              _proto.getTemplate = function getTemplate(name, eagerCompile, parentName, ignoreMissing, cb) {
                var _this3 = this;
                var that = this;
                var tmpl = null;
                if (name && name.raw) {
                  name = name.raw;
                }
                if (lib.isFunction(parentName)) {
                  cb = parentName;
                  parentName = null;
                  eagerCompile = eagerCompile || false;
                }
                if (lib.isFunction(eagerCompile)) {
                  cb = eagerCompile;
                  eagerCompile = false;
                }
                if (name instanceof Template) {
                  tmpl = name;
                } else if (typeof name !== "string") {
                  throw new Error("template names must be a string: " + name);
                } else {
                  for (var i = 0; i < this.loaders.length; i++) {
                    var loader = this.loaders[i];
                    tmpl = loader.cache[this.resolveTemplate(loader, parentName, name)];
                    if (tmpl) {
                      break;
                    }
                  }
                }
                if (tmpl) {
                  if (eagerCompile) {
                    tmpl.compile();
                  }
                  if (cb) {
                    cb(null, tmpl);
                    return void 0;
                  } else {
                    return tmpl;
                  }
                }
                var syncResult;
                var createTemplate = function createTemplate2(err, info) {
                  if (!info && !err && !ignoreMissing) {
                    err = new Error("template not found: " + name);
                  }
                  if (err) {
                    if (cb) {
                      cb(err);
                      return;
                    } else {
                      throw err;
                    }
                  }
                  var newTmpl;
                  if (!info) {
                    newTmpl = new Template(noopTmplSrc, _this3, "", eagerCompile);
                  } else {
                    newTmpl = new Template(info.src, _this3, info.path, eagerCompile);
                    if (!info.noCache) {
                      info.loader.cache[name] = newTmpl;
                    }
                  }
                  if (cb) {
                    cb(null, newTmpl);
                  } else {
                    syncResult = newTmpl;
                  }
                };
                lib.asyncIter(this.loaders, function(loader2, i2, next2, done) {
                  function handle(err, src) {
                    if (err) {
                      done(err);
                    } else if (src) {
                      src.loader = loader2;
                      done(null, src);
                    } else {
                      next2();
                    }
                  }
                  name = that.resolveTemplate(loader2, parentName, name);
                  if (loader2.async) {
                    loader2.getSource(name, handle);
                  } else {
                    handle(null, loader2.getSource(name));
                  }
                }, createTemplate);
                return syncResult;
              };
              _proto.express = function express(app2) {
                return expressApp(this, app2);
              };
              _proto.render = function render3(name, ctx, cb) {
                if (lib.isFunction(ctx)) {
                  cb = ctx;
                  ctx = null;
                }
                var syncResult = null;
                this.getTemplate(name, function(err, tmpl) {
                  if (err && cb) {
                    callbackAsap(cb, err);
                  } else if (err) {
                    throw err;
                  } else {
                    syncResult = tmpl.render(ctx, cb);
                  }
                });
                return syncResult;
              };
              _proto.renderString = function renderString(src, ctx, opts, cb) {
                if (lib.isFunction(opts)) {
                  cb = opts;
                  opts = {};
                }
                opts = opts || {};
                var tmpl = new Template(src, this, opts.path);
                return tmpl.render(ctx, cb);
              };
              _proto.waterfall = function waterfall(tasks2, callback, forceAsync) {
                return _waterfall(tasks2, callback, forceAsync);
              };
              return Environment2;
            }(EmitterObj);
            var Context = /* @__PURE__ */ function(_Obj) {
              _inheritsLoose(Context2, _Obj);
              function Context2() {
                return _Obj.apply(this, arguments) || this;
              }
              var _proto2 = Context2.prototype;
              _proto2.init = function init2(ctx, blocks, env) {
                var _this4 = this;
                this.env = env || new Environment();
                this.ctx = lib.extend({}, ctx);
                this.blocks = {};
                this.exported = [];
                lib.keys(blocks).forEach(function(name) {
                  _this4.addBlock(name, blocks[name]);
                });
              };
              _proto2.lookup = function lookup(name) {
                if (name in this.env.globals && !(name in this.ctx)) {
                  return this.env.globals[name];
                } else {
                  return this.ctx[name];
                }
              };
              _proto2.setVariable = function setVariable(name, val2) {
                this.ctx[name] = val2;
              };
              _proto2.getVariables = function getVariables() {
                return this.ctx;
              };
              _proto2.addBlock = function addBlock(name, block) {
                this.blocks[name] = this.blocks[name] || [];
                this.blocks[name].push(block);
                return this;
              };
              _proto2.getBlock = function getBlock(name) {
                if (!this.blocks[name]) {
                  throw new Error('unknown block "' + name + '"');
                }
                return this.blocks[name][0];
              };
              _proto2.getSuper = function getSuper(env, name, block, frame, runtime, cb) {
                var idx = lib.indexOf(this.blocks[name] || [], block);
                var blk = this.blocks[name][idx + 1];
                var context = this;
                if (idx === -1 || !blk) {
                  throw new Error('no super block available for "' + name + '"');
                }
                blk(env, context, frame, runtime, cb);
              };
              _proto2.addExport = function addExport(name) {
                this.exported.push(name);
              };
              _proto2.getExported = function getExported() {
                var _this5 = this;
                var exported = {};
                this.exported.forEach(function(name) {
                  exported[name] = _this5.ctx[name];
                });
                return exported;
              };
              return Context2;
            }(Obj);
            var Template = /* @__PURE__ */ function(_Obj2) {
              _inheritsLoose(Template2, _Obj2);
              function Template2() {
                return _Obj2.apply(this, arguments) || this;
              }
              var _proto3 = Template2.prototype;
              _proto3.init = function init2(src, env, path, eagerCompile) {
                this.env = env || new Environment();
                if (lib.isObject(src)) {
                  switch (src.type) {
                    case "code":
                      this.tmplProps = src.obj;
                      break;
                    case "string":
                      this.tmplStr = src.obj;
                      break;
                    default:
                      throw new Error("Unexpected template object type " + src.type + "; expected 'code', or 'string'");
                  }
                } else if (lib.isString(src)) {
                  this.tmplStr = src;
                } else {
                  throw new Error("src must be a string or an object describing the source");
                }
                this.path = path;
                if (eagerCompile) {
                  try {
                    this._compile();
                  } catch (err) {
                    throw lib._prettifyError(this.path, this.env.opts.dev, err);
                  }
                } else {
                  this.compiled = false;
                }
              };
              _proto3.render = function render3(ctx, parentFrame, cb) {
                var _this6 = this;
                if (typeof ctx === "function") {
                  cb = ctx;
                  ctx = {};
                } else if (typeof parentFrame === "function") {
                  cb = parentFrame;
                  parentFrame = null;
                }
                var forceAsync = !parentFrame;
                try {
                  this.compile();
                } catch (e) {
                  var err = lib._prettifyError(this.path, this.env.opts.dev, e);
                  if (cb) {
                    return callbackAsap(cb, err);
                  } else {
                    throw err;
                  }
                }
                var context = new Context(ctx || {}, this.blocks, this.env);
                var frame = parentFrame ? parentFrame.push(true) : new Frame();
                frame.topLevel = true;
                var syncResult = null;
                var didError = false;
                this.rootRenderFunc(this.env, context, frame, globalRuntime, function(err2, res) {
                  if (didError && cb && typeof res !== "undefined") {
                    return;
                  }
                  if (err2) {
                    err2 = lib._prettifyError(_this6.path, _this6.env.opts.dev, err2);
                    didError = true;
                  }
                  if (cb) {
                    if (forceAsync) {
                      callbackAsap(cb, err2, res);
                    } else {
                      cb(err2, res);
                    }
                  } else {
                    if (err2) {
                      throw err2;
                    }
                    syncResult = res;
                  }
                });
                return syncResult;
              };
              _proto3.getExported = function getExported(ctx, parentFrame, cb) {
                if (typeof ctx === "function") {
                  cb = ctx;
                  ctx = {};
                }
                if (typeof parentFrame === "function") {
                  cb = parentFrame;
                  parentFrame = null;
                }
                try {
                  this.compile();
                } catch (e) {
                  if (cb) {
                    return cb(e);
                  } else {
                    throw e;
                  }
                }
                var frame = parentFrame ? parentFrame.push() : new Frame();
                frame.topLevel = true;
                var context = new Context(ctx || {}, this.blocks, this.env);
                this.rootRenderFunc(this.env, context, frame, globalRuntime, function(err) {
                  if (err) {
                    cb(err, null);
                  } else {
                    cb(null, context.getExported());
                  }
                });
              };
              _proto3.compile = function compile4() {
                if (!this.compiled) {
                  this._compile();
                }
              };
              _proto3._compile = function _compile() {
                var props;
                if (this.tmplProps) {
                  props = this.tmplProps;
                } else {
                  var source = compiler.compile(this.tmplStr, this.env.asyncFilters, this.env.extensionsList, this.path, this.env.opts);
                  var func = new Function(source);
                  props = func();
                }
                this.blocks = this._getBlocks(props);
                this.rootRenderFunc = props.root;
                this.compiled = true;
              };
              _proto3._getBlocks = function _getBlocks(props) {
                var blocks = {};
                lib.keys(props).forEach(function(k3) {
                  if (k3.slice(0, 2) === "b_") {
                    blocks[k3.slice(2)] = props[k3];
                  }
                });
                return blocks;
              };
              return Template2;
            }(Obj);
            module3.exports = {
              Environment,
              Template
            };
          },
          /* 8 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            var lexer = __webpack_require__(9);
            var nodes = __webpack_require__(3);
            var Obj = __webpack_require__(1).Obj;
            var lib = __webpack_require__(0);
            var Parser3 = /* @__PURE__ */ function(_Obj) {
              _inheritsLoose(Parser4, _Obj);
              function Parser4() {
                return _Obj.apply(this, arguments) || this;
              }
              var _proto = Parser4.prototype;
              _proto.init = function init2(tokens) {
                this.tokens = tokens;
                this.peeked = null;
                this.breakOnBlocks = null;
                this.dropLeadingWhitespace = false;
                this.extensions = [];
              };
              _proto.nextToken = function nextToken(withWhitespace) {
                var tok;
                if (this.peeked) {
                  if (!withWhitespace && this.peeked.type === lexer.TOKEN_WHITESPACE) {
                    this.peeked = null;
                  } else {
                    tok = this.peeked;
                    this.peeked = null;
                    return tok;
                  }
                }
                tok = this.tokens.nextToken();
                if (!withWhitespace) {
                  while (tok && tok.type === lexer.TOKEN_WHITESPACE) {
                    tok = this.tokens.nextToken();
                  }
                }
                return tok;
              };
              _proto.peekToken = function peekToken() {
                this.peeked = this.peeked || this.nextToken();
                return this.peeked;
              };
              _proto.pushToken = function pushToken(tok) {
                if (this.peeked) {
                  throw new Error("pushToken: can only push one token on between reads");
                }
                this.peeked = tok;
              };
              _proto.error = function error(msg, lineno, colno) {
                if (lineno === void 0 || colno === void 0) {
                  var tok = this.peekToken() || {};
                  lineno = tok.lineno;
                  colno = tok.colno;
                }
                if (lineno !== void 0) {
                  lineno += 1;
                }
                if (colno !== void 0) {
                  colno += 1;
                }
                return new lib.TemplateError(msg, lineno, colno);
              };
              _proto.fail = function fail(msg, lineno, colno) {
                throw this.error(msg, lineno, colno);
              };
              _proto.skip = function skip(type) {
                var tok = this.nextToken();
                if (!tok || tok.type !== type) {
                  this.pushToken(tok);
                  return false;
                }
                return true;
              };
              _proto.expect = function expect(type) {
                var tok = this.nextToken();
                if (tok.type !== type) {
                  this.fail("expected " + type + ", got " + tok.type, tok.lineno, tok.colno);
                }
                return tok;
              };
              _proto.skipValue = function skipValue(type, val2) {
                var tok = this.nextToken();
                if (!tok || tok.type !== type || tok.value !== val2) {
                  this.pushToken(tok);
                  return false;
                }
                return true;
              };
              _proto.skipSymbol = function skipSymbol(val2) {
                return this.skipValue(lexer.TOKEN_SYMBOL, val2);
              };
              _proto.advanceAfterBlockEnd = function advanceAfterBlockEnd(name) {
                var tok;
                if (!name) {
                  tok = this.peekToken();
                  if (!tok) {
                    this.fail("unexpected end of file");
                  }
                  if (tok.type !== lexer.TOKEN_SYMBOL) {
                    this.fail("advanceAfterBlockEnd: expected symbol token or explicit name to be passed");
                  }
                  name = this.nextToken().value;
                }
                tok = this.nextToken();
                if (tok && tok.type === lexer.TOKEN_BLOCK_END) {
                  if (tok.value.charAt(0) === "-") {
                    this.dropLeadingWhitespace = true;
                  }
                } else {
                  this.fail("expected block end in " + name + " statement");
                }
                return tok;
              };
              _proto.advanceAfterVariableEnd = function advanceAfterVariableEnd() {
                var tok = this.nextToken();
                if (tok && tok.type === lexer.TOKEN_VARIABLE_END) {
                  this.dropLeadingWhitespace = tok.value.charAt(tok.value.length - this.tokens.tags.VARIABLE_END.length - 1) === "-";
                } else {
                  this.pushToken(tok);
                  this.fail("expected variable end");
                }
              };
              _proto.parseFor = function parseFor() {
                var forTok = this.peekToken();
                var node;
                var endBlock;
                if (this.skipSymbol("for")) {
                  node = new nodes.For(forTok.lineno, forTok.colno);
                  endBlock = "endfor";
                } else if (this.skipSymbol("asyncEach")) {
                  node = new nodes.AsyncEach(forTok.lineno, forTok.colno);
                  endBlock = "endeach";
                } else if (this.skipSymbol("asyncAll")) {
                  node = new nodes.AsyncAll(forTok.lineno, forTok.colno);
                  endBlock = "endall";
                } else {
                  this.fail("parseFor: expected for{Async}", forTok.lineno, forTok.colno);
                }
                node.name = this.parsePrimary();
                if (!(node.name instanceof nodes.Symbol)) {
                  this.fail("parseFor: variable name expected for loop");
                }
                var type = this.peekToken().type;
                if (type === lexer.TOKEN_COMMA) {
                  var key = node.name;
                  node.name = new nodes.Array(key.lineno, key.colno);
                  node.name.addChild(key);
                  while (this.skip(lexer.TOKEN_COMMA)) {
                    var prim = this.parsePrimary();
                    node.name.addChild(prim);
                  }
                }
                if (!this.skipSymbol("in")) {
                  this.fail('parseFor: expected "in" keyword for loop', forTok.lineno, forTok.colno);
                }
                node.arr = this.parseExpression();
                this.advanceAfterBlockEnd(forTok.value);
                node.body = this.parseUntilBlocks(endBlock, "else");
                if (this.skipSymbol("else")) {
                  this.advanceAfterBlockEnd("else");
                  node.else_ = this.parseUntilBlocks(endBlock);
                }
                this.advanceAfterBlockEnd();
                return node;
              };
              _proto.parseMacro = function parseMacro() {
                var macroTok = this.peekToken();
                if (!this.skipSymbol("macro")) {
                  this.fail("expected macro");
                }
                var name = this.parsePrimary(true);
                var args = this.parseSignature();
                var node = new nodes.Macro(macroTok.lineno, macroTok.colno, name, args);
                this.advanceAfterBlockEnd(macroTok.value);
                node.body = this.parseUntilBlocks("endmacro");
                this.advanceAfterBlockEnd();
                return node;
              };
              _proto.parseCall = function parseCall() {
                var callTok = this.peekToken();
                if (!this.skipSymbol("call")) {
                  this.fail("expected call");
                }
                var callerArgs = this.parseSignature(true) || new nodes.NodeList();
                var macroCall = this.parsePrimary();
                this.advanceAfterBlockEnd(callTok.value);
                var body = this.parseUntilBlocks("endcall");
                this.advanceAfterBlockEnd();
                var callerName = new nodes.Symbol(callTok.lineno, callTok.colno, "caller");
                var callerNode = new nodes.Caller(callTok.lineno, callTok.colno, callerName, callerArgs, body);
                var args = macroCall.args.children;
                if (!(args[args.length - 1] instanceof nodes.KeywordArgs)) {
                  args.push(new nodes.KeywordArgs());
                }
                var kwargs = args[args.length - 1];
                kwargs.addChild(new nodes.Pair(callTok.lineno, callTok.colno, callerName, callerNode));
                return new nodes.Output(callTok.lineno, callTok.colno, [macroCall]);
              };
              _proto.parseWithContext = function parseWithContext() {
                var tok = this.peekToken();
                var withContext = null;
                if (this.skipSymbol("with")) {
                  withContext = true;
                } else if (this.skipSymbol("without")) {
                  withContext = false;
                }
                if (withContext !== null) {
                  if (!this.skipSymbol("context")) {
                    this.fail("parseFrom: expected context after with/without", tok.lineno, tok.colno);
                  }
                }
                return withContext;
              };
              _proto.parseImport = function parseImport() {
                var importTok = this.peekToken();
                if (!this.skipSymbol("import")) {
                  this.fail("parseImport: expected import", importTok.lineno, importTok.colno);
                }
                var template = this.parseExpression();
                if (!this.skipSymbol("as")) {
                  this.fail('parseImport: expected "as" keyword', importTok.lineno, importTok.colno);
                }
                var target = this.parseExpression();
                var withContext = this.parseWithContext();
                var node = new nodes.Import(importTok.lineno, importTok.colno, template, target, withContext);
                this.advanceAfterBlockEnd(importTok.value);
                return node;
              };
              _proto.parseFrom = function parseFrom() {
                var fromTok = this.peekToken();
                if (!this.skipSymbol("from")) {
                  this.fail("parseFrom: expected from");
                }
                var template = this.parseExpression();
                if (!this.skipSymbol("import")) {
                  this.fail("parseFrom: expected import", fromTok.lineno, fromTok.colno);
                }
                var names = new nodes.NodeList();
                var withContext;
                while (1) {
                  var nextTok = this.peekToken();
                  if (nextTok.type === lexer.TOKEN_BLOCK_END) {
                    if (!names.children.length) {
                      this.fail("parseFrom: Expected at least one import name", fromTok.lineno, fromTok.colno);
                    }
                    if (nextTok.value.charAt(0) === "-") {
                      this.dropLeadingWhitespace = true;
                    }
                    this.nextToken();
                    break;
                  }
                  if (names.children.length > 0 && !this.skip(lexer.TOKEN_COMMA)) {
                    this.fail("parseFrom: expected comma", fromTok.lineno, fromTok.colno);
                  }
                  var name = this.parsePrimary();
                  if (name.value.charAt(0) === "_") {
                    this.fail("parseFrom: names starting with an underscore cannot be imported", name.lineno, name.colno);
                  }
                  if (this.skipSymbol("as")) {
                    var alias = this.parsePrimary();
                    names.addChild(new nodes.Pair(name.lineno, name.colno, name, alias));
                  } else {
                    names.addChild(name);
                  }
                  withContext = this.parseWithContext();
                }
                return new nodes.FromImport(fromTok.lineno, fromTok.colno, template, names, withContext);
              };
              _proto.parseBlock = function parseBlock() {
                var tag = this.peekToken();
                if (!this.skipSymbol("block")) {
                  this.fail("parseBlock: expected block", tag.lineno, tag.colno);
                }
                var node = new nodes.Block(tag.lineno, tag.colno);
                node.name = this.parsePrimary();
                if (!(node.name instanceof nodes.Symbol)) {
                  this.fail("parseBlock: variable name expected", tag.lineno, tag.colno);
                }
                this.advanceAfterBlockEnd(tag.value);
                node.body = this.parseUntilBlocks("endblock");
                this.skipSymbol("endblock");
                this.skipSymbol(node.name.value);
                var tok = this.peekToken();
                if (!tok) {
                  this.fail("parseBlock: expected endblock, got end of file");
                }
                this.advanceAfterBlockEnd(tok.value);
                return node;
              };
              _proto.parseExtends = function parseExtends() {
                var tagName = "extends";
                var tag = this.peekToken();
                if (!this.skipSymbol(tagName)) {
                  this.fail("parseTemplateRef: expected " + tagName);
                }
                var node = new nodes.Extends(tag.lineno, tag.colno);
                node.template = this.parseExpression();
                this.advanceAfterBlockEnd(tag.value);
                return node;
              };
              _proto.parseInclude = function parseInclude() {
                var tagName = "include";
                var tag = this.peekToken();
                if (!this.skipSymbol(tagName)) {
                  this.fail("parseInclude: expected " + tagName);
                }
                var node = new nodes.Include(tag.lineno, tag.colno);
                node.template = this.parseExpression();
                if (this.skipSymbol("ignore") && this.skipSymbol("missing")) {
                  node.ignoreMissing = true;
                }
                this.advanceAfterBlockEnd(tag.value);
                return node;
              };
              _proto.parseIf = function parseIf() {
                var tag = this.peekToken();
                var node;
                if (this.skipSymbol("if") || this.skipSymbol("elif") || this.skipSymbol("elseif")) {
                  node = new nodes.If(tag.lineno, tag.colno);
                } else if (this.skipSymbol("ifAsync")) {
                  node = new nodes.IfAsync(tag.lineno, tag.colno);
                } else {
                  this.fail("parseIf: expected if, elif, or elseif", tag.lineno, tag.colno);
                }
                node.cond = this.parseExpression();
                this.advanceAfterBlockEnd(tag.value);
                node.body = this.parseUntilBlocks("elif", "elseif", "else", "endif");
                var tok = this.peekToken();
                switch (tok && tok.value) {
                  case "elseif":
                  case "elif":
                    node.else_ = this.parseIf();
                    break;
                  case "else":
                    this.advanceAfterBlockEnd();
                    node.else_ = this.parseUntilBlocks("endif");
                    this.advanceAfterBlockEnd();
                    break;
                  case "endif":
                    node.else_ = null;
                    this.advanceAfterBlockEnd();
                    break;
                  default:
                    this.fail("parseIf: expected elif, else, or endif, got end of file");
                }
                return node;
              };
              _proto.parseSet = function parseSet() {
                var tag = this.peekToken();
                if (!this.skipSymbol("set")) {
                  this.fail("parseSet: expected set", tag.lineno, tag.colno);
                }
                var node = new nodes.Set(tag.lineno, tag.colno, []);
                var target;
                while (target = this.parsePrimary()) {
                  node.targets.push(target);
                  if (!this.skip(lexer.TOKEN_COMMA)) {
                    break;
                  }
                }
                if (!this.skipValue(lexer.TOKEN_OPERATOR, "=")) {
                  if (!this.skip(lexer.TOKEN_BLOCK_END)) {
                    this.fail("parseSet: expected = or block end in set tag", tag.lineno, tag.colno);
                  } else {
                    node.body = new nodes.Capture(tag.lineno, tag.colno, this.parseUntilBlocks("endset"));
                    node.value = null;
                    this.advanceAfterBlockEnd();
                  }
                } else {
                  node.value = this.parseExpression();
                  this.advanceAfterBlockEnd(tag.value);
                }
                return node;
              };
              _proto.parseSwitch = function parseSwitch() {
                var switchStart = "switch";
                var switchEnd = "endswitch";
                var caseStart = "case";
                var caseDefault = "default";
                var tag = this.peekToken();
                if (!this.skipSymbol(switchStart) && !this.skipSymbol(caseStart) && !this.skipSymbol(caseDefault)) {
                  this.fail('parseSwitch: expected "switch," "case" or "default"', tag.lineno, tag.colno);
                }
                var expr = this.parseExpression();
                this.advanceAfterBlockEnd(switchStart);
                this.parseUntilBlocks(caseStart, caseDefault, switchEnd);
                var tok = this.peekToken();
                var cases = [];
                var defaultCase;
                do {
                  this.skipSymbol(caseStart);
                  var cond = this.parseExpression();
                  this.advanceAfterBlockEnd(switchStart);
                  var body = this.parseUntilBlocks(caseStart, caseDefault, switchEnd);
                  cases.push(new nodes.Case(tok.line, tok.col, cond, body));
                  tok = this.peekToken();
                } while (tok && tok.value === caseStart);
                switch (tok.value) {
                  case caseDefault:
                    this.advanceAfterBlockEnd();
                    defaultCase = this.parseUntilBlocks(switchEnd);
                    this.advanceAfterBlockEnd();
                    break;
                  case switchEnd:
                    this.advanceAfterBlockEnd();
                    break;
                  default:
                    this.fail('parseSwitch: expected "case," "default" or "endswitch," got EOF.');
                }
                return new nodes.Switch(tag.lineno, tag.colno, expr, cases, defaultCase);
              };
              _proto.parseStatement = function parseStatement() {
                var tok = this.peekToken();
                var node;
                if (tok.type !== lexer.TOKEN_SYMBOL) {
                  this.fail("tag name expected", tok.lineno, tok.colno);
                }
                if (this.breakOnBlocks && lib.indexOf(this.breakOnBlocks, tok.value) !== -1) {
                  return null;
                }
                switch (tok.value) {
                  case "raw":
                    return this.parseRaw();
                  case "verbatim":
                    return this.parseRaw("verbatim");
                  case "if":
                  case "ifAsync":
                    return this.parseIf();
                  case "for":
                  case "asyncEach":
                  case "asyncAll":
                    return this.parseFor();
                  case "block":
                    return this.parseBlock();
                  case "extends":
                    return this.parseExtends();
                  case "include":
                    return this.parseInclude();
                  case "set":
                    return this.parseSet();
                  case "macro":
                    return this.parseMacro();
                  case "call":
                    return this.parseCall();
                  case "import":
                    return this.parseImport();
                  case "from":
                    return this.parseFrom();
                  case "filter":
                    return this.parseFilterStatement();
                  case "switch":
                    return this.parseSwitch();
                  default:
                    if (this.extensions.length) {
                      for (var i = 0; i < this.extensions.length; i++) {
                        var ext = this.extensions[i];
                        if (lib.indexOf(ext.tags || [], tok.value) !== -1) {
                          return ext.parse(this, nodes, lexer);
                        }
                      }
                    }
                    this.fail("unknown block tag: " + tok.value, tok.lineno, tok.colno);
                }
                return node;
              };
              _proto.parseRaw = function parseRaw(tagName) {
                tagName = tagName || "raw";
                var endTagName = "end" + tagName;
                var rawBlockRegex = new RegExp("([\\s\\S]*?){%\\s*(" + tagName + "|" + endTagName + ")\\s*(?=%})%}");
                var rawLevel = 1;
                var str = "";
                var matches = null;
                var begun = this.advanceAfterBlockEnd();
                while ((matches = this.tokens._extractRegex(rawBlockRegex)) && rawLevel > 0) {
                  var all = matches[0];
                  var pre = matches[1];
                  var blockName = matches[2];
                  if (blockName === tagName) {
                    rawLevel += 1;
                  } else if (blockName === endTagName) {
                    rawLevel -= 1;
                  }
                  if (rawLevel === 0) {
                    str += pre;
                    this.tokens.backN(all.length - pre.length);
                  } else {
                    str += all;
                  }
                }
                return new nodes.Output(begun.lineno, begun.colno, [new nodes.TemplateData(begun.lineno, begun.colno, str)]);
              };
              _proto.parsePostfix = function parsePostfix(node) {
                var lookup;
                var tok = this.peekToken();
                while (tok) {
                  if (tok.type === lexer.TOKEN_LEFT_PAREN) {
                    node = new nodes.FunCall(tok.lineno, tok.colno, node, this.parseSignature());
                  } else if (tok.type === lexer.TOKEN_LEFT_BRACKET) {
                    lookup = this.parseAggregate();
                    if (lookup.children.length > 1) {
                      this.fail("invalid index");
                    }
                    node = new nodes.LookupVal(tok.lineno, tok.colno, node, lookup.children[0]);
                  } else if (tok.type === lexer.TOKEN_OPERATOR && tok.value === ".") {
                    this.nextToken();
                    var val2 = this.nextToken();
                    if (val2.type !== lexer.TOKEN_SYMBOL) {
                      this.fail("expected name as lookup value, got " + val2.value, val2.lineno, val2.colno);
                    }
                    lookup = new nodes.Literal(val2.lineno, val2.colno, val2.value);
                    node = new nodes.LookupVal(tok.lineno, tok.colno, node, lookup);
                  } else {
                    break;
                  }
                  tok = this.peekToken();
                }
                return node;
              };
              _proto.parseExpression = function parseExpression() {
                var node = this.parseInlineIf();
                return node;
              };
              _proto.parseInlineIf = function parseInlineIf() {
                var node = this.parseOr();
                if (this.skipSymbol("if")) {
                  var condNode = this.parseOr();
                  var bodyNode = node;
                  node = new nodes.InlineIf(node.lineno, node.colno);
                  node.body = bodyNode;
                  node.cond = condNode;
                  if (this.skipSymbol("else")) {
                    node.else_ = this.parseOr();
                  } else {
                    node.else_ = null;
                  }
                }
                return node;
              };
              _proto.parseOr = function parseOr() {
                var node = this.parseAnd();
                while (this.skipSymbol("or")) {
                  var node2 = this.parseAnd();
                  node = new nodes.Or(node.lineno, node.colno, node, node2);
                }
                return node;
              };
              _proto.parseAnd = function parseAnd() {
                var node = this.parseNot();
                while (this.skipSymbol("and")) {
                  var node2 = this.parseNot();
                  node = new nodes.And(node.lineno, node.colno, node, node2);
                }
                return node;
              };
              _proto.parseNot = function parseNot() {
                var tok = this.peekToken();
                if (this.skipSymbol("not")) {
                  return new nodes.Not(tok.lineno, tok.colno, this.parseNot());
                }
                return this.parseIn();
              };
              _proto.parseIn = function parseIn() {
                var node = this.parseIs();
                while (1) {
                  var tok = this.nextToken();
                  if (!tok) {
                    break;
                  }
                  var invert = tok.type === lexer.TOKEN_SYMBOL && tok.value === "not";
                  if (!invert) {
                    this.pushToken(tok);
                  }
                  if (this.skipSymbol("in")) {
                    var node2 = this.parseIs();
                    node = new nodes.In(node.lineno, node.colno, node, node2);
                    if (invert) {
                      node = new nodes.Not(node.lineno, node.colno, node);
                    }
                  } else {
                    if (invert) {
                      this.pushToken(tok);
                    }
                    break;
                  }
                }
                return node;
              };
              _proto.parseIs = function parseIs() {
                var node = this.parseCompare();
                if (this.skipSymbol("is")) {
                  var not2 = this.skipSymbol("not");
                  var node2 = this.parseCompare();
                  node = new nodes.Is(node.lineno, node.colno, node, node2);
                  if (not2) {
                    node = new nodes.Not(node.lineno, node.colno, node);
                  }
                }
                return node;
              };
              _proto.parseCompare = function parseCompare() {
                var compareOps = ["==", "===", "!=", "!==", "<", ">", "<=", ">="];
                var expr = this.parseConcat();
                var ops = [];
                while (1) {
                  var tok = this.nextToken();
                  if (!tok) {
                    break;
                  } else if (compareOps.indexOf(tok.value) !== -1) {
                    ops.push(new nodes.CompareOperand(tok.lineno, tok.colno, this.parseConcat(), tok.value));
                  } else {
                    this.pushToken(tok);
                    break;
                  }
                }
                if (ops.length) {
                  return new nodes.Compare(ops[0].lineno, ops[0].colno, expr, ops);
                } else {
                  return expr;
                }
              };
              _proto.parseConcat = function parseConcat() {
                var node = this.parseAdd();
                while (this.skipValue(lexer.TOKEN_TILDE, "~")) {
                  var node2 = this.parseAdd();
                  node = new nodes.Concat(node.lineno, node.colno, node, node2);
                }
                return node;
              };
              _proto.parseAdd = function parseAdd() {
                var node = this.parseSub();
                while (this.skipValue(lexer.TOKEN_OPERATOR, "+")) {
                  var node2 = this.parseSub();
                  node = new nodes.Add(node.lineno, node.colno, node, node2);
                }
                return node;
              };
              _proto.parseSub = function parseSub() {
                var node = this.parseMul();
                while (this.skipValue(lexer.TOKEN_OPERATOR, "-")) {
                  var node2 = this.parseMul();
                  node = new nodes.Sub(node.lineno, node.colno, node, node2);
                }
                return node;
              };
              _proto.parseMul = function parseMul() {
                var node = this.parseDiv();
                while (this.skipValue(lexer.TOKEN_OPERATOR, "*")) {
                  var node2 = this.parseDiv();
                  node = new nodes.Mul(node.lineno, node.colno, node, node2);
                }
                return node;
              };
              _proto.parseDiv = function parseDiv() {
                var node = this.parseFloorDiv();
                while (this.skipValue(lexer.TOKEN_OPERATOR, "/")) {
                  var node2 = this.parseFloorDiv();
                  node = new nodes.Div(node.lineno, node.colno, node, node2);
                }
                return node;
              };
              _proto.parseFloorDiv = function parseFloorDiv() {
                var node = this.parseMod();
                while (this.skipValue(lexer.TOKEN_OPERATOR, "//")) {
                  var node2 = this.parseMod();
                  node = new nodes.FloorDiv(node.lineno, node.colno, node, node2);
                }
                return node;
              };
              _proto.parseMod = function parseMod() {
                var node = this.parsePow();
                while (this.skipValue(lexer.TOKEN_OPERATOR, "%")) {
                  var node2 = this.parsePow();
                  node = new nodes.Mod(node.lineno, node.colno, node, node2);
                }
                return node;
              };
              _proto.parsePow = function parsePow() {
                var node = this.parseUnary();
                while (this.skipValue(lexer.TOKEN_OPERATOR, "**")) {
                  var node2 = this.parseUnary();
                  node = new nodes.Pow(node.lineno, node.colno, node, node2);
                }
                return node;
              };
              _proto.parseUnary = function parseUnary(noFilters) {
                var tok = this.peekToken();
                var node;
                if (this.skipValue(lexer.TOKEN_OPERATOR, "-")) {
                  node = new nodes.Neg(tok.lineno, tok.colno, this.parseUnary(true));
                } else if (this.skipValue(lexer.TOKEN_OPERATOR, "+")) {
                  node = new nodes.Pos(tok.lineno, tok.colno, this.parseUnary(true));
                } else {
                  node = this.parsePrimary();
                }
                if (!noFilters) {
                  node = this.parseFilter(node);
                }
                return node;
              };
              _proto.parsePrimary = function parsePrimary(noPostfix) {
                var tok = this.nextToken();
                var val2;
                var node = null;
                if (!tok) {
                  this.fail("expected expression, got end of file");
                } else if (tok.type === lexer.TOKEN_STRING) {
                  val2 = tok.value;
                } else if (tok.type === lexer.TOKEN_INT) {
                  val2 = parseInt(tok.value, 10);
                } else if (tok.type === lexer.TOKEN_FLOAT) {
                  val2 = parseFloat(tok.value);
                } else if (tok.type === lexer.TOKEN_BOOLEAN) {
                  if (tok.value === "true") {
                    val2 = true;
                  } else if (tok.value === "false") {
                    val2 = false;
                  } else {
                    this.fail("invalid boolean: " + tok.value, tok.lineno, tok.colno);
                  }
                } else if (tok.type === lexer.TOKEN_NONE) {
                  val2 = null;
                } else if (tok.type === lexer.TOKEN_REGEX) {
                  val2 = new RegExp(tok.value.body, tok.value.flags);
                }
                if (val2 !== void 0) {
                  node = new nodes.Literal(tok.lineno, tok.colno, val2);
                } else if (tok.type === lexer.TOKEN_SYMBOL) {
                  node = new nodes.Symbol(tok.lineno, tok.colno, tok.value);
                } else {
                  this.pushToken(tok);
                  node = this.parseAggregate();
                }
                if (!noPostfix) {
                  node = this.parsePostfix(node);
                }
                if (node) {
                  return node;
                } else {
                  throw this.error("unexpected token: " + tok.value, tok.lineno, tok.colno);
                }
              };
              _proto.parseFilterName = function parseFilterName() {
                var tok = this.expect(lexer.TOKEN_SYMBOL);
                var name = tok.value;
                while (this.skipValue(lexer.TOKEN_OPERATOR, ".")) {
                  name += "." + this.expect(lexer.TOKEN_SYMBOL).value;
                }
                return new nodes.Symbol(tok.lineno, tok.colno, name);
              };
              _proto.parseFilterArgs = function parseFilterArgs(node) {
                if (this.peekToken().type === lexer.TOKEN_LEFT_PAREN) {
                  var call = this.parsePostfix(node);
                  return call.args.children;
                }
                return [];
              };
              _proto.parseFilter = function parseFilter(node) {
                while (this.skip(lexer.TOKEN_PIPE)) {
                  var name = this.parseFilterName();
                  node = new nodes.Filter(name.lineno, name.colno, name, new nodes.NodeList(name.lineno, name.colno, [node].concat(this.parseFilterArgs(node))));
                }
                return node;
              };
              _proto.parseFilterStatement = function parseFilterStatement() {
                var filterTok = this.peekToken();
                if (!this.skipSymbol("filter")) {
                  this.fail("parseFilterStatement: expected filter");
                }
                var name = this.parseFilterName();
                var args = this.parseFilterArgs(name);
                this.advanceAfterBlockEnd(filterTok.value);
                var body = new nodes.Capture(name.lineno, name.colno, this.parseUntilBlocks("endfilter"));
                this.advanceAfterBlockEnd();
                var node = new nodes.Filter(name.lineno, name.colno, name, new nodes.NodeList(name.lineno, name.colno, [body].concat(args)));
                return new nodes.Output(name.lineno, name.colno, [node]);
              };
              _proto.parseAggregate = function parseAggregate() {
                var tok = this.nextToken();
                var node;
                switch (tok.type) {
                  case lexer.TOKEN_LEFT_PAREN:
                    node = new nodes.Group(tok.lineno, tok.colno);
                    break;
                  case lexer.TOKEN_LEFT_BRACKET:
                    node = new nodes.Array(tok.lineno, tok.colno);
                    break;
                  case lexer.TOKEN_LEFT_CURLY:
                    node = new nodes.Dict(tok.lineno, tok.colno);
                    break;
                  default:
                    return null;
                }
                while (1) {
                  var type = this.peekToken().type;
                  if (type === lexer.TOKEN_RIGHT_PAREN || type === lexer.TOKEN_RIGHT_BRACKET || type === lexer.TOKEN_RIGHT_CURLY) {
                    this.nextToken();
                    break;
                  }
                  if (node.children.length > 0) {
                    if (!this.skip(lexer.TOKEN_COMMA)) {
                      this.fail("parseAggregate: expected comma after expression", tok.lineno, tok.colno);
                    }
                  }
                  if (node instanceof nodes.Dict) {
                    var key = this.parsePrimary();
                    if (!this.skip(lexer.TOKEN_COLON)) {
                      this.fail("parseAggregate: expected colon after dict key", tok.lineno, tok.colno);
                    }
                    var value = this.parseExpression();
                    node.addChild(new nodes.Pair(key.lineno, key.colno, key, value));
                  } else {
                    var expr = this.parseExpression();
                    node.addChild(expr);
                  }
                }
                return node;
              };
              _proto.parseSignature = function parseSignature(tolerant, noParens) {
                var tok = this.peekToken();
                if (!noParens && tok.type !== lexer.TOKEN_LEFT_PAREN) {
                  if (tolerant) {
                    return null;
                  } else {
                    this.fail("expected arguments", tok.lineno, tok.colno);
                  }
                }
                if (tok.type === lexer.TOKEN_LEFT_PAREN) {
                  tok = this.nextToken();
                }
                var args = new nodes.NodeList(tok.lineno, tok.colno);
                var kwargs = new nodes.KeywordArgs(tok.lineno, tok.colno);
                var checkComma = false;
                while (1) {
                  tok = this.peekToken();
                  if (!noParens && tok.type === lexer.TOKEN_RIGHT_PAREN) {
                    this.nextToken();
                    break;
                  } else if (noParens && tok.type === lexer.TOKEN_BLOCK_END) {
                    break;
                  }
                  if (checkComma && !this.skip(lexer.TOKEN_COMMA)) {
                    this.fail("parseSignature: expected comma after expression", tok.lineno, tok.colno);
                  } else {
                    var arg = this.parseExpression();
                    if (this.skipValue(lexer.TOKEN_OPERATOR, "=")) {
                      kwargs.addChild(new nodes.Pair(arg.lineno, arg.colno, arg, this.parseExpression()));
                    } else {
                      args.addChild(arg);
                    }
                  }
                  checkComma = true;
                }
                if (kwargs.children.length) {
                  args.addChild(kwargs);
                }
                return args;
              };
              _proto.parseUntilBlocks = function parseUntilBlocks() {
                var prev2 = this.breakOnBlocks;
                for (var _len = arguments.length, blockNames = new Array(_len), _key = 0; _key < _len; _key++) {
                  blockNames[_key] = arguments[_key];
                }
                this.breakOnBlocks = blockNames;
                var ret = this.parse();
                this.breakOnBlocks = prev2;
                return ret;
              };
              _proto.parseNodes = function parseNodes() {
                var tok;
                var buf = [];
                while (tok = this.nextToken()) {
                  if (tok.type === lexer.TOKEN_DATA) {
                    var data2 = tok.value;
                    var nextToken = this.peekToken();
                    var nextVal = nextToken && nextToken.value;
                    if (this.dropLeadingWhitespace) {
                      data2 = data2.replace(/^\s*/, "");
                      this.dropLeadingWhitespace = false;
                    }
                    if (nextToken && (nextToken.type === lexer.TOKEN_BLOCK_START && nextVal.charAt(nextVal.length - 1) === "-" || nextToken.type === lexer.TOKEN_VARIABLE_START && nextVal.charAt(this.tokens.tags.VARIABLE_START.length) === "-" || nextToken.type === lexer.TOKEN_COMMENT && nextVal.charAt(this.tokens.tags.COMMENT_START.length) === "-")) {
                      data2 = data2.replace(/\s*$/, "");
                    }
                    buf.push(new nodes.Output(tok.lineno, tok.colno, [new nodes.TemplateData(tok.lineno, tok.colno, data2)]));
                  } else if (tok.type === lexer.TOKEN_BLOCK_START) {
                    this.dropLeadingWhitespace = false;
                    var n = this.parseStatement();
                    if (!n) {
                      break;
                    }
                    buf.push(n);
                  } else if (tok.type === lexer.TOKEN_VARIABLE_START) {
                    var e = this.parseExpression();
                    this.dropLeadingWhitespace = false;
                    this.advanceAfterVariableEnd();
                    buf.push(new nodes.Output(tok.lineno, tok.colno, [e]));
                  } else if (tok.type === lexer.TOKEN_COMMENT) {
                    this.dropLeadingWhitespace = tok.value.charAt(tok.value.length - this.tokens.tags.COMMENT_END.length - 1) === "-";
                  } else {
                    this.fail("Unexpected token at top-level: " + tok.type, tok.lineno, tok.colno);
                  }
                }
                return buf;
              };
              _proto.parse = function parse7() {
                return new nodes.NodeList(0, 0, this.parseNodes());
              };
              _proto.parseAsRoot = function parseAsRoot() {
                return new nodes.Root(0, 0, this.parseNodes());
              };
              return Parser4;
            }(Obj);
            module3.exports = {
              parse: function parse7(src, extensions, opts) {
                var p = new Parser3(lexer.lex(src, opts));
                if (extensions !== void 0) {
                  p.extensions = extensions;
                }
                return p.parseAsRoot();
              },
              Parser: Parser3
            };
          },
          /* 9 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            var lib = __webpack_require__(0);
            var whitespaceChars = " \n	\r\xA0";
            var delimChars = "()[]{}%*-+~/#,:|.<>=!";
            var intChars = "0123456789";
            var BLOCK_START = "{%";
            var BLOCK_END = "%}";
            var VARIABLE_START = "{{";
            var VARIABLE_END = "}}";
            var COMMENT_START = "{#";
            var COMMENT_END = "#}";
            var TOKEN_STRING = "string";
            var TOKEN_WHITESPACE = "whitespace";
            var TOKEN_DATA = "data";
            var TOKEN_BLOCK_START = "block-start";
            var TOKEN_BLOCK_END = "block-end";
            var TOKEN_VARIABLE_START = "variable-start";
            var TOKEN_VARIABLE_END = "variable-end";
            var TOKEN_COMMENT = "comment";
            var TOKEN_LEFT_PAREN = "left-paren";
            var TOKEN_RIGHT_PAREN = "right-paren";
            var TOKEN_LEFT_BRACKET = "left-bracket";
            var TOKEN_RIGHT_BRACKET = "right-bracket";
            var TOKEN_LEFT_CURLY = "left-curly";
            var TOKEN_RIGHT_CURLY = "right-curly";
            var TOKEN_OPERATOR = "operator";
            var TOKEN_COMMA = "comma";
            var TOKEN_COLON = "colon";
            var TOKEN_TILDE = "tilde";
            var TOKEN_PIPE = "pipe";
            var TOKEN_INT = "int";
            var TOKEN_FLOAT = "float";
            var TOKEN_BOOLEAN = "boolean";
            var TOKEN_NONE = "none";
            var TOKEN_SYMBOL = "symbol";
            var TOKEN_SPECIAL = "special";
            var TOKEN_REGEX = "regex";
            function token(type, value, lineno, colno) {
              return {
                type,
                value,
                lineno,
                colno
              };
            }
            var Tokenizer3 = /* @__PURE__ */ function() {
              function Tokenizer4(str, opts) {
                this.str = str;
                this.index = 0;
                this.len = str.length;
                this.lineno = 0;
                this.colno = 0;
                this.in_code = false;
                opts = opts || {};
                var tags = opts.tags || {};
                this.tags = {
                  BLOCK_START: tags.blockStart || BLOCK_START,
                  BLOCK_END: tags.blockEnd || BLOCK_END,
                  VARIABLE_START: tags.variableStart || VARIABLE_START,
                  VARIABLE_END: tags.variableEnd || VARIABLE_END,
                  COMMENT_START: tags.commentStart || COMMENT_START,
                  COMMENT_END: tags.commentEnd || COMMENT_END
                };
                this.trimBlocks = !!opts.trimBlocks;
                this.lstripBlocks = !!opts.lstripBlocks;
              }
              var _proto = Tokenizer4.prototype;
              _proto.nextToken = function nextToken() {
                var lineno = this.lineno;
                var colno = this.colno;
                var tok;
                if (this.in_code) {
                  var cur = this.current();
                  if (this.isFinished()) {
                    return null;
                  } else if (cur === '"' || cur === "'") {
                    return token(TOKEN_STRING, this._parseString(cur), lineno, colno);
                  } else if (tok = this._extract(whitespaceChars)) {
                    return token(TOKEN_WHITESPACE, tok, lineno, colno);
                  } else if ((tok = this._extractString(this.tags.BLOCK_END)) || (tok = this._extractString("-" + this.tags.BLOCK_END))) {
                    this.in_code = false;
                    if (this.trimBlocks) {
                      cur = this.current();
                      if (cur === "\n") {
                        this.forward();
                      } else if (cur === "\r") {
                        this.forward();
                        cur = this.current();
                        if (cur === "\n") {
                          this.forward();
                        } else {
                          this.back();
                        }
                      }
                    }
                    return token(TOKEN_BLOCK_END, tok, lineno, colno);
                  } else if ((tok = this._extractString(this.tags.VARIABLE_END)) || (tok = this._extractString("-" + this.tags.VARIABLE_END))) {
                    this.in_code = false;
                    return token(TOKEN_VARIABLE_END, tok, lineno, colno);
                  } else if (cur === "r" && this.str.charAt(this.index + 1) === "/") {
                    this.forwardN(2);
                    var regexBody = "";
                    while (!this.isFinished()) {
                      if (this.current() === "/" && this.previous() !== "\\") {
                        this.forward();
                        break;
                      } else {
                        regexBody += this.current();
                        this.forward();
                      }
                    }
                    var POSSIBLE_FLAGS = ["g", "i", "m", "y"];
                    var regexFlags = "";
                    while (!this.isFinished()) {
                      var isCurrentAFlag = POSSIBLE_FLAGS.indexOf(this.current()) !== -1;
                      if (isCurrentAFlag) {
                        regexFlags += this.current();
                        this.forward();
                      } else {
                        break;
                      }
                    }
                    return token(TOKEN_REGEX, {
                      body: regexBody,
                      flags: regexFlags
                    }, lineno, colno);
                  } else if (delimChars.indexOf(cur) !== -1) {
                    this.forward();
                    var complexOps = ["==", "===", "!=", "!==", "<=", ">=", "//", "**"];
                    var curComplex = cur + this.current();
                    var type;
                    if (lib.indexOf(complexOps, curComplex) !== -1) {
                      this.forward();
                      cur = curComplex;
                      if (lib.indexOf(complexOps, curComplex + this.current()) !== -1) {
                        cur = curComplex + this.current();
                        this.forward();
                      }
                    }
                    switch (cur) {
                      case "(":
                        type = TOKEN_LEFT_PAREN;
                        break;
                      case ")":
                        type = TOKEN_RIGHT_PAREN;
                        break;
                      case "[":
                        type = TOKEN_LEFT_BRACKET;
                        break;
                      case "]":
                        type = TOKEN_RIGHT_BRACKET;
                        break;
                      case "{":
                        type = TOKEN_LEFT_CURLY;
                        break;
                      case "}":
                        type = TOKEN_RIGHT_CURLY;
                        break;
                      case ",":
                        type = TOKEN_COMMA;
                        break;
                      case ":":
                        type = TOKEN_COLON;
                        break;
                      case "~":
                        type = TOKEN_TILDE;
                        break;
                      case "|":
                        type = TOKEN_PIPE;
                        break;
                      default:
                        type = TOKEN_OPERATOR;
                    }
                    return token(type, cur, lineno, colno);
                  } else {
                    tok = this._extractUntil(whitespaceChars + delimChars);
                    if (tok.match(/^[-+]?[0-9]+$/)) {
                      if (this.current() === ".") {
                        this.forward();
                        var dec = this._extract(intChars);
                        return token(TOKEN_FLOAT, tok + "." + dec, lineno, colno);
                      } else {
                        return token(TOKEN_INT, tok, lineno, colno);
                      }
                    } else if (tok.match(/^(true|false)$/)) {
                      return token(TOKEN_BOOLEAN, tok, lineno, colno);
                    } else if (tok === "none") {
                      return token(TOKEN_NONE, tok, lineno, colno);
                    } else if (tok === "null") {
                      return token(TOKEN_NONE, tok, lineno, colno);
                    } else if (tok) {
                      return token(TOKEN_SYMBOL, tok, lineno, colno);
                    } else {
                      throw new Error("Unexpected value while parsing: " + tok);
                    }
                  }
                } else {
                  var beginChars = this.tags.BLOCK_START.charAt(0) + this.tags.VARIABLE_START.charAt(0) + this.tags.COMMENT_START.charAt(0) + this.tags.COMMENT_END.charAt(0);
                  if (this.isFinished()) {
                    return null;
                  } else if ((tok = this._extractString(this.tags.BLOCK_START + "-")) || (tok = this._extractString(this.tags.BLOCK_START))) {
                    this.in_code = true;
                    return token(TOKEN_BLOCK_START, tok, lineno, colno);
                  } else if ((tok = this._extractString(this.tags.VARIABLE_START + "-")) || (tok = this._extractString(this.tags.VARIABLE_START))) {
                    this.in_code = true;
                    return token(TOKEN_VARIABLE_START, tok, lineno, colno);
                  } else {
                    tok = "";
                    var data2;
                    var inComment = false;
                    if (this._matches(this.tags.COMMENT_START)) {
                      inComment = true;
                      tok = this._extractString(this.tags.COMMENT_START);
                    }
                    while ((data2 = this._extractUntil(beginChars)) !== null) {
                      tok += data2;
                      if ((this._matches(this.tags.BLOCK_START) || this._matches(this.tags.VARIABLE_START) || this._matches(this.tags.COMMENT_START)) && !inComment) {
                        if (this.lstripBlocks && this._matches(this.tags.BLOCK_START) && this.colno > 0 && this.colno <= tok.length) {
                          var lastLine = tok.slice(-this.colno);
                          if (/^\s+$/.test(lastLine)) {
                            tok = tok.slice(0, -this.colno);
                            if (!tok.length) {
                              return this.nextToken();
                            }
                          }
                        }
                        break;
                      } else if (this._matches(this.tags.COMMENT_END)) {
                        if (!inComment) {
                          throw new Error("unexpected end of comment");
                        }
                        tok += this._extractString(this.tags.COMMENT_END);
                        break;
                      } else {
                        tok += this.current();
                        this.forward();
                      }
                    }
                    if (data2 === null && inComment) {
                      throw new Error("expected end of comment, got end of file");
                    }
                    return token(inComment ? TOKEN_COMMENT : TOKEN_DATA, tok, lineno, colno);
                  }
                }
              };
              _proto._parseString = function _parseString(delimiter) {
                this.forward();
                var str = "";
                while (!this.isFinished() && this.current() !== delimiter) {
                  var cur = this.current();
                  if (cur === "\\") {
                    this.forward();
                    switch (this.current()) {
                      case "n":
                        str += "\n";
                        break;
                      case "t":
                        str += "	";
                        break;
                      case "r":
                        str += "\r";
                        break;
                      default:
                        str += this.current();
                    }
                    this.forward();
                  } else {
                    str += cur;
                    this.forward();
                  }
                }
                this.forward();
                return str;
              };
              _proto._matches = function _matches(str) {
                if (this.index + str.length > this.len) {
                  return null;
                }
                var m = this.str.slice(this.index, this.index + str.length);
                return m === str;
              };
              _proto._extractString = function _extractString(str) {
                if (this._matches(str)) {
                  this.forwardN(str.length);
                  return str;
                }
                return null;
              };
              _proto._extractUntil = function _extractUntil(charString) {
                return this._extractMatching(true, charString || "");
              };
              _proto._extract = function _extract(charString) {
                return this._extractMatching(false, charString);
              };
              _proto._extractMatching = function _extractMatching(breakOnMatch, charString) {
                if (this.isFinished()) {
                  return null;
                }
                var first2 = charString.indexOf(this.current());
                if (breakOnMatch && first2 === -1 || !breakOnMatch && first2 !== -1) {
                  var t8 = this.current();
                  this.forward();
                  var idx = charString.indexOf(this.current());
                  while ((breakOnMatch && idx === -1 || !breakOnMatch && idx !== -1) && !this.isFinished()) {
                    t8 += this.current();
                    this.forward();
                    idx = charString.indexOf(this.current());
                  }
                  return t8;
                }
                return "";
              };
              _proto._extractRegex = function _extractRegex(regex) {
                var matches = this.currentStr().match(regex);
                if (!matches) {
                  return null;
                }
                this.forwardN(matches[0].length);
                return matches;
              };
              _proto.isFinished = function isFinished() {
                return this.index >= this.len;
              };
              _proto.forwardN = function forwardN(n) {
                for (var i = 0; i < n; i++) {
                  this.forward();
                }
              };
              _proto.forward = function forward() {
                this.index++;
                if (this.previous() === "\n") {
                  this.lineno++;
                  this.colno = 0;
                } else {
                  this.colno++;
                }
              };
              _proto.backN = function backN(n) {
                for (var i = 0; i < n; i++) {
                  this.back();
                }
              };
              _proto.back = function back() {
                this.index--;
                if (this.current() === "\n") {
                  this.lineno--;
                  var idx = this.src.lastIndexOf("\n", this.index - 1);
                  if (idx === -1) {
                    this.colno = this.index;
                  } else {
                    this.colno = this.index - idx;
                  }
                } else {
                  this.colno--;
                }
              };
              _proto.current = function current() {
                if (!this.isFinished()) {
                  return this.str.charAt(this.index);
                }
                return "";
              };
              _proto.currentStr = function currentStr() {
                if (!this.isFinished()) {
                  return this.str.substr(this.index);
                }
                return "";
              };
              _proto.previous = function previous() {
                return this.str.charAt(this.index - 1);
              };
              return Tokenizer4;
            }();
            module3.exports = {
              lex: function lex(src, opts) {
                return new Tokenizer3(src, opts);
              },
              TOKEN_STRING,
              TOKEN_WHITESPACE,
              TOKEN_DATA,
              TOKEN_BLOCK_START,
              TOKEN_BLOCK_END,
              TOKEN_VARIABLE_START,
              TOKEN_VARIABLE_END,
              TOKEN_COMMENT,
              TOKEN_LEFT_PAREN,
              TOKEN_RIGHT_PAREN,
              TOKEN_LEFT_BRACKET,
              TOKEN_RIGHT_BRACKET,
              TOKEN_LEFT_CURLY,
              TOKEN_RIGHT_CURLY,
              TOKEN_OPERATOR,
              TOKEN_COMMA,
              TOKEN_COLON,
              TOKEN_TILDE,
              TOKEN_PIPE,
              TOKEN_INT,
              TOKEN_FLOAT,
              TOKEN_BOOLEAN,
              TOKEN_NONE,
              TOKEN_SYMBOL,
              TOKEN_SPECIAL,
              TOKEN_REGEX
            };
          },
          /* 10 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            var Loader = __webpack_require__(6);
            var _require = __webpack_require__(19), PrecompiledLoader = _require.PrecompiledLoader;
            var WebLoader = /* @__PURE__ */ function(_Loader) {
              _inheritsLoose(WebLoader2, _Loader);
              function WebLoader2(baseURL, opts) {
                var _this;
                _this = _Loader.call(this) || this;
                _this.baseURL = baseURL || ".";
                opts = opts || {};
                _this.useCache = !!opts.useCache;
                _this.async = !!opts.async;
                return _this;
              }
              var _proto = WebLoader2.prototype;
              _proto.resolve = function resolve(from, to2) {
                throw new Error("relative templates not support in the browser yet");
              };
              _proto.getSource = function getSource(name, cb) {
                var _this2 = this;
                var useCache = this.useCache;
                var result;
                this.fetch(this.baseURL + "/" + name, function(err, src) {
                  if (err) {
                    if (cb) {
                      cb(err.content);
                    } else if (err.status === 404) {
                      result = null;
                    } else {
                      throw err.content;
                    }
                  } else {
                    result = {
                      src,
                      path: name,
                      noCache: !useCache
                    };
                    _this2.emit("load", name, result);
                    if (cb) {
                      cb(null, result);
                    }
                  }
                });
                return result;
              };
              _proto.fetch = function fetch2(url, cb) {
                if (typeof window === "undefined") {
                  throw new Error("WebLoader can only by used in a browser");
                }
                var ajax = new XMLHttpRequest();
                var loading = true;
                ajax.onreadystatechange = function() {
                  if (ajax.readyState === 4 && loading) {
                    loading = false;
                    if (ajax.status === 0 || ajax.status === 200) {
                      cb(null, ajax.responseText);
                    } else {
                      cb({
                        status: ajax.status,
                        content: ajax.responseText
                      });
                    }
                  }
                };
                url += (url.indexOf("?") === -1 ? "?" : "&") + "s=" + new Date().getTime();
                ajax.open("GET", url, this.async);
                ajax.send();
              };
              return WebLoader2;
            }(Loader);
            module3.exports = {
              WebLoader,
              PrecompiledLoader
            };
          },
          /* 11 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            var lib = __webpack_require__(0);
            var _require = __webpack_require__(7), Environment = _require.Environment, Template = _require.Template;
            var Loader = __webpack_require__(6);
            var loaders = __webpack_require__(10);
            var precompile = __webpack_require__(23);
            var compiler = __webpack_require__(5);
            var parser = __webpack_require__(8);
            var lexer = __webpack_require__(9);
            var runtime = __webpack_require__(2);
            var nodes = __webpack_require__(3);
            var installJinjaCompat = __webpack_require__(25);
            var e;
            function configure(templatesPath, opts) {
              opts = opts || {};
              if (lib.isObject(templatesPath)) {
                opts = templatesPath;
                templatesPath = null;
              }
              var TemplateLoader;
              if (loaders.FileSystemLoader) {
                TemplateLoader = new loaders.FileSystemLoader(templatesPath, {
                  watch: opts.watch,
                  noCache: opts.noCache
                });
              } else if (loaders.WebLoader) {
                TemplateLoader = new loaders.WebLoader(templatesPath, {
                  useCache: opts.web && opts.web.useCache,
                  async: opts.web && opts.web.async
                });
              }
              e = new Environment(TemplateLoader, opts);
              if (opts && opts.express) {
                e.express(opts.express);
              }
              return e;
            }
            module3.exports = {
              Environment,
              Template,
              Loader,
              FileSystemLoader: loaders.FileSystemLoader,
              NodeResolveLoader: loaders.NodeResolveLoader,
              PrecompiledLoader: loaders.PrecompiledLoader,
              WebLoader: loaders.WebLoader,
              compiler,
              parser,
              lexer,
              runtime,
              lib,
              nodes,
              installJinjaCompat,
              configure,
              reset: function reset() {
                e = void 0;
              },
              compile: function compile4(src, env, path, eagerCompile) {
                if (!e) {
                  configure();
                }
                return new Template(src, env, path, eagerCompile);
              },
              render: function render3(name, ctx, cb) {
                if (!e) {
                  configure();
                }
                return e.render(name, ctx, cb);
              },
              renderString: function renderString(src, ctx, cb) {
                if (!e) {
                  configure();
                }
                return e.renderString(src, ctx, cb);
              },
              precompile: precompile ? precompile.precompile : void 0,
              precompileString: precompile ? precompile.precompileString : void 0
            };
          },
          /* 12 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            var rawAsap = __webpack_require__(13);
            var freeTasks = [];
            var pendingErrors = [];
            var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);
            function throwFirstError() {
              if (pendingErrors.length) {
                throw pendingErrors.shift();
              }
            }
            module3.exports = asap;
            function asap(task) {
              var rawTask;
              if (freeTasks.length) {
                rawTask = freeTasks.pop();
              } else {
                rawTask = new RawTask();
              }
              rawTask.task = task;
              rawAsap(rawTask);
            }
            function RawTask() {
              this.task = null;
            }
            RawTask.prototype.call = function() {
              try {
                this.task.call();
              } catch (error) {
                if (asap.onerror) {
                  asap.onerror(error);
                } else {
                  pendingErrors.push(error);
                  requestErrorThrow();
                }
              } finally {
                this.task = null;
                freeTasks[freeTasks.length] = this;
              }
            };
          },
          /* 13 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            (function(global2) {
              module3.exports = rawAsap;
              function rawAsap(task) {
                if (!queue.length) {
                  requestFlush();
                  flushing = true;
                }
                queue[queue.length] = task;
              }
              var queue = [];
              var flushing = false;
              var requestFlush;
              var index2 = 0;
              var capacity = 1024;
              function flush2() {
                while (index2 < queue.length) {
                  var currentIndex = index2;
                  index2 = index2 + 1;
                  queue[currentIndex].call();
                  if (index2 > capacity) {
                    for (var scan = 0, newLength = queue.length - index2; scan < newLength; scan++) {
                      queue[scan] = queue[scan + index2];
                    }
                    queue.length -= index2;
                    index2 = 0;
                  }
                }
                queue.length = 0;
                index2 = 0;
                flushing = false;
              }
              var scope = typeof global2 !== "undefined" ? global2 : self;
              var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
              if (typeof BrowserMutationObserver === "function") {
                requestFlush = makeRequestCallFromMutationObserver(flush2);
              } else {
                requestFlush = makeRequestCallFromTimer(flush2);
              }
              rawAsap.requestFlush = requestFlush;
              function makeRequestCallFromMutationObserver(callback) {
                var toggle = 1;
                var observer = new BrowserMutationObserver(callback);
                var node = document.createTextNode("");
                observer.observe(node, { characterData: true });
                return function requestCall() {
                  toggle = -toggle;
                  node.data = toggle;
                };
              }
              function makeRequestCallFromTimer(callback) {
                return function requestCall() {
                  var timeoutHandle = setTimeout(handleTimer, 0);
                  var intervalHandle = setInterval(handleTimer, 50);
                  function handleTimer() {
                    clearTimeout(timeoutHandle);
                    clearInterval(intervalHandle);
                    callback();
                  }
                };
              }
              rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;
            }).call(exports2, __webpack_require__(14));
          },
          /* 14 */
          /***/
          function(module3, exports2) {
            var g;
            g = function() {
              return this;
            }();
            try {
              g = g || Function("return this")() || (1, eval)("this");
            } catch (e) {
              if (typeof window === "object")
                g = window;
            }
            module3.exports = g;
          },
          /* 15 */
          /***/
          function(module3, exports2, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
            (function(globals2) {
              "use strict";
              var executeSync = function() {
                var args = Array.prototype.slice.call(arguments);
                if (typeof args[0] === "function") {
                  args[0].apply(null, args.splice(1));
                }
              };
              var executeAsync = function(fn3) {
                if (typeof setImmediate === "function") {
                  setImmediate(fn3);
                } else if (typeof process !== "undefined" && process.nextTick) {
                  process.nextTick(fn3);
                } else {
                  setTimeout(fn3, 0);
                }
              };
              var makeIterator = function(tasks2) {
                var makeCallback = function(index2) {
                  var fn3 = function() {
                    if (tasks2.length) {
                      tasks2[index2].apply(null, arguments);
                    }
                    return fn3.next();
                  };
                  fn3.next = function() {
                    return index2 < tasks2.length - 1 ? makeCallback(index2 + 1) : null;
                  };
                  return fn3;
                };
                return makeCallback(0);
              };
              var _isArray = Array.isArray || function(maybeArray) {
                return Object.prototype.toString.call(maybeArray) === "[object Array]";
              };
              var waterfall = function(tasks2, callback, forceAsync) {
                var nextTick = forceAsync ? executeAsync : executeSync;
                callback = callback || function() {
                };
                if (!_isArray(tasks2)) {
                  var err = new Error("First argument to waterfall must be an array of functions");
                  return callback(err);
                }
                if (!tasks2.length) {
                  return callback();
                }
                var wrapIterator = function(iterator) {
                  return function(err2) {
                    if (err2) {
                      callback.apply(null, arguments);
                      callback = function() {
                      };
                    } else {
                      var args = Array.prototype.slice.call(arguments, 1);
                      var next2 = iterator.next();
                      if (next2) {
                        args.push(wrapIterator(next2));
                      } else {
                        args.push(callback);
                      }
                      nextTick(function() {
                        iterator.apply(null, args);
                      });
                    }
                  };
                };
                wrapIterator(makeIterator(tasks2))();
              };
              if (true) {
                !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
                  return waterfall;
                }.apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else if (typeof module3 !== "undefined" && module3.exports) {
                module3.exports = waterfall;
              } else {
                globals2.waterfall = waterfall;
              }
            })(this);
          },
          /* 16 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            var R3 = typeof Reflect === "object" ? Reflect : null;
            var ReflectApply = R3 && typeof R3.apply === "function" ? R3.apply : function ReflectApply2(target, receiver, args) {
              return Function.prototype.apply.call(target, receiver, args);
            };
            var ReflectOwnKeys;
            if (R3 && typeof R3.ownKeys === "function") {
              ReflectOwnKeys = R3.ownKeys;
            } else if (Object.getOwnPropertySymbols) {
              ReflectOwnKeys = function ReflectOwnKeys2(target) {
                return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
              };
            } else {
              ReflectOwnKeys = function ReflectOwnKeys2(target) {
                return Object.getOwnPropertyNames(target);
              };
            }
            function ProcessEmitWarning(warning) {
              if (console && console.warn)
                console.warn(warning);
            }
            var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
              return value !== value;
            };
            function EventEmitter() {
              EventEmitter.init.call(this);
            }
            module3.exports = EventEmitter;
            module3.exports.once = once2;
            EventEmitter.EventEmitter = EventEmitter;
            EventEmitter.prototype._events = void 0;
            EventEmitter.prototype._eventsCount = 0;
            EventEmitter.prototype._maxListeners = void 0;
            var defaultMaxListeners = 10;
            function checkListener(listener) {
              if (typeof listener !== "function") {
                throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
              }
            }
            Object.defineProperty(EventEmitter, "defaultMaxListeners", {
              enumerable: true,
              get: function() {
                return defaultMaxListeners;
              },
              set: function(arg) {
                if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
                  throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
                }
                defaultMaxListeners = arg;
              }
            });
            EventEmitter.init = function() {
              if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
                this._events = /* @__PURE__ */ Object.create(null);
                this._eventsCount = 0;
              }
              this._maxListeners = this._maxListeners || void 0;
            };
            EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
              if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
                throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
              }
              this._maxListeners = n;
              return this;
            };
            function _getMaxListeners(that) {
              if (that._maxListeners === void 0)
                return EventEmitter.defaultMaxListeners;
              return that._maxListeners;
            }
            EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
              return _getMaxListeners(this);
            };
            EventEmitter.prototype.emit = function emit(type) {
              var args = [];
              for (var i = 1; i < arguments.length; i++)
                args.push(arguments[i]);
              var doError = type === "error";
              var events = this._events;
              if (events !== void 0)
                doError = doError && events.error === void 0;
              else if (!doError)
                return false;
              if (doError) {
                var er4;
                if (args.length > 0)
                  er4 = args[0];
                if (er4 instanceof Error) {
                  throw er4;
                }
                var err = new Error("Unhandled error." + (er4 ? " (" + er4.message + ")" : ""));
                err.context = er4;
                throw err;
              }
              var handler2 = events[type];
              if (handler2 === void 0)
                return false;
              if (typeof handler2 === "function") {
                ReflectApply(handler2, this, args);
              } else {
                var len = handler2.length;
                var listeners = arrayClone(handler2, len);
                for (var i = 0; i < len; ++i)
                  ReflectApply(listeners[i], this, args);
              }
              return true;
            };
            function _addListener(target, type, listener, prepend3) {
              var m;
              var events;
              var existing;
              checkListener(listener);
              events = target._events;
              if (events === void 0) {
                events = target._events = /* @__PURE__ */ Object.create(null);
                target._eventsCount = 0;
              } else {
                if (events.newListener !== void 0) {
                  target.emit(
                    "newListener",
                    type,
                    listener.listener ? listener.listener : listener
                  );
                  events = target._events;
                }
                existing = events[type];
              }
              if (existing === void 0) {
                existing = events[type] = listener;
                ++target._eventsCount;
              } else {
                if (typeof existing === "function") {
                  existing = events[type] = prepend3 ? [listener, existing] : [existing, listener];
                } else if (prepend3) {
                  existing.unshift(listener);
                } else {
                  existing.push(listener);
                }
                m = _getMaxListeners(target);
                if (m > 0 && existing.length > m && !existing.warned) {
                  existing.warned = true;
                  var w3 = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
                  w3.name = "MaxListenersExceededWarning";
                  w3.emitter = target;
                  w3.type = type;
                  w3.count = existing.length;
                  ProcessEmitWarning(w3);
                }
              }
              return target;
            }
            EventEmitter.prototype.addListener = function addListener(type, listener) {
              return _addListener(this, type, listener, false);
            };
            EventEmitter.prototype.on = EventEmitter.prototype.addListener;
            EventEmitter.prototype.prependListener = function prependListener(type, listener) {
              return _addListener(this, type, listener, true);
            };
            function onceWrapper() {
              if (!this.fired) {
                this.target.removeListener(this.type, this.wrapFn);
                this.fired = true;
                if (arguments.length === 0)
                  return this.listener.call(this.target);
                return this.listener.apply(this.target, arguments);
              }
            }
            function _onceWrap(target, type, listener) {
              var state = { fired: false, wrapFn: void 0, target, type, listener };
              var wrapped = onceWrapper.bind(state);
              wrapped.listener = listener;
              state.wrapFn = wrapped;
              return wrapped;
            }
            EventEmitter.prototype.once = function once3(type, listener) {
              checkListener(listener);
              this.on(type, _onceWrap(this, type, listener));
              return this;
            };
            EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
              checkListener(listener);
              this.prependListener(type, _onceWrap(this, type, listener));
              return this;
            };
            EventEmitter.prototype.removeListener = function removeListener(type, listener) {
              var list, events, position, i, originalListener;
              checkListener(listener);
              events = this._events;
              if (events === void 0)
                return this;
              list = events[type];
              if (list === void 0)
                return this;
              if (list === listener || list.listener === listener) {
                if (--this._eventsCount === 0)
                  this._events = /* @__PURE__ */ Object.create(null);
                else {
                  delete events[type];
                  if (events.removeListener)
                    this.emit("removeListener", type, list.listener || listener);
                }
              } else if (typeof list !== "function") {
                position = -1;
                for (i = list.length - 1; i >= 0; i--) {
                  if (list[i] === listener || list[i].listener === listener) {
                    originalListener = list[i].listener;
                    position = i;
                    break;
                  }
                }
                if (position < 0)
                  return this;
                if (position === 0)
                  list.shift();
                else {
                  spliceOne(list, position);
                }
                if (list.length === 1)
                  events[type] = list[0];
                if (events.removeListener !== void 0)
                  this.emit("removeListener", type, originalListener || listener);
              }
              return this;
            };
            EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
            EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
              var listeners, events, i;
              events = this._events;
              if (events === void 0)
                return this;
              if (events.removeListener === void 0) {
                if (arguments.length === 0) {
                  this._events = /* @__PURE__ */ Object.create(null);
                  this._eventsCount = 0;
                } else if (events[type] !== void 0) {
                  if (--this._eventsCount === 0)
                    this._events = /* @__PURE__ */ Object.create(null);
                  else
                    delete events[type];
                }
                return this;
              }
              if (arguments.length === 0) {
                var keys = Object.keys(events);
                var key;
                for (i = 0; i < keys.length; ++i) {
                  key = keys[i];
                  if (key === "removeListener")
                    continue;
                  this.removeAllListeners(key);
                }
                this.removeAllListeners("removeListener");
                this._events = /* @__PURE__ */ Object.create(null);
                this._eventsCount = 0;
                return this;
              }
              listeners = events[type];
              if (typeof listeners === "function") {
                this.removeListener(type, listeners);
              } else if (listeners !== void 0) {
                for (i = listeners.length - 1; i >= 0; i--) {
                  this.removeListener(type, listeners[i]);
                }
              }
              return this;
            };
            function _listeners(target, type, unwrap2) {
              var events = target._events;
              if (events === void 0)
                return [];
              var evlistener = events[type];
              if (evlistener === void 0)
                return [];
              if (typeof evlistener === "function")
                return unwrap2 ? [evlistener.listener || evlistener] : [evlistener];
              return unwrap2 ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
            }
            EventEmitter.prototype.listeners = function listeners(type) {
              return _listeners(this, type, true);
            };
            EventEmitter.prototype.rawListeners = function rawListeners(type) {
              return _listeners(this, type, false);
            };
            EventEmitter.listenerCount = function(emitter, type) {
              if (typeof emitter.listenerCount === "function") {
                return emitter.listenerCount(type);
              } else {
                return listenerCount.call(emitter, type);
              }
            };
            EventEmitter.prototype.listenerCount = listenerCount;
            function listenerCount(type) {
              var events = this._events;
              if (events !== void 0) {
                var evlistener = events[type];
                if (typeof evlistener === "function") {
                  return 1;
                } else if (evlistener !== void 0) {
                  return evlistener.length;
                }
              }
              return 0;
            }
            EventEmitter.prototype.eventNames = function eventNames() {
              return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
            };
            function arrayClone(arr, n) {
              var copy = new Array(n);
              for (var i = 0; i < n; ++i)
                copy[i] = arr[i];
              return copy;
            }
            function spliceOne(list, index2) {
              for (; index2 + 1 < list.length; index2++)
                list[index2] = list[index2 + 1];
              list.pop();
            }
            function unwrapListeners(arr) {
              var ret = new Array(arr.length);
              for (var i = 0; i < ret.length; ++i) {
                ret[i] = arr[i].listener || arr[i];
              }
              return ret;
            }
            function once2(emitter, name) {
              return new Promise(function(resolve, reject) {
                function errorListener(err) {
                  emitter.removeListener(name, resolver);
                  reject(err);
                }
                function resolver() {
                  if (typeof emitter.removeListener === "function") {
                    emitter.removeListener("error", errorListener);
                  }
                  resolve([].slice.call(arguments));
                }
                ;
                eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
                if (name !== "error") {
                  addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
                }
              });
            }
            function addErrorHandlerIfEventEmitter(emitter, handler2, flags) {
              if (typeof emitter.on === "function") {
                eventTargetAgnosticAddListener(emitter, "error", handler2, flags);
              }
            }
            function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
              if (typeof emitter.on === "function") {
                if (flags.once) {
                  emitter.once(name, listener);
                } else {
                  emitter.on(name, listener);
                }
              } else if (typeof emitter.addEventListener === "function") {
                emitter.addEventListener(name, function wrapListener(arg) {
                  if (flags.once) {
                    emitter.removeEventListener(name, wrapListener);
                  }
                  listener(arg);
                });
              } else {
                throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
              }
            }
          },
          /* 17 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            var nodes = __webpack_require__(3);
            var lib = __webpack_require__(0);
            var sym = 0;
            function gensym() {
              return "hole_" + sym++;
            }
            function mapCOW(arr, func) {
              var res = null;
              for (var i = 0; i < arr.length; i++) {
                var item = func(arr[i]);
                if (item !== arr[i]) {
                  if (!res) {
                    res = arr.slice();
                  }
                  res[i] = item;
                }
              }
              return res || arr;
            }
            function walk(ast, func, depthFirst) {
              if (!(ast instanceof nodes.Node)) {
                return ast;
              }
              if (!depthFirst) {
                var astT = func(ast);
                if (astT && astT !== ast) {
                  return astT;
                }
              }
              if (ast instanceof nodes.NodeList) {
                var children3 = mapCOW(ast.children, function(node) {
                  return walk(node, func, depthFirst);
                });
                if (children3 !== ast.children) {
                  ast = new nodes[ast.typename](ast.lineno, ast.colno, children3);
                }
              } else if (ast instanceof nodes.CallExtension) {
                var args = walk(ast.args, func, depthFirst);
                var contentArgs = mapCOW(ast.contentArgs, function(node) {
                  return walk(node, func, depthFirst);
                });
                if (args !== ast.args || contentArgs !== ast.contentArgs) {
                  ast = new nodes[ast.typename](ast.extName, ast.prop, args, contentArgs);
                }
              } else {
                var props = ast.fields.map(function(field) {
                  return ast[field];
                });
                var propsT = mapCOW(props, function(prop2) {
                  return walk(prop2, func, depthFirst);
                });
                if (propsT !== props) {
                  ast = new nodes[ast.typename](ast.lineno, ast.colno);
                  propsT.forEach(function(prop2, i) {
                    ast[ast.fields[i]] = prop2;
                  });
                }
              }
              return depthFirst ? func(ast) || ast : ast;
            }
            function depthWalk(ast, func) {
              return walk(ast, func, true);
            }
            function _liftFilters(node, asyncFilters, prop2) {
              var children3 = [];
              var walked = depthWalk(prop2 ? node[prop2] : node, function(descNode) {
                var symbol;
                if (descNode instanceof nodes.Block) {
                  return descNode;
                } else if (descNode instanceof nodes.Filter && lib.indexOf(asyncFilters, descNode.name.value) !== -1 || descNode instanceof nodes.CallExtensionAsync) {
                  symbol = new nodes.Symbol(descNode.lineno, descNode.colno, gensym());
                  children3.push(new nodes.FilterAsync(descNode.lineno, descNode.colno, descNode.name, descNode.args, symbol));
                }
                return symbol;
              });
              if (prop2) {
                node[prop2] = walked;
              } else {
                node = walked;
              }
              if (children3.length) {
                children3.push(node);
                return new nodes.NodeList(node.lineno, node.colno, children3);
              } else {
                return node;
              }
            }
            function liftFilters(ast, asyncFilters) {
              return depthWalk(ast, function(node) {
                if (node instanceof nodes.Output) {
                  return _liftFilters(node, asyncFilters);
                } else if (node instanceof nodes.Set) {
                  return _liftFilters(node, asyncFilters, "value");
                } else if (node instanceof nodes.For) {
                  return _liftFilters(node, asyncFilters, "arr");
                } else if (node instanceof nodes.If) {
                  return _liftFilters(node, asyncFilters, "cond");
                } else if (node instanceof nodes.CallExtension) {
                  return _liftFilters(node, asyncFilters, "args");
                } else {
                  return void 0;
                }
              });
            }
            function liftSuper(ast) {
              return walk(ast, function(blockNode) {
                if (!(blockNode instanceof nodes.Block)) {
                  return;
                }
                var hasSuper = false;
                var symbol = gensym();
                blockNode.body = walk(blockNode.body, function(node) {
                  if (node instanceof nodes.FunCall && node.name.value === "super") {
                    hasSuper = true;
                    return new nodes.Symbol(node.lineno, node.colno, symbol);
                  }
                });
                if (hasSuper) {
                  blockNode.body.children.unshift(new nodes.Super(0, 0, blockNode.name, new nodes.Symbol(0, 0, symbol)));
                }
              });
            }
            function convertStatements(ast) {
              return depthWalk(ast, function(node) {
                if (!(node instanceof nodes.If) && !(node instanceof nodes.For)) {
                  return void 0;
                }
                var async = false;
                walk(node, function(child) {
                  if (child instanceof nodes.FilterAsync || child instanceof nodes.IfAsync || child instanceof nodes.AsyncEach || child instanceof nodes.AsyncAll || child instanceof nodes.CallExtensionAsync) {
                    async = true;
                    return child;
                  }
                  return void 0;
                });
                if (async) {
                  if (node instanceof nodes.If) {
                    return new nodes.IfAsync(node.lineno, node.colno, node.cond, node.body, node.else_);
                  } else if (node instanceof nodes.For && !(node instanceof nodes.AsyncAll)) {
                    return new nodes.AsyncEach(node.lineno, node.colno, node.arr, node.name, node.body, node.else_);
                  }
                }
                return void 0;
              });
            }
            function cps(ast, asyncFilters) {
              return convertStatements(liftSuper(liftFilters(ast, asyncFilters)));
            }
            function transform(ast, asyncFilters) {
              return cps(ast, asyncFilters || []);
            }
            module3.exports = {
              transform
            };
          },
          /* 18 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            var lib = __webpack_require__(0);
            var r = __webpack_require__(2);
            var exports2 = module3.exports = {};
            function normalize(value, defaultValue) {
              if (value === null || value === void 0 || value === false) {
                return defaultValue;
              }
              return value;
            }
            exports2.abs = Math.abs;
            function isNaN2(num) {
              return num !== num;
            }
            function batch(arr, linecount, fillWith) {
              var i;
              var res = [];
              var tmp = [];
              for (i = 0; i < arr.length; i++) {
                if (i % linecount === 0 && tmp.length) {
                  res.push(tmp);
                  tmp = [];
                }
                tmp.push(arr[i]);
              }
              if (tmp.length) {
                if (fillWith) {
                  for (i = tmp.length; i < linecount; i++) {
                    tmp.push(fillWith);
                  }
                }
                res.push(tmp);
              }
              return res;
            }
            exports2.batch = batch;
            function capitalize(str) {
              str = normalize(str, "");
              var ret = str.toLowerCase();
              return r.copySafeness(str, ret.charAt(0).toUpperCase() + ret.slice(1));
            }
            exports2.capitalize = capitalize;
            function center(str, width) {
              str = normalize(str, "");
              width = width || 80;
              if (str.length >= width) {
                return str;
              }
              var spaces = width - str.length;
              var pre = lib.repeat(" ", spaces / 2 - spaces % 2);
              var post = lib.repeat(" ", spaces / 2);
              return r.copySafeness(str, pre + str + post);
            }
            exports2.center = center;
            function default_(val2, def, bool) {
              if (bool) {
                return val2 || def;
              } else {
                return val2 !== void 0 ? val2 : def;
              }
            }
            exports2["default"] = default_;
            function dictsort(val2, caseSensitive, by) {
              if (!lib.isObject(val2)) {
                throw new lib.TemplateError("dictsort filter: val must be an object");
              }
              var array = [];
              for (var k3 in val2) {
                array.push([k3, val2[k3]]);
              }
              var si3;
              if (by === void 0 || by === "key") {
                si3 = 0;
              } else if (by === "value") {
                si3 = 1;
              } else {
                throw new lib.TemplateError("dictsort filter: You can only sort by either key or value");
              }
              array.sort(function(t1, t22) {
                var a = t1[si3];
                var b2 = t22[si3];
                if (!caseSensitive) {
                  if (lib.isString(a)) {
                    a = a.toUpperCase();
                  }
                  if (lib.isString(b2)) {
                    b2 = b2.toUpperCase();
                  }
                }
                return a > b2 ? 1 : a === b2 ? 0 : -1;
              });
              return array;
            }
            exports2.dictsort = dictsort;
            function dump(obj, spaces) {
              return JSON.stringify(obj, null, spaces);
            }
            exports2.dump = dump;
            function escape2(str) {
              if (str instanceof r.SafeString) {
                return str;
              }
              str = str === null || str === void 0 ? "" : str;
              return r.markSafe(lib.escape(str.toString()));
            }
            exports2.escape = escape2;
            function safe(str) {
              if (str instanceof r.SafeString) {
                return str;
              }
              str = str === null || str === void 0 ? "" : str;
              return r.markSafe(str.toString());
            }
            exports2.safe = safe;
            function first2(arr) {
              return arr[0];
            }
            exports2.first = first2;
            function forceescape(str) {
              str = str === null || str === void 0 ? "" : str;
              return r.markSafe(lib.escape(str.toString()));
            }
            exports2.forceescape = forceescape;
            function groupby(arr, attr3) {
              return lib.groupBy(arr, attr3, this.env.opts.throwOnUndefined);
            }
            exports2.groupby = groupby;
            function indent(str, width, indentfirst) {
              str = normalize(str, "");
              if (str === "") {
                return "";
              }
              width = width || 4;
              var lines = str.split("\n");
              var sp = lib.repeat(" ", width);
              var res = lines.map(function(l, i) {
                return i === 0 && !indentfirst ? l : "" + sp + l;
              }).join("\n");
              return r.copySafeness(str, res);
            }
            exports2.indent = indent;
            function join(arr, del, attr3) {
              del = del || "";
              if (attr3) {
                arr = lib.map(arr, function(v3) {
                  return v3[attr3];
                });
              }
              return arr.join(del);
            }
            exports2.join = join;
            function last2(arr) {
              return arr[arr.length - 1];
            }
            exports2.last = last2;
            function lengthFilter(val2) {
              var value = normalize(val2, "");
              if (value !== void 0) {
                if (typeof Map === "function" && value instanceof Map || typeof Set === "function" && value instanceof Set) {
                  return value.size;
                }
                if (lib.isObject(value) && !(value instanceof r.SafeString)) {
                  return lib.keys(value).length;
                }
                return value.length;
              }
              return 0;
            }
            exports2.length = lengthFilter;
            function list(val2) {
              if (lib.isString(val2)) {
                return val2.split("");
              } else if (lib.isObject(val2)) {
                return lib._entries(val2 || {}).map(function(_ref) {
                  var key = _ref[0], value = _ref[1];
                  return {
                    key,
                    value
                  };
                });
              } else if (lib.isArray(val2)) {
                return val2;
              } else {
                throw new lib.TemplateError("list filter: type not iterable");
              }
            }
            exports2.list = list;
            function lower(str) {
              str = normalize(str, "");
              return str.toLowerCase();
            }
            exports2.lower = lower;
            function nl2br(str) {
              if (str === null || str === void 0) {
                return "";
              }
              return r.copySafeness(str, str.replace(/\r\n|\n/g, "<br />\n"));
            }
            exports2.nl2br = nl2br;
            function random(arr) {
              return arr[Math.floor(Math.random() * arr.length)];
            }
            exports2.random = random;
            function getSelectOrReject(expectedTestResult) {
              function filter4(arr, testName, secondArg) {
                if (testName === void 0) {
                  testName = "truthy";
                }
                var context = this;
                var test = context.env.getTest(testName);
                return lib.toArray(arr).filter(function examineTestResult(item) {
                  return test.call(context, item, secondArg) === expectedTestResult;
                });
              }
              return filter4;
            }
            exports2.reject = getSelectOrReject(false);
            function rejectattr(arr, attr3) {
              return arr.filter(function(item) {
                return !item[attr3];
              });
            }
            exports2.rejectattr = rejectattr;
            exports2.select = getSelectOrReject(true);
            function selectattr(arr, attr3) {
              return arr.filter(function(item) {
                return !!item[attr3];
              });
            }
            exports2.selectattr = selectattr;
            function replace(str, old, new_, maxCount) {
              var originalStr = str;
              if (old instanceof RegExp) {
                return str.replace(old, new_);
              }
              if (typeof maxCount === "undefined") {
                maxCount = -1;
              }
              var res = "";
              if (typeof old === "number") {
                old = "" + old;
              } else if (typeof old !== "string") {
                return str;
              }
              if (typeof str === "number") {
                str = "" + str;
              }
              if (typeof str !== "string" && !(str instanceof r.SafeString)) {
                return str;
              }
              if (old === "") {
                res = new_ + str.split("").join(new_) + new_;
                return r.copySafeness(str, res);
              }
              var nextIndex = str.indexOf(old);
              if (maxCount === 0 || nextIndex === -1) {
                return str;
              }
              var pos = 0;
              var count = 0;
              while (nextIndex > -1 && (maxCount === -1 || count < maxCount)) {
                res += str.substring(pos, nextIndex) + new_;
                pos = nextIndex + old.length;
                count++;
                nextIndex = str.indexOf(old, pos);
              }
              if (pos < str.length) {
                res += str.substring(pos);
              }
              return r.copySafeness(originalStr, res);
            }
            exports2.replace = replace;
            function reverse(val2) {
              var arr;
              if (lib.isString(val2)) {
                arr = list(val2);
              } else {
                arr = lib.map(val2, function(v3) {
                  return v3;
                });
              }
              arr.reverse();
              if (lib.isString(val2)) {
                return r.copySafeness(val2, arr.join(""));
              }
              return arr;
            }
            exports2.reverse = reverse;
            function round(val2, precision, method) {
              precision = precision || 0;
              var factor = Math.pow(10, precision);
              var rounder;
              if (method === "ceil") {
                rounder = Math.ceil;
              } else if (method === "floor") {
                rounder = Math.floor;
              } else {
                rounder = Math.round;
              }
              return rounder(val2 * factor) / factor;
            }
            exports2.round = round;
            function slice2(arr, slices, fillWith) {
              var sliceLength = Math.floor(arr.length / slices);
              var extra = arr.length % slices;
              var res = [];
              var offset = 0;
              for (var i = 0; i < slices; i++) {
                var start = offset + i * sliceLength;
                if (i < extra) {
                  offset++;
                }
                var end2 = offset + (i + 1) * sliceLength;
                var currSlice = arr.slice(start, end2);
                if (fillWith && i >= extra) {
                  currSlice.push(fillWith);
                }
                res.push(currSlice);
              }
              return res;
            }
            exports2.slice = slice2;
            function sum(arr, attr3, start) {
              if (start === void 0) {
                start = 0;
              }
              if (attr3) {
                arr = lib.map(arr, function(v3) {
                  return v3[attr3];
                });
              }
              return start + arr.reduce(function(a, b2) {
                return a + b2;
              }, 0);
            }
            exports2.sum = sum;
            exports2.sort = r.makeMacro(["value", "reverse", "case_sensitive", "attribute"], [], function sortFilter(arr, reversed, caseSens, attr3) {
              var _this = this;
              var array = lib.map(arr, function(v3) {
                return v3;
              });
              var getAttribute = lib.getAttrGetter(attr3);
              array.sort(function(a, b2) {
                var x3 = attr3 ? getAttribute(a) : a;
                var y2 = attr3 ? getAttribute(b2) : b2;
                if (_this.env.opts.throwOnUndefined && attr3 && (x3 === void 0 || y2 === void 0)) {
                  throw new TypeError('sort: attribute "' + attr3 + '" resolved to undefined');
                }
                if (!caseSens && lib.isString(x3) && lib.isString(y2)) {
                  x3 = x3.toLowerCase();
                  y2 = y2.toLowerCase();
                }
                if (x3 < y2) {
                  return reversed ? 1 : -1;
                } else if (x3 > y2) {
                  return reversed ? -1 : 1;
                } else {
                  return 0;
                }
              });
              return array;
            });
            function string(obj) {
              return r.copySafeness(obj, obj);
            }
            exports2.string = string;
            function striptags(input, preserveLinebreaks) {
              input = normalize(input, "");
              var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>|<!--[\s\S]*?-->/gi;
              var trimmedInput = trim(input.replace(tags, ""));
              var res = "";
              if (preserveLinebreaks) {
                res = trimmedInput.replace(/^ +| +$/gm, "").replace(/ +/g, " ").replace(/(\r\n)/g, "\n").replace(/\n\n\n+/g, "\n\n");
              } else {
                res = trimmedInput.replace(/\s+/gi, " ");
              }
              return r.copySafeness(input, res);
            }
            exports2.striptags = striptags;
            function title(str) {
              str = normalize(str, "");
              var words = str.split(" ").map(function(word) {
                return capitalize(word);
              });
              return r.copySafeness(str, words.join(" "));
            }
            exports2.title = title;
            function trim(str) {
              return r.copySafeness(str, str.replace(/^\s*|\s*$/g, ""));
            }
            exports2.trim = trim;
            function truncate(input, length, killwords, end2) {
              var orig = input;
              input = normalize(input, "");
              length = length || 255;
              if (input.length <= length) {
                return input;
              }
              if (killwords) {
                input = input.substring(0, length);
              } else {
                var idx = input.lastIndexOf(" ", length);
                if (idx === -1) {
                  idx = length;
                }
                input = input.substring(0, idx);
              }
              input += end2 !== void 0 && end2 !== null ? end2 : "...";
              return r.copySafeness(orig, input);
            }
            exports2.truncate = truncate;
            function upper(str) {
              str = normalize(str, "");
              return str.toUpperCase();
            }
            exports2.upper = upper;
            function urlencode(obj) {
              var enc = encodeURIComponent;
              if (lib.isString(obj)) {
                return enc(obj);
              } else {
                var keyvals = lib.isArray(obj) ? obj : lib._entries(obj);
                return keyvals.map(function(_ref2) {
                  var k3 = _ref2[0], v3 = _ref2[1];
                  return enc(k3) + "=" + enc(v3);
                }).join("&");
              }
            }
            exports2.urlencode = urlencode;
            var puncRe = /^(?:\(|<|&lt;)?(.*?)(?:\.|,|\)|\n|&gt;)?$/;
            var emailRe = /^[\w.!#$%&'*+\-\/=?\^`{|}~]+@[a-z\d\-]+(\.[a-z\d\-]+)+$/i;
            var httpHttpsRe = /^https?:\/\/.*$/;
            var wwwRe = /^www\./;
            var tldRe = /\.(?:org|net|com)(?:\:|\/|$)/;
            function urlize(str, length, nofollow) {
              if (isNaN2(length)) {
                length = Infinity;
              }
              var noFollowAttr = nofollow === true ? ' rel="nofollow"' : "";
              var words = str.split(/(\s+)/).filter(function(word) {
                return word && word.length;
              }).map(function(word) {
                var matches = word.match(puncRe);
                var possibleUrl = matches ? matches[1] : word;
                var shortUrl = possibleUrl.substr(0, length);
                if (httpHttpsRe.test(possibleUrl)) {
                  return '<a href="' + possibleUrl + '"' + noFollowAttr + ">" + shortUrl + "</a>";
                }
                if (wwwRe.test(possibleUrl)) {
                  return '<a href="http://' + possibleUrl + '"' + noFollowAttr + ">" + shortUrl + "</a>";
                }
                if (emailRe.test(possibleUrl)) {
                  return '<a href="mailto:' + possibleUrl + '">' + possibleUrl + "</a>";
                }
                if (tldRe.test(possibleUrl)) {
                  return '<a href="http://' + possibleUrl + '"' + noFollowAttr + ">" + shortUrl + "</a>";
                }
                return word;
              });
              return words.join("");
            }
            exports2.urlize = urlize;
            function wordcount(str) {
              str = normalize(str, "");
              var words = str ? str.match(/\w+/g) : null;
              return words ? words.length : null;
            }
            exports2.wordcount = wordcount;
            function float(val2, def) {
              var res = parseFloat(val2);
              return isNaN2(res) ? def : res;
            }
            exports2.float = float;
            var intFilter = r.makeMacro(["value", "default", "base"], [], function doInt(value, defaultValue, base) {
              if (base === void 0) {
                base = 10;
              }
              var res = parseInt(value, base);
              return isNaN2(res) ? defaultValue : res;
            });
            exports2.int = intFilter;
            exports2.d = exports2.default;
            exports2.e = exports2.escape;
          },
          /* 19 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf(subClass, superClass);
            }
            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
                o2.__proto__ = p2;
                return o2;
              };
              return _setPrototypeOf(o, p);
            }
            var Loader = __webpack_require__(6);
            var PrecompiledLoader = /* @__PURE__ */ function(_Loader) {
              _inheritsLoose(PrecompiledLoader2, _Loader);
              function PrecompiledLoader2(compiledTemplates) {
                var _this;
                _this = _Loader.call(this) || this;
                _this.precompiled = compiledTemplates || {};
                return _this;
              }
              var _proto = PrecompiledLoader2.prototype;
              _proto.getSource = function getSource(name) {
                if (this.precompiled[name]) {
                  return {
                    src: {
                      type: "code",
                      obj: this.precompiled[name]
                    },
                    path: name
                  };
                }
                return null;
              };
              return PrecompiledLoader2;
            }(Loader);
            module3.exports = {
              PrecompiledLoader
            };
          },
          /* 20 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            var SafeString = __webpack_require__(2).SafeString;
            function callable(value) {
              return typeof value === "function";
            }
            exports2.callable = callable;
            function defined(value) {
              return value !== void 0;
            }
            exports2.defined = defined;
            function divisibleby(one, two) {
              return one % two === 0;
            }
            exports2.divisibleby = divisibleby;
            function escaped(value) {
              return value instanceof SafeString;
            }
            exports2.escaped = escaped;
            function equalto(one, two) {
              return one === two;
            }
            exports2.equalto = equalto;
            exports2.eq = exports2.equalto;
            exports2.sameas = exports2.equalto;
            function even(value) {
              return value % 2 === 0;
            }
            exports2.even = even;
            function falsy(value) {
              return !value;
            }
            exports2.falsy = falsy;
            function ge3(one, two) {
              return one >= two;
            }
            exports2.ge = ge3;
            function greaterthan(one, two) {
              return one > two;
            }
            exports2.greaterthan = greaterthan;
            exports2.gt = exports2.greaterthan;
            function le4(one, two) {
              return one <= two;
            }
            exports2.le = le4;
            function lessthan(one, two) {
              return one < two;
            }
            exports2.lessthan = lessthan;
            exports2.lt = exports2.lessthan;
            function lower(value) {
              return value.toLowerCase() === value;
            }
            exports2.lower = lower;
            function ne5(one, two) {
              return one !== two;
            }
            exports2.ne = ne5;
            function nullTest(value) {
              return value === null;
            }
            exports2.null = nullTest;
            function number(value) {
              return typeof value === "number";
            }
            exports2.number = number;
            function odd(value) {
              return value % 2 === 1;
            }
            exports2.odd = odd;
            function string(value) {
              return typeof value === "string";
            }
            exports2.string = string;
            function truthy(value) {
              return !!value;
            }
            exports2.truthy = truthy;
            function undefinedTest(value) {
              return value === void 0;
            }
            exports2.undefined = undefinedTest;
            function upper(value) {
              return value.toUpperCase() === value;
            }
            exports2.upper = upper;
            function iterable(value) {
              if (typeof Symbol !== "undefined") {
                return !!value[Symbol.iterator];
              } else {
                return Array.isArray(value) || typeof value === "string";
              }
            }
            exports2.iterable = iterable;
            function mapping(value) {
              var bool = value !== null && value !== void 0 && typeof value === "object" && !Array.isArray(value);
              if (Set) {
                return bool && !(value instanceof Set);
              } else {
                return bool;
              }
            }
            exports2.mapping = mapping;
          },
          /* 21 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            function _cycler(items) {
              var index2 = -1;
              return {
                current: null,
                reset: function reset() {
                  index2 = -1;
                  this.current = null;
                },
                next: function next2() {
                  index2++;
                  if (index2 >= items.length) {
                    index2 = 0;
                  }
                  this.current = items[index2];
                  return this.current;
                }
              };
            }
            function _joiner(sep) {
              sep = sep || ",";
              var first2 = true;
              return function() {
                var val2 = first2 ? "" : sep;
                first2 = false;
                return val2;
              };
            }
            function globals2() {
              return {
                range: function range(start, stop, step) {
                  if (typeof stop === "undefined") {
                    stop = start;
                    start = 0;
                    step = 1;
                  } else if (!step) {
                    step = 1;
                  }
                  var arr = [];
                  if (step > 0) {
                    for (var i = start; i < stop; i += step) {
                      arr.push(i);
                    }
                  } else {
                    for (var _i2 = start; _i2 > stop; _i2 += step) {
                      arr.push(_i2);
                    }
                  }
                  return arr;
                },
                cycler: function cycler() {
                  return _cycler(Array.prototype.slice.call(arguments));
                },
                joiner: function joiner(sep) {
                  return _joiner(sep);
                }
              };
            }
            module3.exports = globals2;
          },
          /* 22 */
          /***/
          function(module3, exports2, __webpack_require__) {
            var path = __webpack_require__(4);
            module3.exports = function express(env, app2) {
              function NunjucksView(name, opts) {
                this.name = name;
                this.path = name;
                this.defaultEngine = opts.defaultEngine;
                this.ext = path.extname(name);
                if (!this.ext && !this.defaultEngine) {
                  throw new Error("No default engine was specified and no extension was provided.");
                }
                if (!this.ext) {
                  this.name += this.ext = (this.defaultEngine[0] !== "." ? "." : "") + this.defaultEngine;
                }
              }
              NunjucksView.prototype.render = function render3(opts, cb) {
                env.render(this.name, opts, cb);
              };
              app2.set("view", NunjucksView);
              app2.set("nunjucksEnv", env);
              return env;
            };
          },
          /* 23 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            var fs = __webpack_require__(4);
            var path = __webpack_require__(4);
            var _require = __webpack_require__(0), _prettifyError = _require._prettifyError;
            var compiler = __webpack_require__(5);
            var _require2 = __webpack_require__(7), Environment = _require2.Environment;
            var precompileGlobal = __webpack_require__(24);
            function match(filename, patterns) {
              if (!Array.isArray(patterns)) {
                return false;
              }
              return patterns.some(function(pattern) {
                return filename.match(pattern);
              });
            }
            function precompileString(str, opts) {
              opts = opts || {};
              opts.isString = true;
              var env = opts.env || new Environment([]);
              var wrapper = opts.wrapper || precompileGlobal;
              if (!opts.name) {
                throw new Error('the "name" option is required when compiling a string');
              }
              return wrapper([_precompile(str, opts.name, env)], opts);
            }
            function precompile(input, opts) {
              opts = opts || {};
              var env = opts.env || new Environment([]);
              var wrapper = opts.wrapper || precompileGlobal;
              if (opts.isString) {
                return precompileString(input, opts);
              }
              var pathStats = fs.existsSync(input) && fs.statSync(input);
              var precompiled = [];
              var templates = [];
              function addTemplates(dir) {
                fs.readdirSync(dir).forEach(function(file) {
                  var filepath = path.join(dir, file);
                  var subpath = filepath.substr(path.join(input, "/").length);
                  var stat = fs.statSync(filepath);
                  if (stat && stat.isDirectory()) {
                    subpath += "/";
                    if (!match(subpath, opts.exclude)) {
                      addTemplates(filepath);
                    }
                  } else if (match(subpath, opts.include)) {
                    templates.push(filepath);
                  }
                });
              }
              if (pathStats.isFile()) {
                precompiled.push(_precompile(fs.readFileSync(input, "utf-8"), opts.name || input, env));
              } else if (pathStats.isDirectory()) {
                addTemplates(input);
                for (var i = 0; i < templates.length; i++) {
                  var name = templates[i].replace(path.join(input, "/"), "");
                  try {
                    precompiled.push(_precompile(fs.readFileSync(templates[i], "utf-8"), name, env));
                  } catch (e) {
                    if (opts.force) {
                      console.error(e);
                    } else {
                      throw e;
                    }
                  }
                }
              }
              return wrapper(precompiled, opts);
            }
            function _precompile(str, name, env) {
              env = env || new Environment([]);
              var asyncFilters = env.asyncFilters;
              var extensions = env.extensionsList;
              var template;
              name = name.replace(/\\/g, "/");
              try {
                template = compiler.compile(str, asyncFilters, extensions, name, env.opts);
              } catch (err) {
                throw _prettifyError(name, false, err);
              }
              return {
                name,
                template
              };
            }
            module3.exports = {
              precompile,
              precompileString
            };
          },
          /* 24 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            function precompileGlobal(templates, opts) {
              var out = "";
              opts = opts || {};
              for (var i = 0; i < templates.length; i++) {
                var name = JSON.stringify(templates[i].name);
                var template = templates[i].template;
                out += "(function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})[" + name + "] = (function() {\n" + template + "\n})();\n";
                if (opts.asFunction) {
                  out += "return function(ctx, cb) { return nunjucks.render(" + name + ", ctx, cb); }\n";
                }
                out += "})();\n";
              }
              return out;
            }
            module3.exports = precompileGlobal;
          },
          /* 25 */
          /***/
          function(module3, exports2, __webpack_require__) {
            function installCompat() {
              "use strict";
              var runtime = this.runtime;
              var lib = this.lib;
              var Compiler = this.compiler.Compiler;
              var Parser3 = this.parser.Parser;
              var nodes = this.nodes;
              var lexer = this.lexer;
              var orig_contextOrFrameLookup = runtime.contextOrFrameLookup;
              var orig_memberLookup = runtime.memberLookup;
              var orig_Compiler_assertType;
              var orig_Parser_parseAggregate;
              if (Compiler) {
                orig_Compiler_assertType = Compiler.prototype.assertType;
              }
              if (Parser3) {
                orig_Parser_parseAggregate = Parser3.prototype.parseAggregate;
              }
              function uninstall() {
                runtime.contextOrFrameLookup = orig_contextOrFrameLookup;
                runtime.memberLookup = orig_memberLookup;
                if (Compiler) {
                  Compiler.prototype.assertType = orig_Compiler_assertType;
                }
                if (Parser3) {
                  Parser3.prototype.parseAggregate = orig_Parser_parseAggregate;
                }
              }
              runtime.contextOrFrameLookup = function contextOrFrameLookup(context, frame, key) {
                var val2 = orig_contextOrFrameLookup.apply(this, arguments);
                if (val2 !== void 0) {
                  return val2;
                }
                switch (key) {
                  case "True":
                    return true;
                  case "False":
                    return false;
                  case "None":
                    return null;
                  default:
                    return void 0;
                }
              };
              function getTokensState(tokens) {
                return {
                  index: tokens.index,
                  lineno: tokens.lineno,
                  colno: tokens.colno
                };
              }
              if (nodes && Compiler && Parser3) {
                var Slice = nodes.Node.extend("Slice", {
                  fields: ["start", "stop", "step"],
                  init: function init2(lineno, colno, start, stop, step) {
                    start = start || new nodes.Literal(lineno, colno, null);
                    stop = stop || new nodes.Literal(lineno, colno, null);
                    step = step || new nodes.Literal(lineno, colno, 1);
                    this.parent(lineno, colno, start, stop, step);
                  }
                });
                Compiler.prototype.assertType = function assertType(node) {
                  if (node instanceof Slice) {
                    return;
                  }
                  orig_Compiler_assertType.apply(this, arguments);
                };
                Compiler.prototype.compileSlice = function compileSlice(node, frame) {
                  this._emit("(");
                  this._compileExpression(node.start, frame);
                  this._emit("),(");
                  this._compileExpression(node.stop, frame);
                  this._emit("),(");
                  this._compileExpression(node.step, frame);
                  this._emit(")");
                };
                Parser3.prototype.parseAggregate = function parseAggregate() {
                  var _this = this;
                  var origState = getTokensState(this.tokens);
                  origState.colno--;
                  origState.index--;
                  try {
                    return orig_Parser_parseAggregate.apply(this);
                  } catch (e) {
                    var errState = getTokensState(this.tokens);
                    var rethrow = function rethrow2() {
                      lib._assign(_this.tokens, errState);
                      return e;
                    };
                    lib._assign(this.tokens, origState);
                    this.peeked = false;
                    var tok = this.peekToken();
                    if (tok.type !== lexer.TOKEN_LEFT_BRACKET) {
                      throw rethrow();
                    } else {
                      this.nextToken();
                    }
                    var node = new Slice(tok.lineno, tok.colno);
                    var isSlice = false;
                    for (var i = 0; i <= node.fields.length; i++) {
                      if (this.skip(lexer.TOKEN_RIGHT_BRACKET)) {
                        break;
                      }
                      if (i === node.fields.length) {
                        if (isSlice) {
                          this.fail("parseSlice: too many slice components", tok.lineno, tok.colno);
                        } else {
                          break;
                        }
                      }
                      if (this.skip(lexer.TOKEN_COLON)) {
                        isSlice = true;
                      } else {
                        var field = node.fields[i];
                        node[field] = this.parseExpression();
                        isSlice = this.skip(lexer.TOKEN_COLON) || isSlice;
                      }
                    }
                    if (!isSlice) {
                      throw rethrow();
                    }
                    return new nodes.Array(tok.lineno, tok.colno, [node]);
                  }
                };
              }
              function sliceLookup(obj, start, stop, step) {
                obj = obj || [];
                if (start === null) {
                  start = step < 0 ? obj.length - 1 : 0;
                }
                if (stop === null) {
                  stop = step < 0 ? -1 : obj.length;
                } else if (stop < 0) {
                  stop += obj.length;
                }
                if (start < 0) {
                  start += obj.length;
                }
                var results = [];
                for (var i = start; ; i += step) {
                  if (i < 0 || i > obj.length) {
                    break;
                  }
                  if (step > 0 && i >= stop) {
                    break;
                  }
                  if (step < 0 && i <= stop) {
                    break;
                  }
                  results.push(runtime.memberLookup(obj, i));
                }
                return results;
              }
              function hasOwnProp(obj, key) {
                return Object.prototype.hasOwnProperty.call(obj, key);
              }
              var ARRAY_MEMBERS = {
                pop: function pop(index2) {
                  if (index2 === void 0) {
                    return this.pop();
                  }
                  if (index2 >= this.length || index2 < 0) {
                    throw new Error("KeyError");
                  }
                  return this.splice(index2, 1);
                },
                append: function append4(element2) {
                  return this.push(element2);
                },
                remove: function remove2(element2) {
                  for (var i = 0; i < this.length; i++) {
                    if (this[i] === element2) {
                      return this.splice(i, 1);
                    }
                  }
                  throw new Error("ValueError");
                },
                count: function count(element2) {
                  var count2 = 0;
                  for (var i = 0; i < this.length; i++) {
                    if (this[i] === element2) {
                      count2++;
                    }
                  }
                  return count2;
                },
                index: function index2(element2) {
                  var i;
                  if ((i = this.indexOf(element2)) === -1) {
                    throw new Error("ValueError");
                  }
                  return i;
                },
                find: function find4(element2) {
                  return this.indexOf(element2);
                },
                insert: function insert2(index2, elem) {
                  return this.splice(index2, 0, elem);
                }
              };
              var OBJECT_MEMBERS = {
                items: function items() {
                  return lib._entries(this);
                },
                values: function values() {
                  return lib._values(this);
                },
                keys: function keys() {
                  return lib.keys(this);
                },
                get: function get2(key, def) {
                  var output = this[key];
                  if (output === void 0) {
                    output = def;
                  }
                  return output;
                },
                has_key: function has_key(key) {
                  return hasOwnProp(this, key);
                },
                pop: function pop(key, def) {
                  var output = this[key];
                  if (output === void 0 && def !== void 0) {
                    output = def;
                  } else if (output === void 0) {
                    throw new Error("KeyError");
                  } else {
                    delete this[key];
                  }
                  return output;
                },
                popitem: function popitem() {
                  var keys = lib.keys(this);
                  if (!keys.length) {
                    throw new Error("KeyError");
                  }
                  var k3 = keys[0];
                  var val2 = this[k3];
                  delete this[k3];
                  return [k3, val2];
                },
                setdefault: function setdefault(key, def) {
                  if (def === void 0) {
                    def = null;
                  }
                  if (!(key in this)) {
                    this[key] = def;
                  }
                  return this[key];
                },
                update: function update3(kwargs) {
                  lib._assign(this, kwargs);
                  return null;
                }
              };
              OBJECT_MEMBERS.iteritems = OBJECT_MEMBERS.items;
              OBJECT_MEMBERS.itervalues = OBJECT_MEMBERS.values;
              OBJECT_MEMBERS.iterkeys = OBJECT_MEMBERS.keys;
              runtime.memberLookup = function memberLookup(obj, val2, autoescape) {
                if (arguments.length === 4) {
                  return sliceLookup.apply(this, arguments);
                }
                obj = obj || {};
                if (lib.isArray(obj) && hasOwnProp(ARRAY_MEMBERS, val2)) {
                  return ARRAY_MEMBERS[val2].bind(obj);
                }
                if (lib.isObject(obj) && hasOwnProp(OBJECT_MEMBERS, val2)) {
                  return OBJECT_MEMBERS[val2].bind(obj);
                }
                return orig_memberLookup.apply(this, arguments);
              };
              return uninstall;
            }
            module3.exports = installCompat;
          }
          /******/
        ])
      );
    });
  }
});

// node_modules/boolbase/index.js
var require_boolbase = __commonJS({
  "node_modules/boolbase/index.js"(exports, module2) {
    module2.exports = {
      trueFunc: function trueFunc2() {
        return true;
      },
      falseFunc: function falseFunc() {
        return false;
      }
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LivecodesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian19 = require("obsidian");

// src/views/playground.ts
var import_obsidian9 = require("obsidian");

// node_modules/svelte/src/runtime/internal/utils.js
function noop() {
}
var identity = (x3) => x3;
function run(fn3) {
  return fn3();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b2) {
  return a != a ? b2 == b2 : a !== b2 || a && typeof a === "object" || typeof a === "function";
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}

// node_modules/svelte/src/runtime/internal/environment.js
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;

// node_modules/svelte/src/runtime/internal/loop.js
var tasks = /* @__PURE__ */ new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}

// node_modules/svelte/src/runtime/internal/globals.js
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : (
  // @ts-ignore Node typings have this
  global
);

// node_modules/svelte/src/runtime/internal/ResizeObserverSingleton.js
var ResizeObserverSingleton = class {
  /** @param {ResizeObserverOptions} options */
  constructor(options) {
    /**
     * @private
     * @readonly
     * @type {WeakMap<Element, import('./private.js').Listener>}
     */
    __publicField(this, "_listeners", "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0);
    /**
     * @private
     * @type {ResizeObserver}
     */
    __publicField(this, "_observer");
    /** @type {ResizeObserverOptions} */
    __publicField(this, "options");
    this.options = options;
  }
  /**
   * @param {Element} element
   * @param {import('./private.js').Listener} listener
   * @returns {() => void}
   */
  observe(element2, listener) {
    this._listeners.set(element2, listener);
    this._getObserver().observe(element2, this.options);
    return () => {
      this._listeners.delete(element2);
      this._observer.unobserve(element2);
    };
  }
  /**
   * @private
   */
  _getObserver() {
    var _a3;
    return (_a3 = this._observer) != null ? _a3 : this._observer = new ResizeObserver((entries) => {
      var _a4;
      for (const entry of entries) {
        ResizeObserverSingleton.entries.set(entry.target, entry);
        (_a4 = this._listeners.get(entry.target)) == null ? void 0 : _a4(entry);
      }
    });
  }
};
ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;

// node_modules/svelte/src/runtime/internal/dom.js
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root3 = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root3 && /** @type {ShadowRoot} */
  root3.host) {
    return (
      /** @type {ShadowRoot} */
      root3
    );
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  style_element.textContent = "/* empty */";
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(
    /** @type {Document} */
    node.head || node,
    style
  );
  return style.sheet;
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data2) {
  return document.createTextNode(data2);
}
function space() {
  return text(" ");
}
function listen(node, event, handler2, options) {
  node.addEventListener(event, handler2, options);
  return () => node.removeEventListener(event, handler2, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text4, data2) {
  data2 = "" + data2;
  if (text4.data === data2)
    return;
  text4.data = /** @type {string} */
  data2;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function get_custom_elements_slots(element2) {
  const result = {};
  element2.childNodes.forEach(
    /** @param {Element} node */
    (node) => {
      result[node.slot || "default"] = true;
    }
  );
  return result;
}

// node_modules/svelte/src/runtime/internal/style_manager.js
var managed_styles = /* @__PURE__ */ new Map();
var active = 0;
function hash(str) {
  let hash2 = 5381;
  let i = str.length;
  while (i--)
    hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
  return hash2 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b2, duration, delay, ease, fn3, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t8 = a + (b2 - a) * ease(p);
    keyframes += p * 100 + `%{${fn3(t8, 1 - t8)}}
`;
  }
  const rule = keyframes + `100% {${fn3(b2, 1 - b2)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next2 = previous.filter(
    name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1
    // remove all Svelte animations
  );
  const deleted = previous.length - next2.length;
  if (deleted) {
    node.style.animation = next2.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { ownerNode } = info.stylesheet;
      if (ownerNode)
        detach(ownerNode);
    });
    managed_styles.clear();
  });
}

// node_modules/svelte/src/runtime/internal/animations.js
function create_animation(node, from, fn3, params) {
  if (!from)
    return noop;
  const to2 = node.getBoundingClientRect();
  if (from.left === to2.left && from.right === to2.right && from.top === to2.top && from.bottom === to2.bottom)
    return noop;
  const {
    delay = 0,
    duration = 300,
    easing = identity,
    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
    start: start_time = now() + delay,
    // @ts-ignore todo:
    end: end2 = start_time + duration,
    tick: tick2 = noop,
    css: css2
  } = fn3(node, { from, to: to2 }, params);
  let running = true;
  let started = false;
  let name;
  function start() {
    if (css2) {
      name = create_rule(node, 0, 1, duration, delay, easing, css2);
    }
    if (!delay) {
      started = true;
    }
  }
  function stop() {
    if (css2)
      delete_rule(node, name);
    running = false;
  }
  loop((now2) => {
    if (!started && now2 >= start_time) {
      started = true;
    }
    if (started && now2 >= end2) {
      tick2(1, 0);
      stop();
    }
    if (!running) {
      return false;
    }
    if (started) {
      const p = now2 - start_time;
      const t8 = 0 + 1 * easing(p / duration);
      tick2(t8, 1 - t8);
    }
    return true;
  });
  start();
  tick2(0, 1);
  return stop;
}
function fix_position(node) {
  const style = getComputedStyle(node);
  if (style.position !== "absolute" && style.position !== "fixed") {
    const { width, height } = style;
    const a = node.getBoundingClientRect();
    node.style.position = "absolute";
    node.style.width = width;
    node.style.height = height;
    add_transform(node, a);
  }
}
function add_transform(node, a) {
  const b2 = node.getBoundingClientRect();
  if (a.left !== b2.left || a.top !== b2.top) {
    const style = getComputedStyle(node);
    const transform = style.transform === "none" ? "" : style.transform;
    node.style.transform = `${transform} translate(${a.left - b2.left}px, ${a.top - b2.top}px)`;
  }
}

// node_modules/svelte/src/runtime/internal/lifecycle.js
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn3) {
  get_current_component().$$.on_mount.push(fn3);
}

// node_modules/svelte/src/runtime/internal/scheduler.js
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = /* @__PURE__ */ Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn3) {
  render_callbacks.push(fn3);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) => c());
  render_callbacks = filtered;
}

// node_modules/svelte/src/runtime/internal/transitions.js
var outroing = /* @__PURE__ */ new Set();
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}

// node_modules/svelte/src/runtime/internal/each.js
function ensure_array_like(array_like_or_iterator) {
  return (array_like_or_iterator == null ? void 0 : array_like_or_iterator.length) !== void 0 ? array_like_or_iterator : Array.from(array_like_or_iterator);
}
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function fix_and_destroy_block(block, lookup) {
  block.f();
  destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block3, next2, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  const updates = [];
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block3(key, child_ctx);
      block.c();
    } else if (dynamic) {
      updates.push(() => block.p(child_ctx, dirty));
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next2);
    lookup.set(block.key, block);
    next2 = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next2 = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  run_all(updates);
  return new_blocks;
}

// node_modules/svelte/src/shared/boolean_attributes.js
var _boolean_attributes = (
  /** @type {const} */
  [
    "allowfullscreen",
    "allowpaymentrequest",
    "async",
    "autofocus",
    "autoplay",
    "checked",
    "controls",
    "default",
    "defer",
    "disabled",
    "formnovalidate",
    "hidden",
    "inert",
    "ismap",
    "loop",
    "multiple",
    "muted",
    "nomodule",
    "novalidate",
    "open",
    "playsinline",
    "readonly",
    "required",
    "reversed",
    "selected"
  ]
);
var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);

// node_modules/svelte/src/runtime/internal/Component.js
function mount_component(component, target, anchor) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
    if (component.$$.on_destroy) {
      component.$$.on_destroy.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance4, create_fragment4, not_equal, props, append_styles2 = null, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance4 ? instance4(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment4 ? create_fragment4($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor($$componentCtor, $$slots, use_shadow_dom) {
      super();
      /** The Svelte component constructor */
      __publicField(this, "$$ctor");
      /** Slots */
      __publicField(this, "$$s");
      /** The Svelte component instance */
      __publicField(this, "$$c");
      /** Whether or not the custom element is connected */
      __publicField(this, "$$cn", false);
      /** Component props data */
      __publicField(this, "$$d", {});
      /** `true` if currently in the process of reflecting component props back to attributes */
      __publicField(this, "$$r", false);
      /** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */
      __publicField(this, "$$p_d", {});
      /** @type {Record<string, Function[]>} Event listeners */
      __publicField(this, "$$l", {});
      /** @type {Map<Function, Function>} Event listener unsubscribe functions */
      __publicField(this, "$$l_u", /* @__PURE__ */ new Map());
      this.$$ctor = $$componentCtor;
      this.$$s = $$slots;
      if (use_shadow_dom) {
        this.attachShadow({ mode: "open" });
      }
    }
    addEventListener(type, listener, options) {
      this.$$l[type] = this.$$l[type] || [];
      this.$$l[type].push(listener);
      if (this.$$c) {
        const unsub = this.$$c.$on(type, listener);
        this.$$l_u.set(listener, unsub);
      }
      super.addEventListener(type, listener, options);
    }
    removeEventListener(type, listener, options) {
      super.removeEventListener(type, listener, options);
      if (this.$$c) {
        const unsub = this.$$l_u.get(listener);
        if (unsub) {
          unsub();
          this.$$l_u.delete(listener);
        }
      }
    }
    async connectedCallback() {
      this.$$cn = true;
      if (!this.$$c) {
        let create_slot = function(name) {
          return () => {
            let node;
            const obj = {
              c: function create() {
                node = element("slot");
                if (name !== "default") {
                  attr(node, "name", name);
                }
              },
              /**
               * @param {HTMLElement} target
               * @param {HTMLElement} [anchor]
               */
              m: function mount(target, anchor) {
                insert(target, node, anchor);
              },
              d: function destroy(detaching) {
                if (detaching) {
                  detach(node);
                }
              }
            };
            return obj;
          };
        };
        await Promise.resolve();
        if (!this.$$cn) {
          return;
        }
        const $$slots = {};
        const existing_slots = get_custom_elements_slots(this);
        for (const name of this.$$s) {
          if (name in existing_slots) {
            $$slots[name] = [create_slot(name)];
          }
        }
        for (const attribute of this.attributes) {
          const name = this.$$g_p(attribute.name);
          if (!(name in this.$$d)) {
            this.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, "toProp");
          }
        }
        for (const key in this.$$p_d) {
          if (!(key in this.$$d) && this[key] !== void 0) {
            this.$$d[key] = this[key];
            delete this[key];
          }
        }
        this.$$c = new this.$$ctor({
          target: this.shadowRoot || this,
          props: {
            ...this.$$d,
            $$slots,
            $$scope: {
              ctx: []
            }
          }
        });
        const reflect_attributes = () => {
          this.$$r = true;
          for (const key in this.$$p_d) {
            this.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];
            if (this.$$p_d[key].reflect) {
              const attribute_value = get_custom_element_value(
                key,
                this.$$d[key],
                this.$$p_d,
                "toAttribute"
              );
              if (attribute_value == null) {
                this.removeAttribute(this.$$p_d[key].attribute || key);
              } else {
                this.setAttribute(this.$$p_d[key].attribute || key, attribute_value);
              }
            }
          }
          this.$$r = false;
        };
        this.$$c.$$.after_update.push(reflect_attributes);
        reflect_attributes();
        for (const type in this.$$l) {
          for (const listener of this.$$l[type]) {
            const unsub = this.$$c.$on(type, listener);
            this.$$l_u.set(listener, unsub);
          }
        }
        this.$$l = {};
      }
    }
    // We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte
    // and setting attributes through setAttribute etc, this is helpful
    attributeChangedCallback(attr3, _oldValue, newValue) {
      var _a3;
      if (this.$$r)
        return;
      attr3 = this.$$g_p(attr3);
      this.$$d[attr3] = get_custom_element_value(attr3, newValue, this.$$p_d, "toProp");
      (_a3 = this.$$c) == null ? void 0 : _a3.$set({ [attr3]: this.$$d[attr3] });
    }
    disconnectedCallback() {
      this.$$cn = false;
      Promise.resolve().then(() => {
        if (!this.$$cn) {
          this.$$c.$destroy();
          this.$$c = void 0;
        }
      });
    }
    $$g_p(attribute_name) {
      return Object.keys(this.$$p_d).find(
        (key) => this.$$p_d[key].attribute === attribute_name || !this.$$p_d[key].attribute && key.toLowerCase() === attribute_name
      ) || attribute_name;
    }
  };
}
function get_custom_element_value(prop2, value, props_definition, transform) {
  var _a3;
  const type = (_a3 = props_definition[prop2]) == null ? void 0 : _a3.type;
  value = type === "Boolean" && typeof value !== "boolean" ? value != null : value;
  if (!transform || !props_definition[prop2]) {
    return value;
  } else if (transform === "toAttribute") {
    switch (type) {
      case "Object":
      case "Array":
        return value == null ? null : JSON.stringify(value);
      case "Boolean":
        return value ? "" : null;
      case "Number":
        return value == null ? null : value;
      default:
        return value;
    }
  } else {
    switch (type) {
      case "Object":
      case "Array":
        return value && JSON.parse(value);
      case "Boolean":
        return value;
      case "Number":
        return value != null ? +value : value;
      default:
        return value;
    }
  }
}
var SvelteComponent = class {
  constructor() {
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$");
    /**
     * ### PRIVATE API
     *
     * Do not use, may change at any time
     *
     * @type {any}
     */
    __publicField(this, "$$set");
  }
  /** @returns {void} */
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  /**
   * @template {Extract<keyof Events, string>} K
   * @param {K} type
   * @param {((e: Events[K]) => void) | null | undefined} callback
   * @returns {() => void}
   */
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index2 = callbacks.indexOf(callback);
      if (index2 !== -1)
        callbacks.splice(index2, 1);
    };
  }
  /**
   * @param {Partial<Props>} props
   * @returns {void}
   */
  $set(props) {
    if (this.$$set && !is_empty(props)) {
      this.$$.skip_bound = true;
      this.$$set(props);
      this.$$.skip_bound = false;
    }
  }
};

// node_modules/svelte/src/shared/version.js
var PUBLIC_VERSION = "4";

// node_modules/svelte/src/runtime/internal/disclose-version/index.js
if (typeof window !== "undefined")
  (window.__svelte || (window.__svelte = { v: /* @__PURE__ */ new Set() })).v.add(PUBLIC_VERSION);

// node_modules/tslib/tslib.es6.js
function __awaiter(thisArg, _arguments, P3, generator) {
  function adopt(value) {
    return value instanceof P3 ? value : new P3(function(resolve) {
      resolve(value);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// src/components/Playground.svelte
var import_obsidian8 = require("obsidian");

// node_modules/livecodes/livecodes.js
var Y = Object.create;
var q = Object.defineProperty;
var F = Object.getOwnPropertyDescriptor;
var V = Object.getOwnPropertyNames;
var ee = Object.getPrototypeOf;
var te = Object.prototype.hasOwnProperty;
var oe = (c, g) => () => (g || c((g = { exports: {} }).exports, g), g.exports);
var ne = (c, g, P3, w3) => {
  if (g && typeof g == "object" || typeof g == "function")
    for (let v3 of V(g))
      !te.call(c, v3) && v3 !== P3 && q(c, v3, { get: () => g[v3], enumerable: !(w3 = F(g, v3)) || w3.enumerable });
  return c;
};
var re = (c, g, P3) => (P3 = c != null ? Y(ee(c)) : {}, ne(g || !c || !c.__esModule ? q(P3, "default", { value: c, enumerable: true }) : P3, c));
var Q = oe((ae4, H3) => {
  var N4 = function() {
    var c = String.fromCharCode, g = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", P3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$", w3 = {};
    function v3(o, n) {
      if (!w3[o]) {
        w3[o] = {};
        for (var d = 0; d < o.length; d++)
          w3[o][o.charAt(d)] = d;
      }
      return w3[o][n];
    }
    var b2 = { compressToBase64: function(o) {
      if (o == null)
        return "";
      var n = b2._compress(o, 6, function(d) {
        return g.charAt(d);
      });
      switch (n.length % 4) {
        default:
        case 0:
          return n;
        case 1:
          return n + "===";
        case 2:
          return n + "==";
        case 3:
          return n + "=";
      }
    }, decompressFromBase64: function(o) {
      return o == null ? "" : o == "" ? null : b2._decompress(o.length, 32, function(n) {
        return v3(g, o.charAt(n));
      });
    }, compressToUTF16: function(o) {
      return o == null ? "" : b2._compress(o, 15, function(n) {
        return c(n + 32);
      }) + " ";
    }, decompressFromUTF16: function(o) {
      return o == null ? "" : o == "" ? null : b2._decompress(o.length, 16384, function(n) {
        return o.charCodeAt(n) - 32;
      });
    }, compressToUint8Array: function(o) {
      for (var n = b2.compress(o), d = new Uint8Array(n.length * 2), s = 0, i = n.length; s < i; s++) {
        var a = n.charCodeAt(s);
        d[s * 2] = a >>> 8, d[s * 2 + 1] = a % 256;
      }
      return d;
    }, decompressFromUint8Array: function(o) {
      if (o == null)
        return b2.decompress(o);
      for (var n = new Array(o.length / 2), d = 0, s = n.length; d < s; d++)
        n[d] = o[d * 2] * 256 + o[d * 2 + 1];
      var i = [];
      return n.forEach(function(a) {
        i.push(c(a));
      }), b2.decompress(i.join(""));
    }, compressToEncodedURIComponent: function(o) {
      return o == null ? "" : b2._compress(o, 6, function(n) {
        return P3.charAt(n);
      });
    }, decompressFromEncodedURIComponent: function(o) {
      return o == null ? "" : o == "" ? null : (o = o.replace(/ /g, "+"), b2._decompress(o.length, 32, function(n) {
        return v3(P3, o.charAt(n));
      }));
    }, compress: function(o) {
      return b2._compress(o, 16, function(n) {
        return c(n);
      });
    }, _compress: function(o, n, d) {
      if (o == null)
        return "";
      var s, i, a = {}, y2 = {}, E2 = "", L4 = "", m = "", x3 = 2, S3 = 3, f2 = 2, p = [], e = 0, t8 = 0, A3;
      for (A3 = 0; A3 < o.length; A3 += 1)
        if (E2 = o.charAt(A3), Object.prototype.hasOwnProperty.call(a, E2) || (a[E2] = S3++, y2[E2] = true), L4 = m + E2, Object.prototype.hasOwnProperty.call(a, L4))
          m = L4;
        else {
          if (Object.prototype.hasOwnProperty.call(y2, m)) {
            if (m.charCodeAt(0) < 256) {
              for (s = 0; s < f2; s++)
                e = e << 1, t8 == n - 1 ? (t8 = 0, p.push(d(e)), e = 0) : t8++;
              for (i = m.charCodeAt(0), s = 0; s < 8; s++)
                e = e << 1 | i & 1, t8 == n - 1 ? (t8 = 0, p.push(d(e)), e = 0) : t8++, i = i >> 1;
            } else {
              for (i = 1, s = 0; s < f2; s++)
                e = e << 1 | i, t8 == n - 1 ? (t8 = 0, p.push(d(e)), e = 0) : t8++, i = 0;
              for (i = m.charCodeAt(0), s = 0; s < 16; s++)
                e = e << 1 | i & 1, t8 == n - 1 ? (t8 = 0, p.push(d(e)), e = 0) : t8++, i = i >> 1;
            }
            x3--, x3 == 0 && (x3 = Math.pow(2, f2), f2++), delete y2[m];
          } else
            for (i = a[m], s = 0; s < f2; s++)
              e = e << 1 | i & 1, t8 == n - 1 ? (t8 = 0, p.push(d(e)), e = 0) : t8++, i = i >> 1;
          x3--, x3 == 0 && (x3 = Math.pow(2, f2), f2++), a[L4] = S3++, m = String(E2);
        }
      if (m !== "") {
        if (Object.prototype.hasOwnProperty.call(y2, m)) {
          if (m.charCodeAt(0) < 256) {
            for (s = 0; s < f2; s++)
              e = e << 1, t8 == n - 1 ? (t8 = 0, p.push(d(e)), e = 0) : t8++;
            for (i = m.charCodeAt(0), s = 0; s < 8; s++)
              e = e << 1 | i & 1, t8 == n - 1 ? (t8 = 0, p.push(d(e)), e = 0) : t8++, i = i >> 1;
          } else {
            for (i = 1, s = 0; s < f2; s++)
              e = e << 1 | i, t8 == n - 1 ? (t8 = 0, p.push(d(e)), e = 0) : t8++, i = 0;
            for (i = m.charCodeAt(0), s = 0; s < 16; s++)
              e = e << 1 | i & 1, t8 == n - 1 ? (t8 = 0, p.push(d(e)), e = 0) : t8++, i = i >> 1;
          }
          x3--, x3 == 0 && (x3 = Math.pow(2, f2), f2++), delete y2[m];
        } else
          for (i = a[m], s = 0; s < f2; s++)
            e = e << 1 | i & 1, t8 == n - 1 ? (t8 = 0, p.push(d(e)), e = 0) : t8++, i = i >> 1;
        x3--, x3 == 0 && (x3 = Math.pow(2, f2), f2++);
      }
      for (i = 2, s = 0; s < f2; s++)
        e = e << 1 | i & 1, t8 == n - 1 ? (t8 = 0, p.push(d(e)), e = 0) : t8++, i = i >> 1;
      for (; ; )
        if (e = e << 1, t8 == n - 1) {
          p.push(d(e));
          break;
        } else
          t8++;
      return p.join("");
    }, decompress: function(o) {
      return o == null ? "" : o == "" ? null : b2._decompress(o.length, 32768, function(n) {
        return o.charCodeAt(n);
      });
    }, _decompress: function(o, n, d) {
      var s = [], i, a = 4, y2 = 4, E2 = 3, L4 = "", m = [], x3, S3, f2, p, e, t8, A3, l = { val: d(0), position: n, index: 1 };
      for (x3 = 0; x3 < 3; x3 += 1)
        s[x3] = x3;
      for (f2 = 0, e = Math.pow(2, 2), t8 = 1; t8 != e; )
        p = l.val & l.position, l.position >>= 1, l.position == 0 && (l.position = n, l.val = d(l.index++)), f2 |= (p > 0 ? 1 : 0) * t8, t8 <<= 1;
      switch (i = f2) {
        case 0:
          for (f2 = 0, e = Math.pow(2, 8), t8 = 1; t8 != e; )
            p = l.val & l.position, l.position >>= 1, l.position == 0 && (l.position = n, l.val = d(l.index++)), f2 |= (p > 0 ? 1 : 0) * t8, t8 <<= 1;
          A3 = c(f2);
          break;
        case 1:
          for (f2 = 0, e = Math.pow(2, 16), t8 = 1; t8 != e; )
            p = l.val & l.position, l.position >>= 1, l.position == 0 && (l.position = n, l.val = d(l.index++)), f2 |= (p > 0 ? 1 : 0) * t8, t8 <<= 1;
          A3 = c(f2);
          break;
        case 2:
          return "";
      }
      for (s[3] = A3, S3 = A3, m.push(A3); ; ) {
        if (l.index > o)
          return "";
        for (f2 = 0, e = Math.pow(2, E2), t8 = 1; t8 != e; )
          p = l.val & l.position, l.position >>= 1, l.position == 0 && (l.position = n, l.val = d(l.index++)), f2 |= (p > 0 ? 1 : 0) * t8, t8 <<= 1;
        switch (A3 = f2) {
          case 0:
            for (f2 = 0, e = Math.pow(2, 8), t8 = 1; t8 != e; )
              p = l.val & l.position, l.position >>= 1, l.position == 0 && (l.position = n, l.val = d(l.index++)), f2 |= (p > 0 ? 1 : 0) * t8, t8 <<= 1;
            s[y2++] = c(f2), A3 = y2 - 1, a--;
            break;
          case 1:
            for (f2 = 0, e = Math.pow(2, 16), t8 = 1; t8 != e; )
              p = l.val & l.position, l.position >>= 1, l.position == 0 && (l.position = n, l.val = d(l.index++)), f2 |= (p > 0 ? 1 : 0) * t8, t8 <<= 1;
            s[y2++] = c(f2), A3 = y2 - 1, a--;
            break;
          case 2:
            return m.join("");
        }
        if (a == 0 && (a = Math.pow(2, E2), E2++), s[A3])
          L4 = s[A3];
        else if (A3 === y2)
          L4 = S3 + S3.charAt(0);
        else
          return null;
        m.push(L4), s[y2++] = S3 + L4.charAt(0), a--, S3 = L4, a == 0 && (a = Math.pow(2, E2), E2++);
      }
    } };
    return b2;
  }();
  typeof define == "function" && define.amd ? define(function() {
    return N4;
  }) : typeof H3 != "undefined" && H3 != null && (H3.exports = N4);
});
var G = re(Q());
async function se(c, g = {}) {
  typeof c == "object" && !(c instanceof HTMLElement) && c.view === "headless" && (g = c, c = null);
  let { appUrl: P3 = "https://livecodes.io/", params: w3 = {}, config: v3 = {}, import: b2, lite: o, loading: n = "lazy", template: d, view: s = "split" } = g, i = s === "headless", a = null;
  if (typeof c == "string")
    a = document.querySelector(c);
  else if (c instanceof HTMLElement)
    a = c;
  else if (!(i && typeof c == "object"))
    throw new Error("A valid container element is required.");
  if (!a)
    if (i)
      a = document.createElement("div"), K3(a), document.body.appendChild(a);
    else
      throw new Error(`Cannot find element: "${c}"`);
  let y2;
  try {
    y2 = new URL(P3);
  } catch (r) {
    throw new Error(`"${P3}" is not a valid URL.`);
  }
  let E2 = y2.origin;
  if (typeof w3 == "object" && Object.keys(w3).forEach((r) => {
    y2.searchParams.set(r, String(w3[r]));
  }), typeof v3 == "string")
    try {
      new URL(v3), y2.searchParams.set("config", v3);
    } catch (r) {
      throw new Error('"config" is not a valid URL or configuration object.');
    }
  else if (typeof v3 == "object")
    Object.keys(v3).length > 0 && y2.searchParams.set("config", "sdk");
  else
    throw new Error('"config" is not a valid URL or configuration object.');
  d && y2.searchParams.set("template", d), b2 && y2.searchParams.set("x", b2), o && y2.searchParams.set("lite", "true"), y2.searchParams.set("embed", "true"), y2.searchParams.set("loading", i ? "eager" : n), y2.searchParams.set("view", s);
  let L4 = false, m = "Cannot call API methods after calling `destroy()`.", S3 = await (() => new Promise((r) => {
    var O2, T3, C2, U3, R3, j4, _2, z3, W4;
    if (!a)
      return;
    let h2 = a.dataset.height || a.style.height;
    if (h2 && !i) {
      let k3 = isNaN(Number(h2)) ? h2 : h2 + "px";
      a.style.height = k3;
    }
    a.dataset.defaultStyles !== "false" && !i && ((O2 = a.style).backgroundColor || (O2.backgroundColor = "#fff"), (T3 = a.style).border || (T3.border = "1px solid black"), (C2 = a.style).borderRadius || (C2.borderRadius = "5px"), (U3 = a.style).boxSizing || (U3.boxSizing = "border-box"), (R3 = a.style).padding || (R3.padding = "0"), (j4 = a.style).width || (j4.width = "100%"), (_2 = a.style).height || (_2.height = a.style.height || "300px"), a.style.minHeight = "200px", a.style.flexGrow = "1", (z3 = a.style).overflow || (z3.overflow = "hidden"), (W4 = a.style).resize || (W4.resize = "vertical"));
    let u = document.createElement("iframe");
    u.setAttribute("allow", "accelerometer; camera; encrypted-media; display-capture; geolocation; gyroscope; microphone; midi; clipboard-read; clipboard-write; web-share"), u.setAttribute("allowtransparency", "true"), u.setAttribute("allowpaymentrequest", "true"), u.setAttribute("allowfullscreen", "true"), u.setAttribute("sandbox", "allow-same-origin allow-downloads allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-presentation allow-scripts");
    let M4 = n === "eager" ? "eager" : "lazy";
    u.setAttribute("loading", M4), u.classList.add("livecodes"), i ? K3(u) : (u.style.height = "100%", u.style.minHeight = "200px", u.style.width = "100%", u.style.margin = "0", u.style.border = "0", u.style.borderRadius = a.style.borderRadius), addEventListener("message", function k3(D) {
      var B, J4;
      D.source !== u.contentWindow || D.origin !== E2 || ((B = D.data) == null ? void 0 : B.type) !== "livecodes-get-config" || (removeEventListener("message", k3), (J4 = u.contentWindow) == null || J4.postMessage({ type: "livecodes-config", payload: v3 }, E2));
    }), u.onload = () => {
      r(u);
    }, u.src = y2.href, a.appendChild(u);
  }))(), f2 = new Promise((r) => {
    addEventListener("message", function h2(u) {
      var M4;
      u.source !== S3.contentWindow || u.origin !== E2 || ((M4 = u.data) == null ? void 0 : M4.type) !== "livecodes-ready" || (removeEventListener("message", h2), r(), f2.settled = true);
    });
  }), p = () => L4 ? Promise.reject(m) : new Promise(async (r) => {
    var u;
    f2.settled && r();
    let h2 = { type: "livecodes-load" };
    (u = S3.contentWindow) == null || u.postMessage(h2, E2), await f2, r();
  }), e = (r, h2) => new Promise(async (u, M4) => {
    var T3;
    if (L4)
      return M4(m);
    await p();
    let O2 = X3();
    addEventListener("message", function C2(U3) {
      var R3, j4;
      if (!(U3.source !== S3.contentWindow || U3.origin !== E2 || ((R3 = U3.data) == null ? void 0 : R3.type) !== "livecodes-api-response" || ((j4 = U3.data) == null ? void 0 : j4.id) !== O2) && U3.data.method === r) {
        removeEventListener("message", C2);
        let _2 = U3.data.payload;
        _2 != null && _2.error ? M4(_2.error) : u(_2);
      }
    }), (T3 = S3.contentWindow) == null || T3.postMessage({ method: r, id: O2, args: h2 }, E2);
  }), t8 = {}, A3 = ["load", "ready", "code", "console", "tests", "destroy"], l = (r, h2) => {
    var u;
    if (L4)
      throw new Error(m);
    return A3.includes(r) ? (e("watch", [r]), t8[r] || (t8[r] = []), (u = t8[r]) == null || u.push(h2), { remove: () => {
      var M4, O2;
      t8[r] = (M4 = t8[r]) == null ? void 0 : M4.filter((T3) => T3 !== h2), ((O2 = t8[r]) == null ? void 0 : O2.length) === 0 && e("watch", [r, "unsubscribe"]);
    } }) : { remove: () => {
    } };
  }, $4 = (r) => ({ "livecodes-app-loaded": "load", "livecodes-ready": "ready", "livecodes-change": "code", "livecodes-console": "console", "livecodes-test-results": "tests", "livecodes-destroy": "destroy" })[r];
  addEventListener("message", async (r) => {
    var M4, O2, T3, C2;
    let h2 = $4((O2 = (M4 = r.data) == null ? void 0 : M4.type) != null ? O2 : "");
    if (r.source !== S3.contentWindow || r.origin !== E2 || !h2 || !t8[h2])
      return;
    let u = (T3 = r.data) == null ? void 0 : T3.payload;
    (C2 = t8[h2]) == null || C2.forEach((U3) => {
      U3(u);
    });
  });
  let I2 = () => {
    var r;
    Object.values(t8).forEach((h2) => {
      h2.length = 0;
    }), (r = S3 == null ? void 0 : S3.remove) == null || r.call(S3), L4 = true;
  };
  n === "lazy" && "IntersectionObserver" in window && new IntersectionObserver((h2, u) => {
    h2.forEach(async (M4) => {
      M4.isIntersecting && (await p(), u.unobserve(a));
    });
  }, { rootMargin: "150px" }).observe(a);
  function K3(r) {
    r.style.position = "absolute", r.style.top = "0", r.style.visibility = "hidden", r.style.opacity = "0";
  }
  let X3 = () => (String(Math.random()) + Date.now().toFixed()).replace("0.", "");
  return { load: () => p(), run: () => e("run"), format: (r) => e("format", [r]), getShareUrl: (r) => e("getShareUrl", [r]), getConfig: (r) => e("getConfig", [r]), setConfig: (r) => e("setConfig", [r]), getCode: () => e("getCode"), show: (r, h2) => e("show", [r, h2]), runTests: () => e("runTests"), onChange: (r) => l("code", r), watch: l, exec: (r, ...h2) => e("exec", [r, ...h2]), destroy: () => f2.settled ? e("destroy").then(I2) : L4 ? Promise.reject(m) : (I2(), Promise.resolve()) };
}
var Z;
globalThis.document && document.currentScript && "prefill" in ((Z = document.currentScript) == null ? void 0 : Z.dataset) && window.addEventListener("load", () => {
  document.querySelectorAll(".livecodes").forEach((c) => {
    let g, P3 = c.dataset.options;
    if (P3)
      try {
        g = JSON.parse(P3);
      } catch (o) {
      }
    let w3, v3 = c.dataset.config || c.dataset.prefill;
    if (v3)
      try {
        w3 = JSON.parse(v3);
      } catch (o) {
      }
    let b2 = encodeURIComponent(c.outerHTML);
    c.innerHTML = "", se(c, { import: "dom/" + b2, ...g, ...w3 ? { config: w3 } : {} });
  });
});

// node_modules/prettier/standalone.mjs
var fu = Object.create;
var $e = Object.defineProperty;
var Fu = Object.getOwnPropertyDescriptor;
var pu = Object.getOwnPropertyNames;
var du = Object.getPrototypeOf;
var mu = Object.prototype.hasOwnProperty;
var Eu = (e, t8) => () => (e && (t8 = e(e = 0)), t8);
var Me = (e, t8) => () => (t8 || e((t8 = { exports: {} }).exports, t8), t8.exports);
var We = (e, t8) => {
  for (var r in t8)
    $e(e, r, { get: t8[r], enumerable: true });
};
var ur = (e, t8, r, n) => {
  if (t8 && typeof t8 == "object" || typeof t8 == "function")
    for (let o of pu(t8))
      !mu.call(e, o) && o !== r && $e(e, o, { get: () => t8[o], enumerable: !(n = Fu(t8, o)) || n.enumerable });
  return e;
};
var he = (e, t8, r) => (r = e != null ? fu(du(e)) : {}, ur(t8 || !e || !e.__esModule ? $e(r, "default", { value: e, enumerable: true }) : r, e));
var Cu = (e) => ur($e({}, "__esModule", { value: true }), e);
var hu = (e, t8, r) => {
  if (!t8.has(e))
    throw TypeError("Cannot " + r);
};
var ht = (e, t8, r) => {
  if (t8.has(e))
    throw TypeError("Cannot add the same private member more than once");
  t8 instanceof WeakSet ? t8.add(e) : t8.set(e, r);
};
var ce = (e, t8, r) => (hu(e, t8, "access private method"), r);
var ir = Me((gt3) => {
  "use strict";
  Object.defineProperty(gt3, "__esModule", { value: true });
  gt3.default = or3;
  function or3() {
  }
  or3.prototype = { diff: function(t8, r) {
    var n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, o = n.callback;
    typeof n == "function" && (o = n, n = {}), this.options = n;
    var u = this;
    function i(F3) {
      return o ? (setTimeout(function() {
        o(void 0, F3);
      }, 0), true) : F3;
    }
    t8 = this.castInput(t8), r = this.castInput(r), t8 = this.removeEmpty(this.tokenize(t8)), r = this.removeEmpty(this.tokenize(r));
    var s = r.length, D = t8.length, a = 1, c = s + D;
    n.maxEditLength && (c = Math.min(c, n.maxEditLength));
    var d = [{ newPos: -1, components: [] }], f2 = this.extractCommon(d[0], r, t8, 0);
    if (d[0].newPos + 1 >= s && f2 + 1 >= D)
      return i([{ value: this.join(r), count: r.length }]);
    function p() {
      for (var F3 = -1 * a; F3 <= a; F3 += 2) {
        var m = void 0, E2 = d[F3 - 1], C2 = d[F3 + 1], g = (C2 ? C2.newPos : 0) - F3;
        E2 && (d[F3 - 1] = void 0);
        var h2 = E2 && E2.newPos + 1 < s, B = C2 && 0 <= g && g < D;
        if (!h2 && !B) {
          d[F3] = void 0;
          continue;
        }
        if (!h2 || B && E2.newPos < C2.newPos ? (m = Au2(C2), u.pushComponent(m.components, void 0, true)) : (m = E2, m.newPos++, u.pushComponent(m.components, true, void 0)), g = u.extractCommon(m, r, t8, F3), m.newPos + 1 >= s && g + 1 >= D)
          return i(yu2(u, m.components, r, t8, u.useLongestToken));
        d[F3] = m;
      }
      a++;
    }
    if (o)
      (function F3() {
        setTimeout(function() {
          if (a > c)
            return o();
          p() || F3();
        }, 0);
      })();
    else
      for (; a <= c; ) {
        var l = p();
        if (l)
          return l;
      }
  }, pushComponent: function(t8, r, n) {
    var o = t8[t8.length - 1];
    o && o.added === r && o.removed === n ? t8[t8.length - 1] = { count: o.count + 1, added: r, removed: n } : t8.push({ count: 1, added: r, removed: n });
  }, extractCommon: function(t8, r, n, o) {
    for (var u = r.length, i = n.length, s = t8.newPos, D = s - o, a = 0; s + 1 < u && D + 1 < i && this.equals(r[s + 1], n[D + 1]); )
      s++, D++, a++;
    return a && t8.components.push({ count: a }), t8.newPos = s, D;
  }, equals: function(t8, r) {
    return this.options.comparator ? this.options.comparator(t8, r) : t8 === r || this.options.ignoreCase && t8.toLowerCase() === r.toLowerCase();
  }, removeEmpty: function(t8) {
    for (var r = [], n = 0; n < t8.length; n++)
      t8[n] && r.push(t8[n]);
    return r;
  }, castInput: function(t8) {
    return t8;
  }, tokenize: function(t8) {
    return t8.split("");
  }, join: function(t8) {
    return t8.join("");
  } };
  function yu2(e, t8, r, n, o) {
    for (var u = 0, i = t8.length, s = 0, D = 0; u < i; u++) {
      var a = t8[u];
      if (a.removed) {
        if (a.value = e.join(n.slice(D, D + a.count)), D += a.count, u && t8[u - 1].added) {
          var d = t8[u - 1];
          t8[u - 1] = t8[u], t8[u] = d;
        }
      } else {
        if (!a.added && o) {
          var c = r.slice(s, s + a.count);
          c = c.map(function(p, l) {
            var F3 = n[D + l];
            return F3.length > p.length ? F3 : p;
          }), a.value = e.join(c);
        } else
          a.value = e.join(r.slice(s, s + a.count));
        s += a.count, a.added || (D += a.count);
      }
    }
    var f2 = t8[i - 1];
    return i > 1 && typeof f2.value == "string" && (f2.added || f2.removed) && e.equals("", f2.value) && (t8[i - 2].value += f2.value, t8.pop()), t8;
  }
  function Au2(e) {
    return { newPos: e.newPos, components: e.components.slice(0) };
  }
});
var sr = Me((ye2) => {
  "use strict";
  Object.defineProperty(ye2, "__esModule", { value: true });
  ye2.diffArrays = ku2;
  ye2.arrayDiff = void 0;
  var Bu2 = _u2(ir());
  function _u2(e) {
    return e && e.__esModule ? e : { default: e };
  }
  var ge3 = new Bu2.default();
  ye2.arrayDiff = ge3;
  ge3.tokenize = function(e) {
    return e.slice();
  };
  ge3.join = ge3.removeEmpty = function(e) {
    return e;
  };
  function ku2(e, t8, r) {
    return ge3.diff(e, t8, r);
  }
});
var Re = Me((Xs, en2) => {
  "use strict";
  var Qr2 = new Proxy(String, { get: () => Qr2 });
  en2.exports = Qr2;
});
var xn = {};
We(xn, { default: () => Co, shouldHighlight: () => Eo });
var Eo;
var Co;
var bn = Eu(() => {
  Eo = () => false, Co = String;
});
var Pn = Me((Et3) => {
  "use strict";
  Object.defineProperty(Et3, "__esModule", { value: true });
  Et3.codeFrameColumns = vn2;
  Et3.default = Bo2;
  var wn2 = (bn(), Cu(xn)), On3 = ho2(Re(), true);
  function Tn2(e) {
    if (typeof WeakMap != "function")
      return null;
    var t8 = /* @__PURE__ */ new WeakMap(), r = /* @__PURE__ */ new WeakMap();
    return (Tn2 = function(n) {
      return n ? r : t8;
    })(e);
  }
  function ho2(e, t8) {
    if (!t8 && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var r = Tn2(t8);
    if (r && r.has(e))
      return r.get(e);
    var n = { __proto__: null }, o = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = o ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, r && r.set(e, n), n;
  }
  var Ht2;
  function go3(e) {
    if (e) {
      var t8;
      return (t8 = Ht2) != null || (Ht2 = new On3.default.constructor({ enabled: true, level: 1 })), Ht2;
    }
    return On3.default;
  }
  var Nn3 = false;
  function yo2(e) {
    return { gutter: e.grey, marker: e.red.bold, message: e.red.bold };
  }
  var Sn3 = /\r\n|[\n\r\u2028\u2029]/;
  function Ao3(e, t8, r) {
    let n = Object.assign({ column: 0, line: -1 }, e.start), o = Object.assign({}, n, e.end), { linesAbove: u = 2, linesBelow: i = 3 } = r || {}, s = n.line, D = n.column, a = o.line, c = o.column, d = Math.max(s - (u + 1), 0), f2 = Math.min(t8.length, a + i);
    s === -1 && (d = 0), a === -1 && (f2 = t8.length);
    let p = a - s, l = {};
    if (p)
      for (let F3 = 0; F3 <= p; F3++) {
        let m = F3 + s;
        if (!D)
          l[m] = true;
        else if (F3 === 0) {
          let E2 = t8[m - 1].length;
          l[m] = [D, E2 - D + 1];
        } else if (F3 === p)
          l[m] = [0, c];
        else {
          let E2 = t8[m - F3].length;
          l[m] = [0, E2];
        }
      }
    else
      D === c ? D ? l[s] = [D, 0] : l[s] = true : l[s] = [D, c - D];
    return { start: d, end: f2, markerLines: l };
  }
  function vn2(e, t8, r = {}) {
    let n = (r.highlightCode || r.forceColor) && (0, wn2.shouldHighlight)(r), o = go3(r.forceColor), u = yo2(o), i = (F3, m) => n ? F3(m) : m, s = e.split(Sn3), { start: D, end: a, markerLines: c } = Ao3(t8, s, r), d = t8.start && typeof t8.start.column == "number", f2 = String(a).length, l = (n ? (0, wn2.default)(e, r) : e).split(Sn3, a).slice(D, a).map((F3, m) => {
      let E2 = D + 1 + m, g = ` ${` ${E2}`.slice(-f2)} |`, h2 = c[E2], B = !c[E2 + 1];
      if (h2) {
        let Z4 = "";
        if (Array.isArray(h2)) {
          let $4 = F3.slice(0, Math.max(h2[0] - 1, 0)).replace(/[^\t]/g, " "), Q4 = h2[1] || 1;
          Z4 = [`
 `, i(u.gutter, g.replace(/\d/g, " ")), " ", $4, i(u.marker, "^").repeat(Q4)].join(""), B && r.message && (Z4 += " " + i(u.message, r.message));
        }
        return [i(u.marker, ">"), i(u.gutter, g), F3.length > 0 ? ` ${F3}` : "", Z4].join("");
      } else
        return ` ${i(u.gutter, g)}${F3.length > 0 ? ` ${F3}` : ""}`;
    }).join(`
`);
    return r.message && !d && (l = `${" ".repeat(f2 + 1)}${r.message}
${l}`), n ? o.reset(l) : l;
  }
  function Bo2(e, t8, r, n = {}) {
    if (!Nn3) {
      Nn3 = true;
      let u = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
      {
        let i = new Error(u);
        i.name = "DeprecationWarning", console.warn(new Error(u));
      }
    }
    return r = Math.max(r, 0), vn2(e, { start: { column: r, line: t8 } }, n);
  }
});
var rr = {};
We(rr, { __debug: () => ui, check: () => ri, doc: () => Qt, format: () => lu, formatWithCursor: () => cu, getSupportInfo: () => ni, util: () => tr, version: () => nu });
var gu = (e, t8, r, n) => {
  if (!(e && t8 == null))
    return t8.replaceAll ? t8.replaceAll(r, n) : r.global ? t8.replace(r, n) : t8.split(r).join(n);
};
var ee2 = gu;
var Hn = he(sr(), 1);
function Dr(e) {
  let t8 = e.indexOf("\r");
  return t8 >= 0 ? e.charAt(t8 + 1) === `
` ? "crlf" : "cr" : "lf";
}
function Ae(e) {
  switch (e) {
    case "cr":
      return "\r";
    case "crlf":
      return `\r
`;
    default:
      return `
`;
  }
}
function yt(e, t8) {
  let r;
  switch (t8) {
    case `
`:
      r = /\n/g;
      break;
    case "\r":
      r = /\r/g;
      break;
    case `\r
`:
      r = /\r\n/g;
      break;
    default:
      throw new Error(`Unexpected "eol" ${JSON.stringify(t8)}.`);
  }
  let n = e.match(r);
  return n ? n.length : 0;
}
function ar(e) {
  return ee2(false, e, /\r\n?/g, `
`);
}
var M = "string";
var j = "array";
var W = "cursor";
var S = "indent";
var T = "align";
var v = "trim";
var _ = "group";
var x = "fill";
var k = "if-break";
var P = "indent-if-break";
var L = "line-suffix";
var I = "line-suffix-boundary";
var A = "line";
var O = "label";
var b = "break-parent";
var Ue = /* @__PURE__ */ new Set([W, S, T, v, _, x, k, P, L, I, A, O, b]);
function xu(e) {
  if (typeof e == "string")
    return M;
  if (Array.isArray(e))
    return j;
  if (!e)
    return;
  let { type: t8 } = e;
  if (Ue.has(t8))
    return t8;
}
var U = xu;
var bu = (e) => new Intl.ListFormat("en-US", { type: "disjunction" }).format(e);
function wu(e) {
  let t8 = e === null ? "null" : typeof e;
  if (t8 !== "string" && t8 !== "object")
    return `Unexpected doc '${t8}', 
Expected it to be 'string' or 'object'.`;
  if (U(e))
    throw new Error("doc is valid.");
  let r = Object.prototype.toString.call(e);
  if (r !== "[object Object]")
    return `Unexpected doc '${r}'.`;
  let n = bu([...Ue].map((o) => `'${o}'`));
  return `Unexpected doc.type '${e.type}'.
Expected it to be ${n}.`;
}
var At = class extends Error {
  constructor(t8) {
    super(wu(t8));
    __publicField(this, "name", "InvalidDocError");
    this.doc = t8;
  }
};
var q2 = At;
var cr = {};
function Ou(e, t8, r, n) {
  let o = [e];
  for (; o.length > 0; ) {
    let u = o.pop();
    if (u === cr) {
      r(o.pop());
      continue;
    }
    r && o.push(u, cr);
    let i = U(u);
    if (!i)
      throw new q2(u);
    if ((t8 == null ? void 0 : t8(u)) !== false)
      switch (i) {
        case j:
        case x: {
          let s = i === j ? u : u.parts;
          for (let D = s.length, a = D - 1; a >= 0; --a)
            o.push(s[a]);
          break;
        }
        case k:
          o.push(u.flatContents, u.breakContents);
          break;
        case _:
          if (n && u.expandedStates)
            for (let s = u.expandedStates.length, D = s - 1; D >= 0; --D)
              o.push(u.expandedStates[D]);
          else
            o.push(u.contents);
          break;
        case T:
        case S:
        case P:
        case O:
        case L:
          o.push(u.contents);
          break;
        case M:
        case W:
        case v:
        case I:
        case A:
        case b:
          break;
        default:
          throw new q2(u);
      }
  }
}
var Be = Ou;
var lr = () => {
};
var z = lr;
var ze = lr;
function ie(e) {
  return z(e), { type: S, contents: e };
}
function oe2(e, t8) {
  return z(t8), { type: T, contents: t8, n: e };
}
function Bt(e, t8 = {}) {
  return z(e), ze(t8.expandedStates, true), { type: _, id: t8.id, contents: e, break: !!t8.shouldBreak, expandedStates: t8.expandedStates };
}
function fr(e) {
  return oe2(Number.NEGATIVE_INFINITY, e);
}
function Fr(e) {
  return oe2({ type: "root" }, e);
}
function pr(e) {
  return oe2(-1, e);
}
function dr(e, t8) {
  return Bt(e[0], { ...t8, expandedStates: e });
}
function Ge(e) {
  return ze(e), { type: x, parts: e };
}
function mr(e, t8 = "", r = {}) {
  return z(e), t8 !== "" && z(t8), { type: k, breakContents: e, flatContents: t8, groupId: r.groupId };
}
function Er(e, t8) {
  return z(e), { type: P, contents: e, groupId: t8.groupId, negate: t8.negate };
}
function _e(e) {
  return z(e), { type: L, contents: e };
}
var Cr = { type: I };
var le = { type: b };
var hr = { type: v };
var ke = { type: A, hard: true };
var _t = { type: A, hard: true, literal: true };
var Ke = { type: A };
var gr = { type: A, soft: true };
var G2 = [ke, le];
var He = [_t, le];
var xe = { type: W };
function be(e, t8) {
  z(e), ze(t8);
  let r = [];
  for (let n = 0; n < t8.length; n++)
    n !== 0 && r.push(e), r.push(t8[n]);
  return r;
}
function qe(e, t8, r) {
  z(e);
  let n = e;
  if (t8 > 0) {
    for (let o = 0; o < Math.floor(t8 / r); ++o)
      n = ie(n);
    n = oe2(t8 % r, n), n = oe2(Number.NEGATIVE_INFINITY, n);
  }
  return n;
}
function yr(e, t8) {
  return z(t8), e ? { type: O, label: e, contents: t8 } : t8;
}
function J(e) {
  var t8;
  if (!e)
    return "";
  if (Array.isArray(e)) {
    let r = [];
    for (let n of e)
      if (Array.isArray(n))
        r.push(...J(n));
      else {
        let o = J(n);
        o !== "" && r.push(o);
      }
    return r;
  }
  return e.type === k ? { ...e, breakContents: J(e.breakContents), flatContents: J(e.flatContents) } : e.type === _ ? { ...e, contents: J(e.contents), expandedStates: (t8 = e.expandedStates) == null ? void 0 : t8.map(J) } : e.type === x ? { type: "fill", parts: e.parts.map(J) } : e.contents ? { ...e, contents: J(e.contents) } : e;
}
function Ar(e) {
  let t8 = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ new Set();
  return n(J(e));
  function n(u, i, s) {
    var D, a;
    if (typeof u == "string")
      return JSON.stringify(u);
    if (Array.isArray(u)) {
      let c = u.map(n).filter(Boolean);
      return c.length === 1 ? c[0] : `[${c.join(", ")}]`;
    }
    if (u.type === A) {
      let c = ((D = s == null ? void 0 : s[i + 1]) == null ? void 0 : D.type) === b;
      return u.literal ? c ? "literalline" : "literallineWithoutBreakParent" : u.hard ? c ? "hardline" : "hardlineWithoutBreakParent" : u.soft ? "softline" : "line";
    }
    if (u.type === b)
      return ((a = s == null ? void 0 : s[i - 1]) == null ? void 0 : a.type) === A && s[i - 1].hard ? void 0 : "breakParent";
    if (u.type === v)
      return "trim";
    if (u.type === S)
      return "indent(" + n(u.contents) + ")";
    if (u.type === T)
      return u.n === Number.NEGATIVE_INFINITY ? "dedentToRoot(" + n(u.contents) + ")" : u.n < 0 ? "dedent(" + n(u.contents) + ")" : u.n.type === "root" ? "markAsRoot(" + n(u.contents) + ")" : "align(" + JSON.stringify(u.n) + ", " + n(u.contents) + ")";
    if (u.type === k)
      return "ifBreak(" + n(u.breakContents) + (u.flatContents ? ", " + n(u.flatContents) : "") + (u.groupId ? (u.flatContents ? "" : ', ""') + `, { groupId: ${o(u.groupId)} }` : "") + ")";
    if (u.type === P) {
      let c = [];
      u.negate && c.push("negate: true"), u.groupId && c.push(`groupId: ${o(u.groupId)}`);
      let d = c.length > 0 ? `, { ${c.join(", ")} }` : "";
      return `indentIfBreak(${n(u.contents)}${d})`;
    }
    if (u.type === _) {
      let c = [];
      u.break && u.break !== "propagated" && c.push("shouldBreak: true"), u.id && c.push(`id: ${o(u.id)}`);
      let d = c.length > 0 ? `, { ${c.join(", ")} }` : "";
      return u.expandedStates ? `conditionalGroup([${u.expandedStates.map((f2) => n(f2)).join(",")}]${d})` : `group(${n(u.contents)}${d})`;
    }
    if (u.type === x)
      return `fill([${u.parts.map((c) => n(c)).join(", ")}])`;
    if (u.type === L)
      return "lineSuffix(" + n(u.contents) + ")";
    if (u.type === I)
      return "lineSuffixBoundary";
    if (u.type === O)
      return `label(${JSON.stringify(u.label)}, ${n(u.contents)})`;
    throw new Error("Unknown doc type " + u.type);
  }
  function o(u) {
    if (typeof u != "symbol")
      return JSON.stringify(String(u));
    if (u in t8)
      return t8[u];
    let i = u.description || "symbol";
    for (let s = 0; ; s++) {
      let D = i + (s > 0 ? ` #${s}` : "");
      if (!r.has(D))
        return r.add(D), t8[u] = `Symbol.for(${JSON.stringify(D)})`;
    }
  }
}
var Nu = (e, t8, r) => {
  if (!(e && t8 == null))
    return Array.isArray(t8) || typeof t8 == "string" ? t8[r < 0 ? t8.length + r : r] : t8.at(r);
};
var y = Nu;
var Br = () => /[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;
function _r(e) {
  return e === 12288 || e >= 65281 && e <= 65376 || e >= 65504 && e <= 65510;
}
function kr(e) {
  return e >= 4352 && e <= 4447 || e === 8986 || e === 8987 || e === 9001 || e === 9002 || e >= 9193 && e <= 9196 || e === 9200 || e === 9203 || e === 9725 || e === 9726 || e === 9748 || e === 9749 || e >= 9800 && e <= 9811 || e === 9855 || e === 9875 || e === 9889 || e === 9898 || e === 9899 || e === 9917 || e === 9918 || e === 9924 || e === 9925 || e === 9934 || e === 9940 || e === 9962 || e === 9970 || e === 9971 || e === 9973 || e === 9978 || e === 9981 || e === 9989 || e === 9994 || e === 9995 || e === 10024 || e === 10060 || e === 10062 || e >= 10067 && e <= 10069 || e === 10071 || e >= 10133 && e <= 10135 || e === 10160 || e === 10175 || e === 11035 || e === 11036 || e === 11088 || e === 11093 || e >= 11904 && e <= 11929 || e >= 11931 && e <= 12019 || e >= 12032 && e <= 12245 || e >= 12272 && e <= 12287 || e >= 12289 && e <= 12350 || e >= 12353 && e <= 12438 || e >= 12441 && e <= 12543 || e >= 12549 && e <= 12591 || e >= 12593 && e <= 12686 || e >= 12688 && e <= 12771 || e >= 12783 && e <= 12830 || e >= 12832 && e <= 12871 || e >= 12880 && e <= 19903 || e >= 19968 && e <= 42124 || e >= 42128 && e <= 42182 || e >= 43360 && e <= 43388 || e >= 44032 && e <= 55203 || e >= 63744 && e <= 64255 || e >= 65040 && e <= 65049 || e >= 65072 && e <= 65106 || e >= 65108 && e <= 65126 || e >= 65128 && e <= 65131 || e >= 94176 && e <= 94180 || e === 94192 || e === 94193 || e >= 94208 && e <= 100343 || e >= 100352 && e <= 101589 || e >= 101632 && e <= 101640 || e >= 110576 && e <= 110579 || e >= 110581 && e <= 110587 || e === 110589 || e === 110590 || e >= 110592 && e <= 110882 || e === 110898 || e >= 110928 && e <= 110930 || e === 110933 || e >= 110948 && e <= 110951 || e >= 110960 && e <= 111355 || e === 126980 || e === 127183 || e === 127374 || e >= 127377 && e <= 127386 || e >= 127488 && e <= 127490 || e >= 127504 && e <= 127547 || e >= 127552 && e <= 127560 || e === 127568 || e === 127569 || e >= 127584 && e <= 127589 || e >= 127744 && e <= 127776 || e >= 127789 && e <= 127797 || e >= 127799 && e <= 127868 || e >= 127870 && e <= 127891 || e >= 127904 && e <= 127946 || e >= 127951 && e <= 127955 || e >= 127968 && e <= 127984 || e === 127988 || e >= 127992 && e <= 128062 || e === 128064 || e >= 128066 && e <= 128252 || e >= 128255 && e <= 128317 || e >= 128331 && e <= 128334 || e >= 128336 && e <= 128359 || e === 128378 || e === 128405 || e === 128406 || e === 128420 || e >= 128507 && e <= 128591 || e >= 128640 && e <= 128709 || e === 128716 || e >= 128720 && e <= 128722 || e >= 128725 && e <= 128727 || e >= 128732 && e <= 128735 || e === 128747 || e === 128748 || e >= 128756 && e <= 128764 || e >= 128992 && e <= 129003 || e === 129008 || e >= 129292 && e <= 129338 || e >= 129340 && e <= 129349 || e >= 129351 && e <= 129535 || e >= 129648 && e <= 129660 || e >= 129664 && e <= 129672 || e >= 129680 && e <= 129725 || e >= 129727 && e <= 129733 || e >= 129742 && e <= 129755 || e >= 129760 && e <= 129768 || e >= 129776 && e <= 129784 || e >= 131072 && e <= 196605 || e >= 196608 && e <= 262141;
}
var xr = (e) => !(_r(e) || kr(e));
var Su = /[^\x20-\x7F]/;
function Tu(e) {
  if (!e)
    return 0;
  if (!Su.test(e))
    return e.length;
  e = e.replace(Br(), "  ");
  let t8 = 0;
  for (let r of e) {
    let n = r.codePointAt(0);
    n <= 31 || n >= 127 && n <= 159 || n >= 768 && n <= 879 || (t8 += xr(n) ? 1 : 2);
  }
  return t8;
}
var we = Tu;
var Or = (e) => {
  if (Array.isArray(e))
    return e;
  if (e.type !== x)
    throw new Error(`Expect doc to be 'array' or '${x}'.`);
  return e.parts;
};
function Ne(e, t8) {
  if (typeof e == "string")
    return t8(e);
  let r = /* @__PURE__ */ new Map();
  return n(e);
  function n(u) {
    if (r.has(u))
      return r.get(u);
    let i = o(u);
    return r.set(u, i), i;
  }
  function o(u) {
    switch (U(u)) {
      case j:
        return t8(u.map(n));
      case x:
        return t8({ ...u, parts: u.parts.map(n) });
      case k:
        return t8({ ...u, breakContents: n(u.breakContents), flatContents: n(u.flatContents) });
      case _: {
        let { expandedStates: i, contents: s } = u;
        return i ? (i = i.map(n), s = i[0]) : s = n(s), t8({ ...u, contents: s, expandedStates: i });
      }
      case T:
      case S:
      case P:
      case O:
      case L:
        return t8({ ...u, contents: n(u.contents) });
      case M:
      case W:
      case v:
      case I:
      case A:
      case b:
        return t8(u);
      default:
        throw new q2(u);
    }
  }
}
function Je(e, t8, r) {
  let n = r, o = false;
  function u(i) {
    if (o)
      return false;
    let s = t8(i);
    s !== void 0 && (o = true, n = s);
  }
  return Be(e, u), n;
}
function vu(e) {
  if (e.type === _ && e.break || e.type === A && e.hard || e.type === b)
    return true;
}
function Nr(e) {
  return Je(e, vu, false);
}
function br(e) {
  if (e.length > 0) {
    let t8 = y(false, e, -1);
    !t8.expandedStates && !t8.break && (t8.break = "propagated");
  }
  return null;
}
function Sr(e) {
  let t8 = /* @__PURE__ */ new Set(), r = [];
  function n(u) {
    if (u.type === b && br(r), u.type === _) {
      if (r.push(u), t8.has(u))
        return false;
      t8.add(u);
    }
  }
  function o(u) {
    u.type === _ && r.pop().break && br(r);
  }
  Be(e, n, o, true);
}
function Pu(e) {
  return e.type === A && !e.hard ? e.soft ? "" : " " : e.type === k ? e.flatContents : e;
}
function Tr(e) {
  return Ne(e, Pu);
}
function wr(e) {
  for (e = [...e]; e.length >= 2 && y(false, e, -2).type === A && y(false, e, -1).type === b; )
    e.length -= 2;
  if (e.length > 0) {
    let t8 = Oe(y(false, e, -1));
    e[e.length - 1] = t8;
  }
  return e;
}
function Oe(e) {
  switch (U(e)) {
    case T:
    case S:
    case P:
    case _:
    case L:
    case O: {
      let t8 = Oe(e.contents);
      return { ...e, contents: t8 };
    }
    case k:
      return { ...e, breakContents: Oe(e.breakContents), flatContents: Oe(e.flatContents) };
    case x:
      return { ...e, parts: wr(e.parts) };
    case j:
      return wr(e);
    case M:
      return e.replace(/[\n\r]*$/, "");
    case W:
    case v:
    case I:
    case A:
    case b:
      break;
    default:
      throw new q2(e);
  }
  return e;
}
function Xe(e) {
  return Oe(Iu(e));
}
function Lu(e) {
  switch (U(e)) {
    case x:
      if (e.parts.every((t8) => t8 === ""))
        return "";
      break;
    case _:
      if (!e.contents && !e.id && !e.break && !e.expandedStates)
        return "";
      if (e.contents.type === _ && e.contents.id === e.id && e.contents.break === e.break && e.contents.expandedStates === e.expandedStates)
        return e.contents;
      break;
    case T:
    case S:
    case P:
    case L:
      if (!e.contents)
        return "";
      break;
    case k:
      if (!e.flatContents && !e.breakContents)
        return "";
      break;
    case j: {
      let t8 = [];
      for (let r of e) {
        if (!r)
          continue;
        let [n, ...o] = Array.isArray(r) ? r : [r];
        typeof n == "string" && typeof y(false, t8, -1) == "string" ? t8[t8.length - 1] += n : t8.push(n), t8.push(...o);
      }
      return t8.length === 0 ? "" : t8.length === 1 ? t8[0] : t8;
    }
    case M:
    case W:
    case v:
    case I:
    case A:
    case O:
    case b:
      break;
    default:
      throw new q2(e);
  }
  return e;
}
function Iu(e) {
  return Ne(e, (t8) => Lu(t8));
}
function vr(e, t8 = He) {
  return Ne(e, (r) => typeof r == "string" ? be(t8, r.split(`
`)) : r);
}
function Ru(e) {
  if (e.type === A)
    return true;
}
function Pr(e) {
  return Je(e, Ru, false);
}
function Ze(e, t8) {
  return e.type === O ? { ...e, contents: t8(e.contents) } : t8(e);
}
var R = Symbol("MODE_BREAK");
var K = Symbol("MODE_FLAT");
var Se = Symbol("cursor");
function Lr() {
  return { value: "", length: 0, queue: [] };
}
function Yu(e, t8) {
  return kt(e, { type: "indent" }, t8);
}
function ju(e, t8, r) {
  return t8 === Number.NEGATIVE_INFINITY ? e.root || Lr() : t8 < 0 ? kt(e, { type: "dedent" }, r) : t8 ? t8.type === "root" ? { ...e, root: e } : kt(e, { type: typeof t8 == "string" ? "stringAlign" : "numberAlign", n: t8 }, r) : e;
}
function kt(e, t8, r) {
  let n = t8.type === "dedent" ? e.queue.slice(0, -1) : [...e.queue, t8], o = "", u = 0, i = 0, s = 0;
  for (let l of n)
    switch (l.type) {
      case "indent":
        c(), r.useTabs ? D(1) : a(r.tabWidth);
        break;
      case "stringAlign":
        c(), o += l.n, u += l.n.length;
        break;
      case "numberAlign":
        i += 1, s += l.n;
        break;
      default:
        throw new Error(`Unexpected type '${l.type}'`);
    }
  return f2(), { ...e, value: o, length: u, queue: n };
  function D(l) {
    o += "	".repeat(l), u += r.tabWidth * l;
  }
  function a(l) {
    o += " ".repeat(l), u += l;
  }
  function c() {
    r.useTabs ? d() : f2();
  }
  function d() {
    i > 0 && D(i), p();
  }
  function f2() {
    s > 0 && a(s), p();
  }
  function p() {
    i = 0, s = 0;
  }
}
function xt(e) {
  let t8 = 0, r = 0, n = e.length;
  e:
    for (; n--; ) {
      let o = e[n];
      if (o === Se) {
        r++;
        continue;
      }
      for (let u = o.length - 1; u >= 0; u--) {
        let i = o[u];
        if (i === " " || i === "	")
          t8++;
        else {
          e[n] = o.slice(0, u + 1);
          break e;
        }
      }
    }
  if (t8 > 0 || r > 0)
    for (e.length = n + 1; r-- > 0; )
      e.push(Se);
  return t8;
}
function Qe(e, t8, r, n, o, u) {
  if (r === Number.POSITIVE_INFINITY)
    return true;
  let i = t8.length, s = [e], D = [];
  for (; r >= 0; ) {
    if (s.length === 0) {
      if (i === 0)
        return true;
      s.push(t8[--i]);
      continue;
    }
    let { mode: a, doc: c } = s.pop();
    switch (U(c)) {
      case M:
        D.push(c), r -= we(c);
        break;
      case j:
      case x: {
        let d = Or(c);
        for (let f2 = d.length - 1; f2 >= 0; f2--)
          s.push({ mode: a, doc: d[f2] });
        break;
      }
      case S:
      case T:
      case P:
      case O:
        s.push({ mode: a, doc: c.contents });
        break;
      case v:
        r += xt(D);
        break;
      case _: {
        if (u && c.break)
          return false;
        let d = c.break ? R : a, f2 = c.expandedStates && d === R ? y(false, c.expandedStates, -1) : c.contents;
        s.push({ mode: d, doc: f2 });
        break;
      }
      case k: {
        let f2 = (c.groupId ? o[c.groupId] || K : a) === R ? c.breakContents : c.flatContents;
        f2 && s.push({ mode: a, doc: f2 });
        break;
      }
      case A:
        if (a === R || c.hard)
          return true;
        c.soft || (D.push(" "), r--);
        break;
      case L:
        n = true;
        break;
      case I:
        if (n)
          return false;
        break;
    }
  }
  return false;
}
function fe(e, t8) {
  let r = {}, n = t8.printWidth, o = Ae(t8.endOfLine), u = 0, i = [{ ind: Lr(), mode: R, doc: e }], s = [], D = false, a = [], c = 0;
  for (Sr(e); i.length > 0; ) {
    let { ind: f2, mode: p, doc: l } = i.pop();
    switch (U(l)) {
      case M: {
        let F3 = o !== `
` ? ee2(false, l, `
`, o) : l;
        s.push(F3), i.length > 0 && (u += we(F3));
        break;
      }
      case j:
        for (let F3 = l.length - 1; F3 >= 0; F3--)
          i.push({ ind: f2, mode: p, doc: l[F3] });
        break;
      case W:
        if (c >= 2)
          throw new Error("There are too many 'cursor' in doc.");
        s.push(Se), c++;
        break;
      case S:
        i.push({ ind: Yu(f2, t8), mode: p, doc: l.contents });
        break;
      case T:
        i.push({ ind: ju(f2, l.n, t8), mode: p, doc: l.contents });
        break;
      case v:
        u -= xt(s);
        break;
      case _:
        switch (p) {
          case K:
            if (!D) {
              i.push({ ind: f2, mode: l.break ? R : K, doc: l.contents });
              break;
            }
          case R: {
            D = false;
            let F3 = { ind: f2, mode: K, doc: l.contents }, m = n - u, E2 = a.length > 0;
            if (!l.break && Qe(F3, i, m, E2, r))
              i.push(F3);
            else if (l.expandedStates) {
              let C2 = y(false, l.expandedStates, -1);
              if (l.break) {
                i.push({ ind: f2, mode: R, doc: C2 });
                break;
              } else
                for (let g = 1; g < l.expandedStates.length + 1; g++)
                  if (g >= l.expandedStates.length) {
                    i.push({ ind: f2, mode: R, doc: C2 });
                    break;
                  } else {
                    let h2 = l.expandedStates[g], B = { ind: f2, mode: K, doc: h2 };
                    if (Qe(B, i, m, E2, r)) {
                      i.push(B);
                      break;
                    }
                  }
            } else
              i.push({ ind: f2, mode: R, doc: l.contents });
            break;
          }
        }
        l.id && (r[l.id] = y(false, i, -1).mode);
        break;
      case x: {
        let F3 = n - u, { parts: m } = l;
        if (m.length === 0)
          break;
        let [E2, C2] = m, g = { ind: f2, mode: K, doc: E2 }, h2 = { ind: f2, mode: R, doc: E2 }, B = Qe(g, [], F3, a.length > 0, r, true);
        if (m.length === 1) {
          B ? i.push(g) : i.push(h2);
          break;
        }
        let Z4 = { ind: f2, mode: K, doc: C2 }, $4 = { ind: f2, mode: R, doc: C2 };
        if (m.length === 2) {
          B ? i.push(Z4, g) : i.push($4, h2);
          break;
        }
        m.splice(0, 2);
        let Q4 = { ind: f2, mode: p, doc: Ge(m) }, nr3 = m[0];
        Qe({ ind: f2, mode: K, doc: [E2, C2, nr3] }, [], F3, a.length > 0, r, true) ? i.push(Q4, Z4, g) : B ? i.push(Q4, $4, g) : i.push(Q4, $4, h2);
        break;
      }
      case k:
      case P: {
        let F3 = l.groupId ? r[l.groupId] : p;
        if (F3 === R) {
          let m = l.type === k ? l.breakContents : l.negate ? l.contents : ie(l.contents);
          m && i.push({ ind: f2, mode: p, doc: m });
        }
        if (F3 === K) {
          let m = l.type === k ? l.flatContents : l.negate ? ie(l.contents) : l.contents;
          m && i.push({ ind: f2, mode: p, doc: m });
        }
        break;
      }
      case L:
        a.push({ ind: f2, mode: p, doc: l.contents });
        break;
      case I:
        a.length > 0 && i.push({ ind: f2, mode: p, doc: ke });
        break;
      case A:
        switch (p) {
          case K:
            if (l.hard)
              D = true;
            else {
              l.soft || (s.push(" "), u += 1);
              break;
            }
          case R:
            if (a.length > 0) {
              i.push({ ind: f2, mode: p, doc: l }, ...a.reverse()), a.length = 0;
              break;
            }
            l.literal ? f2.root ? (s.push(o, f2.root.value), u = f2.root.length) : (s.push(o), u = 0) : (u -= xt(s), s.push(o + f2.value), u = f2.length);
            break;
        }
        break;
      case O:
        i.push({ ind: f2, mode: p, doc: l.contents });
        break;
      case b:
        break;
      default:
        throw new q2(l);
    }
    i.length === 0 && a.length > 0 && (i.push(...a.reverse()), a.length = 0);
  }
  let d = s.indexOf(Se);
  if (d !== -1) {
    let f2 = s.indexOf(Se, d + 1), p = s.slice(0, d).join(""), l = s.slice(d + 1, f2).join(""), F3 = s.slice(f2 + 1).join("");
    return { formatted: p + l + F3, cursorNodeStart: p.length, cursorNodeText: l };
  }
  return { formatted: s.join("") };
}
function Vu(e, t8, r = 0) {
  let n = 0;
  for (let o = r; o < e.length; ++o)
    e[o] === "	" ? n = n + t8 - n % t8 : n++;
  return n;
}
var Fe = Vu;
var Te;
var wt;
var pe;
var et;
var bt = class {
  constructor(t8) {
    ht(this, Te);
    ht(this, pe);
    this.stack = [t8];
  }
  get key() {
    var _a3;
    let { stack: t8, siblings: r } = this;
    return (_a3 = y(false, t8, r === null ? -2 : -4)) != null ? _a3 : null;
  }
  get index() {
    return this.siblings === null ? null : y(false, this.stack, -2);
  }
  get node() {
    return y(false, this.stack, -1);
  }
  get parent() {
    return this.getNode(1);
  }
  get grandparent() {
    return this.getNode(2);
  }
  get isInArray() {
    return this.siblings !== null;
  }
  get siblings() {
    let { stack: t8 } = this, r = y(false, t8, -3);
    return Array.isArray(r) ? r : null;
  }
  get next() {
    let { siblings: t8 } = this;
    return t8 === null ? null : t8[this.index + 1];
  }
  get previous() {
    let { siblings: t8 } = this;
    return t8 === null ? null : t8[this.index - 1];
  }
  get isFirst() {
    return this.index === 0;
  }
  get isLast() {
    let { siblings: t8, index: r } = this;
    return t8 !== null && r === t8.length - 1;
  }
  get isRoot() {
    return this.stack.length === 1;
  }
  get root() {
    return this.stack[0];
  }
  get ancestors() {
    return [...ce(this, pe, et).call(this)];
  }
  getName() {
    let { stack: t8 } = this, { length: r } = t8;
    return r > 1 ? y(false, t8, -2) : null;
  }
  getValue() {
    return y(false, this.stack, -1);
  }
  getNode(t8 = 0) {
    let r = ce(this, Te, wt).call(this, t8);
    return r === -1 ? null : this.stack[r];
  }
  getParentNode(t8 = 0) {
    return this.getNode(t8 + 1);
  }
  call(t8, ...r) {
    let { stack: n } = this, { length: o } = n, u = y(false, n, -1);
    for (let i of r)
      u = u[i], n.push(i, u);
    try {
      return t8(this);
    } finally {
      n.length = o;
    }
  }
  callParent(t8, r = 0) {
    let n = ce(this, Te, wt).call(this, r + 1), o = this.stack.splice(n + 1);
    try {
      return t8(this);
    } finally {
      this.stack.push(...o);
    }
  }
  each(t8, ...r) {
    let { stack: n } = this, { length: o } = n, u = y(false, n, -1);
    for (let i of r)
      u = u[i], n.push(i, u);
    try {
      for (let i = 0; i < u.length; ++i)
        n.push(i, u[i]), t8(this, i, u), n.length -= 2;
    } finally {
      n.length = o;
    }
  }
  map(t8, ...r) {
    let n = [];
    return this.each((o, u, i) => {
      n[u] = t8(o, u, i);
    }, ...r), n;
  }
  match(...t8) {
    let r = this.stack.length - 1, n = null, o = this.stack[r--];
    for (let u of t8) {
      if (o === void 0)
        return false;
      let i = null;
      if (typeof n == "number" && (i = n, n = this.stack[r--], o = this.stack[r--]), u && !u(o, n, i))
        return false;
      n = this.stack[r--], o = this.stack[r--];
    }
    return true;
  }
  findAncestor(t8) {
    for (let r of ce(this, pe, et).call(this))
      if (t8(r))
        return r;
  }
  hasAncestor(t8) {
    for (let r of ce(this, pe, et).call(this))
      if (t8(r))
        return true;
    return false;
  }
};
Te = /* @__PURE__ */ new WeakSet(), wt = function(t8) {
  let { stack: r } = this;
  for (let n = r.length - 1; n >= 0; n -= 2)
    if (!Array.isArray(r[n]) && --t8 < 0)
      return n;
  return -1;
}, pe = /* @__PURE__ */ new WeakSet(), et = function* () {
  let { stack: t8 } = this;
  for (let r = t8.length - 3; r >= 0; r -= 2) {
    let n = t8[r];
    Array.isArray(n) || (yield n);
  }
};
var Ir = bt;
var Rr = new Proxy(() => {
}, { get: () => Rr });
var ve = Rr;
function $u(e) {
  return e !== null && typeof e == "object";
}
var Yr = $u;
function* Ot(e, t8) {
  let { getVisitorKeys: r, filter: n = () => true } = t8, o = (u) => Yr(u) && n(u);
  for (let u of r(e)) {
    let i = e[u];
    if (Array.isArray(i))
      for (let s of i)
        o(s) && (yield s);
    else
      o(i) && (yield i);
  }
}
function* jr(e, t8) {
  let r = [e];
  for (let n = 0; n < r.length; n++) {
    let o = r[n];
    for (let u of Ot(o, t8))
      yield u, r.push(u);
  }
}
function de(e) {
  return (t8, r, n) => {
    let o = !!(n != null && n.backwards);
    if (r === false)
      return false;
    let { length: u } = t8, i = r;
    for (; i >= 0 && i < u; ) {
      let s = t8.charAt(i);
      if (e instanceof RegExp) {
        if (!e.test(s))
          return i;
      } else if (!e.includes(s))
        return i;
      o ? i-- : i++;
    }
    return i === -1 || i === u ? i : false;
  };
}
var Vr = de(/\s/);
var N = de(" 	");
var tt = de(",; 	");
var rt = de(/[^\n\r]/);
function Mu(e, t8, r) {
  let n = !!(r != null && r.backwards);
  if (t8 === false)
    return false;
  let o = e.charAt(t8);
  if (n) {
    if (e.charAt(t8 - 1) === "\r" && o === `
`)
      return t8 - 2;
    if (o === `
` || o === "\r" || o === "\u2028" || o === "\u2029")
      return t8 - 1;
  } else {
    if (o === "\r" && e.charAt(t8 + 1) === `
`)
      return t8 + 2;
    if (o === `
` || o === "\r" || o === "\u2028" || o === "\u2029")
      return t8 + 1;
  }
  return t8;
}
var Y2 = Mu;
function Wu(e, t8, r = {}) {
  let n = N(e, r.backwards ? t8 - 1 : t8, r), o = Y2(e, n, r);
  return n !== o;
}
var V2 = Wu;
function Uu(e) {
  return Array.isArray(e) && e.length > 0;
}
var Nt = Uu;
var $r = /* @__PURE__ */ new Set(["tokens", "comments", "parent", "enclosingNode", "precedingNode", "followingNode"]);
var zu = (e) => Object.keys(e).filter((t8) => !$r.has(t8));
function Gu(e) {
  return e ? (t8) => e(t8, $r) : zu;
}
var H = Gu;
function Ku(e) {
  let t8 = e.type || e.kind || "(unknown type)", r = String(e.name || e.id && (typeof e.id == "object" ? e.id.name : e.id) || e.key && (typeof e.key == "object" ? e.key.name : e.key) || e.value && (typeof e.value == "object" ? "" : String(e.value)) || e.operator || "");
  return r.length > 20 && (r = r.slice(0, 19) + "\u2026"), t8 + (r ? " " + r : "");
}
function St(e, t8) {
  var _a3;
  ((_a3 = e.comments) != null ? _a3 : e.comments = []).push(t8), t8.printed = false, t8.nodeDescription = Ku(e);
}
function te2(e, t8) {
  t8.leading = true, t8.trailing = false, St(e, t8);
}
function X(e, t8, r) {
  t8.leading = false, t8.trailing = false, r && (t8.marker = r), St(e, t8);
}
function re2(e, t8) {
  t8.leading = false, t8.trailing = true, St(e, t8);
}
var Tt = /* @__PURE__ */ new WeakMap();
function nt(e, t8) {
  var _a3;
  if (Tt.has(e))
    return Tt.get(e);
  let { printer: { getCommentChildNodes: r, canAttachComment: n, getVisitorKeys: o }, locStart: u, locEnd: i } = t8;
  if (!n)
    return [];
  let s = ((_a3 = r == null ? void 0 : r(e, t8)) != null ? _a3 : [...Ot(e, { getVisitorKeys: H(o) })]).flatMap((D) => n(D) ? [D] : nt(D, t8));
  return s.sort((D, a) => u(D) - u(a) || i(D) - i(a)), Tt.set(e, s), s;
}
function Wr(e, t8, r, n) {
  let { locStart: o, locEnd: u } = r, i = o(t8), s = u(t8), D = nt(e, r), a, c, d = 0, f2 = D.length;
  for (; d < f2; ) {
    let p = d + f2 >> 1, l = D[p], F3 = o(l), m = u(l);
    if (F3 <= i && s <= m)
      return Wr(l, t8, r, l);
    if (m <= i) {
      a = l, d = p + 1;
      continue;
    }
    if (s <= F3) {
      c = l, f2 = p;
      continue;
    }
    throw new Error("Comment location overlaps with node location");
  }
  if ((n == null ? void 0 : n.type) === "TemplateLiteral") {
    let { quasis: p } = n, l = Pt(p, t8, r);
    a && Pt(p, a, r) !== l && (a = null), c && Pt(p, c, r) !== l && (c = null);
  }
  return { enclosingNode: n, precedingNode: a, followingNode: c };
}
var vt = () => false;
function Ur(e, t8) {
  let { comments: r } = e;
  if (delete e.comments, !Nt(r) || !t8.printer.canAttachComment)
    return;
  let n = [], { locStart: o, locEnd: u, printer: { experimentalFeatures: { avoidAstMutation: i = false } = {}, handleComments: s = {} }, originalText: D } = t8, { ownLine: a = vt, endOfLine: c = vt, remaining: d = vt } = s, f2 = r.map((p, l) => ({ ...Wr(e, p, t8), comment: p, text: D, options: t8, ast: e, isLastComment: r.length - 1 === l }));
  for (let [p, l] of f2.entries()) {
    let { comment: F3, precedingNode: m, enclosingNode: E2, followingNode: C2, text: g, options: h2, ast: B, isLastComment: Z4 } = l;
    if (h2.parser === "json" || h2.parser === "json5" || h2.parser === "jsonc" || h2.parser === "__js_expression" || h2.parser === "__ts_expression" || h2.parser === "__vue_expression" || h2.parser === "__vue_ts_expression") {
      if (o(F3) - o(B) <= 0) {
        te2(B, F3);
        continue;
      }
      if (u(F3) - u(B) >= 0) {
        re2(B, F3);
        continue;
      }
    }
    let $4;
    if (i ? $4 = [l] : (F3.enclosingNode = E2, F3.precedingNode = m, F3.followingNode = C2, $4 = [F3, g, h2, B, Z4]), Hu(g, h2, f2, p))
      F3.placement = "ownLine", a(...$4) || (C2 ? te2(C2, F3) : m ? re2(m, F3) : E2 ? X(E2, F3) : X(B, F3));
    else if (qu(g, h2, f2, p))
      F3.placement = "endOfLine", c(...$4) || (m ? re2(m, F3) : C2 ? te2(C2, F3) : E2 ? X(E2, F3) : X(B, F3));
    else if (F3.placement = "remaining", !d(...$4))
      if (m && C2) {
        let Q4 = n.length;
        Q4 > 0 && n[Q4 - 1].followingNode !== C2 && Mr(n, h2), n.push(l);
      } else
        m ? re2(m, F3) : C2 ? te2(C2, F3) : E2 ? X(E2, F3) : X(B, F3);
  }
  if (Mr(n, t8), !i)
    for (let p of r)
      delete p.precedingNode, delete p.enclosingNode, delete p.followingNode;
}
var zr = (e) => !/[\S\n\u2028\u2029]/.test(e);
function Hu(e, t8, r, n) {
  let { comment: o, precedingNode: u } = r[n], { locStart: i, locEnd: s } = t8, D = i(o);
  if (u)
    for (let a = n - 1; a >= 0; a--) {
      let { comment: c, precedingNode: d } = r[a];
      if (d !== u || !zr(e.slice(s(c), D)))
        break;
      D = i(c);
    }
  return V2(e, D, { backwards: true });
}
function qu(e, t8, r, n) {
  let { comment: o, followingNode: u } = r[n], { locStart: i, locEnd: s } = t8, D = s(o);
  if (u)
    for (let a = n + 1; a < r.length; a++) {
      let { comment: c, followingNode: d } = r[a];
      if (d !== u || !zr(e.slice(D, i(c))))
        break;
      D = s(c);
    }
  return V2(e, D);
}
function Mr(e, t8) {
  var _a3;
  var s, D;
  let r = e.length;
  if (r === 0)
    return;
  let { precedingNode: n, followingNode: o } = e[0], u = t8.locStart(o), i;
  for (i = r; i > 0; --i) {
    let { comment: a, precedingNode: c, followingNode: d } = e[i - 1];
    ve.strictEqual(c, n), ve.strictEqual(d, o);
    let f2 = t8.originalText.slice(t8.locEnd(a), u);
    if ((_a3 = (D = (s = t8.printer).isGap) == null ? void 0 : D.call(s, f2, t8)) != null ? _a3 : /^[\s(]*$/.test(f2))
      u = t8.locStart(a);
    else
      break;
  }
  for (let [a, { comment: c }] of e.entries())
    a < i ? re2(n, c) : te2(o, c);
  for (let a of [n, o])
    a.comments && a.comments.length > 1 && a.comments.sort((c, d) => t8.locStart(c) - t8.locStart(d));
  e.length = 0;
}
function Pt(e, t8, r) {
  let n = r.locStart(t8) - 1;
  for (let o = 1; o < e.length; ++o)
    if (n < r.locStart(e[o]))
      return o - 1;
  return 0;
}
function Ju(e, t8) {
  let r = t8 - 1;
  r = N(e, r, { backwards: true }), r = Y2(e, r, { backwards: true }), r = N(e, r, { backwards: true });
  let n = Y2(e, r, { backwards: true });
  return r !== n;
}
var Pe = Ju;
function Gr(e, t8) {
  let r = e.node;
  return r.printed = true, t8.printer.printComment(e, t8);
}
function Xu(e, t8) {
  var c;
  let r = e.node, n = [Gr(e, t8)], { printer: o, originalText: u, locStart: i, locEnd: s } = t8;
  if ((c = o.isBlockComment) == null ? void 0 : c.call(o, r)) {
    let d = V2(u, s(r)) ? V2(u, i(r), { backwards: true }) ? G2 : Ke : " ";
    n.push(d);
  } else
    n.push(G2);
  let a = Y2(u, N(u, s(r)));
  return a !== false && V2(u, a) && n.push(G2), n;
}
function Zu(e, t8, r) {
  var a;
  let n = e.node, o = Gr(e, t8), { printer: u, originalText: i, locStart: s } = t8, D = (a = u.isBlockComment) == null ? void 0 : a.call(u, n);
  if (r != null && r.hasLineSuffix && !(r != null && r.isBlock) || V2(i, s(n), { backwards: true })) {
    let c = Pe(i, s(n));
    return { doc: _e([G2, c ? G2 : "", o]), isBlock: D, hasLineSuffix: true };
  }
  return !D || r != null && r.hasLineSuffix ? { doc: [_e([" ", o]), le], isBlock: D, hasLineSuffix: true } : { doc: [" ", o], isBlock: D, hasLineSuffix: false };
}
function Qu(e, t8) {
  let r = e.node;
  if (!r)
    return {};
  let n = t8[Symbol.for("printedComments")];
  if ((r.comments || []).filter((D) => !n.has(D)).length === 0)
    return { leading: "", trailing: "" };
  let u = [], i = [], s;
  return e.each(() => {
    let D = e.node;
    if (n != null && n.has(D))
      return;
    let { leading: a, trailing: c } = D;
    a ? u.push(Xu(e, t8)) : c && (s = Zu(e, t8, s), i.push(s.doc));
  }, "comments"), { leading: u, trailing: i };
}
function Kr(e, t8, r) {
  let { leading: n, trailing: o } = Qu(e, r);
  return !n && !o ? t8 : Ze(t8, (u) => [n, u, o]);
}
function Hr(e) {
  let { [Symbol.for("comments")]: t8, [Symbol.for("printedComments")]: r } = e;
  for (let n of t8) {
    if (!n.printed && !r.has(n))
      throw new Error('Comment "' + n.value.trim() + '" was not printed. Please report this error!');
    delete n.printed;
  }
}
function eo(e) {
  return () => {
  };
}
var qr = eo;
var Le = class extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "ConfigError");
  }
};
var Ie = class extends Error {
  constructor() {
    super(...arguments);
    __publicField(this, "name", "UndefinedParserError");
  }
};
var Jr = { cursorOffset: { category: "Special", type: "int", default: -1, range: { start: -1, end: 1 / 0, step: 1 }, description: "Print (to stderr) where a cursor at the given position would move to after formatting.", cliCategory: "Editor" }, endOfLine: { category: "Global", type: "choice", default: "lf", description: "Which end of line characters to apply.", choices: [{ value: "lf", description: "Line Feed only (\\n), common on Linux and macOS as well as inside git repos" }, { value: "crlf", description: "Carriage Return + Line Feed characters (\\r\\n), common on Windows" }, { value: "cr", description: "Carriage Return character only (\\r), used very rarely" }, { value: "auto", description: `Maintain existing
(mixed values within one file are normalised by looking at what's used after the first line)` }] }, filepath: { category: "Special", type: "path", description: "Specify the input filepath. This will be used to do parser inference.", cliName: "stdin-filepath", cliCategory: "Other", cliDescription: "Path to the file to pretend that stdin comes from." }, insertPragma: { category: "Special", type: "boolean", default: false, description: "Insert @format pragma into file's first docblock comment.", cliCategory: "Other" }, parser: { category: "Global", type: "choice", default: void 0, description: "Which parser to use.", exception: (e) => typeof e == "string" || typeof e == "function", choices: [{ value: "flow", description: "Flow" }, { value: "babel", description: "JavaScript" }, { value: "babel-flow", description: "Flow" }, { value: "babel-ts", description: "TypeScript" }, { value: "typescript", description: "TypeScript" }, { value: "acorn", description: "JavaScript" }, { value: "espree", description: "JavaScript" }, { value: "meriyah", description: "JavaScript" }, { value: "css", description: "CSS" }, { value: "less", description: "Less" }, { value: "scss", description: "SCSS" }, { value: "json", description: "JSON" }, { value: "json5", description: "JSON5" }, { value: "jsonc", description: "JSON with Comments" }, { value: "json-stringify", description: "JSON.stringify" }, { value: "graphql", description: "GraphQL" }, { value: "markdown", description: "Markdown" }, { value: "mdx", description: "MDX" }, { value: "vue", description: "Vue" }, { value: "yaml", description: "YAML" }, { value: "glimmer", description: "Ember / Handlebars" }, { value: "html", description: "HTML" }, { value: "angular", description: "Angular" }, { value: "lwc", description: "Lightning Web Components" }] }, plugins: { type: "path", array: true, default: [{ value: [] }], category: "Global", description: "Add a plugin. Multiple plugins can be passed as separate `--plugin`s.", exception: (e) => typeof e == "string" || typeof e == "object", cliName: "plugin", cliCategory: "Config" }, printWidth: { category: "Global", type: "int", default: 80, description: "The line length where Prettier will try wrap.", range: { start: 0, end: 1 / 0, step: 1 } }, rangeEnd: { category: "Special", type: "int", default: 1 / 0, range: { start: 0, end: 1 / 0, step: 1 }, description: `Format code ending at a given character offset (exclusive).
The range will extend forwards to the end of the selected statement.`, cliCategory: "Editor" }, rangeStart: { category: "Special", type: "int", default: 0, range: { start: 0, end: 1 / 0, step: 1 }, description: `Format code starting at a given character offset.
The range will extend backwards to the start of the first line containing the selected statement.`, cliCategory: "Editor" }, requirePragma: { category: "Special", type: "boolean", default: false, description: `Require either '@prettier' or '@format' to be present in the file's first docblock comment
in order for it to be formatted.`, cliCategory: "Other" }, tabWidth: { type: "int", category: "Global", default: 2, description: "Number of spaces per indentation level.", range: { start: 0, end: 1 / 0, step: 1 } }, useTabs: { category: "Global", type: "boolean", default: false, description: "Indent with tabs instead of spaces." }, embeddedLanguageFormatting: { category: "Global", type: "choice", default: "auto", description: "Control how Prettier formats quoted code embedded in the file.", choices: [{ value: "auto", description: "Format embedded code if Prettier can automatically identify it." }, { value: "off", description: "Never automatically format embedded code." }] } };
function ut({ plugins: e = [], showDeprecated: t8 = false } = {}) {
  let r = e.flatMap((o) => {
    var _a3;
    return (_a3 = o.languages) != null ? _a3 : [];
  }), n = [];
  for (let o of ro(Object.assign({}, ...e.map(({ options: u }) => u), Jr)))
    !t8 && o.deprecated || (Array.isArray(o.choices) && (t8 || (o.choices = o.choices.filter((u) => !u.deprecated)), o.name === "parser" && (o.choices = [...o.choices, ...to(o.choices, r, e)])), o.pluginDefaults = Object.fromEntries(e.filter((u) => {
      var i;
      return ((i = u.defaultOptions) == null ? void 0 : i[o.name]) !== void 0;
    }).map((u) => [u.name, u.defaultOptions[o.name]])), n.push(o));
  return { languages: r, options: n };
}
function* to(e, t8, r) {
  let n = new Set(e.map((o) => o.value));
  for (let o of t8)
    if (o.parsers) {
      for (let u of o.parsers)
        if (!n.has(u)) {
          n.add(u);
          let i = r.find((D) => D.parsers && Object.prototype.hasOwnProperty.call(D.parsers, u)), s = o.name;
          i != null && i.name && (s += ` (plugin: ${i.name})`), yield { value: u, description: s };
        }
    }
}
function ro(e) {
  let t8 = [];
  for (let [r, n] of Object.entries(e)) {
    let o = { name: r, ...n };
    Array.isArray(o.default) && (o.default = y(false, o.default, -1).value), t8.push(o);
  }
  return t8;
}
var no = (e) => String(e).split(/[/\\]/).pop();
function Xr(e, t8) {
  var _a3;
  if (!t8)
    return;
  let r = no(t8).toLowerCase();
  return (_a3 = e.find(({ filenames: n }) => n == null ? void 0 : n.some((o) => o.toLowerCase() === r))) != null ? _a3 : e.find(({ extensions: n }) => n == null ? void 0 : n.some((o) => r.endsWith(o)));
}
function uo(e, t8) {
  var _a3, _b;
  if (t8)
    return (_b = (_a3 = e.find(({ name: r }) => r.toLowerCase() === t8)) != null ? _a3 : e.find(({ aliases: r }) => r == null ? void 0 : r.includes(t8))) != null ? _b : e.find(({ extensions: r }) => r == null ? void 0 : r.includes(`.${t8}`));
}
function oo(e, t8) {
  var _a3, _b, _c;
  let r = e.plugins.flatMap((o) => {
    var _a4;
    return (_a4 = o.languages) != null ? _a4 : [];
  }), n = (_c = (_b = (_a3 = uo(r, t8.language)) != null ? _a3 : Xr(r, t8.physicalFile)) != null ? _b : Xr(r, t8.file)) != null ? _c : (t8.physicalFile, void 0);
  return n == null ? void 0 : n.parsers[0];
}
var Zr = oo;
var ne2 = { key: (e) => /^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(e) ? e : JSON.stringify(e), value(e) {
  if (e === null || typeof e != "object")
    return JSON.stringify(e);
  if (Array.isArray(e))
    return `[${e.map((r) => ne2.value(r)).join(", ")}]`;
  let t8 = Object.keys(e);
  return t8.length === 0 ? "{}" : `{ ${t8.map((r) => `${ne2.key(r)}: ${ne2.value(e[r])}`).join(", ")} }`;
}, pair: ({ key: e, value: t8 }) => ne2.value({ [e]: t8 }) };
var Lt = he(Re(), 1);
var tn = (e, t8, { descriptor: r }) => {
  let n = [`${Lt.default.yellow(typeof e == "string" ? r.key(e) : r.pair(e))} is deprecated`];
  return t8 && n.push(`we now treat it as ${Lt.default.blue(typeof t8 == "string" ? r.key(t8) : r.pair(t8))}`), n.join("; ") + ".";
};
var se2 = he(Re(), 1);
var ot = Symbol.for("vnopts.VALUE_NOT_EXIST");
var me = Symbol.for("vnopts.VALUE_UNCHANGED");
var rn = " ".repeat(2);
var un = (e, t8, r) => {
  let { text: n, list: o } = r.normalizeExpectedResult(r.schemas[e].expected(r)), u = [];
  return n && u.push(nn(e, t8, n, r.descriptor)), o && u.push([nn(e, t8, o.title, r.descriptor)].concat(o.values.map((i) => on(i, r.loggerPrintWidth))).join(`
`)), sn(u, r.loggerPrintWidth);
};
function nn(e, t8, r, n) {
  return [`Invalid ${se2.default.red(n.key(e))} value.`, `Expected ${se2.default.blue(r)},`, `but received ${t8 === ot ? se2.default.gray("nothing") : se2.default.red(n.value(t8))}.`].join(" ");
}
function on({ text: e, list: t8 }, r) {
  let n = [];
  return e && n.push(`- ${se2.default.blue(e)}`), t8 && n.push([`- ${se2.default.blue(t8.title)}:`].concat(t8.values.map((o) => on(o, r - rn.length).replace(/^|\n/g, `$&${rn}`))).join(`
`)), sn(n, r);
}
function sn(e, t8) {
  if (e.length === 1)
    return e[0];
  let [r, n] = e, [o, u] = e.map((i) => i.split(`
`, 1)[0].length);
  return o > t8 && o > u ? n : r;
}
var Yt = he(Re(), 1);
var It = [];
var Dn = [];
function Rt(e, t8) {
  if (e === t8)
    return 0;
  let r = e;
  e.length > t8.length && (e = t8, t8 = r);
  let n = e.length, o = t8.length;
  for (; n > 0 && e.charCodeAt(~-n) === t8.charCodeAt(~-o); )
    n--, o--;
  let u = 0;
  for (; u < n && e.charCodeAt(u) === t8.charCodeAt(u); )
    u++;
  if (n -= u, o -= u, n === 0)
    return o;
  let i, s, D, a, c = 0, d = 0;
  for (; c < n; )
    Dn[c] = e.charCodeAt(u + c), It[c] = ++c;
  for (; d < o; )
    for (i = t8.charCodeAt(u + d), D = d++, s = d, c = 0; c < n; c++)
      a = i === Dn[c] ? D : D + 1, D = It[c], s = It[c] = D > s ? a > s ? s + 1 : a : a > D ? D + 1 : a;
  return s;
}
var it = (e, t8, { descriptor: r, logger: n, schemas: o }) => {
  let u = [`Ignored unknown option ${Yt.default.yellow(r.pair({ key: e, value: t8 }))}.`], i = Object.keys(o).sort().find((s) => Rt(e, s) < 3);
  i && u.push(`Did you mean ${Yt.default.blue(r.key(i))}?`), n.warn(u.join(" "));
};
var io = ["default", "expected", "validate", "deprecated", "forward", "redirect", "overlap", "preprocess", "postprocess"];
function so(e, t8) {
  let r = new e(t8), n = Object.create(r);
  for (let o of io)
    o in t8 && (n[o] = Do(t8[o], r, w.prototype[o].length));
  return n;
}
var w = class {
  static create(t8) {
    return so(this, t8);
  }
  constructor(t8) {
    this.name = t8.name;
  }
  default(t8) {
  }
  expected(t8) {
    return "nothing";
  }
  validate(t8, r) {
    return false;
  }
  deprecated(t8, r) {
    return false;
  }
  forward(t8, r) {
  }
  redirect(t8, r) {
  }
  overlap(t8, r, n) {
    return t8;
  }
  preprocess(t8, r) {
    return t8;
  }
  postprocess(t8, r) {
    return me;
  }
};
function Do(e, t8, r) {
  return typeof e == "function" ? (...n) => e(...n.slice(0, r - 1), t8, ...n.slice(r - 1)) : () => e;
}
var st = class extends w {
  constructor(t8) {
    super(t8), this._sourceName = t8.sourceName;
  }
  expected(t8) {
    return t8.schemas[this._sourceName].expected(t8);
  }
  validate(t8, r) {
    return r.schemas[this._sourceName].validate(t8, r);
  }
  redirect(t8, r) {
    return this._sourceName;
  }
};
var Dt = class extends w {
  expected() {
    return "anything";
  }
  validate() {
    return true;
  }
};
var at = class extends w {
  constructor({ valueSchema: t8, name: r = t8.name, ...n }) {
    super({ ...n, name: r }), this._valueSchema = t8;
  }
  expected(t8) {
    let { text: r, list: n } = t8.normalizeExpectedResult(this._valueSchema.expected(t8));
    return { text: r && `an array of ${r}`, list: n && { title: "an array of the following values", values: [{ list: n }] } };
  }
  validate(t8, r) {
    if (!Array.isArray(t8))
      return false;
    let n = [];
    for (let o of t8) {
      let u = r.normalizeValidateResult(this._valueSchema.validate(o, r), o);
      u !== true && n.push(u.value);
    }
    return n.length === 0 ? true : { value: n };
  }
  deprecated(t8, r) {
    let n = [];
    for (let o of t8) {
      let u = r.normalizeDeprecatedResult(this._valueSchema.deprecated(o, r), o);
      u !== false && n.push(...u.map(({ value: i }) => ({ value: [i] })));
    }
    return n;
  }
  forward(t8, r) {
    let n = [];
    for (let o of t8) {
      let u = r.normalizeForwardResult(this._valueSchema.forward(o, r), o);
      n.push(...u.map(an));
    }
    return n;
  }
  redirect(t8, r) {
    let n = [], o = [];
    for (let u of t8) {
      let i = r.normalizeRedirectResult(this._valueSchema.redirect(u, r), u);
      "remain" in i && n.push(i.remain), o.push(...i.redirect.map(an));
    }
    return n.length === 0 ? { redirect: o } : { redirect: o, remain: n };
  }
  overlap(t8, r) {
    return t8.concat(r);
  }
};
function an({ from: e, to: t8 }) {
  return { from: [e], to: t8 };
}
var ct = class extends w {
  expected() {
    return "true or false";
  }
  validate(t8) {
    return typeof t8 == "boolean";
  }
};
function ln(e, t8) {
  let r = /* @__PURE__ */ Object.create(null);
  for (let n of e) {
    let o = n[t8];
    if (r[o])
      throw new Error(`Duplicate ${t8} ${JSON.stringify(o)}`);
    r[o] = n;
  }
  return r;
}
function fn(e, t8) {
  let r = /* @__PURE__ */ new Map();
  for (let n of e) {
    let o = n[t8];
    if (r.has(o))
      throw new Error(`Duplicate ${t8} ${JSON.stringify(o)}`);
    r.set(o, n);
  }
  return r;
}
function Fn() {
  let e = /* @__PURE__ */ Object.create(null);
  return (t8) => {
    let r = JSON.stringify(t8);
    return e[r] ? true : (e[r] = true, false);
  };
}
function pn(e, t8) {
  let r = [], n = [];
  for (let o of e)
    t8(o) ? r.push(o) : n.push(o);
  return [r, n];
}
function dn(e) {
  return e === Math.floor(e);
}
function mn(e, t8) {
  if (e === t8)
    return 0;
  let r = typeof e, n = typeof t8, o = ["undefined", "object", "boolean", "number", "string"];
  return r !== n ? o.indexOf(r) - o.indexOf(n) : r !== "string" ? Number(e) - Number(t8) : e.localeCompare(t8);
}
function En(e) {
  return (...t8) => {
    let r = e(...t8);
    return typeof r == "string" ? new Error(r) : r;
  };
}
function jt(e) {
  return e === void 0 ? {} : e;
}
function Vt(e) {
  if (typeof e == "string")
    return { text: e };
  let { text: t8, list: r } = e;
  return ao((t8 || r) !== void 0, "Unexpected `expected` result, there should be at least one field."), r ? { text: t8, list: { title: r.title, values: r.values.map(Vt) } } : { text: t8 };
}
function $t(e, t8) {
  return e === true ? true : e === false ? { value: t8 } : e;
}
function Mt(e, t8, r = false) {
  return e === false ? false : e === true ? r ? true : [{ value: t8 }] : "value" in e ? [e] : e.length === 0 ? false : e;
}
function cn(e, t8) {
  return typeof e == "string" || "key" in e ? { from: t8, to: e } : "from" in e ? { from: e.from, to: e.to } : { from: t8, to: e.to };
}
function lt(e, t8) {
  return e === void 0 ? [] : Array.isArray(e) ? e.map((r) => cn(r, t8)) : [cn(e, t8)];
}
function Wt(e, t8) {
  let r = lt(typeof e == "object" && "redirect" in e ? e.redirect : e, t8);
  return r.length === 0 ? { remain: t8, redirect: r } : typeof e == "object" && "remain" in e ? { remain: e.remain, redirect: r } : { redirect: r };
}
function ao(e, t8) {
  if (!e)
    throw new Error(t8);
}
var ft = class extends w {
  constructor(t8) {
    super(t8), this._choices = fn(t8.choices.map((r) => r && typeof r == "object" ? r : { value: r }), "value");
  }
  expected({ descriptor: t8 }) {
    let r = Array.from(this._choices.keys()).map((i) => this._choices.get(i)).filter(({ hidden: i }) => !i).map((i) => i.value).sort(mn).map(t8.value), n = r.slice(0, -2), o = r.slice(-2);
    return { text: n.concat(o.join(" or ")).join(", "), list: { title: "one of the following values", values: r } };
  }
  validate(t8) {
    return this._choices.has(t8);
  }
  deprecated(t8) {
    let r = this._choices.get(t8);
    return r && r.deprecated ? { value: t8 } : false;
  }
  forward(t8) {
    let r = this._choices.get(t8);
    return r ? r.forward : void 0;
  }
  redirect(t8) {
    let r = this._choices.get(t8);
    return r ? r.redirect : void 0;
  }
};
var Ft = class extends w {
  expected() {
    return "a number";
  }
  validate(t8, r) {
    return typeof t8 == "number";
  }
};
var pt = class extends Ft {
  expected() {
    return "an integer";
  }
  validate(t8, r) {
    return r.normalizeValidateResult(super.validate(t8, r), t8) === true && dn(t8);
  }
};
var Ye = class extends w {
  expected() {
    return "a string";
  }
  validate(t8) {
    return typeof t8 == "string";
  }
};
var Cn = ne2;
var hn = it;
var gn = un;
var yn = tn;
var dt = class {
  constructor(t8, r) {
    let { logger: n = console, loggerPrintWidth: o = 80, descriptor: u = Cn, unknown: i = hn, invalid: s = gn, deprecated: D = yn, missing: a = () => false, required: c = () => false, preprocess: d = (p) => p, postprocess: f2 = () => me } = r || {};
    this._utils = { descriptor: u, logger: n || { warn: () => {
    } }, loggerPrintWidth: o, schemas: ln(t8, "name"), normalizeDefaultResult: jt, normalizeExpectedResult: Vt, normalizeDeprecatedResult: Mt, normalizeForwardResult: lt, normalizeRedirectResult: Wt, normalizeValidateResult: $t }, this._unknownHandler = i, this._invalidHandler = En(s), this._deprecatedHandler = D, this._identifyMissing = (p, l) => !(p in l) || a(p, l), this._identifyRequired = c, this._preprocess = d, this._postprocess = f2, this.cleanHistory();
  }
  cleanHistory() {
    this._hasDeprecationWarned = Fn();
  }
  normalize(t8) {
    let r = {}, o = [this._preprocess(t8, this._utils)], u = () => {
      for (; o.length !== 0; ) {
        let i = o.shift(), s = this._applyNormalization(i, r);
        o.push(...s);
      }
    };
    u();
    for (let i of Object.keys(this._utils.schemas)) {
      let s = this._utils.schemas[i];
      if (!(i in r)) {
        let D = jt(s.default(this._utils));
        "value" in D && o.push({ [i]: D.value });
      }
    }
    u();
    for (let i of Object.keys(this._utils.schemas)) {
      if (!(i in r))
        continue;
      let s = this._utils.schemas[i], D = r[i], a = s.postprocess(D, this._utils);
      a !== me && (this._applyValidation(a, i, s), r[i] = a);
    }
    return this._applyPostprocess(r), this._applyRequiredCheck(r), r;
  }
  _applyNormalization(t8, r) {
    let n = [], { knownKeys: o, unknownKeys: u } = this._partitionOptionKeys(t8);
    for (let i of o) {
      let s = this._utils.schemas[i], D = s.preprocess(t8[i], this._utils);
      this._applyValidation(D, i, s);
      let a = ({ from: p, to: l }) => {
        n.push(typeof l == "string" ? { [l]: p } : { [l.key]: l.value });
      }, c = ({ value: p, redirectTo: l }) => {
        let F3 = Mt(s.deprecated(p, this._utils), D, true);
        if (F3 !== false)
          if (F3 === true)
            this._hasDeprecationWarned(i) || this._utils.logger.warn(this._deprecatedHandler(i, l, this._utils));
          else
            for (let { value: m } of F3) {
              let E2 = { key: i, value: m };
              if (!this._hasDeprecationWarned(E2)) {
                let C2 = typeof l == "string" ? { key: l, value: m } : l;
                this._utils.logger.warn(this._deprecatedHandler(E2, C2, this._utils));
              }
            }
      };
      lt(s.forward(D, this._utils), D).forEach(a);
      let f2 = Wt(s.redirect(D, this._utils), D);
      if (f2.redirect.forEach(a), "remain" in f2) {
        let p = f2.remain;
        r[i] = i in r ? s.overlap(r[i], p, this._utils) : p, c({ value: p });
      }
      for (let { from: p, to: l } of f2.redirect)
        c({ value: p, redirectTo: l });
    }
    for (let i of u) {
      let s = t8[i];
      this._applyUnknownHandler(i, s, r, (D, a) => {
        n.push({ [D]: a });
      });
    }
    return n;
  }
  _applyRequiredCheck(t8) {
    for (let r of Object.keys(this._utils.schemas))
      if (this._identifyMissing(r, t8) && this._identifyRequired(r))
        throw this._invalidHandler(r, ot, this._utils);
  }
  _partitionOptionKeys(t8) {
    let [r, n] = pn(Object.keys(t8).filter((o) => !this._identifyMissing(o, t8)), (o) => o in this._utils.schemas);
    return { knownKeys: r, unknownKeys: n };
  }
  _applyValidation(t8, r, n) {
    let o = $t(n.validate(t8, this._utils), t8);
    if (o !== true)
      throw this._invalidHandler(r, o.value, this._utils);
  }
  _applyUnknownHandler(t8, r, n, o) {
    let u = this._unknownHandler(t8, r, this._utils);
    if (u)
      for (let i of Object.keys(u)) {
        if (this._identifyMissing(i, u))
          continue;
        let s = u[i];
        i in this._utils.schemas ? o(i, s) : n[i] = s;
      }
  }
  _applyPostprocess(t8) {
    let r = this._postprocess(t8, this._utils);
    if (r !== me) {
      if (r.delete)
        for (let n of r.delete)
          delete t8[n];
      if (r.override) {
        let { knownKeys: n, unknownKeys: o } = this._partitionOptionKeys(r.override);
        for (let u of n) {
          let i = r.override[u];
          this._applyValidation(i, u, this._utils.schemas[u]), t8[u] = i;
        }
        for (let u of o) {
          let i = r.override[u];
          this._applyUnknownHandler(u, i, t8, (s, D) => {
            let a = this._utils.schemas[s];
            this._applyValidation(D, s, a), t8[s] = D;
          });
        }
      }
    }
  }
};
var Ut;
function lo(e, t8, { logger: r = false, isCLI: n = false, passThrough: o = false, FlagSchema: u, descriptor: i } = {}) {
  if (n) {
    if (!u)
      throw new Error("'FlagSchema' option is required.");
    if (!i)
      throw new Error("'descriptor' option is required.");
  } else
    i = ne2;
  let s = o ? Array.isArray(o) ? (f2, p) => o.includes(f2) ? { [f2]: p } : void 0 : (f2, p) => ({ [f2]: p }) : (f2, p, l) => {
    let { _: F3, ...m } = l.schemas;
    return it(f2, p, { ...l, schemas: m });
  }, D = fo(t8, { isCLI: n, FlagSchema: u }), a = new dt(D, { logger: r, unknown: s, descriptor: i }), c = r !== false;
  c && Ut && (a._hasDeprecationWarned = Ut);
  let d = a.normalize(e);
  return c && (Ut = a._hasDeprecationWarned), d;
}
function fo(e, { isCLI: t8, FlagSchema: r }) {
  let n = [];
  t8 && n.push(Dt.create({ name: "_" }));
  for (let o of e)
    n.push(Fo(o, { isCLI: t8, optionInfos: e, FlagSchema: r })), o.alias && t8 && n.push(st.create({ name: o.alias, sourceName: o.name }));
  return n;
}
function Fo(e, { isCLI: t8, optionInfos: r, FlagSchema: n }) {
  let { name: o } = e, u = { name: o }, i, s = {};
  switch (e.type) {
    case "int":
      i = pt, t8 && (u.preprocess = Number);
      break;
    case "string":
      i = Ye;
      break;
    case "choice":
      i = ft, u.choices = e.choices.map((D) => D != null && D.redirect ? { ...D, redirect: { to: { key: e.name, value: D.redirect } } } : D);
      break;
    case "boolean":
      i = ct;
      break;
    case "flag":
      i = n, u.flags = r.flatMap((D) => [D.alias, D.description && D.name, D.oppositeDescription && `no-${D.name}`].filter(Boolean));
      break;
    case "path":
      i = Ye;
      break;
    default:
      throw new Error(`Unexpected type ${e.type}`);
  }
  if (e.exception ? u.validate = (D, a, c) => e.exception(D) || a.validate(D, c) : u.validate = (D, a, c) => D === void 0 || a.validate(D, c), e.redirect && (s.redirect = (D) => D ? { to: { key: e.redirect.option, value: e.redirect.value } } : void 0), e.deprecated && (s.deprecated = true), t8 && !e.array) {
    let D = u.preprocess || ((a) => a);
    u.preprocess = (a, c, d) => c.preprocess(D(Array.isArray(a) ? y(false, a, -1) : a), d);
  }
  return e.array ? at.create({ ...t8 ? { preprocess: (D) => Array.isArray(D) ? D : [D] } : {}, ...s, valueSchema: i.create(u) }) : i.create({ ...u, ...s });
}
var An = lo;
var po = (e, t8, r) => {
  if (!(e && t8 == null)) {
    if (t8.findLast)
      return t8.findLast(r);
    for (let n = t8.length - 1; n >= 0; n--) {
      let o = t8[n];
      if (r(o, n, t8))
        return o;
    }
  }
};
var zt = po;
function Gt(e, t8) {
  if (!t8)
    throw new Error("parserName is required.");
  let r = zt(false, e, (o) => o.parsers && Object.prototype.hasOwnProperty.call(o.parsers, t8));
  if (r)
    return r;
  let n = `Couldn't resolve parser "${t8}".`;
  throw n += " Plugins must be explicitly added to the standalone bundle.", new Le(n);
}
function Bn(e, t8) {
  if (!t8)
    throw new Error("astFormat is required.");
  let r = zt(false, e, (o) => o.printers && Object.prototype.hasOwnProperty.call(o.printers, t8));
  if (r)
    return r;
  let n = `Couldn't find plugin for AST format "${t8}".`;
  throw n += " Plugins must be explicitly added to the standalone bundle.", new Le(n);
}
function mt({ plugins: e, parser: t8 }) {
  let r = Gt(e, t8);
  return Kt(r, t8);
}
function Kt(e, t8) {
  let r = e.parsers[t8];
  return typeof r == "function" ? r() : r;
}
function _n(e, t8) {
  let r = e.printers[t8];
  return typeof r == "function" ? r() : r;
}
var kn = { astFormat: "estree", printer: {}, originalText: void 0, locStart: null, locEnd: null };
async function mo(e, t8 = {}) {
  var d;
  let r = { ...e };
  if (!r.parser)
    if (r.filepath) {
      if (r.parser = Zr(r, { physicalFile: r.filepath }), !r.parser)
        throw new Ie(`No parser could be inferred for file "${r.filepath}".`);
    } else
      throw new Ie("No parser and no file path given, couldn't infer a parser.");
  let n = ut({ plugins: e.plugins, showDeprecated: true }).options, o = { ...kn, ...Object.fromEntries(n.filter((f2) => f2.default !== void 0).map((f2) => [f2.name, f2.default])) }, u = Gt(r.plugins, r.parser), i = await Kt(u, r.parser);
  r.astFormat = i.astFormat, r.locEnd = i.locEnd, r.locStart = i.locStart;
  let s = (d = u.printers) != null && d[i.astFormat] ? u : Bn(r.plugins, i.astFormat), D = await _n(s, i.astFormat);
  r.printer = D;
  let a = s.defaultOptions ? Object.fromEntries(Object.entries(s.defaultOptions).filter(([, f2]) => f2 !== void 0)) : {}, c = { ...o, ...a };
  for (let [f2, p] of Object.entries(c))
    (r[f2] === null || r[f2] === void 0) && (r[f2] = p);
  return r.parser === "json" && (r.trailingComma = "none"), An(r, n, { passThrough: Object.keys(kn), ...t8 });
}
var ue = mo;
var Ln = he(Pn(), 1);
async function _o(e, t8) {
  let r = await mt(t8), n = r.preprocess ? r.preprocess(e, t8) : e;
  t8.originalText = n;
  let o;
  try {
    o = await r.parse(n, t8, t8);
  } catch (u) {
    ko(u, e);
  }
  return { text: n, ast: o };
}
function ko(e, t8) {
  let { loc: r } = e;
  if (r) {
    let n = (0, Ln.codeFrameColumns)(t8, r, { highlightCode: true });
    throw e.message += `
` + n, e.codeFrame = n, e;
  }
  throw e;
}
var De = _o;
async function In(e, t8, r, n, o) {
  var _a3;
  let { embeddedLanguageFormatting: u, printer: { embed: i, hasPrettierIgnore: s = () => false, getVisitorKeys: D } } = r;
  if (!i || u !== "auto")
    return;
  if (i.length > 2)
    throw new Error("printer.embed has too many parameters. The API changed in Prettier v3. Please update your plugin. See https://prettier.io/docs/en/plugins.html#optional-embed");
  let a = H((_a3 = i.getVisitorKeys) != null ? _a3 : D), c = [];
  p();
  let d = e.stack;
  for (let { print: l, node: F3, pathStack: m } of c)
    try {
      e.stack = m;
      let E2 = await l(f2, t8, e, r);
      E2 && o.set(F3, E2);
    } catch (E2) {
      if (globalThis.PRETTIER_DEBUG)
        throw E2;
    }
  e.stack = d;
  function f2(l, F3) {
    return xo(l, F3, r, n);
  }
  function p() {
    let { node: l } = e;
    if (l === null || typeof l != "object" || s(e))
      return;
    for (let m of a(l))
      Array.isArray(l[m]) ? e.each(p, m) : e.call(p, m);
    let F3 = i(e, r);
    if (F3) {
      if (typeof F3 == "function") {
        c.push({ print: F3, node: l, pathStack: [...e.stack] });
        return;
      }
      o.set(l, F3);
    }
  }
}
async function xo(e, t8, r, n) {
  let o = await ue({ ...r, ...t8, parentParser: r.parser, originalText: e }, { passThrough: true }), { ast: u } = await De(e, o), i = await n(u, o);
  return Xe(i);
}
function bo(e, t8) {
  let { originalText: r, [Symbol.for("comments")]: n, locStart: o, locEnd: u, [Symbol.for("printedComments")]: i } = t8, { node: s } = e, D = o(s), a = u(s);
  for (let c of n)
    o(c) >= D && u(c) <= a && i.add(c);
  return r.slice(D, a);
}
var Rn = bo;
async function je(e, t8) {
  ({ ast: e } = await qt(e, t8));
  let r = /* @__PURE__ */ new Map(), n = new Ir(e), o = qr(t8), u = /* @__PURE__ */ new Map();
  await In(n, s, t8, je, u);
  let i = await Yn(n, t8, s, void 0, u);
  return Hr(t8), i;
  function s(a, c) {
    return a === void 0 || a === n ? D(c) : Array.isArray(a) ? n.call(() => D(c), ...a) : n.call(() => D(c), a);
  }
  function D(a) {
    o(n);
    let c = n.node;
    if (c == null)
      return "";
    let d = c && typeof c == "object" && a === void 0;
    if (d && r.has(c))
      return r.get(c);
    let f2 = Yn(n, t8, s, a, u);
    return d && r.set(c, f2), f2;
  }
}
function Yn(e, t8, r, n, o) {
  var D;
  let { node: u } = e, { printer: i } = t8, s;
  return (D = i.hasPrettierIgnore) != null && D.call(i, e) ? s = Rn(e, t8) : o.has(u) ? s = o.get(u) : s = i.print(e, t8, r, n), u === t8.cursorNode && (s = Ze(s, (a) => [xe, a, xe])), i.printComment && (!i.willPrintOwnComments || !i.willPrintOwnComments(e, t8)) && (s = Kr(e, s, t8)), s;
}
async function qt(e, t8) {
  var _a3, _b;
  let r = (_a3 = e.comments) != null ? _a3 : [];
  t8[Symbol.for("comments")] = r, t8[Symbol.for("tokens")] = (_b = e.tokens) != null ? _b : [], t8[Symbol.for("printedComments")] = /* @__PURE__ */ new Set(), Ur(e, t8);
  let { printer: { preprocess: n } } = t8;
  return e = n ? await n(e, t8) : e, { ast: e, comments: r };
}
function wo(e, t8) {
  let { cursorOffset: r, locStart: n, locEnd: o } = t8, u = H(t8.printer.getVisitorKeys), i = (D) => n(D) <= r && o(D) >= r, s = e;
  for (let D of jr(e, { getVisitorKeys: u, filter: i }))
    s = D;
  return s;
}
var jn = wo;
function Oo(e, t8) {
  var _a3;
  let { printer: { massageAstNode: r, getVisitorKeys: n } } = t8;
  if (!r)
    return e;
  let o = H(n), u = (_a3 = r.ignoredProperties) != null ? _a3 : /* @__PURE__ */ new Set();
  return i(e);
  function i(s, D) {
    if (!(s !== null && typeof s == "object"))
      return s;
    if (Array.isArray(s))
      return s.map((f2) => i(f2, D)).filter(Boolean);
    let a = {}, c = new Set(o(s));
    for (let f2 in s)
      !Object.prototype.hasOwnProperty.call(s, f2) || u.has(f2) || (c.has(f2) ? a[f2] = i(s[f2], s) : a[f2] = s[f2]);
    let d = r(s, a, D);
    if (d !== null)
      return d != null ? d : a;
  }
}
var Vn = Oo;
var No = ({ parser: e }) => e === "json" || e === "json5" || e === "jsonc" || e === "json-stringify";
function So(e, t8) {
  let r = [e.node, ...e.parentNodes], n = /* @__PURE__ */ new Set([t8.node, ...t8.parentNodes]);
  return r.find((o) => Wn.has(o.type) && n.has(o));
}
function $n(e) {
  let t8 = e.length - 1;
  for (; ; ) {
    let r = e[t8];
    if ((r == null ? void 0 : r.type) === "Program" || (r == null ? void 0 : r.type) === "File")
      t8--;
    else
      break;
  }
  return e.slice(0, t8 + 1);
}
function To(e, t8, { locStart: r, locEnd: n }) {
  let o = e.node, u = t8.node;
  if (o === u)
    return { startNode: o, endNode: u };
  let i = r(e.node);
  for (let D of $n(t8.parentNodes))
    if (r(D) >= i)
      u = D;
    else
      break;
  let s = n(t8.node);
  for (let D of $n(e.parentNodes)) {
    if (n(D) <= s)
      o = D;
    else
      break;
    if (o === u)
      break;
  }
  return { startNode: o, endNode: u };
}
function Jt(e, t8, r, n, o = [], u) {
  let { locStart: i, locEnd: s } = r, D = i(e), a = s(e);
  if (!(t8 > a || t8 < D || u === "rangeEnd" && t8 === D || u === "rangeStart" && t8 === a)) {
    for (let c of nt(e, r)) {
      let d = Jt(c, t8, r, n, [e, ...o], u);
      if (d)
        return d;
    }
    if (!n || n(e, o[0]))
      return { node: e, parentNodes: o };
  }
}
function vo(e, t8) {
  return t8 !== "DeclareExportDeclaration" && e !== "TypeParameterDeclaration" && (e === "Directive" || e === "TypeAlias" || e === "TSExportAssignment" || e.startsWith("Declare") || e.startsWith("TSDeclare") || e.endsWith("Statement") || e.endsWith("Declaration"));
}
var Wn = /* @__PURE__ */ new Set(["JsonRoot", "ObjectExpression", "ArrayExpression", "StringLiteral", "NumericLiteral", "BooleanLiteral", "NullLiteral", "UnaryExpression", "TemplateLiteral"]);
var Po = /* @__PURE__ */ new Set(["OperationDefinition", "FragmentDefinition", "VariableDefinition", "TypeExtensionDefinition", "ObjectTypeDefinition", "FieldDefinition", "DirectiveDefinition", "EnumTypeDefinition", "EnumValueDefinition", "InputValueDefinition", "InputObjectTypeDefinition", "SchemaDefinition", "OperationTypeDefinition", "InterfaceTypeDefinition", "UnionTypeDefinition", "ScalarTypeDefinition"]);
function Mn(e, t8, r) {
  if (!t8)
    return false;
  switch (e.parser) {
    case "flow":
    case "babel":
    case "babel-flow":
    case "babel-ts":
    case "typescript":
    case "acorn":
    case "espree":
    case "meriyah":
    case "__babel_estree":
      return vo(t8.type, r == null ? void 0 : r.type);
    case "json":
    case "json5":
    case "jsonc":
    case "json-stringify":
      return Wn.has(t8.type);
    case "graphql":
      return Po.has(t8.kind);
    case "vue":
      return t8.tag !== "root";
  }
  return false;
}
function Un(e, t8, r) {
  let { rangeStart: n, rangeEnd: o, locStart: u, locEnd: i } = t8;
  ve.ok(o > n);
  let s = e.slice(n, o).search(/\S/), D = s === -1;
  if (!D)
    for (n += s; o > n && !/\S/.test(e[o - 1]); --o)
      ;
  let a = Jt(r, n, t8, (p, l) => Mn(t8, p, l), [], "rangeStart"), c = D ? a : Jt(r, o, t8, (p) => Mn(t8, p), [], "rangeEnd");
  if (!a || !c)
    return { rangeStart: 0, rangeEnd: 0 };
  let d, f2;
  if (No(t8)) {
    let p = So(a, c);
    d = p, f2 = p;
  } else
    ({ startNode: d, endNode: f2 } = To(a, c, t8));
  return { rangeStart: Math.min(u(d), u(f2)), rangeEnd: Math.max(i(d), i(f2)) };
}
var qn = "\uFEFF";
var zn = Symbol("cursor");
async function Jn(e, t8, r = 0) {
  if (!e || e.trim().length === 0)
    return { formatted: "", cursorOffset: -1, comments: [] };
  let { ast: n, text: o } = await De(e, t8);
  t8.cursorOffset >= 0 && (t8.cursorNode = jn(n, t8));
  let u = await je(n, t8, r);
  r > 0 && (u = qe([G2, u], r, t8.tabWidth));
  let i = fe(u, t8);
  if (r > 0) {
    let D = i.formatted.trim();
    i.cursorNodeStart !== void 0 && (i.cursorNodeStart -= i.formatted.indexOf(D)), i.formatted = D + Ae(t8.endOfLine);
  }
  let s = t8[Symbol.for("comments")];
  if (t8.cursorOffset >= 0) {
    let D, a, c, d, f2;
    if (t8.cursorNode && i.cursorNodeText ? (D = t8.locStart(t8.cursorNode), a = o.slice(D, t8.locEnd(t8.cursorNode)), c = t8.cursorOffset - D, d = i.cursorNodeStart, f2 = i.cursorNodeText) : (D = 0, a = o, c = t8.cursorOffset, d = 0, f2 = i.formatted), a === f2)
      return { formatted: i.formatted, cursorOffset: d + c, comments: s };
    let p = a.split("");
    p.splice(c, 0, zn);
    let l = f2.split(""), F3 = (0, Hn.diffArrays)(p, l), m = d;
    for (let E2 of F3)
      if (E2.removed) {
        if (E2.value.includes(zn))
          break;
      } else
        m += E2.count;
    return { formatted: i.formatted, cursorOffset: m, comments: s };
  }
  return { formatted: i.formatted, cursorOffset: -1, comments: s };
}
async function Lo(e, t8) {
  let { ast: r, text: n } = await De(e, t8), { rangeStart: o, rangeEnd: u } = Un(n, t8, r), i = n.slice(o, u), s = Math.min(o, n.lastIndexOf(`
`, o) + 1), D = n.slice(s, o).match(/^\s*/)[0], a = Fe(D, t8.tabWidth), c = await Jn(i, { ...t8, rangeStart: 0, rangeEnd: Number.POSITIVE_INFINITY, cursorOffset: t8.cursorOffset > o && t8.cursorOffset <= u ? t8.cursorOffset - o : -1, endOfLine: "lf" }, a), d = c.formatted.trimEnd(), { cursorOffset: f2 } = t8;
  f2 > u ? f2 += d.length - i.length : c.cursorOffset >= 0 && (f2 = c.cursorOffset + o);
  let p = n.slice(0, o) + d + n.slice(u);
  if (t8.endOfLine !== "lf") {
    let l = Ae(t8.endOfLine);
    f2 >= 0 && l === `\r
` && (f2 += yt(p.slice(0, f2), `
`)), p = ee2(false, p, `
`, l);
  }
  return { formatted: p, cursorOffset: f2, comments: c.comments };
}
function Xt(e, t8, r) {
  return typeof t8 != "number" || Number.isNaN(t8) || t8 < 0 || t8 > e.length ? r : t8;
}
function Gn(e, t8) {
  let { cursorOffset: r, rangeStart: n, rangeEnd: o } = t8;
  return r = Xt(e, r, -1), n = Xt(e, n, 0), o = Xt(e, o, e.length), { ...t8, cursorOffset: r, rangeStart: n, rangeEnd: o };
}
function Xn(e, t8) {
  let { cursorOffset: r, rangeStart: n, rangeEnd: o, endOfLine: u } = Gn(e, t8), i = e.charAt(0) === qn;
  if (i && (e = e.slice(1), r--, n--, o--), u === "auto" && (u = Dr(e)), e.includes("\r")) {
    let s = (D) => yt(e.slice(0, Math.max(D, 0)), `\r
`);
    r -= s(r), n -= s(n), o -= s(o), e = ar(e);
  }
  return { hasBOM: i, text: e, options: Gn(e, { ...t8, cursorOffset: r, rangeStart: n, rangeEnd: o, endOfLine: u }) };
}
async function Kn(e, t8) {
  let r = await mt(t8);
  return !r.hasPragma || r.hasPragma(e);
}
async function Zt(e, t8) {
  let { hasBOM: r, text: n, options: o } = Xn(e, await ue(t8));
  if (o.rangeStart >= o.rangeEnd && n !== "" || o.requirePragma && !await Kn(n, o))
    return { formatted: e, cursorOffset: t8.cursorOffset, comments: [] };
  let u;
  return o.rangeStart > 0 || o.rangeEnd < n.length ? u = await Lo(n, o) : (!o.requirePragma && o.insertPragma && o.printer.insertPragma && !await Kn(n, o) && (n = o.printer.insertPragma(n)), u = await Jn(n, o)), r && (u.formatted = qn + u.formatted, u.cursorOffset >= 0 && u.cursorOffset++), u;
}
async function Zn(e, t8, r) {
  let { text: n, options: o } = Xn(e, await ue(t8)), u = await De(n, o);
  return r && (r.preprocessForPrint && (u.ast = await qt(u.ast, o)), r.massage && (u.ast = Vn(u.ast, o))), u;
}
async function Qn(e, t8) {
  t8 = await ue(t8);
  let r = await je(e, t8);
  return fe(r, t8);
}
async function eu(e, t8) {
  let r = Ar(e), { formatted: n } = await Zt(r, { ...t8, parser: "__js_expression" });
  return n;
}
async function tu(e, t8) {
  t8 = await ue(t8);
  let { ast: r } = await De(e, t8);
  return je(r, t8);
}
async function ru(e, t8) {
  return fe(e, await ue(t8));
}
var Qt = {};
We(Qt, { builders: () => Ro, printer: () => Yo, utils: () => jo });
var Ro = { join: be, line: Ke, softline: gr, hardline: G2, literalline: He, group: Bt, conditionalGroup: dr, fill: Ge, lineSuffix: _e, lineSuffixBoundary: Cr, cursor: xe, breakParent: le, ifBreak: mr, trim: hr, indent: ie, indentIfBreak: Er, align: oe2, addAlignmentToDoc: qe, markAsRoot: Fr, dedentToRoot: fr, dedent: pr, hardlineWithoutBreakParent: ke, literallineWithoutBreakParent: _t, label: yr, concat: (e) => e };
var Yo = { printDocToString: fe };
var jo = { willBreak: Nr, traverseDoc: Be, findInDoc: Je, mapDoc: Ne, removeLines: Tr, stripTrailingHardline: Xe, replaceEndOfLine: vr, canBreak: Pr };
var nu = "3.2.5";
var tr = {};
We(tr, { addDanglingComment: () => X, addLeadingComment: () => te2, addTrailingComment: () => re2, getAlignmentSize: () => Fe, getIndentSize: () => uu, getMaxContinuousCount: () => ou, getNextNonSpaceNonCommentCharacter: () => iu, getNextNonSpaceNonCommentCharacterIndex: () => Xo, getStringWidth: () => we, hasNewline: () => V2, hasNewlineInRange: () => su, hasSpaces: () => Du, isNextLineEmpty: () => ti, isNextLineEmptyAfterIndex: () => Ct, isPreviousLineEmpty: () => Qo, makeString: () => au, skip: () => de, skipEverythingButNewLine: () => rt, skipInlineComment: () => Ee, skipNewline: () => Y2, skipSpaces: () => N, skipToLineEnd: () => tt, skipTrailingComment: () => Ce, skipWhitespace: () => Vr });
function Vo(e, t8) {
  if (t8 === false)
    return false;
  if (e.charAt(t8) === "/" && e.charAt(t8 + 1) === "*") {
    for (let r = t8 + 2; r < e.length; ++r)
      if (e.charAt(r) === "*" && e.charAt(r + 1) === "/")
        return r + 2;
  }
  return t8;
}
var Ee = Vo;
function $o(e, t8) {
  return t8 === false ? false : e.charAt(t8) === "/" && e.charAt(t8 + 1) === "/" ? rt(e, t8) : t8;
}
var Ce = $o;
function Mo(e, t8) {
  let r = null, n = t8;
  for (; n !== r; )
    r = n, n = N(e, n), n = Ee(e, n), n = Ce(e, n), n = Y2(e, n);
  return n;
}
var Ve = Mo;
function Wo(e, t8) {
  let r = null, n = t8;
  for (; n !== r; )
    r = n, n = tt(e, n), n = Ee(e, n), n = N(e, n);
  return n = Ce(e, n), n = Y2(e, n), n !== false && V2(e, n);
}
var Ct = Wo;
function Uo(e, t8) {
  let r = e.lastIndexOf(`
`);
  return r === -1 ? 0 : Fe(e.slice(r + 1).match(/^[\t ]*/)[0], t8);
}
var uu = Uo;
function er(e) {
  if (typeof e != "string")
    throw new TypeError("Expected a string");
  return e.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function zo(e, t8) {
  let r = e.match(new RegExp(`(${er(t8)})+`, "g"));
  return r === null ? 0 : r.reduce((n, o) => Math.max(n, o.length / t8.length), 0);
}
var ou = zo;
function Go(e, t8) {
  let r = Ve(e, t8);
  return r === false ? "" : e.charAt(r);
}
var iu = Go;
function Ko(e, t8, r) {
  for (let n = t8; n < r; ++n)
    if (e.charAt(n) === `
`)
      return true;
  return false;
}
var su = Ko;
function Ho(e, t8, r = {}) {
  return N(e, r.backwards ? t8 - 1 : t8, r) !== t8;
}
var Du = Ho;
function qo(e, t8, r) {
  let n = t8 === '"' ? "'" : '"', u = ee2(false, e, /\\(.)|(["'])/gs, (i, s, D) => s === n ? s : D === t8 ? "\\" + D : D || (r && /^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/.test(s) ? s : "\\" + s));
  return t8 + u + t8;
}
var au = qo;
function Jo(e, t8, r) {
  return Ve(e, r(t8));
}
function Xo(e, t8) {
  return arguments.length === 2 || typeof t8 == "number" ? Ve(e, t8) : Jo(...arguments);
}
function Zo(e, t8, r) {
  return Pe(e, r(t8));
}
function Qo(e, t8) {
  return arguments.length === 2 || typeof t8 == "number" ? Pe(e, t8) : Zo(...arguments);
}
function ei(e, t8, r) {
  return Ct(e, r(t8));
}
function ti(e, t8) {
  return arguments.length === 2 || typeof t8 == "number" ? Ct(e, t8) : ei(...arguments);
}
function ae(e, t8 = 1) {
  return async (...r) => {
    var _a3, _b;
    let n = (_a3 = r[t8]) != null ? _a3 : {}, o = (_b = n.plugins) != null ? _b : [];
    return r[t8] = { ...n, plugins: Array.isArray(o) ? o : Object.values(o) }, e(...r);
  };
}
var cu = ae(Zt);
async function lu(e, t8) {
  let { formatted: r } = await cu(e, { ...t8, cursorOffset: -1 });
  return r;
}
async function ri(e, t8) {
  return await lu(e, t8) === e;
}
var ni = ae(ut, 0);
var ui = { parse: ae(Zn), formatAST: ae(Qn), formatDoc: ae(eu), printToDoc: ae(tu), printDocToString: ae(ru) };

// node_modules/prettier/plugins/html.mjs
var html_exports = {};
__export(html_exports, {
  default: () => xh,
  languages: () => Cs,
  options: () => _s,
  parsers: () => Vr2,
  printers: () => Lo2
});
var Js = Object.defineProperty;
var Yr2 = (t8, e) => {
  for (var r in e)
    Js(t8, r, { get: e[r], enumerable: true });
};
var jr2 = (t8, e, r) => {
  if (!e.has(t8))
    throw TypeError("Cannot " + r);
};
var Q2 = (t8, e, r) => (jr2(t8, e, "read from private field"), r ? r.call(t8) : e.get(t8));
var Kr2 = (t8, e, r) => {
  if (e.has(t8))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(t8) : e.set(t8, r);
};
var Qr = (t8, e, r, n) => (jr2(t8, e, "write to private field"), n ? n.call(t8, r) : e.set(t8, r), r);
var Ur2 = {};
Yr2(Ur2, { languages: () => Cs, options: () => _s, parsers: () => Vr2, printers: () => Lo2 });
var Zs = (t8, e, r, n) => {
  if (!(t8 && e == null))
    return e.replaceAll ? e.replaceAll(r, n) : r.global ? e.replace(r, n) : e.split(r).join(n);
};
var w2 = Zs;
var xe2 = "string";
var ke2 = "array";
var Be2 = "cursor";
var ue2 = "indent";
var le2 = "align";
var Le2 = "trim";
var te3 = "group";
var ce2 = "fill";
var pe2 = "if-break";
var he2 = "indent-if-break";
var Fe2 = "line-suffix";
var Pe2 = "line-suffix-boundary";
var Y3 = "line";
var Ne2 = "label";
var fe2 = "break-parent";
var mt2 = /* @__PURE__ */ new Set([Be2, ue2, le2, Le2, te3, ce2, pe2, he2, Fe2, Pe2, Y3, Ne2, fe2]);
function ei2(t8) {
  if (typeof t8 == "string")
    return xe2;
  if (Array.isArray(t8))
    return ke2;
  if (!t8)
    return;
  let { type: e } = t8;
  if (mt2.has(e))
    return e;
}
var Ie2 = ei2;
var ti2 = (t8) => new Intl.ListFormat("en-US", { type: "disjunction" }).format(t8);
function ri2(t8) {
  let e = t8 === null ? "null" : typeof t8;
  if (e !== "string" && e !== "object")
    return `Unexpected doc '${e}', 
Expected it to be 'string' or 'object'.`;
  if (Ie2(t8))
    throw new Error("doc is valid.");
  let r = Object.prototype.toString.call(t8);
  if (r !== "[object Object]")
    return `Unexpected doc '${r}'.`;
  let n = ti2([...mt2].map((s) => `'${s}'`));
  return `Unexpected doc.type '${t8.type}'.
Expected it to be ${n}.`;
}
var rr2 = class extends Error {
  constructor(e) {
    super(ri2(e));
    __publicField(this, "name", "InvalidDocError");
    this.doc = e;
  }
};
var gt = rr2;
var Xr2 = () => {
};
var re3 = Xr2;
var dt2 = Xr2;
function L2(t8) {
  return re3(t8), { type: ue2, contents: t8 };
}
function Jr2(t8, e) {
  return re3(e), { type: le2, contents: e, n: t8 };
}
function E(t8, e = {}) {
  return re3(t8), dt2(e.expandedStates, true), { type: te3, id: e.id, contents: t8, break: !!e.shouldBreak, expandedStates: e.expandedStates };
}
function Zr2(t8) {
  return Jr2(Number.NEGATIVE_INFINITY, t8);
}
function en(t8) {
  return Jr2({ type: "root" }, t8);
}
function Ct2(t8) {
  return dt2(t8), { type: ce2, parts: t8 };
}
function me2(t8, e = "", r = {}) {
  return re3(t8), e !== "" && re3(e), { type: pe2, breakContents: t8, flatContents: e, groupId: r.groupId };
}
function tn2(t8, e) {
  return re3(t8), { type: he2, contents: t8, groupId: e.groupId, negate: e.negate };
}
var ne3 = { type: fe2 };
var ni2 = { type: Y3, hard: true };
var si = { type: Y3, hard: true, literal: true };
var A2 = { type: Y3 };
var v2 = { type: Y3, soft: true };
var S2 = [ni2, ne3];
var rn2 = [si, ne3];
function M2(t8, e) {
  re3(t8), dt2(e);
  let r = [];
  for (let n = 0; n < e.length; n++)
    n !== 0 && r.push(t8), r.push(e[n]);
  return r;
}
var ii = (t8, e, r) => {
  if (!(t8 && e == null))
    return Array.isArray(e) || typeof e == "string" ? e[r < 0 ? e.length + r : r] : e.at(r);
};
var X2 = ii;
function St2(t8, e) {
  if (typeof t8 == "string")
    return e(t8);
  let r = /* @__PURE__ */ new Map();
  return n(t8);
  function n(i) {
    if (r.has(i))
      return r.get(i);
    let a = s(i);
    return r.set(i, a), a;
  }
  function s(i) {
    switch (Ie2(i)) {
      case ke2:
        return e(i.map(n));
      case ce2:
        return e({ ...i, parts: i.parts.map(n) });
      case pe2:
        return e({ ...i, breakContents: n(i.breakContents), flatContents: n(i.flatContents) });
      case te3: {
        let { expandedStates: a, contents: o } = i;
        return a ? (a = a.map(n), o = a[0]) : o = n(o), e({ ...i, contents: o, expandedStates: a });
      }
      case le2:
      case ue2:
      case he2:
      case Ne2:
      case Fe2:
        return e({ ...i, contents: n(i.contents) });
      case xe2:
      case Be2:
      case Le2:
      case Pe2:
      case Y3:
      case fe2:
        return e(i);
      default:
        throw new gt(i);
    }
  }
}
function ai(t8) {
  switch (Ie2(t8)) {
    case ce2:
      if (t8.parts.every((e) => e === ""))
        return "";
      break;
    case te3:
      if (!t8.contents && !t8.id && !t8.break && !t8.expandedStates)
        return "";
      if (t8.contents.type === te3 && t8.contents.id === t8.id && t8.contents.break === t8.break && t8.contents.expandedStates === t8.expandedStates)
        return t8.contents;
      break;
    case le2:
    case ue2:
    case he2:
    case Fe2:
      if (!t8.contents)
        return "";
      break;
    case pe2:
      if (!t8.flatContents && !t8.breakContents)
        return "";
      break;
    case ke2: {
      let e = [];
      for (let r of t8) {
        if (!r)
          continue;
        let [n, ...s] = Array.isArray(r) ? r : [r];
        typeof n == "string" && typeof X2(false, e, -1) == "string" ? e[e.length - 1] += n : e.push(n), e.push(...s);
      }
      return e.length === 0 ? "" : e.length === 1 ? e[0] : e;
    }
    case xe2:
    case Be2:
    case Le2:
    case Pe2:
    case Y3:
    case Ne2:
    case fe2:
      break;
    default:
      throw new gt(t8);
  }
  return t8;
}
function nn2(t8) {
  return St2(t8, (e) => ai(e));
}
function T2(t8, e = rn2) {
  return St2(t8, (r) => typeof r == "string" ? M2(e, r.split(`
`)) : r);
}
var _t2 = "'";
var sn2 = '"';
function oi(t8, e) {
  let r = e === true || e === _t2 ? _t2 : sn2, n = r === _t2 ? sn2 : _t2, s = 0, i = 0;
  for (let a of t8)
    a === r ? s++ : a === n && i++;
  return s > i ? n : r;
}
var an2 = oi;
function nr(t8) {
  if (typeof t8 != "string")
    throw new TypeError("Expected a string");
  return t8.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
var q3;
var sr2 = class {
  constructor(e) {
    Kr2(this, q3, void 0);
    Qr(this, q3, new Set(e));
  }
  getLeadingWhitespaceCount(e) {
    let r = Q2(this, q3), n = 0;
    for (let s = 0; s < e.length && r.has(e.charAt(s)); s++)
      n++;
    return n;
  }
  getTrailingWhitespaceCount(e) {
    let r = Q2(this, q3), n = 0;
    for (let s = e.length - 1; s >= 0 && r.has(e.charAt(s)); s--)
      n++;
    return n;
  }
  getLeadingWhitespace(e) {
    let r = this.getLeadingWhitespaceCount(e);
    return e.slice(0, r);
  }
  getTrailingWhitespace(e) {
    let r = this.getTrailingWhitespaceCount(e);
    return e.slice(e.length - r);
  }
  hasLeadingWhitespace(e) {
    return Q2(this, q3).has(e.charAt(0));
  }
  hasTrailingWhitespace(e) {
    return Q2(this, q3).has(X2(false, e, -1));
  }
  trimStart(e) {
    let r = this.getLeadingWhitespaceCount(e);
    return e.slice(r);
  }
  trimEnd(e) {
    let r = this.getTrailingWhitespaceCount(e);
    return e.slice(0, e.length - r);
  }
  trim(e) {
    return this.trimEnd(this.trimStart(e));
  }
  split(e, r = false) {
    let n = `[${nr([...Q2(this, q3)].join(""))}]+`, s = new RegExp(r ? `(${n})` : n);
    return e.split(s);
  }
  hasWhitespaceCharacter(e) {
    let r = Q2(this, q3);
    return Array.prototype.some.call(e, (n) => r.has(n));
  }
  hasNonWhitespaceCharacter(e) {
    let r = Q2(this, q3);
    return Array.prototype.some.call(e, (n) => !r.has(n));
  }
  isWhitespaceOnly(e) {
    let r = Q2(this, q3);
    return Array.prototype.every.call(e, (n) => r.has(n));
  }
};
q3 = /* @__PURE__ */ new WeakMap();
var on2 = sr2;
var ui2 = ["	", `
`, "\f", "\r", " "];
var li = new on2(ui2);
var F2 = li;
var ir2 = class extends Error {
  constructor(e, r, n = "type") {
    super(`Unexpected ${r} node ${n}: ${JSON.stringify(e[n])}.`);
    __publicField(this, "name", "UnexpectedNodeError");
    this.node = e;
  }
};
var un2 = ir2;
function ci(t8) {
  return (t8 == null ? void 0 : t8.type) === "front-matter";
}
var Re2 = ci;
var pi = /* @__PURE__ */ new Set(["sourceSpan", "startSourceSpan", "endSourceSpan", "nameSpan", "valueSpan", "keySpan", "tagDefinition", "tokens", "valueTokens", "switchValueSourceSpan", "expSourceSpan", "valueSourceSpan"]);
var hi = /* @__PURE__ */ new Set(["if", "else if", "for", "switch", "case"]);
function ln2(t8, e) {
  var r;
  if (t8.type === "text" || t8.type === "comment" || Re2(t8) || t8.type === "yaml" || t8.type === "toml")
    return null;
  if (t8.type === "attribute" && delete e.value, t8.type === "docType" && delete e.value, t8.type === "angularControlFlowBlock" && ((r = e.parameters) != null && r.children))
    for (let n of e.parameters.children)
      hi.has(t8.name) ? delete n.expression : n.expression = n.expression.trim();
  t8.type === "angularIcuExpression" && (e.switchValue = t8.switchValue.trim());
}
ln2.ignoredProperties = pi;
var cn2 = ln2;
async function fi(t8, e) {
  if (t8.lang === "yaml") {
    let r = t8.value.trim(), n = r ? await e(r, { parser: "yaml" }) : "";
    return en([t8.startDelimiter, S2, n, n ? S2 : "", t8.endDelimiter]);
  }
}
var pn2 = fi;
function ge(t8, e = true) {
  return [L2([v2, t8]), e ? v2 : ""];
}
function j2(t8, e) {
  let r = t8.type === "NGRoot" ? t8.node.type === "NGMicrosyntax" && t8.node.body.length === 1 && t8.node.body[0].type === "NGMicrosyntaxExpression" ? t8.node.body[0].expression : t8.node : t8.type === "JsExpressionRoot" ? t8.node : t8;
  return r && (r.type === "ObjectExpression" || r.type === "ArrayExpression" || (e.parser === "__vue_expression" || e.parser === "__vue_ts_expression") && (r.type === "TemplateLiteral" || r.type === "StringLiteral"));
}
async function x2(t8, e, r, n) {
  r = { __isInHtmlAttribute: true, __embeddedInHtml: true, ...r };
  let s = true;
  n && (r.__onHtmlBindingRoot = (a, o) => {
    s = n(a, o);
  });
  let i = await e(t8, r, e);
  return s ? E(i) : ge(i);
}
function mi(t8, e, r, n) {
  let { node: s } = r, i = n.originalText.slice(s.sourceSpan.start.offset, s.sourceSpan.end.offset);
  return /^\s*$/.test(i) ? "" : x2(i, t8, { parser: "__ng_directive", __isInHtmlAttribute: false, trailingComma: "none" }, j2);
}
var hn2 = mi;
var gi = (t8) => String(t8).split(/[/\\]/).pop();
function fn2(t8, e) {
  var _a3;
  if (!e)
    return;
  let r = gi(e).toLowerCase();
  return (_a3 = t8.find(({ filenames: n }) => n == null ? void 0 : n.some((s) => s.toLowerCase() === r))) != null ? _a3 : t8.find(({ extensions: n }) => n == null ? void 0 : n.some((s) => r.endsWith(s)));
}
function di(t8, e) {
  var _a3, _b;
  if (e)
    return (_b = (_a3 = t8.find(({ name: r }) => r.toLowerCase() === e)) != null ? _a3 : t8.find(({ aliases: r }) => r == null ? void 0 : r.includes(e))) != null ? _b : t8.find(({ extensions: r }) => r == null ? void 0 : r.includes(`.${e}`));
}
function Ci(t8, e) {
  var _a3, _b, _c;
  let r = t8.plugins.flatMap((s) => {
    var _a4;
    return (_a4 = s.languages) != null ? _a4 : [];
  }), n = (_c = (_b = (_a3 = di(r, e.language)) != null ? _a3 : fn2(r, e.physicalFile)) != null ? _b : fn2(r, e.file)) != null ? _c : (e.physicalFile, void 0);
  return n == null ? void 0 : n.parsers[0];
}
var $e2 = Ci;
var mn2 = "inline";
var gn2 = { area: "none", base: "none", basefont: "none", datalist: "none", head: "none", link: "none", meta: "none", noembed: "none", noframes: "none", param: "block", rp: "none", script: "block", style: "none", template: "inline", title: "none", html: "block", body: "block", address: "block", blockquote: "block", center: "block", dialog: "block", div: "block", figure: "block", figcaption: "block", footer: "block", form: "block", header: "block", hr: "block", legend: "block", listing: "block", main: "block", p: "block", plaintext: "block", pre: "block", search: "block", xmp: "block", slot: "contents", ruby: "ruby", rt: "ruby-text", article: "block", aside: "block", h1: "block", h2: "block", h3: "block", h4: "block", h5: "block", h6: "block", hgroup: "block", nav: "block", section: "block", dir: "block", dd: "block", dl: "block", dt: "block", menu: "block", ol: "block", ul: "block", li: "list-item", table: "table", caption: "table-caption", colgroup: "table-column-group", col: "table-column", thead: "table-header-group", tbody: "table-row-group", tfoot: "table-footer-group", tr: "table-row", td: "table-cell", th: "table-cell", input: "inline-block", button: "inline-block", fieldset: "block", marquee: "inline-block", source: "block", track: "block", details: "block", summary: "block", meter: "inline-block", progress: "inline-block", object: "inline-block", video: "inline-block", audio: "inline-block", select: "inline-block", option: "block", optgroup: "block" };
var dn2 = "normal";
var Cn2 = { listing: "pre", plaintext: "pre", pre: "pre", xmp: "pre", nobr: "nowrap", table: "initial", textarea: "pre-wrap" };
function Si(t8) {
  return t8.type === "element" && !t8.hasExplicitNamespace && !["html", "svg"].includes(t8.namespace);
}
var de2 = Si;
var _i = (t8) => w2(false, t8, /^[\t\f\r ]*\n/g, "");
var ar2 = (t8) => _i(F2.trimEnd(t8));
var Sn = (t8) => {
  let e = t8, r = F2.getLeadingWhitespace(e);
  r && (e = e.slice(r.length));
  let n = F2.getTrailingWhitespace(e);
  return n && (e = e.slice(0, -n.length)), { leadingWhitespace: r, trailingWhitespace: n, text: e };
};
function Et(t8, e) {
  return !!(t8.type === "ieConditionalComment" && t8.lastChild && !t8.lastChild.isSelfClosing && !t8.lastChild.endSourceSpan || t8.type === "ieConditionalComment" && !t8.complete || Ce2(t8) && t8.children.some((r) => r.type !== "text" && r.type !== "interpolation") || vt2(t8, e) && !U2(t8) && t8.type !== "interpolation");
}
function Se2(t8) {
  return t8.type === "attribute" || !t8.parent || !t8.prev ? false : Ei(t8.prev);
}
function Ei(t8) {
  return t8.type === "comment" && t8.value.trim() === "prettier-ignore";
}
function R2(t8) {
  return t8.type === "text" || t8.type === "comment";
}
function U2(t8) {
  return t8.type === "element" && (t8.fullName === "script" || t8.fullName === "style" || t8.fullName === "svg:style" || t8.fullName === "svg:script" || de2(t8) && (t8.name === "script" || t8.name === "style"));
}
function _n2(t8) {
  return t8.children && !U2(t8);
}
function En2(t8) {
  return U2(t8) || t8.type === "interpolation" || or(t8);
}
function or(t8) {
  return Ln2(t8).startsWith("pre");
}
function An2(t8, e) {
  var s, i;
  let r = n();
  if (r && !t8.prev && ((i = (s = t8.parent) == null ? void 0 : s.tagDefinition) != null && i.ignoreFirstLf))
    return t8.type === "interpolation";
  return r;
  function n() {
    return Re2(t8) || t8.type === "angularControlFlowBlock" ? false : (t8.type === "text" || t8.type === "interpolation") && t8.prev && (t8.prev.type === "text" || t8.prev.type === "interpolation") ? true : !t8.parent || t8.parent.cssDisplay === "none" ? false : Ce2(t8.parent) ? true : !(!t8.prev && (t8.parent.type === "root" || Ce2(t8) && t8.parent || U2(t8.parent) || Je2(t8.parent, e) || !bi(t8.parent.cssDisplay)) || t8.prev && !ki(t8.prev.cssDisplay));
  }
}
function Dn2(t8, e) {
  return Re2(t8) || t8.type === "angularControlFlowBlock" ? false : (t8.type === "text" || t8.type === "interpolation") && t8.next && (t8.next.type === "text" || t8.next.type === "interpolation") ? true : !t8.parent || t8.parent.cssDisplay === "none" ? false : Ce2(t8.parent) ? true : !(!t8.next && (t8.parent.type === "root" || Ce2(t8) && t8.parent || U2(t8.parent) || Je2(t8.parent, e) || !Ti(t8.parent.cssDisplay)) || t8.next && !xi(t8.next.cssDisplay));
}
function vn(t8) {
  return Bi(t8.cssDisplay) && !U2(t8);
}
function Qe2(t8) {
  return Re2(t8) || t8.next && t8.sourceSpan.end && t8.sourceSpan.end.line + 1 < t8.next.sourceSpan.start.line;
}
function yn2(t8) {
  return ur2(t8) || t8.type === "element" && t8.children.length > 0 && (["body", "script", "style"].includes(t8.name) || t8.children.some((e) => Di(e))) || t8.firstChild && t8.firstChild === t8.lastChild && t8.firstChild.type !== "text" && bn2(t8.firstChild) && (!t8.lastChild.isTrailingSpaceSensitive || Tn(t8.lastChild));
}
function ur2(t8) {
  return t8.type === "element" && t8.children.length > 0 && (["html", "head", "ul", "ol", "select"].includes(t8.name) || t8.cssDisplay.startsWith("table") && t8.cssDisplay !== "table-cell");
}
function At2(t8) {
  return xn2(t8) || t8.prev && Ai(t8.prev) || wn(t8);
}
function Ai(t8) {
  return xn2(t8) || t8.type === "element" && t8.fullName === "br" || wn(t8);
}
function wn(t8) {
  return bn2(t8) && Tn(t8);
}
function bn2(t8) {
  return t8.hasLeadingSpaces && (t8.prev ? t8.prev.sourceSpan.end.line < t8.sourceSpan.start.line : t8.parent.type === "root" || t8.parent.startSourceSpan.end.line < t8.sourceSpan.start.line);
}
function Tn(t8) {
  return t8.hasTrailingSpaces && (t8.next ? t8.next.sourceSpan.start.line > t8.sourceSpan.end.line : t8.parent.type === "root" || t8.parent.endSourceSpan && t8.parent.endSourceSpan.start.line > t8.sourceSpan.end.line);
}
function xn2(t8) {
  switch (t8.type) {
    case "ieConditionalComment":
    case "comment":
    case "directive":
      return true;
    case "element":
      return ["script", "select"].includes(t8.name);
  }
  return false;
}
function Dt2(t8) {
  return t8.lastChild ? Dt2(t8.lastChild) : t8;
}
function Di(t8) {
  var e;
  return (e = t8.children) == null ? void 0 : e.some((r) => r.type !== "text");
}
function kn2(t8) {
  if (t8)
    switch (t8) {
      case "module":
      case "text/javascript":
      case "text/babel":
      case "application/javascript":
        return "babel";
      case "application/x-typescript":
        return "typescript";
      case "text/markdown":
        return "markdown";
      case "text/html":
        return "html";
      case "text/x-handlebars-template":
        return "glimmer";
      default:
        if (t8.endsWith("json") || t8.endsWith("importmap") || t8 === "speculationrules")
          return "json";
    }
}
function vi(t8, e) {
  var _a3;
  let { name: r, attrMap: n } = t8;
  if (r !== "script" || Object.prototype.hasOwnProperty.call(n, "src"))
    return;
  let { type: s, lang: i } = t8.attrMap;
  return !i && !s ? "babel" : (_a3 = $e2(e, { language: i })) != null ? _a3 : kn2(s);
}
function yi(t8, e) {
  var _a3;
  if (!vt2(t8, e))
    return;
  let { attrMap: r } = t8;
  if (Object.prototype.hasOwnProperty.call(r, "src"))
    return;
  let { type: n, lang: s } = r;
  return (_a3 = $e2(e, { language: s })) != null ? _a3 : kn2(n);
}
function wi(t8, e) {
  if (t8.name !== "style")
    return;
  let { lang: r } = t8.attrMap;
  return r ? $e2(e, { language: r }) : "css";
}
function lr2(t8, e) {
  var _a3, _b;
  return (_b = (_a3 = vi(t8, e)) != null ? _a3 : wi(t8, e)) != null ? _b : yi(t8, e);
}
function Xe2(t8) {
  return t8 === "block" || t8 === "list-item" || t8.startsWith("table");
}
function bi(t8) {
  return !Xe2(t8) && t8 !== "inline-block";
}
function Ti(t8) {
  return !Xe2(t8) && t8 !== "inline-block";
}
function xi(t8) {
  return !Xe2(t8);
}
function ki(t8) {
  return !Xe2(t8);
}
function Bi(t8) {
  return !Xe2(t8) && t8 !== "inline-block";
}
function Ce2(t8) {
  return Ln2(t8).startsWith("pre");
}
function Li(t8, e) {
  let r = t8;
  for (; r; ) {
    if (e(r))
      return true;
    r = r.parent;
  }
  return false;
}
function Bn2(t8, e) {
  var n;
  if (_e2(t8, e))
    return "block";
  if (((n = t8.prev) == null ? void 0 : n.type) === "comment") {
    let s = t8.prev.value.match(/^\s*display:\s*([a-z]+)\s*$/);
    if (s)
      return s[1];
  }
  let r = false;
  if (t8.type === "element" && t8.namespace === "svg")
    if (Li(t8, (s) => s.fullName === "svg:foreignObject"))
      r = true;
    else
      return t8.name === "svg" ? "inline-block" : "block";
  switch (e.htmlWhitespaceSensitivity) {
    case "strict":
      return "inline";
    case "ignore":
      return "block";
    default:
      return t8.type === "element" && (!t8.namespace || r || de2(t8)) && gn2[t8.name] || mn2;
  }
}
function Ln2(t8) {
  return t8.type === "element" && (!t8.namespace || de2(t8)) && Cn2[t8.name] || dn2;
}
function Fi(t8) {
  let e = Number.POSITIVE_INFINITY;
  for (let r of t8.split(`
`)) {
    if (r.length === 0)
      continue;
    let n = F2.getLeadingWhitespaceCount(r);
    if (n === 0)
      return 0;
    r.length !== n && n < e && (e = n);
  }
  return e === Number.POSITIVE_INFINITY ? 0 : e;
}
function cr2(t8, e = Fi(t8)) {
  return e === 0 ? t8 : t8.split(`
`).map((r) => r.slice(e)).join(`
`);
}
function pr2(t8) {
  return w2(false, w2(false, t8, "&apos;", "'"), "&quot;", '"');
}
function P2(t8) {
  return pr2(t8.value);
}
var Pi = /* @__PURE__ */ new Set(["template", "style", "script"]);
function Je2(t8, e) {
  return _e2(t8, e) && !Pi.has(t8.fullName);
}
function _e2(t8, e) {
  return e.parser === "vue" && t8.type === "element" && t8.parent.type === "root" && t8.fullName.toLowerCase() !== "html";
}
function vt2(t8, e) {
  return _e2(t8, e) && (Je2(t8, e) || t8.attrMap.lang && t8.attrMap.lang !== "html");
}
function Fn2(t8) {
  let e = t8.fullName;
  return e.charAt(0) === "#" || e === "slot-scope" || e === "v-slot" || e.startsWith("v-slot:");
}
function Pn2(t8, e) {
  let r = t8.parent;
  if (!_e2(r, e))
    return false;
  let n = r.fullName, s = t8.fullName;
  return n === "script" && s === "setup" || n === "style" && s === "vars";
}
function yt2(t8, e = t8.value) {
  return t8.parent.isWhitespaceSensitive ? t8.parent.isIndentationSensitive ? T2(e) : T2(cr2(ar2(e)), S2) : M2(A2, F2.split(e));
}
function wt2(t8, e) {
  return _e2(t8, e) && t8.name === "script";
}
var hr2 = /{{(.+?)}}/s;
async function Nn(t8, e) {
  let r = [];
  for (let [n, s] of t8.split(hr2).entries())
    if (n % 2 === 0)
      r.push(T2(s));
    else
      try {
        r.push(E(["{{", L2([A2, await x2(s, e, { parser: "__ng_interpolation", __isInHtmlInterpolation: true, trailingComma: "none" })]), A2, "}}"]));
      } catch (e2) {
        r.push("{{", T2(s), "}}");
      }
  return r;
}
function fr2({ parser: t8 }) {
  return (e, r, n) => x2(P2(n.node), e, { parser: t8, trailingComma: "none" }, j2);
}
var Ni = fr2({ parser: "__ng_action" });
var Ii = fr2({ parser: "__ng_binding" });
var Ri = fr2({ parser: "__ng_directive" });
function $i(t8, e) {
  if (e.parser !== "angular")
    return;
  let { node: r } = t8, n = r.fullName;
  if (n.startsWith("(") && n.endsWith(")") || n.startsWith("on-"))
    return Ni;
  if (n.startsWith("[") && n.endsWith("]") || /^bind(?:on)?-/.test(n) || /^ng-(?:if|show|hide|class|style)$/.test(n))
    return Ii;
  if (n.startsWith("*"))
    return Ri;
  let s = P2(r);
  if (/^i18n(?:-.+)?$/.test(n))
    return () => ge(Ct2(yt2(r, s.trim())), !s.includes("@@"));
  if (hr2.test(s))
    return (i) => Nn(s, i);
}
var In2 = $i;
function Oi(t8, e) {
  let { node: r } = t8, n = P2(r);
  if (r.fullName === "class" && !e.parentParser && !n.includes("{{"))
    return () => n.trim().split(/\s+/).join(" ");
}
var Rn2 = Oi;
function $n2(t8) {
  return t8 === "	" || t8 === `
` || t8 === "\f" || t8 === "\r" || t8 === " ";
}
var Mi = /^[ \t\n\r\u000c]+/;
var qi = /^[, \t\n\r\u000c]+/;
var Hi = /^[^ \t\n\r\u000c]+/;
var Vi = /[,]+$/;
var On = /^\d+$/;
var Ui = /^-?(?:[0-9]+|[0-9]*\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/;
function Wi(t8) {
  let e = t8.length, r, n, s, i, a, o = 0, u;
  function p(C2) {
    let _2, D = C2.exec(t8.substring(o));
    if (D)
      return [_2] = D, o += _2.length, _2;
  }
  let l = [];
  for (; ; ) {
    if (p(qi), o >= e) {
      if (l.length === 0)
        throw new Error("Must contain one or more image candidate strings.");
      return l;
    }
    u = o, r = p(Hi), n = [], r.slice(-1) === "," ? (r = r.replace(Vi, ""), g()) : m();
  }
  function m() {
    for (p(Mi), s = "", i = "in descriptor"; ; ) {
      if (a = t8.charAt(o), i === "in descriptor")
        if ($n2(a))
          s && (n.push(s), s = "", i = "after descriptor");
        else if (a === ",") {
          o += 1, s && n.push(s), g();
          return;
        } else if (a === "(")
          s += a, i = "in parens";
        else if (a === "") {
          s && n.push(s), g();
          return;
        } else
          s += a;
      else if (i === "in parens")
        if (a === ")")
          s += a, i = "in descriptor";
        else if (a === "") {
          n.push(s), g();
          return;
        } else
          s += a;
      else if (i === "after descriptor" && !$n2(a))
        if (a === "") {
          g();
          return;
        } else
          i = "in descriptor", o -= 1;
      o += 1;
    }
  }
  function g() {
    let C2 = false, _2, D, I2, B, c = {}, d, y2, O2, b2, V4;
    for (B = 0; B < n.length; B++)
      d = n[B], y2 = d[d.length - 1], O2 = d.substring(0, d.length - 1), b2 = parseInt(O2, 10), V4 = parseFloat(O2), On.test(O2) && y2 === "w" ? ((_2 || D) && (C2 = true), b2 === 0 ? C2 = true : _2 = b2) : Ui.test(O2) && y2 === "x" ? ((_2 || D || I2) && (C2 = true), V4 < 0 ? C2 = true : D = V4) : On.test(O2) && y2 === "h" ? ((I2 || D) && (C2 = true), b2 === 0 ? C2 = true : I2 = b2) : C2 = true;
    if (!C2)
      c.source = { value: r, startOffset: u }, _2 && (c.width = { value: _2 }), D && (c.density = { value: D }), I2 && (c.height = { value: I2 }), l.push(c);
    else
      throw new Error(`Invalid srcset descriptor found in "${t8}" at "${d}".`);
  }
}
var Mn2 = Wi;
function zi(t8) {
  if (t8.node.fullName === "srcset" && (t8.parent.fullName === "img" || t8.parent.fullName === "source"))
    return () => Yi(P2(t8.node));
}
var qn2 = { width: "w", height: "h", density: "x" };
var Gi = Object.keys(qn2);
function Yi(t8) {
  let e = Mn2(t8), r = Gi.filter((l) => e.some((m) => Object.prototype.hasOwnProperty.call(m, l)));
  if (r.length > 1)
    throw new Error("Mixed descriptor in srcset is not supported");
  let [n] = r, s = qn2[n], i = e.map((l) => l.source.value), a = Math.max(...i.map((l) => l.length)), o = e.map((l) => l[n] ? String(l[n].value) : ""), u = o.map((l) => {
    let m = l.indexOf(".");
    return m === -1 ? l.length : m;
  }), p = Math.max(...u);
  return ge(M2([",", A2], i.map((l, m) => {
    let g = [l], C2 = o[m];
    if (C2) {
      let _2 = a - l.length + 1, D = p - u[m], I2 = " ".repeat(_2 + D);
      g.push(me2(I2, " "), C2 + s);
    }
    return g;
  })));
}
var Hn2 = zi;
function Vn2(t8, e) {
  let { node: r } = t8, n = P2(t8.node).trim();
  if (r.fullName === "style" && !e.parentParser && !n.includes("{{"))
    return async (s) => ge(await s(n, { parser: "css", __isHTMLStyleAttribute: true }));
}
var mr2 = /* @__PURE__ */ new WeakMap();
function ji(t8, e) {
  let { root: r } = t8;
  return mr2.has(r) || mr2.set(r, r.children.some((n) => wt2(n, e) && ["ts", "typescript"].includes(n.attrMap.lang))), mr2.get(r);
}
var Oe2 = ji;
function Un2(t8, e, r) {
  let { node: n } = r, s = P2(n);
  return x2(`type T<${s}> = any`, t8, { parser: "babel-ts", __isEmbeddedTypescriptGenericParameters: true }, j2);
}
function Wn2(t8, e, { parseWithTs: r }) {
  return x2(`function _(${t8}) {}`, e, { parser: r ? "babel-ts" : "babel", __isVueBindings: true });
}
function zn2(t8) {
  let e = /^(?:[\w$]+|\([^)]*\))\s*=>|^function\s*\(/, r = /^[$_a-z][\w$]*(?:\.[$_a-z][\w$]*|\['[^']*']|\["[^"]*"]|\[\d+]|\[[$_a-z][\w$]*])*$/i, n = t8.trim();
  return e.test(n) || r.test(n);
}
async function Gn2(t8, e, r, n) {
  let s = P2(r.node), { left: i, operator: a, right: o } = Ki(s), u = Oe2(r, n);
  return [E(await x2(`function _(${i}) {}`, t8, { parser: u ? "babel-ts" : "babel", __isVueForBindingLeft: true })), " ", a, " ", await x2(o, t8, { parser: u ? "__ts_expression" : "__js_expression" })];
}
function Ki(t8) {
  let e = /(.*?)\s+(in|of)\s+(.*)/s, r = /,([^,\]}]*)(?:,([^,\]}]*))?$/, n = /^\(|\)$/g, s = t8.match(e);
  if (!s)
    return;
  let i = {};
  if (i.for = s[3].trim(), !i.for)
    return;
  let a = w2(false, s[1].trim(), n, ""), o = a.match(r);
  o ? (i.alias = a.replace(r, ""), i.iterator1 = o[1].trim(), o[2] && (i.iterator2 = o[2].trim())) : i.alias = a;
  let u = [i.alias, i.iterator1, i.iterator2];
  if (!u.some((p, l) => !p && (l === 0 || u.slice(l + 1).some(Boolean))))
    return { left: u.filter(Boolean).join(","), operator: s[2], right: i.for };
}
function Qi(t8, e) {
  if (e.parser !== "vue")
    return;
  let { node: r } = t8, n = r.fullName;
  if (n === "v-for")
    return Gn2;
  if (n === "generic" && wt2(r.parent, e))
    return Un2;
  let s = P2(r), i = Oe2(t8, e);
  if (Fn2(r) || Pn2(r, e))
    return (a) => Wn2(s, a, { parseWithTs: i });
  if (n.startsWith("@") || n.startsWith("v-on:"))
    return (a) => Xi(s, a, { parseWithTs: i });
  if (n.startsWith(":") || n.startsWith("v-bind:"))
    return (a) => Ji(s, a, { parseWithTs: i });
  if (n.startsWith("v-"))
    return (a) => Yn2(s, a, { parseWithTs: i });
}
function Xi(t8, e, { parseWithTs: r }) {
  return zn2(t8) ? Yn2(t8, e, { parseWithTs: r }) : x2(t8, e, { parser: r ? "__vue_ts_event_binding" : "__vue_event_binding" }, j2);
}
function Ji(t8, e, { parseWithTs: r }) {
  return x2(t8, e, { parser: r ? "__vue_ts_expression" : "__vue_expression" }, j2);
}
function Yn2(t8, e, { parseWithTs: r }) {
  return x2(t8, e, { parser: r ? "__ts_expression" : "__js_expression" }, j2);
}
var jn2 = Qi;
function Zi(t8, e) {
  let { node: r } = t8;
  if (r.value) {
    if (/^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/.test(e.originalText.slice(r.valueSpan.start.offset, r.valueSpan.end.offset)) || e.parser === "lwc" && r.value.startsWith("{") && r.value.endsWith("}"))
      return [r.rawName, "=", r.value];
    for (let n of [Hn2, Vn2, Rn2, jn2, In2]) {
      let s = n(t8, e);
      if (s)
        return ea(s);
    }
  }
}
function ea(t8) {
  return async (e, r, n, s) => {
    let i = await t8(e, r, n, s);
    if (i)
      return i = St2(i, (a) => typeof a == "string" ? w2(false, a, '"', "&quot;") : a), [n.node.rawName, '="', E(i), '"'];
  };
}
var Kn2 = Zi;
var Qn2 = new Proxy(() => {
}, { get: () => Qn2 });
var gr2 = Qn2;
function ta(t8) {
  return Array.isArray(t8) && t8.length > 0;
}
var Me2 = ta;
function se3(t8) {
  return t8.sourceSpan.start.offset;
}
function ie2(t8) {
  return t8.sourceSpan.end.offset;
}
function Ze2(t8, e) {
  return [t8.isSelfClosing ? "" : ra(t8, e), Ee2(t8, e)];
}
function ra(t8, e) {
  return t8.lastChild && ve2(t8.lastChild) ? "" : [na(t8, e), bt2(t8, e)];
}
function Ee2(t8, e) {
  return (t8.next ? K2(t8.next) : De2(t8.parent)) ? "" : [Ae2(t8, e), W2(t8, e)];
}
function na(t8, e) {
  return De2(t8) ? Ae2(t8.lastChild, e) : "";
}
function W2(t8, e) {
  return ve2(t8) ? bt2(t8.parent, e) : et2(t8) ? Tt2(t8.next) : "";
}
function bt2(t8, e) {
  if (gr2(!t8.isSelfClosing), Xn2(t8, e))
    return "";
  switch (t8.type) {
    case "ieConditionalComment":
      return "<!";
    case "element":
      if (t8.hasHtmComponentClosingTag)
        return "<//";
    default:
      return `</${t8.rawName}`;
  }
}
function Ae2(t8, e) {
  if (Xn2(t8, e))
    return "";
  switch (t8.type) {
    case "ieConditionalComment":
    case "ieConditionalEndComment":
      return "[endif]-->";
    case "ieConditionalStartComment":
      return "]><!-->";
    case "interpolation":
      return "}}";
    case "angularIcuExpression":
      return "}";
    case "element":
      if (t8.isSelfClosing)
        return "/>";
    default:
      return ">";
  }
}
function Xn2(t8, e) {
  return !t8.isSelfClosing && !t8.endSourceSpan && (Se2(t8) || Et(t8.parent, e));
}
function K2(t8) {
  return t8.prev && t8.prev.type !== "docType" && t8.type !== "angularControlFlowBlock" && !R2(t8.prev) && t8.isLeadingSpaceSensitive && !t8.hasLeadingSpaces;
}
function De2(t8) {
  var e;
  return ((e = t8.lastChild) == null ? void 0 : e.isTrailingSpaceSensitive) && !t8.lastChild.hasTrailingSpaces && !R2(Dt2(t8.lastChild)) && !Ce2(t8);
}
function ve2(t8) {
  return !t8.next && !t8.hasTrailingSpaces && t8.isTrailingSpaceSensitive && R2(Dt2(t8));
}
function et2(t8) {
  return t8.next && !R2(t8.next) && R2(t8) && t8.isTrailingSpaceSensitive && !t8.hasTrailingSpaces;
}
function sa(t8) {
  let e = t8.trim().match(/^prettier-ignore-attribute(?:\s+(.+))?$/s);
  return e ? e[1] ? e[1].split(/\s+/) : true : false;
}
function tt2(t8) {
  return !t8.prev && t8.isLeadingSpaceSensitive && !t8.hasLeadingSpaces;
}
function ia(t8, e, r) {
  var m;
  let { node: n } = t8;
  if (!Me2(n.attrs))
    return n.isSelfClosing ? " " : "";
  let s = ((m = n.prev) == null ? void 0 : m.type) === "comment" && sa(n.prev.value), i = typeof s == "boolean" ? () => s : Array.isArray(s) ? (g) => s.includes(g.rawName) : () => false, a = t8.map(({ node: g }) => i(g) ? T2(e.originalText.slice(se3(g), ie2(g))) : r(), "attrs"), o = n.type === "element" && n.fullName === "script" && n.attrs.length === 1 && n.attrs[0].fullName === "src" && n.children.length === 0, p = e.singleAttributePerLine && n.attrs.length > 1 && !_e2(n, e) ? S2 : A2, l = [L2([o ? " " : A2, M2(p, a)])];
  return n.firstChild && tt2(n.firstChild) || n.isSelfClosing && De2(n.parent) || o ? l.push(n.isSelfClosing ? " " : "") : l.push(e.bracketSameLine ? n.isSelfClosing ? " " : "" : n.isSelfClosing ? A2 : v2), l;
}
function aa(t8) {
  return t8.firstChild && tt2(t8.firstChild) ? "" : xt2(t8);
}
function rt2(t8, e, r) {
  let { node: n } = t8;
  return [ye(n, e), ia(t8, e, r), n.isSelfClosing ? "" : aa(n)];
}
function ye(t8, e) {
  return t8.prev && et2(t8.prev) ? "" : [z2(t8, e), Tt2(t8)];
}
function z2(t8, e) {
  return tt2(t8) ? xt2(t8.parent) : K2(t8) ? Ae2(t8.prev, e) : "";
}
function Tt2(t8) {
  switch (t8.type) {
    case "ieConditionalComment":
    case "ieConditionalStartComment":
      return `<!--[if ${t8.condition}`;
    case "ieConditionalEndComment":
      return "<!--<!";
    case "interpolation":
      return "{{";
    case "docType":
      return t8.value === "html" ? "<!doctype" : "<!DOCTYPE";
    case "angularIcuExpression":
      return "{";
    case "element":
      if (t8.condition)
        return `<!--[if ${t8.condition}]><!--><${t8.rawName}`;
    default:
      return `<${t8.rawName}`;
  }
}
function xt2(t8) {
  switch (gr2(!t8.isSelfClosing), t8.type) {
    case "ieConditionalComment":
      return "]>";
    case "element":
      if (t8.condition)
        return "><!--<![endif]-->";
    default:
      return ">";
  }
}
function oa(t8, e) {
  if (!t8.endSourceSpan)
    return "";
  let r = t8.startSourceSpan.end.offset;
  t8.firstChild && tt2(t8.firstChild) && (r -= xt2(t8).length);
  let n = t8.endSourceSpan.start.offset;
  return t8.lastChild && ve2(t8.lastChild) ? n += bt2(t8, e).length : De2(t8) && (n -= Ae2(t8.lastChild, e).length), e.originalText.slice(r, n);
}
var kt2 = oa;
var ua = /* @__PURE__ */ new Set(["if", "else if", "for", "switch", "case"]);
function la(t8, e) {
  let { node: r } = t8;
  switch (r.type) {
    case "element":
      if (U2(r) || r.type === "interpolation")
        return;
      if (!r.isSelfClosing && vt2(r, e)) {
        let n = lr2(r, e);
        return n ? async (s, i) => {
          let a = kt2(r, e), o = /^\s*$/.test(a), u = "";
          return o || (u = await s(ar2(a), { parser: n, __embeddedInHtml: true }), o = u === ""), [z2(r, e), E(rt2(t8, e, i)), o ? "" : S2, u, o ? "" : S2, Ze2(r, e), W2(r, e)];
        } : void 0;
      }
      break;
    case "text":
      if (U2(r.parent)) {
        let n = lr2(r.parent, e);
        if (n)
          return async (s) => {
            let i = n === "markdown" ? cr2(r.value.replace(/^[^\S\n]*\n/, "")) : r.value, a = { parser: n, __embeddedInHtml: true };
            if (e.parser === "html" && n === "babel") {
              let o = "script", { attrMap: u } = r.parent;
              u && (u.type === "module" || u.type === "text/babel" && u["data-type"] === "module") && (o = "module"), a.__babelSourceType = o;
            }
            return [ne3, z2(r, e), await s(i, a), W2(r, e)];
          };
      } else if (r.parent.type === "interpolation")
        return async (n) => {
          let s = { __isInHtmlInterpolation: true, __embeddedInHtml: true };
          return e.parser === "angular" ? (s.parser = "__ng_interpolation", s.trailingComma = "none") : e.parser === "vue" ? s.parser = Oe2(t8, e) ? "__vue_ts_expression" : "__vue_expression" : s.parser = "__js_expression", [L2([A2, await n(r.value, s)]), r.parent.next && K2(r.parent.next) ? " " : A2];
        };
      break;
    case "attribute":
      return Kn2(t8, e);
    case "front-matter":
      return (n) => pn2(r, n);
    case "angularControlFlowBlockParameters":
      return ua.has(t8.parent.name) ? hn2 : void 0;
  }
}
var Jn2 = la;
var nt2 = null;
function st2(t8) {
  if (nt2 !== null && typeof nt2.property) {
    let e = nt2;
    return nt2 = st2.prototype = null, e;
  }
  return nt2 = st2.prototype = t8 != null ? t8 : /* @__PURE__ */ Object.create(null), new st2();
}
var ca = 10;
for (let t8 = 0; t8 <= ca; t8++)
  st2();
function dr2(t8) {
  return st2(t8);
}
function pa(t8, e = "type") {
  dr2(t8);
  function r(n) {
    let s = n[e], i = t8[s];
    if (!Array.isArray(i))
      throw Object.assign(new Error(`Missing visitor keys for '${s}'.`), { node: n });
    return i;
  }
  return r;
}
var Zn2 = pa;
var ha = { "front-matter": [], root: ["children"], element: ["attrs", "children"], ieConditionalComment: ["children"], ieConditionalStartComment: [], ieConditionalEndComment: [], interpolation: ["children"], text: ["children"], docType: [], comment: [], attribute: [], cdata: [], angularControlFlowBlock: ["children", "parameters"], angularControlFlowBlockParameters: ["children"], angularControlFlowBlockParameter: [], angularIcuExpression: ["cases"], angularIcuCase: ["expression"] };
var es = ha;
var fa = Zn2(es);
var ts = fa;
function rs(t8) {
  return /^\s*<!--\s*@(?:format|prettier)\s*-->/.test(t8);
}
function ns(t8) {
  return `<!-- @format -->

` + t8;
}
var ss = /* @__PURE__ */ new Map([["if", /* @__PURE__ */ new Set(["else if", "else"])], ["else if", /* @__PURE__ */ new Set(["else if", "else"])], ["for", /* @__PURE__ */ new Set(["empty"])], ["defer", /* @__PURE__ */ new Set(["placeholder", "error", "loading"])], ["placeholder", /* @__PURE__ */ new Set(["placeholder", "error", "loading"])], ["error", /* @__PURE__ */ new Set(["placeholder", "error", "loading"])], ["loading", /* @__PURE__ */ new Set(["placeholder", "error", "loading"])]]);
function is(t8) {
  let e = ie2(t8);
  return t8.type === "element" && !t8.endSourceSpan && Me2(t8.children) ? Math.max(e, is(X2(false, t8.children, -1))) : e;
}
function it2(t8, e, r) {
  let n = t8.node;
  if (Se2(n)) {
    let s = is(n);
    return [z2(n, e), T2(F2.trimEnd(e.originalText.slice(se3(n) + (n.prev && et2(n.prev) ? Tt2(n).length : 0), s - (n.next && K2(n.next) ? Ae2(n, e).length : 0)))), W2(n, e)];
  }
  return r();
}
function Bt2(t8, e) {
  return R2(t8) && R2(e) ? t8.isTrailingSpaceSensitive ? t8.hasTrailingSpaces ? At2(e) ? S2 : A2 : "" : At2(e) ? S2 : v2 : et2(t8) && (Se2(e) || e.firstChild || e.isSelfClosing || e.type === "element" && e.attrs.length > 0) || t8.type === "element" && t8.isSelfClosing && K2(e) ? "" : !e.isLeadingSpaceSensitive || At2(e) || K2(e) && t8.lastChild && ve2(t8.lastChild) && t8.lastChild.lastChild && ve2(t8.lastChild.lastChild) ? S2 : e.hasLeadingSpaces ? A2 : v2;
}
function qe2(t8, e, r) {
  let { node: n } = t8;
  if (ur2(n))
    return [ne3, ...t8.map((i) => {
      let a = i.node, o = a.prev ? Bt2(a.prev, a) : "";
      return [o ? [o, Qe2(a.prev) ? S2 : ""] : "", it2(i, e, r)];
    }, "children")];
  let s = n.children.map(() => Symbol(""));
  return t8.map((i, a) => {
    let o = i.node;
    if (R2(o)) {
      if (o.prev && R2(o.prev)) {
        let _2 = Bt2(o.prev, o);
        if (_2)
          return Qe2(o.prev) ? [S2, S2, it2(i, e, r)] : [_2, it2(i, e, r)];
      }
      return it2(i, e, r);
    }
    let u = [], p = [], l = [], m = [], g = o.prev ? Bt2(o.prev, o) : "", C2 = o.next ? Bt2(o, o.next) : "";
    return g && (Qe2(o.prev) ? u.push(S2, S2) : g === S2 ? u.push(S2) : R2(o.prev) ? p.push(g) : p.push(me2("", v2, { groupId: s[a - 1] }))), C2 && (Qe2(o) ? R2(o.next) && m.push(S2, S2) : C2 === S2 ? R2(o.next) && m.push(S2) : l.push(C2)), [...u, E([...p, E([it2(i, e, r), ...l], { id: s[a] })]), ...m];
  }, "children");
}
function as(t8, e, r) {
  let { node: n } = t8, s = [];
  ma(t8) && s.push("} "), s.push("@", n.name), n.parameters && s.push(" (", E(r("parameters")), ")"), s.push(" {");
  let i = os(n);
  return n.children.length > 0 ? (n.firstChild.hasLeadingSpaces = true, n.lastChild.hasTrailingSpaces = true, s.push(L2([S2, qe2(t8, e, r)])), i && s.push(S2, "}")) : i && s.push("}"), E(s, { shouldBreak: true });
}
function os(t8) {
  var e, r;
  return !(((e = t8.next) == null ? void 0 : e.type) === "angularControlFlowBlock" && ((r = ss.get(t8.name)) != null && r.has(t8.next.name)));
}
function ma(t8) {
  let { previous: e } = t8;
  return (e == null ? void 0 : e.type) === "angularControlFlowBlock" && !Se2(e) && !os(e);
}
function us(t8, e, r) {
  return [L2([v2, M2([";", A2], t8.map(r, "children"))]), v2];
}
function ls(t8, e, r) {
  let { node: n } = t8;
  return [ye(n, e), E([n.switchValue.trim(), ", ", n.clause, n.cases.length > 0 ? [",", L2([A2, M2(A2, t8.map(r, "cases"))])] : "", v2]), Ee2(n, e)];
}
function cs(t8, e, r) {
  let { node: n } = t8;
  return [n.value, " {", E([L2([v2, t8.map(({ node: s }) => s.type === "text" && !F2.trim(s.value) ? "" : r(), "expression")]), v2]), "}"];
}
function ps(t8, e, r) {
  let { node: n } = t8;
  if (Et(n, e))
    return [z2(n, e), E(rt2(t8, e, r)), T2(kt2(n, e)), ...Ze2(n, e), W2(n, e)];
  let s = n.children.length === 1 && (n.firstChild.type === "interpolation" || n.firstChild.type === "angularIcuExpression") && n.firstChild.isLeadingSpaceSensitive && !n.firstChild.hasLeadingSpaces && n.lastChild.isTrailingSpaceSensitive && !n.lastChild.hasTrailingSpaces, i = Symbol("element-attr-group-id"), a = (l) => E([E(rt2(t8, e, r), { id: i }), l, Ze2(n, e)]), o = (l) => s ? tn2(l, { groupId: i }) : (U2(n) || Je2(n, e)) && n.parent.type === "root" && e.parser === "vue" && !e.vueIndentScriptAndStyle ? l : L2(l), u = () => s ? me2(v2, "", { groupId: i }) : n.firstChild.hasLeadingSpaces && n.firstChild.isLeadingSpaceSensitive ? A2 : n.firstChild.type === "text" && n.isWhitespaceSensitive && n.isIndentationSensitive ? Zr2(v2) : v2, p = () => (n.next ? K2(n.next) : De2(n.parent)) ? n.lastChild.hasTrailingSpaces && n.lastChild.isTrailingSpaceSensitive ? " " : "" : s ? me2(v2, "", { groupId: i }) : n.lastChild.hasTrailingSpaces && n.lastChild.isTrailingSpaceSensitive ? A2 : (n.lastChild.type === "comment" || n.lastChild.type === "text" && n.isWhitespaceSensitive && n.isIndentationSensitive) && new RegExp(`\\n[\\t ]{${e.tabWidth * (t8.ancestors.length - 1)}}$`).test(n.lastChild.value) ? "" : v2;
  return n.children.length === 0 ? a(n.hasDanglingSpaces && n.isDanglingSpaceSensitive ? A2 : "") : a([yn2(n) ? ne3 : "", o([u(), qe2(t8, e, r)]), p()]);
}
function Lt2(t8) {
  return t8 >= 9 && t8 <= 32 || t8 == 160;
}
function Cr2(t8) {
  return 48 <= t8 && t8 <= 57;
}
function Ft2(t8) {
  return t8 >= 97 && t8 <= 122 || t8 >= 65 && t8 <= 90;
}
function hs(t8) {
  return t8 >= 97 && t8 <= 102 || t8 >= 65 && t8 <= 70 || Cr2(t8);
}
function Sr2(t8) {
  return t8 === 10 || t8 === 13;
}
function _r2(t8) {
  return 48 <= t8 && t8 <= 55;
}
function Er2(t8) {
  return t8 === 39 || t8 === 34 || t8 === 96;
}
var ga = /-+([a-z0-9])/g;
function ms(t8) {
  return t8.replace(ga, (...e) => e[1].toUpperCase());
}
var ae2 = class t {
  constructor(e, r, n, s) {
    this.file = e, this.offset = r, this.line = n, this.col = s;
  }
  toString() {
    return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;
  }
  moveBy(e) {
    let r = this.file.content, n = r.length, s = this.offset, i = this.line, a = this.col;
    for (; s > 0 && e < 0; )
      if (s--, e++, r.charCodeAt(s) == 10) {
        i--;
        let u = r.substring(0, s - 1).lastIndexOf(String.fromCharCode(10));
        a = u > 0 ? s - u : s;
      } else
        a--;
    for (; s < n && e > 0; ) {
      let o = r.charCodeAt(s);
      s++, e--, o == 10 ? (i++, a = 0) : a++;
    }
    return new t(this.file, s, i, a);
  }
  getContext(e, r) {
    let n = this.file.content, s = this.offset;
    if (s != null) {
      s > n.length - 1 && (s = n.length - 1);
      let i = s, a = 0, o = 0;
      for (; a < e && s > 0 && (s--, a++, !(n[s] == `
` && ++o == r)); )
        ;
      for (a = 0, o = 0; a < e && i < n.length - 1 && (i++, a++, !(n[i] == `
` && ++o == r)); )
        ;
      return { before: n.substring(s, this.offset), after: n.substring(this.offset, i + 1) };
    }
    return null;
  }
};
var we2 = class {
  constructor(e, r) {
    this.content = e, this.url = r;
  }
};
var f = class {
  constructor(e, r, n = e, s = null) {
    this.start = e, this.end = r, this.fullStart = n, this.details = s;
  }
  toString() {
    return this.start.file.content.substring(this.start.offset, this.end.offset);
  }
};
var Pt2;
(function(t8) {
  t8[t8.WARNING = 0] = "WARNING", t8[t8.ERROR = 1] = "ERROR";
})(Pt2 || (Pt2 = {}));
var Ve2 = class {
  constructor(e, r, n = Pt2.ERROR) {
    this.span = e, this.msg = r, this.level = n;
  }
  contextualMessage() {
    let e = this.span.start.getContext(100, 3);
    return e ? `${this.msg} ("${e.before}[${Pt2[this.level]} ->]${e.after}")` : this.msg;
  }
  toString() {
    let e = this.span.details ? `, ${this.span.details}` : "";
    return `${this.contextualMessage()}: ${this.span.start}${e}`;
  }
};
var da = [Sa, _a, Aa, va, ya, Ta, wa, ba, xa, Da];
function Ca(t8, e) {
  for (let r of da)
    r(t8, e);
  return t8;
}
function Sa(t8) {
  t8.walk((e) => {
    if (e.type === "element" && e.tagDefinition.ignoreFirstLf && e.children.length > 0 && e.children[0].type === "text" && e.children[0].value[0] === `
`) {
      let r = e.children[0];
      r.value.length === 1 ? e.removeChild(r) : r.value = r.value.slice(1);
    }
  });
}
function _a(t8) {
  let e = (r) => {
    var n, s;
    return r.type === "element" && ((n = r.prev) == null ? void 0 : n.type) === "ieConditionalStartComment" && r.prev.sourceSpan.end.offset === r.startSourceSpan.start.offset && ((s = r.firstChild) == null ? void 0 : s.type) === "ieConditionalEndComment" && r.firstChild.sourceSpan.start.offset === r.startSourceSpan.end.offset;
  };
  t8.walk((r) => {
    if (r.children)
      for (let n = 0; n < r.children.length; n++) {
        let s = r.children[n];
        if (!e(s))
          continue;
        let i = s.prev, a = s.firstChild;
        r.removeChild(i), n--;
        let o = new f(i.sourceSpan.start, a.sourceSpan.end), u = new f(o.start, s.sourceSpan.end);
        s.condition = i.condition, s.sourceSpan = u, s.startSourceSpan = o, s.removeChild(a);
      }
  });
}
function Ea(t8, e, r) {
  t8.walk((n) => {
    if (n.children)
      for (let s = 0; s < n.children.length; s++) {
        let i = n.children[s];
        if (i.type !== "text" && !e(i))
          continue;
        i.type !== "text" && (i.type = "text", i.value = r(i));
        let a = i.prev;
        !a || a.type !== "text" || (a.value += i.value, a.sourceSpan = new f(a.sourceSpan.start, i.sourceSpan.end), n.removeChild(i), s--);
      }
  });
}
function Aa(t8) {
  return Ea(t8, (e) => e.type === "cdata", (e) => `<![CDATA[${e.value}]]>`);
}
function Da(t8) {
  let e = (r) => {
    var n, s;
    return r.type === "element" && r.attrs.length === 0 && r.children.length === 1 && r.firstChild.type === "text" && !F2.hasWhitespaceCharacter(r.children[0].value) && !r.firstChild.hasLeadingSpaces && !r.firstChild.hasTrailingSpaces && r.isLeadingSpaceSensitive && !r.hasLeadingSpaces && r.isTrailingSpaceSensitive && !r.hasTrailingSpaces && ((n = r.prev) == null ? void 0 : n.type) === "text" && ((s = r.next) == null ? void 0 : s.type) === "text";
  };
  t8.walk((r) => {
    if (r.children)
      for (let n = 0; n < r.children.length; n++) {
        let s = r.children[n];
        if (!e(s))
          continue;
        let i = s.prev, a = s.next;
        i.value += `<${s.rawName}>` + s.firstChild.value + `</${s.rawName}>` + a.value, i.sourceSpan = new f(i.sourceSpan.start, a.sourceSpan.end), i.isTrailingSpaceSensitive = a.isTrailingSpaceSensitive, i.hasTrailingSpaces = a.hasTrailingSpaces, r.removeChild(s), n--, r.removeChild(a);
      }
  });
}
function va(t8, e) {
  if (e.parser === "html")
    return;
  let r = /{{(.+?)}}/s;
  t8.walk((n) => {
    if (_n2(n))
      for (let s of n.children) {
        if (s.type !== "text")
          continue;
        let i = s.sourceSpan.start, a = null, o = s.value.split(r);
        for (let u = 0; u < o.length; u++, i = a) {
          let p = o[u];
          if (u % 2 === 0) {
            a = i.moveBy(p.length), p.length > 0 && n.insertChildBefore(s, { type: "text", value: p, sourceSpan: new f(i, a) });
            continue;
          }
          a = i.moveBy(p.length + 4), n.insertChildBefore(s, { type: "interpolation", sourceSpan: new f(i, a), children: p.length === 0 ? [] : [{ type: "text", value: p, sourceSpan: new f(i.moveBy(2), a.moveBy(-2)) }] });
        }
        n.removeChild(s);
      }
  });
}
function ya(t8) {
  t8.walk((e) => {
    if (!e.children)
      return;
    if (e.children.length === 0 || e.children.length === 1 && e.children[0].type === "text" && F2.trim(e.children[0].value).length === 0) {
      e.hasDanglingSpaces = e.children.length > 0, e.children = [];
      return;
    }
    let r = En2(e), n = or(e);
    if (!r)
      for (let s = 0; s < e.children.length; s++) {
        let i = e.children[s];
        if (i.type !== "text")
          continue;
        let { leadingWhitespace: a, text: o, trailingWhitespace: u } = Sn(i.value), p = i.prev, l = i.next;
        o ? (i.value = o, i.sourceSpan = new f(i.sourceSpan.start.moveBy(a.length), i.sourceSpan.end.moveBy(-u.length)), a && (p && (p.hasTrailingSpaces = true), i.hasLeadingSpaces = true), u && (i.hasTrailingSpaces = true, l && (l.hasLeadingSpaces = true))) : (e.removeChild(i), s--, (a || u) && (p && (p.hasTrailingSpaces = true), l && (l.hasLeadingSpaces = true)));
      }
    e.isWhitespaceSensitive = r, e.isIndentationSensitive = n;
  });
}
function wa(t8) {
  t8.walk((e) => {
    e.isSelfClosing = !e.children || e.type === "element" && (e.tagDefinition.isVoid || e.endSourceSpan && e.startSourceSpan.start === e.endSourceSpan.start && e.startSourceSpan.end === e.endSourceSpan.end);
  });
}
function ba(t8, e) {
  t8.walk((r) => {
    r.type === "element" && (r.hasHtmComponentClosingTag = r.endSourceSpan && /^<\s*\/\s*\/\s*>$/.test(e.originalText.slice(r.endSourceSpan.start.offset, r.endSourceSpan.end.offset)));
  });
}
function Ta(t8, e) {
  t8.walk((r) => {
    r.cssDisplay = Bn2(r, e);
  });
}
function xa(t8, e) {
  t8.walk((r) => {
    let { children: n } = r;
    if (n) {
      if (n.length === 0) {
        r.isDanglingSpaceSensitive = vn(r);
        return;
      }
      for (let s of n)
        s.isLeadingSpaceSensitive = An2(s, e), s.isTrailingSpaceSensitive = Dn2(s, e);
      for (let s = 0; s < n.length; s++) {
        let i = n[s];
        i.isLeadingSpaceSensitive = (s === 0 || i.prev.isTrailingSpaceSensitive) && i.isLeadingSpaceSensitive, i.isTrailingSpaceSensitive = (s === n.length - 1 || i.next.isLeadingSpaceSensitive) && i.isTrailingSpaceSensitive;
      }
    }
  });
}
var gs = Ca;
function ka(t8, e, r) {
  let { node: n } = t8;
  switch (n.type) {
    case "front-matter":
      return T2(n.raw);
    case "root":
      return e.__onHtmlRoot && e.__onHtmlRoot(n), [E(qe2(t8, e, r)), S2];
    case "element":
    case "ieConditionalComment":
      return ps(t8, e, r);
    case "angularControlFlowBlock":
      return as(t8, e, r);
    case "angularControlFlowBlockParameters":
      return us(t8, e, r);
    case "angularControlFlowBlockParameter":
      return F2.trim(n.expression);
    case "angularIcuExpression":
      return ls(t8, e, r);
    case "angularIcuCase":
      return cs(t8, e, r);
    case "ieConditionalStartComment":
    case "ieConditionalEndComment":
      return [ye(n), Ee2(n)];
    case "interpolation":
      return [ye(n, e), ...t8.map(r, "children"), Ee2(n, e)];
    case "text": {
      if (n.parent.type === "interpolation") {
        let i = /\n[^\S\n]*$/, a = i.test(n.value), o = a ? n.value.replace(i, "") : n.value;
        return [T2(o), a ? S2 : ""];
      }
      let s = nn2([z2(n, e), ...yt2(n), W2(n, e)]);
      return Array.isArray(s) ? Ct2(s) : s;
    }
    case "docType":
      return [E([ye(n, e), " ", w2(false, n.value.replace(/^html\b/i, "html"), /\s+/g, " ")]), Ee2(n, e)];
    case "comment":
      return [z2(n, e), T2(e.originalText.slice(se3(n), ie2(n))), W2(n, e)];
    case "attribute": {
      if (n.value === null)
        return n.rawName;
      let s = pr2(n.value), i = an2(s, '"');
      return [n.rawName, "=", i, T2(i === '"' ? w2(false, s, '"', "&quot;") : w2(false, s, "'", "&apos;")), i];
    }
    case "cdata":
    default:
      throw new un2(n, "HTML");
  }
}
var Ba = { preprocess: gs, print: ka, insertPragma: ns, massageAstNode: cn2, embed: Jn2, getVisitorKeys: ts };
var ds = Ba;
var Cs = [{ linguistLanguageId: 146, name: "Angular", type: "markup", tmScope: "text.html.basic", aceMode: "html", codemirrorMode: "htmlmixed", codemirrorMimeType: "text/html", color: "#e34c26", aliases: ["xhtml"], extensions: [".component.html"], parsers: ["angular"], vscodeLanguageIds: ["html"], filenames: [] }, { linguistLanguageId: 146, name: "HTML", type: "markup", tmScope: "text.html.basic", aceMode: "html", codemirrorMode: "htmlmixed", codemirrorMimeType: "text/html", color: "#e34c26", aliases: ["xhtml"], extensions: [".html", ".hta", ".htm", ".html.hl", ".inc", ".xht", ".xhtml", ".mjml"], parsers: ["html"], vscodeLanguageIds: ["html"] }, { linguistLanguageId: 146, name: "Lightning Web Components", type: "markup", tmScope: "text.html.basic", aceMode: "html", codemirrorMode: "htmlmixed", codemirrorMimeType: "text/html", color: "#e34c26", aliases: ["xhtml"], extensions: [], parsers: ["lwc"], vscodeLanguageIds: ["html"], filenames: [] }, { linguistLanguageId: 391, name: "Vue", type: "markup", color: "#41b883", extensions: [".vue"], tmScope: "text.html.vue", aceMode: "html", parsers: ["vue"], vscodeLanguageIds: ["vue"] }];
var Ar2 = { bracketSpacing: { category: "Common", type: "boolean", default: true, description: "Print spaces between brackets.", oppositeDescription: "Do not print spaces between brackets." }, singleQuote: { category: "Common", type: "boolean", default: false, description: "Use single quotes instead of double quotes." }, proseWrap: { category: "Common", type: "choice", default: "preserve", description: "How to wrap prose.", choices: [{ value: "always", description: "Wrap prose if it exceeds the print width." }, { value: "never", description: "Do not wrap prose." }, { value: "preserve", description: "Wrap prose as-is." }] }, bracketSameLine: { category: "Common", type: "boolean", default: false, description: "Put > of opening tags on the last line instead of on a new line." }, singleAttributePerLine: { category: "Common", type: "boolean", default: false, description: "Enforce single attribute per line in HTML, Vue and JSX." } };
var Ss = "HTML";
var La = { bracketSameLine: Ar2.bracketSameLine, htmlWhitespaceSensitivity: { category: Ss, type: "choice", default: "css", description: "How to handle whitespaces in HTML.", choices: [{ value: "css", description: "Respect the default value of CSS display property." }, { value: "strict", description: "Whitespaces are considered sensitive." }, { value: "ignore", description: "Whitespaces are considered insensitive." }] }, singleAttributePerLine: Ar2.singleAttributePerLine, vueIndentScriptAndStyle: { category: Ss, type: "boolean", default: false, description: "Indent script and style tags in Vue files." } };
var _s = La;
var Vr2 = {};
Yr2(Vr2, { angular: () => xo2, html: () => To2, lwc: () => Bo, vue: () => ko2 });
var hp = new RegExp(`(\\:not\\()|(([\\.\\#]?)[-\\w]+)|(?:\\[([-.\\w*\\\\$]+)(?:=(["']?)([^\\]"']*)\\5)?\\])|(\\))|(\\s*,\\s*)`, "g");
var Es;
(function(t8) {
  t8[t8.Emulated = 0] = "Emulated", t8[t8.None = 2] = "None", t8[t8.ShadowDom = 3] = "ShadowDom";
})(Es || (Es = {}));
var As;
(function(t8) {
  t8[t8.OnPush = 0] = "OnPush", t8[t8.Default = 1] = "Default";
})(As || (As = {}));
var Dr2 = { name: "custom-elements" };
var vr2 = { name: "no-errors-schema" };
var J2;
(function(t8) {
  t8[t8.NONE = 0] = "NONE", t8[t8.HTML = 1] = "HTML", t8[t8.STYLE = 2] = "STYLE", t8[t8.SCRIPT = 3] = "SCRIPT", t8[t8.URL = 4] = "URL", t8[t8.RESOURCE_URL = 5] = "RESOURCE_URL";
})(J2 || (J2 = {}));
var Ds;
(function(t8) {
  t8[t8.Error = 0] = "Error", t8[t8.Warning = 1] = "Warning", t8[t8.Ignore = 2] = "Ignore";
})(Ds || (Ds = {}));
var N2;
(function(t8) {
  t8[t8.RAW_TEXT = 0] = "RAW_TEXT", t8[t8.ESCAPABLE_RAW_TEXT = 1] = "ESCAPABLE_RAW_TEXT", t8[t8.PARSABLE_DATA = 2] = "PARSABLE_DATA";
})(N2 || (N2 = {}));
function at2(t8) {
  if (t8[0] != ":")
    return [null, t8];
  let e = t8.indexOf(":", 1);
  if (e === -1)
    throw new Error(`Unsupported format "${t8}" expecting ":namespace:name"`);
  return [t8.slice(1, e), t8.slice(e + 1)];
}
function yr2(t8) {
  return at2(t8)[1] === "ng-container";
}
function wr2(t8) {
  return at2(t8)[1] === "ng-content";
}
function Ue2(t8) {
  return t8 === null ? null : at2(t8)[0];
}
function We2(t8, e) {
  return t8 ? `:${t8}:${e}` : e;
}
var It2;
function br2() {
  return It2 || (It2 = {}, Nt2(J2.HTML, ["iframe|srcdoc", "*|innerHTML", "*|outerHTML"]), Nt2(J2.STYLE, ["*|style"]), Nt2(J2.URL, ["*|formAction", "area|href", "area|ping", "audio|src", "a|href", "a|ping", "blockquote|cite", "body|background", "del|cite", "form|action", "img|src", "input|src", "ins|cite", "q|cite", "source|src", "track|src", "video|poster", "video|src"]), Nt2(J2.RESOURCE_URL, ["applet|code", "applet|codebase", "base|href", "embed|src", "frame|src", "head|profile", "html|manifest", "iframe|src", "link|href", "media|src", "object|codebase", "object|data", "script|src"])), It2;
}
function Nt2(t8, e) {
  for (let r of e)
    It2[r.toLowerCase()] = t8;
}
var Rt2 = class {
};
var Fa = "boolean";
var Pa = "number";
var Na = "string";
var Ia = "object";
var Ra = ["[Element]|textContent,%ariaAtomic,%ariaAutoComplete,%ariaBusy,%ariaChecked,%ariaColCount,%ariaColIndex,%ariaColSpan,%ariaCurrent,%ariaDescription,%ariaDisabled,%ariaExpanded,%ariaHasPopup,%ariaHidden,%ariaKeyShortcuts,%ariaLabel,%ariaLevel,%ariaLive,%ariaModal,%ariaMultiLine,%ariaMultiSelectable,%ariaOrientation,%ariaPlaceholder,%ariaPosInSet,%ariaPressed,%ariaReadOnly,%ariaRelevant,%ariaRequired,%ariaRoleDescription,%ariaRowCount,%ariaRowIndex,%ariaRowSpan,%ariaSelected,%ariaSetSize,%ariaSort,%ariaValueMax,%ariaValueMin,%ariaValueNow,%ariaValueText,%classList,className,elementTiming,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*fullscreenchange,*fullscreenerror,*search,*webkitfullscreenchange,*webkitfullscreenerror,outerHTML,%part,#scrollLeft,#scrollTop,slot,*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored", "[HTMLElement]^[Element]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy", "abbr,address,article,aside,b,bdi,bdo,cite,content,code,dd,dfn,dt,em,figcaption,figure,footer,header,hgroup,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy", "media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,!preservesPitch,src,%srcObject,#volume", ":svg:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex", ":svg:graphics^:svg:|", ":svg:animation^:svg:|*begin,*end,*repeat", ":svg:geometry^:svg:|", ":svg:componentTransferFunction^:svg:|", ":svg:gradient^:svg:|", ":svg:textContent^:svg:graphics|", ":svg:textPositioning^:svg:textContent|", "a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,rev,search,shape,target,text,type,username", "area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,search,shape,target,username", "audio^media|", "br^[HTMLElement]|clear", "base^[HTMLElement]|href,target", "body^[HTMLElement]|aLink,background,bgColor,link,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink", "button^[HTMLElement]|!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value", "canvas^[HTMLElement]|#height,#width", "content^[HTMLElement]|select", "dl^[HTMLElement]|!compact", "data^[HTMLElement]|value", "datalist^[HTMLElement]|", "details^[HTMLElement]|!open", "dialog^[HTMLElement]|!open,returnValue", "dir^[HTMLElement]|!compact", "div^[HTMLElement]|align", "embed^[HTMLElement]|align,height,name,src,type,width", "fieldset^[HTMLElement]|!disabled,name", "font^[HTMLElement]|color,face,size", "form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target", "frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src", "frameset^[HTMLElement]|cols,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows", "hr^[HTMLElement]|align,color,!noShade,size,width", "head^[HTMLElement]|", "h1,h2,h3,h4,h5,h6^[HTMLElement]|align", "html^[HTMLElement]|version", "iframe^[HTMLElement]|align,allow,!allowFullscreen,!allowPaymentRequest,csp,frameBorder,height,loading,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width", "img^[HTMLElement]|align,alt,border,%crossOrigin,decoding,#height,#hspace,!isMap,loading,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width", "input^[HTMLElement]|accept,align,alt,autocomplete,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width", "li^[HTMLElement]|type,#value", "label^[HTMLElement]|htmlFor", "legend^[HTMLElement]|align", "link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,imageSizes,imageSrcset,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type", "map^[HTMLElement]|name", "marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width", "menu^[HTMLElement]|!compact", "meta^[HTMLElement]|content,httpEquiv,media,name,scheme", "meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value", "ins,del^[HTMLElement]|cite,dateTime", "ol^[HTMLElement]|!compact,!reversed,#start,type", "object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width", "optgroup^[HTMLElement]|!disabled,label", "option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value", "output^[HTMLElement]|defaultValue,%htmlFor,name,value", "p^[HTMLElement]|align", "param^[HTMLElement]|name,type,value,valueType", "picture^[HTMLElement]|", "pre^[HTMLElement]|#width", "progress^[HTMLElement]|#max,#value", "q,blockquote,cite^[HTMLElement]|", "script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,!noModule,%referrerPolicy,src,text,type", "select^[HTMLElement]|autocomplete,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value", "slot^[HTMLElement]|name", "source^[HTMLElement]|#height,media,sizes,src,srcset,type,#width", "span^[HTMLElement]|", "style^[HTMLElement]|!disabled,media,type", "caption^[HTMLElement]|align", "th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width", "col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width", "table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width", "tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign", "tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign", "template^[HTMLElement]|", "textarea^[HTMLElement]|autocomplete,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap", "time^[HTMLElement]|dateTime", "title^[HTMLElement]|text", "track^[HTMLElement]|!default,kind,label,src,srclang", "ul^[HTMLElement]|!compact,type", "unknown^[HTMLElement]|", "video^media|!disablePictureInPicture,#height,*enterpictureinpicture,*leavepictureinpicture,!playsInline,poster,#width", ":svg:a^:svg:graphics|", ":svg:animate^:svg:animation|", ":svg:animateMotion^:svg:animation|", ":svg:animateTransform^:svg:animation|", ":svg:circle^:svg:geometry|", ":svg:clipPath^:svg:graphics|", ":svg:defs^:svg:graphics|", ":svg:desc^:svg:|", ":svg:discard^:svg:|", ":svg:ellipse^:svg:geometry|", ":svg:feBlend^:svg:|", ":svg:feColorMatrix^:svg:|", ":svg:feComponentTransfer^:svg:|", ":svg:feComposite^:svg:|", ":svg:feConvolveMatrix^:svg:|", ":svg:feDiffuseLighting^:svg:|", ":svg:feDisplacementMap^:svg:|", ":svg:feDistantLight^:svg:|", ":svg:feDropShadow^:svg:|", ":svg:feFlood^:svg:|", ":svg:feFuncA^:svg:componentTransferFunction|", ":svg:feFuncB^:svg:componentTransferFunction|", ":svg:feFuncG^:svg:componentTransferFunction|", ":svg:feFuncR^:svg:componentTransferFunction|", ":svg:feGaussianBlur^:svg:|", ":svg:feImage^:svg:|", ":svg:feMerge^:svg:|", ":svg:feMergeNode^:svg:|", ":svg:feMorphology^:svg:|", ":svg:feOffset^:svg:|", ":svg:fePointLight^:svg:|", ":svg:feSpecularLighting^:svg:|", ":svg:feSpotLight^:svg:|", ":svg:feTile^:svg:|", ":svg:feTurbulence^:svg:|", ":svg:filter^:svg:|", ":svg:foreignObject^:svg:graphics|", ":svg:g^:svg:graphics|", ":svg:image^:svg:graphics|decoding", ":svg:line^:svg:geometry|", ":svg:linearGradient^:svg:gradient|", ":svg:mpath^:svg:|", ":svg:marker^:svg:|", ":svg:mask^:svg:|", ":svg:metadata^:svg:|", ":svg:path^:svg:geometry|", ":svg:pattern^:svg:|", ":svg:polygon^:svg:geometry|", ":svg:polyline^:svg:geometry|", ":svg:radialGradient^:svg:gradient|", ":svg:rect^:svg:geometry|", ":svg:svg^:svg:graphics|#currentScale,#zoomAndPan", ":svg:script^:svg:|type", ":svg:set^:svg:animation|", ":svg:stop^:svg:|", ":svg:style^:svg:|!disabled,media,title,type", ":svg:switch^:svg:graphics|", ":svg:symbol^:svg:|", ":svg:tspan^:svg:textPositioning|", ":svg:text^:svg:textPositioning|", ":svg:textPath^:svg:textContent|", ":svg:title^:svg:|", ":svg:use^:svg:graphics|", ":svg:view^:svg:|#zoomAndPan", "data^[HTMLElement]|value", "keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name", "menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default", "summary^[HTMLElement]|", "time^[HTMLElement]|dateTime", ":svg:cursor^:svg:|"];
var vs = new Map(Object.entries({ class: "className", for: "htmlFor", formaction: "formAction", innerHtml: "innerHTML", readonly: "readOnly", tabindex: "tabIndex" }));
var $a = Array.from(vs).reduce((t8, [e, r]) => (t8.set(e, r), t8), /* @__PURE__ */ new Map());
var $t2 = class extends Rt2 {
  constructor() {
    super(), this._schema = /* @__PURE__ */ new Map(), this._eventSchema = /* @__PURE__ */ new Map(), Ra.forEach((e) => {
      let r = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Set(), [s, i] = e.split("|"), a = i.split(","), [o, u] = s.split("^");
      o.split(",").forEach((l) => {
        this._schema.set(l.toLowerCase(), r), this._eventSchema.set(l.toLowerCase(), n);
      });
      let p = u && this._schema.get(u.toLowerCase());
      if (p) {
        for (let [l, m] of p)
          r.set(l, m);
        for (let l of this._eventSchema.get(u.toLowerCase()))
          n.add(l);
      }
      a.forEach((l) => {
        if (l.length > 0)
          switch (l[0]) {
            case "*":
              n.add(l.substring(1));
              break;
            case "!":
              r.set(l.substring(1), Fa);
              break;
            case "#":
              r.set(l.substring(1), Pa);
              break;
            case "%":
              r.set(l.substring(1), Ia);
              break;
            default:
              r.set(l, Na);
          }
      });
    });
  }
  hasProperty(e, r, n) {
    if (n.some((i) => i.name === vr2.name))
      return true;
    if (e.indexOf("-") > -1) {
      if (yr2(e) || wr2(e))
        return false;
      if (n.some((i) => i.name === Dr2.name))
        return true;
    }
    return (this._schema.get(e.toLowerCase()) || this._schema.get("unknown")).has(r);
  }
  hasElement(e, r) {
    return r.some((n) => n.name === vr2.name) || e.indexOf("-") > -1 && (yr2(e) || wr2(e) || r.some((n) => n.name === Dr2.name)) ? true : this._schema.has(e.toLowerCase());
  }
  securityContext(e, r, n) {
    n && (r = this.getMappedPropName(r)), e = e.toLowerCase(), r = r.toLowerCase();
    let s = br2()[e + "|" + r];
    return s || (s = br2()["*|" + r], s || J2.NONE);
  }
  getMappedPropName(e) {
    var _a3;
    return (_a3 = vs.get(e)) != null ? _a3 : e;
  }
  getDefaultComponentElementName() {
    return "ng-component";
  }
  validateProperty(e) {
    return e.toLowerCase().startsWith("on") ? { error: true, msg: `Binding to event property '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...
If '${e}' is a directive input, make sure the directive is imported by the current module.` } : { error: false };
  }
  validateAttribute(e) {
    return e.toLowerCase().startsWith("on") ? { error: true, msg: `Binding to event attribute '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...` } : { error: false };
  }
  allKnownElementNames() {
    return Array.from(this._schema.keys());
  }
  allKnownAttributesOfElement(e) {
    let r = this._schema.get(e.toLowerCase()) || this._schema.get("unknown");
    return Array.from(r.keys()).map((n) => {
      var _a3;
      return (_a3 = $a.get(n)) != null ? _a3 : n;
    });
  }
  allKnownEventsOfElement(e) {
    var _a3;
    return Array.from((_a3 = this._eventSchema.get(e.toLowerCase())) != null ? _a3 : []);
  }
  normalizeAnimationStyleProperty(e) {
    return ms(e);
  }
  normalizeAnimationStyleValue(e, r, n) {
    let s = "", i = n.toString().trim(), a = null;
    if (Oa(e) && n !== 0 && n !== "0")
      if (typeof n == "number")
        s = "px";
      else {
        let o = n.match(/^[+-]?[\d\.]+([a-z]*)$/);
        o && o[1].length == 0 && (a = `Please provide a CSS unit value for ${r}:${n}`);
      }
    return { error: a, value: i + s };
  }
};
function Oa(t8) {
  switch (t8) {
    case "width":
    case "height":
    case "minWidth":
    case "minHeight":
    case "maxWidth":
    case "maxHeight":
    case "left":
    case "top":
    case "bottom":
    case "right":
    case "fontSize":
    case "outlineWidth":
    case "outlineOffset":
    case "paddingTop":
    case "paddingLeft":
    case "paddingBottom":
    case "paddingRight":
    case "marginTop":
    case "marginLeft":
    case "marginBottom":
    case "marginRight":
    case "borderRadius":
    case "borderWidth":
    case "borderTopWidth":
    case "borderLeftWidth":
    case "borderRightWidth":
    case "borderBottomWidth":
    case "textIndent":
      return true;
    default:
      return false;
  }
}
var h = class {
  constructor({ closedByChildren: e, implicitNamespacePrefix: r, contentType: n = N2.PARSABLE_DATA, closedByParent: s = false, isVoid: i = false, ignoreFirstLf: a = false, preventNamespaceInheritance: o = false, canSelfClose: u = false } = {}) {
    this.closedByChildren = {}, this.closedByParent = false, e && e.length > 0 && e.forEach((p) => this.closedByChildren[p] = true), this.isVoid = i, this.closedByParent = s || i, this.implicitNamespacePrefix = r || null, this.contentType = n, this.ignoreFirstLf = a, this.preventNamespaceInheritance = o, this.canSelfClose = u != null ? u : i;
  }
  isClosedByChild(e) {
    return this.isVoid || e.toLowerCase() in this.closedByChildren;
  }
  getContentType(e) {
    var _a3;
    return typeof this.contentType == "object" ? (_a3 = e === void 0 ? void 0 : this.contentType[e]) != null ? _a3 : this.contentType.default : this.contentType;
  }
};
var ys;
var ot2;
function ze2(t8) {
  var _a3;
  return ot2 || (ys = new h({ canSelfClose: true }), ot2 = Object.assign(/* @__PURE__ */ Object.create(null), { base: new h({ isVoid: true }), meta: new h({ isVoid: true }), area: new h({ isVoid: true }), embed: new h({ isVoid: true }), link: new h({ isVoid: true }), img: new h({ isVoid: true }), input: new h({ isVoid: true }), param: new h({ isVoid: true }), hr: new h({ isVoid: true }), br: new h({ isVoid: true }), source: new h({ isVoid: true }), track: new h({ isVoid: true }), wbr: new h({ isVoid: true }), p: new h({ closedByChildren: ["address", "article", "aside", "blockquote", "div", "dl", "fieldset", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul"], closedByParent: true }), thead: new h({ closedByChildren: ["tbody", "tfoot"] }), tbody: new h({ closedByChildren: ["tbody", "tfoot"], closedByParent: true }), tfoot: new h({ closedByChildren: ["tbody"], closedByParent: true }), tr: new h({ closedByChildren: ["tr"], closedByParent: true }), td: new h({ closedByChildren: ["td", "th"], closedByParent: true }), th: new h({ closedByChildren: ["td", "th"], closedByParent: true }), col: new h({ isVoid: true }), svg: new h({ implicitNamespacePrefix: "svg" }), foreignObject: new h({ implicitNamespacePrefix: "svg", preventNamespaceInheritance: true }), math: new h({ implicitNamespacePrefix: "math" }), li: new h({ closedByChildren: ["li"], closedByParent: true }), dt: new h({ closedByChildren: ["dt", "dd"] }), dd: new h({ closedByChildren: ["dt", "dd"], closedByParent: true }), rb: new h({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: true }), rt: new h({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: true }), rtc: new h({ closedByChildren: ["rb", "rtc", "rp"], closedByParent: true }), rp: new h({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: true }), optgroup: new h({ closedByChildren: ["optgroup"], closedByParent: true }), option: new h({ closedByChildren: ["option", "optgroup"], closedByParent: true }), pre: new h({ ignoreFirstLf: true }), listing: new h({ ignoreFirstLf: true }), style: new h({ contentType: N2.RAW_TEXT }), script: new h({ contentType: N2.RAW_TEXT }), title: new h({ contentType: { default: N2.ESCAPABLE_RAW_TEXT, svg: N2.PARSABLE_DATA } }), textarea: new h({ contentType: N2.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }) }), new $t2().allKnownElementNames().forEach((e) => {
    !ot2[e] && Ue2(e) === null && (ot2[e] = new h({ canSelfClose: false }));
  })), (_a3 = ot2[t8]) != null ? _a3 : ys;
}
var be2 = class {
  constructor(e, r) {
    this.sourceSpan = e, this.i18n = r;
  }
};
var Ot2 = class extends be2 {
  constructor(e, r, n, s) {
    super(r, s), this.value = e, this.tokens = n, this.type = "text";
  }
  visit(e, r) {
    return e.visitText(this, r);
  }
};
var Mt2 = class extends be2 {
  constructor(e, r, n, s) {
    super(r, s), this.value = e, this.tokens = n, this.type = "cdata";
  }
  visit(e, r) {
    return e.visitCdata(this, r);
  }
};
var qt2 = class extends be2 {
  constructor(e, r, n, s, i, a) {
    super(s, a), this.switchValue = e, this.type = r, this.cases = n, this.switchValueSourceSpan = i;
  }
  visit(e, r) {
    return e.visitExpansion(this, r);
  }
};
var Ht = class {
  constructor(e, r, n, s, i) {
    this.value = e, this.expression = r, this.sourceSpan = n, this.valueSourceSpan = s, this.expSourceSpan = i, this.type = "expansionCase";
  }
  visit(e, r) {
    return e.visitExpansionCase(this, r);
  }
};
var Vt2 = class extends be2 {
  constructor(e, r, n, s, i, a, o) {
    super(n, o), this.name = e, this.value = r, this.keySpan = s, this.valueSpan = i, this.valueTokens = a, this.type = "attribute";
  }
  visit(e, r) {
    return e.visitAttribute(this, r);
  }
  get nameSpan() {
    return this.keySpan;
  }
};
var G3 = class extends be2 {
  constructor(e, r, n, s, i, a = null, o = null, u) {
    super(s, u), this.name = e, this.attrs = r, this.children = n, this.startSourceSpan = i, this.endSourceSpan = a, this.nameSpan = o, this.type = "element";
  }
  visit(e, r) {
    return e.visitElement(this, r);
  }
};
var Ut2 = class {
  constructor(e, r) {
    this.value = e, this.sourceSpan = r, this.type = "comment";
  }
  visit(e, r) {
    return e.visitComment(this, r);
  }
};
var Wt2 = class {
  constructor(e, r) {
    this.value = e, this.sourceSpan = r, this.type = "docType";
  }
  visit(e, r) {
    return e.visitDocType(this, r);
  }
};
var Z2 = class {
  constructor(e, r, n, s, i, a = null) {
    this.name = e, this.parameters = r, this.children = n, this.sourceSpan = s, this.startSourceSpan = i, this.endSourceSpan = a, this.type = "block";
  }
  visit(e, r) {
    return e.visitBlock(this, r);
  }
};
var ut2 = class {
  constructor(e, r) {
    this.expression = e, this.sourceSpan = r, this.type = "blockParameter", this.startSourceSpan = null, this.endSourceSpan = null;
  }
  visit(e, r) {
    return e.visitBlockParameter(this, r);
  }
};
function zt2(t8, e, r = null) {
  let n = [], s = t8.visit ? (i) => t8.visit(i, r) || i.visit(t8, r) : (i) => i.visit(t8, r);
  return e.forEach((i) => {
    let a = s(i);
    a && n.push(a);
  }), n;
}
var lt2 = class {
  constructor() {
  }
  visitElement(e, r) {
    this.visitChildren(r, (n) => {
      n(e.attrs), n(e.children);
    });
  }
  visitAttribute(e, r) {
  }
  visitText(e, r) {
  }
  visitCdata(e, r) {
  }
  visitComment(e, r) {
  }
  visitDocType(e, r) {
  }
  visitExpansion(e, r) {
    return this.visitChildren(r, (n) => {
      n(e.cases);
    });
  }
  visitExpansionCase(e, r) {
  }
  visitBlock(e, r) {
    this.visitChildren(r, (n) => {
      n(e.parameters), n(e.children);
    });
  }
  visitBlockParameter(e, r) {
  }
  visitChildren(e, r) {
    let n = [], s = this;
    function i(a) {
      a && n.push(zt2(s, a, e));
    }
    return r(i), Array.prototype.concat.apply([], n);
  }
};
var Ge2 = { AElig: "\xC6", AMP: "&", amp: "&", Aacute: "\xC1", Abreve: "\u0102", Acirc: "\xC2", Acy: "\u0410", Afr: "\u{1D504}", Agrave: "\xC0", Alpha: "\u0391", Amacr: "\u0100", And: "\u2A53", Aogon: "\u0104", Aopf: "\u{1D538}", ApplyFunction: "\u2061", af: "\u2061", Aring: "\xC5", angst: "\xC5", Ascr: "\u{1D49C}", Assign: "\u2254", colone: "\u2254", coloneq: "\u2254", Atilde: "\xC3", Auml: "\xC4", Backslash: "\u2216", setminus: "\u2216", setmn: "\u2216", smallsetminus: "\u2216", ssetmn: "\u2216", Barv: "\u2AE7", Barwed: "\u2306", doublebarwedge: "\u2306", Bcy: "\u0411", Because: "\u2235", becaus: "\u2235", because: "\u2235", Bernoullis: "\u212C", Bscr: "\u212C", bernou: "\u212C", Beta: "\u0392", Bfr: "\u{1D505}", Bopf: "\u{1D539}", Breve: "\u02D8", breve: "\u02D8", Bumpeq: "\u224E", HumpDownHump: "\u224E", bump: "\u224E", CHcy: "\u0427", COPY: "\xA9", copy: "\xA9", Cacute: "\u0106", Cap: "\u22D2", CapitalDifferentialD: "\u2145", DD: "\u2145", Cayleys: "\u212D", Cfr: "\u212D", Ccaron: "\u010C", Ccedil: "\xC7", Ccirc: "\u0108", Cconint: "\u2230", Cdot: "\u010A", Cedilla: "\xB8", cedil: "\xB8", CenterDot: "\xB7", centerdot: "\xB7", middot: "\xB7", Chi: "\u03A7", CircleDot: "\u2299", odot: "\u2299", CircleMinus: "\u2296", ominus: "\u2296", CirclePlus: "\u2295", oplus: "\u2295", CircleTimes: "\u2297", otimes: "\u2297", ClockwiseContourIntegral: "\u2232", cwconint: "\u2232", CloseCurlyDoubleQuote: "\u201D", rdquo: "\u201D", rdquor: "\u201D", CloseCurlyQuote: "\u2019", rsquo: "\u2019", rsquor: "\u2019", Colon: "\u2237", Proportion: "\u2237", Colone: "\u2A74", Congruent: "\u2261", equiv: "\u2261", Conint: "\u222F", DoubleContourIntegral: "\u222F", ContourIntegral: "\u222E", conint: "\u222E", oint: "\u222E", Copf: "\u2102", complexes: "\u2102", Coproduct: "\u2210", coprod: "\u2210", CounterClockwiseContourIntegral: "\u2233", awconint: "\u2233", Cross: "\u2A2F", Cscr: "\u{1D49E}", Cup: "\u22D3", CupCap: "\u224D", asympeq: "\u224D", DDotrahd: "\u2911", DJcy: "\u0402", DScy: "\u0405", DZcy: "\u040F", Dagger: "\u2021", ddagger: "\u2021", Darr: "\u21A1", Dashv: "\u2AE4", DoubleLeftTee: "\u2AE4", Dcaron: "\u010E", Dcy: "\u0414", Del: "\u2207", nabla: "\u2207", Delta: "\u0394", Dfr: "\u{1D507}", DiacriticalAcute: "\xB4", acute: "\xB4", DiacriticalDot: "\u02D9", dot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", dblac: "\u02DD", DiacriticalGrave: "`", grave: "`", DiacriticalTilde: "\u02DC", tilde: "\u02DC", Diamond: "\u22C4", diam: "\u22C4", diamond: "\u22C4", DifferentialD: "\u2146", dd: "\u2146", Dopf: "\u{1D53B}", Dot: "\xA8", DoubleDot: "\xA8", die: "\xA8", uml: "\xA8", DotDot: "\u20DC", DotEqual: "\u2250", doteq: "\u2250", esdot: "\u2250", DoubleDownArrow: "\u21D3", Downarrow: "\u21D3", dArr: "\u21D3", DoubleLeftArrow: "\u21D0", Leftarrow: "\u21D0", lArr: "\u21D0", DoubleLeftRightArrow: "\u21D4", Leftrightarrow: "\u21D4", hArr: "\u21D4", iff: "\u21D4", DoubleLongLeftArrow: "\u27F8", Longleftarrow: "\u27F8", xlArr: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", Longleftrightarrow: "\u27FA", xhArr: "\u27FA", DoubleLongRightArrow: "\u27F9", Longrightarrow: "\u27F9", xrArr: "\u27F9", DoubleRightArrow: "\u21D2", Implies: "\u21D2", Rightarrow: "\u21D2", rArr: "\u21D2", DoubleRightTee: "\u22A8", vDash: "\u22A8", DoubleUpArrow: "\u21D1", Uparrow: "\u21D1", uArr: "\u21D1", DoubleUpDownArrow: "\u21D5", Updownarrow: "\u21D5", vArr: "\u21D5", DoubleVerticalBar: "\u2225", par: "\u2225", parallel: "\u2225", shortparallel: "\u2225", spar: "\u2225", DownArrow: "\u2193", ShortDownArrow: "\u2193", darr: "\u2193", downarrow: "\u2193", DownArrowBar: "\u2913", DownArrowUpArrow: "\u21F5", duarr: "\u21F5", DownBreve: "\u0311", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVector: "\u21BD", leftharpoondown: "\u21BD", lhard: "\u21BD", DownLeftVectorBar: "\u2956", DownRightTeeVector: "\u295F", DownRightVector: "\u21C1", rhard: "\u21C1", rightharpoondown: "\u21C1", DownRightVectorBar: "\u2957", DownTee: "\u22A4", top: "\u22A4", DownTeeArrow: "\u21A7", mapstodown: "\u21A7", Dscr: "\u{1D49F}", Dstrok: "\u0110", ENG: "\u014A", ETH: "\xD0", Eacute: "\xC9", Ecaron: "\u011A", Ecirc: "\xCA", Ecy: "\u042D", Edot: "\u0116", Efr: "\u{1D508}", Egrave: "\xC8", Element: "\u2208", in: "\u2208", isin: "\u2208", isinv: "\u2208", Emacr: "\u0112", EmptySmallSquare: "\u25FB", EmptyVerySmallSquare: "\u25AB", Eogon: "\u0118", Eopf: "\u{1D53C}", Epsilon: "\u0395", Equal: "\u2A75", EqualTilde: "\u2242", eqsim: "\u2242", esim: "\u2242", Equilibrium: "\u21CC", rightleftharpoons: "\u21CC", rlhar: "\u21CC", Escr: "\u2130", expectation: "\u2130", Esim: "\u2A73", Eta: "\u0397", Euml: "\xCB", Exists: "\u2203", exist: "\u2203", ExponentialE: "\u2147", ee: "\u2147", exponentiale: "\u2147", Fcy: "\u0424", Ffr: "\u{1D509}", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", blacksquare: "\u25AA", squarf: "\u25AA", squf: "\u25AA", Fopf: "\u{1D53D}", ForAll: "\u2200", forall: "\u2200", Fouriertrf: "\u2131", Fscr: "\u2131", GJcy: "\u0403", GT: ">", gt: ">", Gamma: "\u0393", Gammad: "\u03DC", Gbreve: "\u011E", Gcedil: "\u0122", Gcirc: "\u011C", Gcy: "\u0413", Gdot: "\u0120", Gfr: "\u{1D50A}", Gg: "\u22D9", ggg: "\u22D9", Gopf: "\u{1D53E}", GreaterEqual: "\u2265", ge: "\u2265", geq: "\u2265", GreaterEqualLess: "\u22DB", gel: "\u22DB", gtreqless: "\u22DB", GreaterFullEqual: "\u2267", gE: "\u2267", geqq: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", gl: "\u2277", gtrless: "\u2277", GreaterSlantEqual: "\u2A7E", geqslant: "\u2A7E", ges: "\u2A7E", GreaterTilde: "\u2273", gsim: "\u2273", gtrsim: "\u2273", Gscr: "\u{1D4A2}", Gt: "\u226B", NestedGreaterGreater: "\u226B", gg: "\u226B", HARDcy: "\u042A", Hacek: "\u02C7", caron: "\u02C7", Hat: "^", Hcirc: "\u0124", Hfr: "\u210C", Poincareplane: "\u210C", HilbertSpace: "\u210B", Hscr: "\u210B", hamilt: "\u210B", Hopf: "\u210D", quaternions: "\u210D", HorizontalLine: "\u2500", boxh: "\u2500", Hstrok: "\u0126", HumpEqual: "\u224F", bumpe: "\u224F", bumpeq: "\u224F", IEcy: "\u0415", IJlig: "\u0132", IOcy: "\u0401", Iacute: "\xCD", Icirc: "\xCE", Icy: "\u0418", Idot: "\u0130", Ifr: "\u2111", Im: "\u2111", image: "\u2111", imagpart: "\u2111", Igrave: "\xCC", Imacr: "\u012A", ImaginaryI: "\u2148", ii: "\u2148", Int: "\u222C", Integral: "\u222B", int: "\u222B", Intersection: "\u22C2", bigcap: "\u22C2", xcap: "\u22C2", InvisibleComma: "\u2063", ic: "\u2063", InvisibleTimes: "\u2062", it: "\u2062", Iogon: "\u012E", Iopf: "\u{1D540}", Iota: "\u0399", Iscr: "\u2110", imagline: "\u2110", Itilde: "\u0128", Iukcy: "\u0406", Iuml: "\xCF", Jcirc: "\u0134", Jcy: "\u0419", Jfr: "\u{1D50D}", Jopf: "\u{1D541}", Jscr: "\u{1D4A5}", Jsercy: "\u0408", Jukcy: "\u0404", KHcy: "\u0425", KJcy: "\u040C", Kappa: "\u039A", Kcedil: "\u0136", Kcy: "\u041A", Kfr: "\u{1D50E}", Kopf: "\u{1D542}", Kscr: "\u{1D4A6}", LJcy: "\u0409", LT: "<", lt: "<", Lacute: "\u0139", Lambda: "\u039B", Lang: "\u27EA", Laplacetrf: "\u2112", Lscr: "\u2112", lagran: "\u2112", Larr: "\u219E", twoheadleftarrow: "\u219E", Lcaron: "\u013D", Lcedil: "\u013B", Lcy: "\u041B", LeftAngleBracket: "\u27E8", lang: "\u27E8", langle: "\u27E8", LeftArrow: "\u2190", ShortLeftArrow: "\u2190", larr: "\u2190", leftarrow: "\u2190", slarr: "\u2190", LeftArrowBar: "\u21E4", larrb: "\u21E4", LeftArrowRightArrow: "\u21C6", leftrightarrows: "\u21C6", lrarr: "\u21C6", LeftCeiling: "\u2308", lceil: "\u2308", LeftDoubleBracket: "\u27E6", lobrk: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVector: "\u21C3", dharl: "\u21C3", downharpoonleft: "\u21C3", LeftDownVectorBar: "\u2959", LeftFloor: "\u230A", lfloor: "\u230A", LeftRightArrow: "\u2194", harr: "\u2194", leftrightarrow: "\u2194", LeftRightVector: "\u294E", LeftTee: "\u22A3", dashv: "\u22A3", LeftTeeArrow: "\u21A4", mapstoleft: "\u21A4", LeftTeeVector: "\u295A", LeftTriangle: "\u22B2", vartriangleleft: "\u22B2", vltri: "\u22B2", LeftTriangleBar: "\u29CF", LeftTriangleEqual: "\u22B4", ltrie: "\u22B4", trianglelefteq: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVector: "\u21BF", uharl: "\u21BF", upharpoonleft: "\u21BF", LeftUpVectorBar: "\u2958", LeftVector: "\u21BC", leftharpoonup: "\u21BC", lharu: "\u21BC", LeftVectorBar: "\u2952", LessEqualGreater: "\u22DA", leg: "\u22DA", lesseqgtr: "\u22DA", LessFullEqual: "\u2266", lE: "\u2266", leqq: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", lg: "\u2276", LessLess: "\u2AA1", LessSlantEqual: "\u2A7D", leqslant: "\u2A7D", les: "\u2A7D", LessTilde: "\u2272", lesssim: "\u2272", lsim: "\u2272", Lfr: "\u{1D50F}", Ll: "\u22D8", Lleftarrow: "\u21DA", lAarr: "\u21DA", Lmidot: "\u013F", LongLeftArrow: "\u27F5", longleftarrow: "\u27F5", xlarr: "\u27F5", LongLeftRightArrow: "\u27F7", longleftrightarrow: "\u27F7", xharr: "\u27F7", LongRightArrow: "\u27F6", longrightarrow: "\u27F6", xrarr: "\u27F6", Lopf: "\u{1D543}", LowerLeftArrow: "\u2199", swarr: "\u2199", swarrow: "\u2199", LowerRightArrow: "\u2198", searr: "\u2198", searrow: "\u2198", Lsh: "\u21B0", lsh: "\u21B0", Lstrok: "\u0141", Lt: "\u226A", NestedLessLess: "\u226A", ll: "\u226A", Map: "\u2905", Mcy: "\u041C", MediumSpace: "\u205F", Mellintrf: "\u2133", Mscr: "\u2133", phmmat: "\u2133", Mfr: "\u{1D510}", MinusPlus: "\u2213", mnplus: "\u2213", mp: "\u2213", Mopf: "\u{1D544}", Mu: "\u039C", NJcy: "\u040A", Nacute: "\u0143", Ncaron: "\u0147", Ncedil: "\u0145", Ncy: "\u041D", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", ZeroWidthSpace: "\u200B", NewLine: `
`, Nfr: "\u{1D511}", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nbsp: "\xA0", Nopf: "\u2115", naturals: "\u2115", Not: "\u2AEC", NotCongruent: "\u2262", nequiv: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", npar: "\u2226", nparallel: "\u2226", nshortparallel: "\u2226", nspar: "\u2226", NotElement: "\u2209", notin: "\u2209", notinva: "\u2209", NotEqual: "\u2260", ne: "\u2260", NotEqualTilde: "\u2242\u0338", nesim: "\u2242\u0338", NotExists: "\u2204", nexist: "\u2204", nexists: "\u2204", NotGreater: "\u226F", ngt: "\u226F", ngtr: "\u226F", NotGreaterEqual: "\u2271", nge: "\u2271", ngeq: "\u2271", NotGreaterFullEqual: "\u2267\u0338", ngE: "\u2267\u0338", ngeqq: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", nGtv: "\u226B\u0338", NotGreaterLess: "\u2279", ntgl: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", NotGreaterTilde: "\u2275", ngsim: "\u2275", NotHumpDownHump: "\u224E\u0338", nbump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", nbumpe: "\u224F\u0338", NotLeftTriangle: "\u22EA", nltri: "\u22EA", ntriangleleft: "\u22EA", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangleEqual: "\u22EC", nltrie: "\u22EC", ntrianglelefteq: "\u22EC", NotLess: "\u226E", nless: "\u226E", nlt: "\u226E", NotLessEqual: "\u2270", nle: "\u2270", nleq: "\u2270", NotLessGreater: "\u2278", ntlg: "\u2278", NotLessLess: "\u226A\u0338", nLtv: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", NotLessTilde: "\u2274", nlsim: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", NotPrecedes: "\u2280", npr: "\u2280", nprec: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", npre: "\u2AAF\u0338", npreceq: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", nprcue: "\u22E0", NotReverseElement: "\u220C", notni: "\u220C", notniva: "\u220C", NotRightTriangle: "\u22EB", nrtri: "\u22EB", ntriangleright: "\u22EB", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangleEqual: "\u22ED", nrtrie: "\u22ED", ntrianglerighteq: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", nsqsube: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", nsqsupe: "\u22E3", NotSubset: "\u2282\u20D2", nsubset: "\u2282\u20D2", vnsub: "\u2282\u20D2", NotSubsetEqual: "\u2288", nsube: "\u2288", nsubseteq: "\u2288", NotSucceeds: "\u2281", nsc: "\u2281", nsucc: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", nsce: "\u2AB0\u0338", nsucceq: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", nsccue: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", nsupset: "\u2283\u20D2", vnsup: "\u2283\u20D2", NotSupersetEqual: "\u2289", nsupe: "\u2289", nsupseteq: "\u2289", NotTilde: "\u2241", nsim: "\u2241", NotTildeEqual: "\u2244", nsime: "\u2244", nsimeq: "\u2244", NotTildeFullEqual: "\u2247", ncong: "\u2247", NotTildeTilde: "\u2249", nap: "\u2249", napprox: "\u2249", NotVerticalBar: "\u2224", nmid: "\u2224", nshortmid: "\u2224", nsmid: "\u2224", Nscr: "\u{1D4A9}", Ntilde: "\xD1", Nu: "\u039D", OElig: "\u0152", Oacute: "\xD3", Ocirc: "\xD4", Ocy: "\u041E", Odblac: "\u0150", Ofr: "\u{1D512}", Ograve: "\xD2", Omacr: "\u014C", Omega: "\u03A9", ohm: "\u03A9", Omicron: "\u039F", Oopf: "\u{1D546}", OpenCurlyDoubleQuote: "\u201C", ldquo: "\u201C", OpenCurlyQuote: "\u2018", lsquo: "\u2018", Or: "\u2A54", Oscr: "\u{1D4AA}", Oslash: "\xD8", Otilde: "\xD5", Otimes: "\u2A37", Ouml: "\xD6", OverBar: "\u203E", oline: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", tbrk: "\u23B4", OverParenthesis: "\u23DC", PartialD: "\u2202", part: "\u2202", Pcy: "\u041F", Pfr: "\u{1D513}", Phi: "\u03A6", Pi: "\u03A0", PlusMinus: "\xB1", plusmn: "\xB1", pm: "\xB1", Popf: "\u2119", primes: "\u2119", Pr: "\u2ABB", Precedes: "\u227A", pr: "\u227A", prec: "\u227A", PrecedesEqual: "\u2AAF", pre: "\u2AAF", preceq: "\u2AAF", PrecedesSlantEqual: "\u227C", prcue: "\u227C", preccurlyeq: "\u227C", PrecedesTilde: "\u227E", precsim: "\u227E", prsim: "\u227E", Prime: "\u2033", Product: "\u220F", prod: "\u220F", Proportional: "\u221D", prop: "\u221D", propto: "\u221D", varpropto: "\u221D", vprop: "\u221D", Pscr: "\u{1D4AB}", Psi: "\u03A8", QUOT: '"', quot: '"', Qfr: "\u{1D514}", Qopf: "\u211A", rationals: "\u211A", Qscr: "\u{1D4AC}", RBarr: "\u2910", drbkarow: "\u2910", REG: "\xAE", circledR: "\xAE", reg: "\xAE", Racute: "\u0154", Rang: "\u27EB", Rarr: "\u21A0", twoheadrightarrow: "\u21A0", Rarrtl: "\u2916", Rcaron: "\u0158", Rcedil: "\u0156", Rcy: "\u0420", Re: "\u211C", Rfr: "\u211C", real: "\u211C", realpart: "\u211C", ReverseElement: "\u220B", SuchThat: "\u220B", ni: "\u220B", niv: "\u220B", ReverseEquilibrium: "\u21CB", leftrightharpoons: "\u21CB", lrhar: "\u21CB", ReverseUpEquilibrium: "\u296F", duhar: "\u296F", Rho: "\u03A1", RightAngleBracket: "\u27E9", rang: "\u27E9", rangle: "\u27E9", RightArrow: "\u2192", ShortRightArrow: "\u2192", rarr: "\u2192", rightarrow: "\u2192", srarr: "\u2192", RightArrowBar: "\u21E5", rarrb: "\u21E5", RightArrowLeftArrow: "\u21C4", rightleftarrows: "\u21C4", rlarr: "\u21C4", RightCeiling: "\u2309", rceil: "\u2309", RightDoubleBracket: "\u27E7", robrk: "\u27E7", RightDownTeeVector: "\u295D", RightDownVector: "\u21C2", dharr: "\u21C2", downharpoonright: "\u21C2", RightDownVectorBar: "\u2955", RightFloor: "\u230B", rfloor: "\u230B", RightTee: "\u22A2", vdash: "\u22A2", RightTeeArrow: "\u21A6", map: "\u21A6", mapsto: "\u21A6", RightTeeVector: "\u295B", RightTriangle: "\u22B3", vartriangleright: "\u22B3", vrtri: "\u22B3", RightTriangleBar: "\u29D0", RightTriangleEqual: "\u22B5", rtrie: "\u22B5", trianglerighteq: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVector: "\u21BE", uharr: "\u21BE", upharpoonright: "\u21BE", RightUpVectorBar: "\u2954", RightVector: "\u21C0", rharu: "\u21C0", rightharpoonup: "\u21C0", RightVectorBar: "\u2953", Ropf: "\u211D", reals: "\u211D", RoundImplies: "\u2970", Rrightarrow: "\u21DB", rAarr: "\u21DB", Rscr: "\u211B", realine: "\u211B", Rsh: "\u21B1", rsh: "\u21B1", RuleDelayed: "\u29F4", SHCHcy: "\u0429", SHcy: "\u0428", SOFTcy: "\u042C", Sacute: "\u015A", Sc: "\u2ABC", Scaron: "\u0160", Scedil: "\u015E", Scirc: "\u015C", Scy: "\u0421", Sfr: "\u{1D516}", ShortUpArrow: "\u2191", UpArrow: "\u2191", uarr: "\u2191", uparrow: "\u2191", Sigma: "\u03A3", SmallCircle: "\u2218", compfn: "\u2218", Sopf: "\u{1D54A}", Sqrt: "\u221A", radic: "\u221A", Square: "\u25A1", squ: "\u25A1", square: "\u25A1", SquareIntersection: "\u2293", sqcap: "\u2293", SquareSubset: "\u228F", sqsub: "\u228F", sqsubset: "\u228F", SquareSubsetEqual: "\u2291", sqsube: "\u2291", sqsubseteq: "\u2291", SquareSuperset: "\u2290", sqsup: "\u2290", sqsupset: "\u2290", SquareSupersetEqual: "\u2292", sqsupe: "\u2292", sqsupseteq: "\u2292", SquareUnion: "\u2294", sqcup: "\u2294", Sscr: "\u{1D4AE}", Star: "\u22C6", sstarf: "\u22C6", Sub: "\u22D0", Subset: "\u22D0", SubsetEqual: "\u2286", sube: "\u2286", subseteq: "\u2286", Succeeds: "\u227B", sc: "\u227B", succ: "\u227B", SucceedsEqual: "\u2AB0", sce: "\u2AB0", succeq: "\u2AB0", SucceedsSlantEqual: "\u227D", sccue: "\u227D", succcurlyeq: "\u227D", SucceedsTilde: "\u227F", scsim: "\u227F", succsim: "\u227F", Sum: "\u2211", sum: "\u2211", Sup: "\u22D1", Supset: "\u22D1", Superset: "\u2283", sup: "\u2283", supset: "\u2283", SupersetEqual: "\u2287", supe: "\u2287", supseteq: "\u2287", THORN: "\xDE", TRADE: "\u2122", trade: "\u2122", TSHcy: "\u040B", TScy: "\u0426", Tab: "	", Tau: "\u03A4", Tcaron: "\u0164", Tcedil: "\u0162", Tcy: "\u0422", Tfr: "\u{1D517}", Therefore: "\u2234", there4: "\u2234", therefore: "\u2234", Theta: "\u0398", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", Tilde: "\u223C", sim: "\u223C", thicksim: "\u223C", thksim: "\u223C", TildeEqual: "\u2243", sime: "\u2243", simeq: "\u2243", TildeFullEqual: "\u2245", cong: "\u2245", TildeTilde: "\u2248", ap: "\u2248", approx: "\u2248", asymp: "\u2248", thickapprox: "\u2248", thkap: "\u2248", Topf: "\u{1D54B}", TripleDot: "\u20DB", tdot: "\u20DB", Tscr: "\u{1D4AF}", Tstrok: "\u0166", Uacute: "\xDA", Uarr: "\u219F", Uarrocir: "\u2949", Ubrcy: "\u040E", Ubreve: "\u016C", Ucirc: "\xDB", Ucy: "\u0423", Udblac: "\u0170", Ufr: "\u{1D518}", Ugrave: "\xD9", Umacr: "\u016A", UnderBar: "_", lowbar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", bbrk: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", bigcup: "\u22C3", xcup: "\u22C3", UnionPlus: "\u228E", uplus: "\u228E", Uogon: "\u0172", Uopf: "\u{1D54C}", UpArrowBar: "\u2912", UpArrowDownArrow: "\u21C5", udarr: "\u21C5", UpDownArrow: "\u2195", updownarrow: "\u2195", varr: "\u2195", UpEquilibrium: "\u296E", udhar: "\u296E", UpTee: "\u22A5", bot: "\u22A5", bottom: "\u22A5", perp: "\u22A5", UpTeeArrow: "\u21A5", mapstoup: "\u21A5", UpperLeftArrow: "\u2196", nwarr: "\u2196", nwarrow: "\u2196", UpperRightArrow: "\u2197", nearr: "\u2197", nearrow: "\u2197", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", Uring: "\u016E", Uscr: "\u{1D4B0}", Utilde: "\u0168", Uuml: "\xDC", VDash: "\u22AB", Vbar: "\u2AEB", Vcy: "\u0412", Vdash: "\u22A9", Vdashl: "\u2AE6", Vee: "\u22C1", bigvee: "\u22C1", xvee: "\u22C1", Verbar: "\u2016", Vert: "\u2016", VerticalBar: "\u2223", mid: "\u2223", shortmid: "\u2223", smid: "\u2223", VerticalLine: "|", verbar: "|", vert: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", wr: "\u2240", wreath: "\u2240", VeryThinSpace: "\u200A", hairsp: "\u200A", Vfr: "\u{1D519}", Vopf: "\u{1D54D}", Vscr: "\u{1D4B1}", Vvdash: "\u22AA", Wcirc: "\u0174", Wedge: "\u22C0", bigwedge: "\u22C0", xwedge: "\u22C0", Wfr: "\u{1D51A}", Wopf: "\u{1D54E}", Wscr: "\u{1D4B2}", Xfr: "\u{1D51B}", Xi: "\u039E", Xopf: "\u{1D54F}", Xscr: "\u{1D4B3}", YAcy: "\u042F", YIcy: "\u0407", YUcy: "\u042E", Yacute: "\xDD", Ycirc: "\u0176", Ycy: "\u042B", Yfr: "\u{1D51C}", Yopf: "\u{1D550}", Yscr: "\u{1D4B4}", Yuml: "\u0178", ZHcy: "\u0416", Zacute: "\u0179", Zcaron: "\u017D", Zcy: "\u0417", Zdot: "\u017B", Zeta: "\u0396", Zfr: "\u2128", zeetrf: "\u2128", Zopf: "\u2124", integers: "\u2124", Zscr: "\u{1D4B5}", aacute: "\xE1", abreve: "\u0103", ac: "\u223E", mstpos: "\u223E", acE: "\u223E\u0333", acd: "\u223F", acirc: "\xE2", acy: "\u0430", aelig: "\xE6", afr: "\u{1D51E}", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", alpha: "\u03B1", amacr: "\u0101", amalg: "\u2A3F", and: "\u2227", wedge: "\u2227", andand: "\u2A55", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", angle: "\u2220", ange: "\u29A4", angmsd: "\u2221", measuredangle: "\u2221", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angzarr: "\u237C", aogon: "\u0105", aopf: "\u{1D552}", apE: "\u2A70", apacir: "\u2A6F", ape: "\u224A", approxeq: "\u224A", apid: "\u224B", apos: "'", aring: "\xE5", ascr: "\u{1D4B6}", ast: "*", midast: "*", atilde: "\xE3", auml: "\xE4", awint: "\u2A11", bNot: "\u2AED", backcong: "\u224C", bcong: "\u224C", backepsilon: "\u03F6", bepsi: "\u03F6", backprime: "\u2035", bprime: "\u2035", backsim: "\u223D", bsim: "\u223D", backsimeq: "\u22CD", bsime: "\u22CD", barvee: "\u22BD", barwed: "\u2305", barwedge: "\u2305", bbrktbrk: "\u23B6", bcy: "\u0431", bdquo: "\u201E", ldquor: "\u201E", bemptyv: "\u29B0", beta: "\u03B2", beth: "\u2136", between: "\u226C", twixt: "\u226C", bfr: "\u{1D51F}", bigcirc: "\u25EF", xcirc: "\u25EF", bigodot: "\u2A00", xodot: "\u2A00", bigoplus: "\u2A01", xoplus: "\u2A01", bigotimes: "\u2A02", xotime: "\u2A02", bigsqcup: "\u2A06", xsqcup: "\u2A06", bigstar: "\u2605", starf: "\u2605", bigtriangledown: "\u25BD", xdtri: "\u25BD", bigtriangleup: "\u25B3", xutri: "\u25B3", biguplus: "\u2A04", xuplus: "\u2A04", bkarow: "\u290D", rbarr: "\u290D", blacklozenge: "\u29EB", lozf: "\u29EB", blacktriangle: "\u25B4", utrif: "\u25B4", blacktriangledown: "\u25BE", dtrif: "\u25BE", blacktriangleleft: "\u25C2", ltrif: "\u25C2", blacktriangleright: "\u25B8", rtrif: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bnot: "\u2310", bopf: "\u{1D553}", bowtie: "\u22C8", boxDL: "\u2557", boxDR: "\u2554", boxDl: "\u2556", boxDr: "\u2553", boxH: "\u2550", boxHD: "\u2566", boxHU: "\u2569", boxHd: "\u2564", boxHu: "\u2567", boxUL: "\u255D", boxUR: "\u255A", boxUl: "\u255C", boxUr: "\u2559", boxV: "\u2551", boxVH: "\u256C", boxVL: "\u2563", boxVR: "\u2560", boxVh: "\u256B", boxVl: "\u2562", boxVr: "\u255F", boxbox: "\u29C9", boxdL: "\u2555", boxdR: "\u2552", boxdl: "\u2510", boxdr: "\u250C", boxhD: "\u2565", boxhU: "\u2568", boxhd: "\u252C", boxhu: "\u2534", boxminus: "\u229F", minusb: "\u229F", boxplus: "\u229E", plusb: "\u229E", boxtimes: "\u22A0", timesb: "\u22A0", boxuL: "\u255B", boxuR: "\u2558", boxul: "\u2518", boxur: "\u2514", boxv: "\u2502", boxvH: "\u256A", boxvL: "\u2561", boxvR: "\u255E", boxvh: "\u253C", boxvl: "\u2524", boxvr: "\u251C", brvbar: "\xA6", bscr: "\u{1D4B7}", bsemi: "\u204F", bsol: "\\", bsolb: "\u29C5", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bumpE: "\u2AAE", cacute: "\u0107", cap: "\u2229", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", capcup: "\u2A47", capdot: "\u2A40", caps: "\u2229\uFE00", caret: "\u2041", ccaps: "\u2A4D", ccaron: "\u010D", ccedil: "\xE7", ccirc: "\u0109", ccups: "\u2A4C", ccupssm: "\u2A50", cdot: "\u010B", cemptyv: "\u29B2", cent: "\xA2", cfr: "\u{1D520}", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", chi: "\u03C7", cir: "\u25CB", cirE: "\u29C3", circ: "\u02C6", circeq: "\u2257", cire: "\u2257", circlearrowleft: "\u21BA", olarr: "\u21BA", circlearrowright: "\u21BB", orarr: "\u21BB", circledS: "\u24C8", oS: "\u24C8", circledast: "\u229B", oast: "\u229B", circledcirc: "\u229A", ocir: "\u229A", circleddash: "\u229D", odash: "\u229D", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", clubs: "\u2663", clubsuit: "\u2663", colon: ":", comma: ",", commat: "@", comp: "\u2201", complement: "\u2201", congdot: "\u2A6D", copf: "\u{1D554}", copysr: "\u2117", crarr: "\u21B5", cross: "\u2717", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", curlyeqprec: "\u22DE", cuesc: "\u22DF", curlyeqsucc: "\u22DF", cularr: "\u21B6", curvearrowleft: "\u21B6", cularrp: "\u293D", cup: "\u222A", cupbrcap: "\u2A48", cupcap: "\u2A46", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curvearrowright: "\u21B7", curarrm: "\u293C", curlyvee: "\u22CE", cuvee: "\u22CE", curlywedge: "\u22CF", cuwed: "\u22CF", curren: "\xA4", cwint: "\u2231", cylcty: "\u232D", dHar: "\u2965", dagger: "\u2020", daleth: "\u2138", dash: "\u2010", hyphen: "\u2010", dbkarow: "\u290F", rBarr: "\u290F", dcaron: "\u010F", dcy: "\u0434", ddarr: "\u21CA", downdownarrows: "\u21CA", ddotseq: "\u2A77", eDDot: "\u2A77", deg: "\xB0", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", dfr: "\u{1D521}", diamondsuit: "\u2666", diams: "\u2666", digamma: "\u03DD", gammad: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", djcy: "\u0452", dlcorn: "\u231E", llcorner: "\u231E", dlcrop: "\u230D", dollar: "$", dopf: "\u{1D555}", doteqdot: "\u2251", eDot: "\u2251", dotminus: "\u2238", minusd: "\u2238", dotplus: "\u2214", plusdo: "\u2214", dotsquare: "\u22A1", sdotb: "\u22A1", drcorn: "\u231F", lrcorner: "\u231F", drcrop: "\u230C", dscr: "\u{1D4B9}", dscy: "\u0455", dsol: "\u29F6", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", triangledown: "\u25BF", dwangle: "\u29A6", dzcy: "\u045F", dzigrarr: "\u27FF", eacute: "\xE9", easter: "\u2A6E", ecaron: "\u011B", ecir: "\u2256", eqcirc: "\u2256", ecirc: "\xEA", ecolon: "\u2255", eqcolon: "\u2255", ecy: "\u044D", edot: "\u0117", efDot: "\u2252", fallingdotseq: "\u2252", efr: "\u{1D522}", eg: "\u2A9A", egrave: "\xE8", egs: "\u2A96", eqslantgtr: "\u2A96", egsdot: "\u2A98", el: "\u2A99", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", eqslantless: "\u2A95", elsdot: "\u2A97", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", emptyv: "\u2205", varnothing: "\u2205", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", eng: "\u014B", ensp: "\u2002", eogon: "\u0119", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", epsilon: "\u03B5", epsiv: "\u03F5", straightepsilon: "\u03F5", varepsilon: "\u03F5", equals: "=", equest: "\u225F", questeq: "\u225F", equivDD: "\u2A78", eqvparsl: "\u29E5", erDot: "\u2253", risingdotseq: "\u2253", erarr: "\u2971", escr: "\u212F", eta: "\u03B7", eth: "\xF0", euml: "\xEB", euro: "\u20AC", excl: "!", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", ffr: "\u{1D523}", filig: "\uFB01", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", fopf: "\u{1D557}", fork: "\u22D4", pitchfork: "\u22D4", forkv: "\u2AD9", fpartint: "\u2A0D", frac12: "\xBD", half: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", sfrown: "\u2322", fscr: "\u{1D4BB}", gEl: "\u2A8C", gtreqqless: "\u2A8C", gacute: "\u01F5", gamma: "\u03B3", gap: "\u2A86", gtrapprox: "\u2A86", gbreve: "\u011F", gcirc: "\u011D", gcy: "\u0433", gdot: "\u0121", gescc: "\u2AA9", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", gfr: "\u{1D524}", gimel: "\u2137", gjcy: "\u0453", glE: "\u2A92", gla: "\u2AA5", glj: "\u2AA4", gnE: "\u2269", gneqq: "\u2269", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gneq: "\u2A88", gnsim: "\u22E7", gopf: "\u{1D558}", gscr: "\u210A", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gtdot: "\u22D7", gtrdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrarr: "\u2978", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", hardcy: "\u044A", harrcir: "\u2948", harrw: "\u21AD", leftrightsquigarrow: "\u21AD", hbar: "\u210F", hslash: "\u210F", planck: "\u210F", plankv: "\u210F", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", mldr: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", hksearow: "\u2925", searhk: "\u2925", hkswarow: "\u2926", swarhk: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", larrhk: "\u21A9", hookrightarrow: "\u21AA", rarrhk: "\u21AA", hopf: "\u{1D559}", horbar: "\u2015", hscr: "\u{1D4BD}", hstrok: "\u0127", hybull: "\u2043", iacute: "\xED", icirc: "\xEE", icy: "\u0438", iecy: "\u0435", iexcl: "\xA1", ifr: "\u{1D526}", igrave: "\xEC", iiiint: "\u2A0C", qint: "\u2A0C", iiint: "\u222D", tint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", ijlig: "\u0133", imacr: "\u012B", imath: "\u0131", inodot: "\u0131", imof: "\u22B7", imped: "\u01B5", incare: "\u2105", infin: "\u221E", infintie: "\u29DD", intcal: "\u22BA", intercal: "\u22BA", intlarhk: "\u2A17", intprod: "\u2A3C", iprod: "\u2A3C", iocy: "\u0451", iogon: "\u012F", iopf: "\u{1D55A}", iota: "\u03B9", iquest: "\xBF", iscr: "\u{1D4BE}", isinE: "\u22F9", isindot: "\u22F5", isins: "\u22F4", isinsv: "\u22F3", itilde: "\u0129", iukcy: "\u0456", iuml: "\xEF", jcirc: "\u0135", jcy: "\u0439", jfr: "\u{1D527}", jmath: "\u0237", jopf: "\u{1D55B}", jscr: "\u{1D4BF}", jsercy: "\u0458", jukcy: "\u0454", kappa: "\u03BA", kappav: "\u03F0", varkappa: "\u03F0", kcedil: "\u0137", kcy: "\u043A", kfr: "\u{1D528}", kgreen: "\u0138", khcy: "\u0445", kjcy: "\u045C", kopf: "\u{1D55C}", kscr: "\u{1D4C0}", lAtail: "\u291B", lBarr: "\u290E", lEg: "\u2A8B", lesseqqgtr: "\u2A8B", lHar: "\u2962", lacute: "\u013A", laemptyv: "\u29B4", lambda: "\u03BB", langd: "\u2991", lap: "\u2A85", lessapprox: "\u2A85", laquo: "\xAB", larrbfs: "\u291F", larrfs: "\u291D", larrlp: "\u21AB", looparrowleft: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", leftarrowtail: "\u21A2", lat: "\u2AAB", latail: "\u2919", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lbbrk: "\u2772", lbrace: "{", lcub: "{", lbrack: "[", lsqb: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", lcaron: "\u013E", lcedil: "\u013C", lcy: "\u043B", ldca: "\u2936", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", leq: "\u2264", leftleftarrows: "\u21C7", llarr: "\u21C7", leftthreetimes: "\u22CB", lthree: "\u22CB", lescc: "\u2AA8", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessdot: "\u22D6", ltdot: "\u22D6", lfisht: "\u297C", lfr: "\u{1D529}", lgE: "\u2A91", lharul: "\u296A", lhblk: "\u2584", ljcy: "\u0459", llhard: "\u296B", lltri: "\u25FA", lmidot: "\u0140", lmoust: "\u23B0", lmoustache: "\u23B0", lnE: "\u2268", lneqq: "\u2268", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lneq: "\u2A87", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", longmapsto: "\u27FC", xmap: "\u27FC", looparrowright: "\u21AC", rarrlp: "\u21AC", lopar: "\u2985", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", loz: "\u25CA", lozenge: "\u25CA", lpar: "(", lparlt: "\u2993", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", lsime: "\u2A8D", lsimg: "\u2A8F", lsquor: "\u201A", sbquo: "\u201A", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltrPar: "\u2996", ltri: "\u25C3", triangleleft: "\u25C3", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", mDDot: "\u223A", macr: "\xAF", strns: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", marker: "\u25AE", mcomma: "\u2A29", mcy: "\u043C", mdash: "\u2014", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midcir: "\u2AF0", minus: "\u2212", minusdu: "\u2A2A", mlcp: "\u2ADB", models: "\u22A7", mopf: "\u{1D55E}", mscr: "\u{1D4C2}", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nGg: "\u22D9\u0338", nGt: "\u226B\u20D2", nLeftarrow: "\u21CD", nlArr: "\u21CD", nLeftrightarrow: "\u21CE", nhArr: "\u21CE", nLl: "\u22D8\u0338", nLt: "\u226A\u20D2", nRightarrow: "\u21CF", nrArr: "\u21CF", nVDash: "\u22AF", nVdash: "\u22AE", nacute: "\u0144", nang: "\u2220\u20D2", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", natur: "\u266E", natural: "\u266E", ncap: "\u2A43", ncaron: "\u0148", ncedil: "\u0146", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", ncy: "\u043D", ndash: "\u2013", neArr: "\u21D7", nearhk: "\u2924", nedot: "\u2250\u0338", nesear: "\u2928", toea: "\u2928", nfr: "\u{1D52B}", nharr: "\u21AE", nleftrightarrow: "\u21AE", nhpar: "\u2AF2", nis: "\u22FC", nisd: "\u22FA", njcy: "\u045A", nlE: "\u2266\u0338", nleqq: "\u2266\u0338", nlarr: "\u219A", nleftarrow: "\u219A", nldr: "\u2025", nopf: "\u{1D55F}", not: "\xAC", notinE: "\u22F9\u0338", notindot: "\u22F5\u0338", notinvb: "\u22F7", notinvc: "\u22F6", notnivb: "\u22FE", notnivc: "\u22FD", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", nrarr: "\u219B", nrightarrow: "\u219B", nrarrc: "\u2933\u0338", nrarrw: "\u219D\u0338", nscr: "\u{1D4C3}", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsubseteqq: "\u2AC5\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupseteqq: "\u2AC6\u0338", ntilde: "\xF1", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvDash: "\u22AD", nvHarr: "\u2904", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwArr: "\u21D6", nwarhk: "\u2923", nwnear: "\u2927", oacute: "\xF3", ocirc: "\xF4", ocy: "\u043E", odblac: "\u0151", odiv: "\u2A38", odsold: "\u29BC", oelig: "\u0153", ofcir: "\u29BF", ofr: "\u{1D52C}", ogon: "\u02DB", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", olcir: "\u29BE", olcross: "\u29BB", olt: "\u29C0", omacr: "\u014D", omega: "\u03C9", omicron: "\u03BF", omid: "\u29B6", oopf: "\u{1D560}", opar: "\u29B7", operp: "\u29B9", or: "\u2228", vee: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", oscr: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oslash: "\xF8", osol: "\u2298", otilde: "\xF5", otimesas: "\u2A36", ouml: "\xF6", ovbar: "\u233D", para: "\xB6", parsim: "\u2AF3", parsl: "\u2AFD", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", pertenk: "\u2031", pfr: "\u{1D52D}", phi: "\u03C6", phiv: "\u03D5", straightphi: "\u03D5", varphi: "\u03D5", phone: "\u260E", pi: "\u03C0", piv: "\u03D6", varpi: "\u03D6", planckh: "\u210E", plus: "+", plusacir: "\u2A23", pluscir: "\u2A22", plusdu: "\u2A25", pluse: "\u2A72", plussim: "\u2A26", plustwo: "\u2A27", pointint: "\u2A15", popf: "\u{1D561}", pound: "\xA3", prE: "\u2AB3", prap: "\u2AB7", precapprox: "\u2AB7", precnapprox: "\u2AB9", prnap: "\u2AB9", precneqq: "\u2AB5", prnE: "\u2AB5", precnsim: "\u22E8", prnsim: "\u22E8", prime: "\u2032", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prurel: "\u22B0", pscr: "\u{1D4C5}", psi: "\u03C8", puncsp: "\u2008", qfr: "\u{1D52E}", qopf: "\u{1D562}", qprime: "\u2057", qscr: "\u{1D4C6}", quatint: "\u2A16", quest: "?", rAtail: "\u291C", rHar: "\u2964", race: "\u223D\u0331", racute: "\u0155", raemptyv: "\u29B3", rangd: "\u2992", range: "\u29A5", raquo: "\xBB", rarrap: "\u2975", rarrbfs: "\u2920", rarrc: "\u2933", rarrfs: "\u291E", rarrpl: "\u2945", rarrsim: "\u2974", rarrtl: "\u21A3", rightarrowtail: "\u21A3", rarrw: "\u219D", rightsquigarrow: "\u219D", ratail: "\u291A", ratio: "\u2236", rbbrk: "\u2773", rbrace: "}", rcub: "}", rbrack: "]", rsqb: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", rcaron: "\u0159", rcedil: "\u0157", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdsh: "\u21B3", rect: "\u25AD", rfisht: "\u297D", rfr: "\u{1D52F}", rharul: "\u296C", rho: "\u03C1", rhov: "\u03F1", varrho: "\u03F1", rightrightarrows: "\u21C9", rrarr: "\u21C9", rightthreetimes: "\u22CC", rthree: "\u22CC", ring: "\u02DA", rlm: "\u200F", rmoust: "\u23B1", rmoustache: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", ropar: "\u2986", ropf: "\u{1D563}", roplus: "\u2A2E", rotimes: "\u2A35", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rsaquo: "\u203A", rscr: "\u{1D4C7}", rtimes: "\u22CA", rtri: "\u25B9", triangleright: "\u25B9", rtriltri: "\u29CE", ruluhar: "\u2968", rx: "\u211E", sacute: "\u015B", scE: "\u2AB4", scap: "\u2AB8", succapprox: "\u2AB8", scaron: "\u0161", scedil: "\u015F", scirc: "\u015D", scnE: "\u2AB6", succneqq: "\u2AB6", scnap: "\u2ABA", succnapprox: "\u2ABA", scnsim: "\u22E9", succnsim: "\u22E9", scpolint: "\u2A13", scy: "\u0441", sdot: "\u22C5", sdote: "\u2A66", seArr: "\u21D8", sect: "\xA7", semi: ";", seswar: "\u2929", tosa: "\u2929", sext: "\u2736", sfr: "\u{1D530}", sharp: "\u266F", shchcy: "\u0449", shcy: "\u0448", shy: "\xAD", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", varsigma: "\u03C2", simdot: "\u2A6A", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", smashp: "\u2A33", smeparsl: "\u29E4", smile: "\u2323", ssmile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", softcy: "\u044C", sol: "/", solb: "\u29C4", solbar: "\u233F", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", sqcaps: "\u2293\uFE00", sqcups: "\u2294\uFE00", sscr: "\u{1D4C8}", star: "\u2606", sub: "\u2282", subset: "\u2282", subE: "\u2AC5", subseteqq: "\u2AC5", subdot: "\u2ABD", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subsetneqq: "\u2ACB", subne: "\u228A", subsetneq: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", supE: "\u2AC6", supseteqq: "\u2AC6", supdot: "\u2ABE", supdsub: "\u2AD8", supedot: "\u2AC4", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supsetneqq: "\u2ACC", supne: "\u228B", supsetneq: "\u228B", supplus: "\u2AC0", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swArr: "\u21D9", swnwar: "\u292A", szlig: "\xDF", target: "\u2316", tau: "\u03C4", tcaron: "\u0165", tcedil: "\u0163", tcy: "\u0442", telrec: "\u2315", tfr: "\u{1D531}", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", vartheta: "\u03D1", thorn: "\xFE", times: "\xD7", timesbar: "\u2A31", timesd: "\u2A30", topbot: "\u2336", topcir: "\u2AF1", topf: "\u{1D565}", topfork: "\u2ADA", tprime: "\u2034", triangle: "\u25B5", utri: "\u25B5", triangleq: "\u225C", trie: "\u225C", tridot: "\u25EC", triminus: "\u2A3A", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", tscr: "\u{1D4C9}", tscy: "\u0446", tshcy: "\u045B", tstrok: "\u0167", uHar: "\u2963", uacute: "\xFA", ubrcy: "\u045E", ubreve: "\u016D", ucirc: "\xFB", ucy: "\u0443", udblac: "\u0171", ufisht: "\u297E", ufr: "\u{1D532}", ugrave: "\xF9", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", umacr: "\u016B", uogon: "\u0173", uopf: "\u{1D566}", upsi: "\u03C5", upsilon: "\u03C5", upuparrows: "\u21C8", uuarr: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", uring: "\u016F", urtri: "\u25F9", uscr: "\u{1D4CA}", utdot: "\u22F0", utilde: "\u0169", uuml: "\xFC", uwangle: "\u29A7", vBar: "\u2AE8", vBarv: "\u2AE9", vangrt: "\u299C", varsubsetneq: "\u228A\uFE00", vsubne: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", vsubnE: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", vsupne: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vsupnE: "\u2ACC\uFE00", vcy: "\u0432", veebar: "\u22BB", veeeq: "\u225A", vellip: "\u22EE", vfr: "\u{1D533}", vopf: "\u{1D567}", vscr: "\u{1D4CB}", vzigzag: "\u299A", wcirc: "\u0175", wedbar: "\u2A5F", wedgeq: "\u2259", weierp: "\u2118", wp: "\u2118", wfr: "\u{1D534}", wopf: "\u{1D568}", wscr: "\u{1D4CC}", xfr: "\u{1D535}", xi: "\u03BE", xnis: "\u22FB", xopf: "\u{1D569}", xscr: "\u{1D4CD}", yacute: "\xFD", yacy: "\u044F", ycirc: "\u0177", ycy: "\u044B", yen: "\xA5", yfr: "\u{1D536}", yicy: "\u0457", yopf: "\u{1D56A}", yscr: "\u{1D4CE}", yucy: "\u044E", yuml: "\xFF", zacute: "\u017A", zcaron: "\u017E", zcy: "\u0437", zdot: "\u017C", zeta: "\u03B6", zfr: "\u{1D537}", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
var qa = "\uE500";
Ge2.ngsp = qa;
var Ha = [/^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//];
function ws(t8, e) {
  if (e != null && !(Array.isArray(e) && e.length == 2))
    throw new Error(`Expected '${t8}' to be an array, [start, end].`);
  if (e != null) {
    let r = e[0], n = e[1];
    Ha.forEach((s) => {
      if (s.test(r) || s.test(n))
        throw new Error(`['${r}', '${n}'] contains unusable interpolation symbol.`);
    });
  }
}
var Tr2 = class t2 {
  static fromArray(e) {
    return e ? (ws("interpolation", e), new t2(e[0], e[1])) : xr2;
  }
  constructor(e, r) {
    this.start = e, this.end = r;
  }
};
var xr2 = new Tr2("{{", "}}");
var pt2 = class extends Ve2 {
  constructor(e, r, n) {
    super(n, e), this.tokenType = r;
  }
};
var Pr2 = class {
  constructor(e, r, n) {
    this.tokens = e, this.errors = r, this.nonNormalizedIcuExpressions = n;
  }
};
function Ms(t8, e, r, n = {}) {
  let s = new Nr2(new we2(t8, e), r, n);
  return s.tokenize(), new Pr2(fo2(s.tokens), s.errors, s.nonNormalizedIcuExpressions);
}
var ao2 = /\r\n?/g;
function Ye2(t8) {
  return `Unexpected character "${t8 === 0 ? "EOF" : String.fromCharCode(t8)}"`;
}
function Ls(t8) {
  return `Unknown entity "${t8}" - use the "&#<decimal>;" or  "&#x<hex>;" syntax`;
}
function oo2(t8, e) {
  return `Unable to parse entity "${e}" - ${t8} character reference entities must end with ";"`;
}
var jt2;
(function(t8) {
  t8.HEX = "hexadecimal", t8.DEC = "decimal";
})(jt2 || (jt2 = {}));
var ht2 = class {
  constructor(e) {
    this.error = e;
  }
};
var Nr2 = class {
  constructor(e, r, n) {
    var _a3;
    this._getTagContentType = r, this._currentTokenStart = null, this._currentTokenType = null, this._expansionCaseStack = [], this._inInterpolation = false, this._fullNameStack = [], this.tokens = [], this.errors = [], this.nonNormalizedIcuExpressions = [], this._tokenizeIcu = n.tokenizeExpansionForms || false, this._interpolationConfig = n.interpolationConfig || xr2, this._leadingTriviaCodePoints = n.leadingTriviaChars && n.leadingTriviaChars.map((i) => i.codePointAt(0) || 0), this._canSelfClose = n.canSelfClose || false, this._allowHtmComponentClosingTags = n.allowHtmComponentClosingTags || false;
    let s = n.range || { endPos: e.content.length, startPos: 0, startLine: 0, startCol: 0 };
    this._cursor = n.escapedString ? new Ir2(e, s) : new Kt2(e, s), this._preserveLineEndings = n.preserveLineEndings || false, this._i18nNormalizeLineEndingsInICUs = n.i18nNormalizeLineEndingsInICUs || false, this._tokenizeBlocks = (_a3 = n.tokenizeBlocks) != null ? _a3 : true;
    try {
      this._cursor.init();
    } catch (i) {
      this.handleError(i);
    }
  }
  _processCarriageReturns(e) {
    return this._preserveLineEndings ? e : e.replace(ao2, `
`);
  }
  tokenize() {
    for (; this._cursor.peek() !== 0; ) {
      let e = this._cursor.clone();
      try {
        if (this._attemptCharCode(60))
          if (this._attemptCharCode(33))
            this._attemptStr("[CDATA[") ? this._consumeCdata(e) : this._attemptStr("--") ? this._consumeComment(e) : this._attemptStrCaseInsensitive("doctype") ? this._consumeDocType(e) : this._consumeBogusComment(e);
          else if (this._attemptCharCode(47))
            this._consumeTagClose(e);
          else {
            let r = this._cursor.clone();
            this._attemptCharCode(63) ? (this._cursor = r, this._consumeBogusComment(e)) : this._consumeTagOpen(e);
          }
        else
          this._tokenizeBlocks && this._attemptCharCode(64) ? this._consumeBlockStart(e) : this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansionCase() && !this._isInExpansionForm() && this._attemptCharCode(125) ? this._consumeBlockEnd(e) : this._tokenizeIcu && this._tokenizeExpansionForm() || this._consumeWithInterpolation(5, 8, () => this._isTextEnd(), () => this._isTagStart());
      } catch (r) {
        this.handleError(r);
      }
    }
    this._beginToken(30), this._endToken([]);
  }
  _getBlockName() {
    let e = false, r = this._cursor.clone();
    return this._attemptCharCodeUntilFn((n) => Lt2(n) ? !e : Ns(n) ? (e = true, false) : true), this._cursor.getChars(r).trim();
  }
  _consumeBlockStart(e) {
    this._beginToken(25, e);
    let r = this._endToken([this._getBlockName()]);
    if (this._cursor.peek() === 40)
      if (this._cursor.advance(), this._consumeBlockParameters(), this._attemptCharCodeUntilFn(k2), this._attemptCharCode(41))
        this._attemptCharCodeUntilFn(k2);
      else {
        r.type = 29;
        return;
      }
    this._attemptCharCode(123) ? (this._beginToken(26), this._endToken([])) : r.type = 29;
  }
  _consumeBlockEnd(e) {
    this._beginToken(27, e), this._endToken([]);
  }
  _consumeBlockParameters() {
    for (this._attemptCharCodeUntilFn(Is); this._cursor.peek() !== 41 && this._cursor.peek() !== 0; ) {
      this._beginToken(28);
      let e = this._cursor.clone(), r = null, n = 0;
      for (; this._cursor.peek() !== 59 && this._cursor.peek() !== 0 || r !== null; ) {
        let s = this._cursor.peek();
        if (s === 92)
          this._cursor.advance();
        else if (s === r)
          r = null;
        else if (r === null && Er2(s))
          r = s;
        else if (s === 40 && r === null)
          n++;
        else if (s === 41 && r === null) {
          if (n === 0)
            break;
          n > 0 && n--;
        }
        this._cursor.advance();
      }
      this._endToken([this._cursor.getChars(e)]), this._attemptCharCodeUntilFn(Is);
    }
  }
  _tokenizeExpansionForm() {
    if (this.isExpansionFormStart())
      return this._consumeExpansionFormStart(), true;
    if (po2(this._cursor.peek()) && this._isInExpansionForm())
      return this._consumeExpansionCaseStart(), true;
    if (this._cursor.peek() === 125) {
      if (this._isInExpansionCase())
        return this._consumeExpansionCaseEnd(), true;
      if (this._isInExpansionForm())
        return this._consumeExpansionFormEnd(), true;
    }
    return false;
  }
  _beginToken(e, r = this._cursor.clone()) {
    this._currentTokenStart = r, this._currentTokenType = e;
  }
  _endToken(e, r) {
    if (this._currentTokenStart === null)
      throw new pt2("Programming error - attempted to end a token when there was no start to the token", this._currentTokenType, this._cursor.getSpan(r));
    if (this._currentTokenType === null)
      throw new pt2("Programming error - attempted to end a token which has no token type", null, this._cursor.getSpan(this._currentTokenStart));
    let n = { type: this._currentTokenType, parts: e, sourceSpan: (r != null ? r : this._cursor).getSpan(this._currentTokenStart, this._leadingTriviaCodePoints) };
    return this.tokens.push(n), this._currentTokenStart = null, this._currentTokenType = null, n;
  }
  _createError(e, r) {
    this._isInExpansionForm() && (e += ` (Do you have an unescaped "{" in your template? Use "{{ '{' }}") to escape it.)`);
    let n = new pt2(e, this._currentTokenType, r);
    return this._currentTokenStart = null, this._currentTokenType = null, new ht2(n);
  }
  handleError(e) {
    if (e instanceof ft2 && (e = this._createError(e.msg, this._cursor.getSpan(e.cursor))), e instanceof ht2)
      this.errors.push(e.error);
    else
      throw e;
  }
  _attemptCharCode(e) {
    return this._cursor.peek() === e ? (this._cursor.advance(), true) : false;
  }
  _attemptCharCodeCaseInsensitive(e) {
    return ho(this._cursor.peek(), e) ? (this._cursor.advance(), true) : false;
  }
  _requireCharCode(e) {
    let r = this._cursor.clone();
    if (!this._attemptCharCode(e))
      throw this._createError(Ye2(this._cursor.peek()), this._cursor.getSpan(r));
  }
  _attemptStr(e) {
    let r = e.length;
    if (this._cursor.charsLeft() < r)
      return false;
    let n = this._cursor.clone();
    for (let s = 0; s < r; s++)
      if (!this._attemptCharCode(e.charCodeAt(s)))
        return this._cursor = n, false;
    return true;
  }
  _attemptStrCaseInsensitive(e) {
    for (let r = 0; r < e.length; r++)
      if (!this._attemptCharCodeCaseInsensitive(e.charCodeAt(r)))
        return false;
    return true;
  }
  _requireStr(e) {
    let r = this._cursor.clone();
    if (!this._attemptStr(e))
      throw this._createError(Ye2(this._cursor.peek()), this._cursor.getSpan(r));
  }
  _requireStrCaseInsensitive(e) {
    let r = this._cursor.clone();
    if (!this._attemptStrCaseInsensitive(e))
      throw this._createError(Ye2(this._cursor.peek()), this._cursor.getSpan(r));
  }
  _attemptCharCodeUntilFn(e) {
    for (; !e(this._cursor.peek()); )
      this._cursor.advance();
  }
  _requireCharCodeUntilFn(e, r) {
    let n = this._cursor.clone();
    if (this._attemptCharCodeUntilFn(e), this._cursor.diff(n) < r)
      throw this._createError(Ye2(this._cursor.peek()), this._cursor.getSpan(n));
  }
  _attemptUntilChar(e) {
    for (; this._cursor.peek() !== e; )
      this._cursor.advance();
  }
  _readChar() {
    let e = String.fromCodePoint(this._cursor.peek());
    return this._cursor.advance(), e;
  }
  _consumeEntity(e) {
    this._beginToken(9);
    let r = this._cursor.clone();
    if (this._cursor.advance(), this._attemptCharCode(35)) {
      let n = this._attemptCharCode(120) || this._attemptCharCode(88), s = this._cursor.clone();
      if (this._attemptCharCodeUntilFn(lo2), this._cursor.peek() != 59) {
        this._cursor.advance();
        let a = n ? jt2.HEX : jt2.DEC;
        throw this._createError(oo2(a, this._cursor.getChars(r)), this._cursor.getSpan());
      }
      let i = this._cursor.getChars(s);
      this._cursor.advance();
      try {
        let a = parseInt(i, n ? 16 : 10);
        this._endToken([String.fromCharCode(a), this._cursor.getChars(r)]);
      } catch (e2) {
        throw this._createError(Ls(this._cursor.getChars(r)), this._cursor.getSpan());
      }
    } else {
      let n = this._cursor.clone();
      if (this._attemptCharCodeUntilFn(co), this._cursor.peek() != 59)
        this._beginToken(e, r), this._cursor = n, this._endToken(["&"]);
      else {
        let s = this._cursor.getChars(n);
        this._cursor.advance();
        let i = Ge2[s];
        if (!i)
          throw this._createError(Ls(s), this._cursor.getSpan(r));
        this._endToken([i, `&${s};`]);
      }
    }
  }
  _consumeRawText(e, r) {
    this._beginToken(e ? 6 : 7);
    let n = [];
    for (; ; ) {
      let s = this._cursor.clone(), i = r();
      if (this._cursor = s, i)
        break;
      e && this._cursor.peek() === 38 ? (this._endToken([this._processCarriageReturns(n.join(""))]), n.length = 0, this._consumeEntity(6), this._beginToken(6)) : n.push(this._readChar());
    }
    this._endToken([this._processCarriageReturns(n.join(""))]);
  }
  _consumeComment(e) {
    this._beginToken(10, e), this._endToken([]), this._consumeRawText(false, () => this._attemptStr("-->")), this._beginToken(11), this._requireStr("-->"), this._endToken([]);
  }
  _consumeBogusComment(e) {
    this._beginToken(10, e), this._endToken([]), this._consumeRawText(false, () => this._cursor.peek() === 62), this._beginToken(11), this._cursor.advance(), this._endToken([]);
  }
  _consumeCdata(e) {
    this._beginToken(12, e), this._endToken([]), this._consumeRawText(false, () => this._attemptStr("]]>")), this._beginToken(13), this._requireStr("]]>"), this._endToken([]);
  }
  _consumeDocType(e) {
    this._beginToken(18, e), this._endToken([]), this._consumeRawText(false, () => this._cursor.peek() === 62), this._beginToken(19), this._cursor.advance(), this._endToken([]);
  }
  _consumePrefixAndName() {
    let e = this._cursor.clone(), r = "";
    for (; this._cursor.peek() !== 58 && !uo2(this._cursor.peek()); )
      this._cursor.advance();
    let n;
    this._cursor.peek() === 58 ? (r = this._cursor.getChars(e), this._cursor.advance(), n = this._cursor.clone()) : n = e, this._requireCharCodeUntilFn(Fs, r === "" ? 0 : 1);
    let s = this._cursor.getChars(n);
    return [r, s];
  }
  _consumeTagOpen(e) {
    let r, n, s, i = [];
    try {
      if (!Ft2(this._cursor.peek()))
        throw this._createError(Ye2(this._cursor.peek()), this._cursor.getSpan(e));
      for (s = this._consumeTagOpenStart(e), n = s.parts[0], r = s.parts[1], this._attemptCharCodeUntilFn(k2); this._cursor.peek() !== 47 && this._cursor.peek() !== 62 && this._cursor.peek() !== 60 && this._cursor.peek() !== 0; ) {
        let [o, u] = this._consumeAttributeName();
        if (this._attemptCharCodeUntilFn(k2), this._attemptCharCode(61)) {
          this._attemptCharCodeUntilFn(k2);
          let p = this._consumeAttributeValue();
          i.push({ prefix: o, name: u, value: p });
        } else
          i.push({ prefix: o, name: u });
        this._attemptCharCodeUntilFn(k2);
      }
      this._consumeTagOpenEnd();
    } catch (o) {
      if (o instanceof ht2) {
        s ? s.type = 4 : (this._beginToken(5, e), this._endToken(["<"]));
        return;
      }
      throw o;
    }
    if (this._canSelfClose && this.tokens[this.tokens.length - 1].type === 2)
      return;
    let a = this._getTagContentType(r, n, this._fullNameStack.length > 0, i);
    this._handleFullNameStackForTagOpen(n, r), a === N2.RAW_TEXT ? this._consumeRawTextWithTagClose(n, r, false) : a === N2.ESCAPABLE_RAW_TEXT && this._consumeRawTextWithTagClose(n, r, true);
  }
  _consumeRawTextWithTagClose(e, r, n) {
    this._consumeRawText(n, () => !this._attemptCharCode(60) || !this._attemptCharCode(47) || (this._attemptCharCodeUntilFn(k2), !this._attemptStrCaseInsensitive(e ? `${e}:${r}` : r)) ? false : (this._attemptCharCodeUntilFn(k2), this._attemptCharCode(62))), this._beginToken(3), this._requireCharCodeUntilFn((s) => s === 62, 3), this._cursor.advance(), this._endToken([e, r]), this._handleFullNameStackForTagClose(e, r);
  }
  _consumeTagOpenStart(e) {
    this._beginToken(0, e);
    let r = this._consumePrefixAndName();
    return this._endToken(r);
  }
  _consumeAttributeName() {
    let e = this._cursor.peek();
    if (e === 39 || e === 34)
      throw this._createError(Ye2(e), this._cursor.getSpan());
    this._beginToken(14);
    let r = this._consumePrefixAndName();
    return this._endToken(r), r;
  }
  _consumeAttributeValue() {
    let e;
    if (this._cursor.peek() === 39 || this._cursor.peek() === 34) {
      let r = this._cursor.peek();
      this._consumeQuote(r);
      let n = () => this._cursor.peek() === r;
      e = this._consumeWithInterpolation(16, 17, n, n), this._consumeQuote(r);
    } else {
      let r = () => Fs(this._cursor.peek());
      e = this._consumeWithInterpolation(16, 17, r, r);
    }
    return e;
  }
  _consumeQuote(e) {
    this._beginToken(15), this._requireCharCode(e), this._endToken([String.fromCodePoint(e)]);
  }
  _consumeTagOpenEnd() {
    let e = this._attemptCharCode(47) ? 2 : 1;
    this._beginToken(e), this._requireCharCode(62), this._endToken([]);
  }
  _consumeTagClose(e) {
    if (this._beginToken(3, e), this._attemptCharCodeUntilFn(k2), this._allowHtmComponentClosingTags && this._attemptCharCode(47))
      this._attemptCharCodeUntilFn(k2), this._requireCharCode(62), this._endToken([]);
    else {
      let [r, n] = this._consumePrefixAndName();
      this._attemptCharCodeUntilFn(k2), this._requireCharCode(62), this._endToken([r, n]), this._handleFullNameStackForTagClose(r, n);
    }
  }
  _consumeExpansionFormStart() {
    this._beginToken(20), this._requireCharCode(123), this._endToken([]), this._expansionCaseStack.push(20), this._beginToken(7);
    let e = this._readUntil(44), r = this._processCarriageReturns(e);
    if (this._i18nNormalizeLineEndingsInICUs)
      this._endToken([r]);
    else {
      let s = this._endToken([e]);
      r !== e && this.nonNormalizedIcuExpressions.push(s);
    }
    this._requireCharCode(44), this._attemptCharCodeUntilFn(k2), this._beginToken(7);
    let n = this._readUntil(44);
    this._endToken([n]), this._requireCharCode(44), this._attemptCharCodeUntilFn(k2);
  }
  _consumeExpansionCaseStart() {
    this._beginToken(21);
    let e = this._readUntil(123).trim();
    this._endToken([e]), this._attemptCharCodeUntilFn(k2), this._beginToken(22), this._requireCharCode(123), this._endToken([]), this._attemptCharCodeUntilFn(k2), this._expansionCaseStack.push(22);
  }
  _consumeExpansionCaseEnd() {
    this._beginToken(23), this._requireCharCode(125), this._endToken([]), this._attemptCharCodeUntilFn(k2), this._expansionCaseStack.pop();
  }
  _consumeExpansionFormEnd() {
    this._beginToken(24), this._requireCharCode(125), this._endToken([]), this._expansionCaseStack.pop();
  }
  _consumeWithInterpolation(e, r, n, s) {
    this._beginToken(e);
    let i = [];
    for (; !n(); ) {
      let o = this._cursor.clone();
      this._interpolationConfig && this._attemptStr(this._interpolationConfig.start) ? (this._endToken([this._processCarriageReturns(i.join(""))], o), i.length = 0, this._consumeInterpolation(r, o, s), this._beginToken(e)) : this._cursor.peek() === 38 ? (this._endToken([this._processCarriageReturns(i.join(""))]), i.length = 0, this._consumeEntity(e), this._beginToken(e)) : i.push(this._readChar());
    }
    this._inInterpolation = false;
    let a = this._processCarriageReturns(i.join(""));
    return this._endToken([a]), a;
  }
  _consumeInterpolation(e, r, n) {
    let s = [];
    this._beginToken(e, r), s.push(this._interpolationConfig.start);
    let i = this._cursor.clone(), a = null, o = false;
    for (; this._cursor.peek() !== 0 && (n === null || !n()); ) {
      let u = this._cursor.clone();
      if (this._isTagStart()) {
        this._cursor = u, s.push(this._getProcessedChars(i, u)), this._endToken(s);
        return;
      }
      if (a === null)
        if (this._attemptStr(this._interpolationConfig.end)) {
          s.push(this._getProcessedChars(i, u)), s.push(this._interpolationConfig.end), this._endToken(s);
          return;
        } else
          this._attemptStr("//") && (o = true);
      let p = this._cursor.peek();
      this._cursor.advance(), p === 92 ? this._cursor.advance() : p === a ? a = null : !o && a === null && Er2(p) && (a = p);
    }
    s.push(this._getProcessedChars(i, this._cursor)), this._endToken(s);
  }
  _getProcessedChars(e, r) {
    return this._processCarriageReturns(r.getChars(e));
  }
  _isTextEnd() {
    return !!(this._isTagStart() || this._cursor.peek() === 0 || this._tokenizeIcu && !this._inInterpolation && (this.isExpansionFormStart() || this._cursor.peek() === 125 && this._isInExpansionCase()) || this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansion() && (this._isBlockStart() || this._cursor.peek() === 125));
  }
  _isTagStart() {
    if (this._cursor.peek() === 60) {
      let e = this._cursor.clone();
      e.advance();
      let r = e.peek();
      if (97 <= r && r <= 122 || 65 <= r && r <= 90 || r === 47 || r === 33)
        return true;
    }
    return false;
  }
  _isBlockStart() {
    if (this._tokenizeBlocks && this._cursor.peek() === 64) {
      let e = this._cursor.clone();
      if (e.advance(), Ns(e.peek()))
        return true;
    }
    return false;
  }
  _readUntil(e) {
    let r = this._cursor.clone();
    return this._attemptUntilChar(e), this._cursor.getChars(r);
  }
  _isInExpansion() {
    return this._isInExpansionCase() || this._isInExpansionForm();
  }
  _isInExpansionCase() {
    return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 22;
  }
  _isInExpansionForm() {
    return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 20;
  }
  isExpansionFormStart() {
    if (this._cursor.peek() !== 123)
      return false;
    if (this._interpolationConfig) {
      let e = this._cursor.clone(), r = this._attemptStr(this._interpolationConfig.start);
      return this._cursor = e, !r;
    }
    return true;
  }
  _handleFullNameStackForTagOpen(e, r) {
    let n = We2(e, r);
    (this._fullNameStack.length === 0 || this._fullNameStack[this._fullNameStack.length - 1] === n) && this._fullNameStack.push(n);
  }
  _handleFullNameStackForTagClose(e, r) {
    let n = We2(e, r);
    this._fullNameStack.length !== 0 && this._fullNameStack[this._fullNameStack.length - 1] === n && this._fullNameStack.pop();
  }
};
function k2(t8) {
  return !Lt2(t8) || t8 === 0;
}
function Fs(t8) {
  return Lt2(t8) || t8 === 62 || t8 === 60 || t8 === 47 || t8 === 39 || t8 === 34 || t8 === 61 || t8 === 0;
}
function uo2(t8) {
  return (t8 < 97 || 122 < t8) && (t8 < 65 || 90 < t8) && (t8 < 48 || t8 > 57);
}
function lo2(t8) {
  return t8 === 59 || t8 === 0 || !hs(t8);
}
function co(t8) {
  return t8 === 59 || t8 === 0 || !Ft2(t8);
}
function po2(t8) {
  return t8 !== 125;
}
function ho(t8, e) {
  return Ps(t8) === Ps(e);
}
function Ps(t8) {
  return t8 >= 97 && t8 <= 122 ? t8 - 97 + 65 : t8;
}
function Ns(t8) {
  return Ft2(t8) || Cr2(t8) || t8 === 95;
}
function Is(t8) {
  return t8 !== 59 && k2(t8);
}
function fo2(t8) {
  let e = [], r;
  for (let n = 0; n < t8.length; n++) {
    let s = t8[n];
    r && r.type === 5 && s.type === 5 || r && r.type === 16 && s.type === 16 ? (r.parts[0] += s.parts[0], r.sourceSpan.end = s.sourceSpan.end) : (r = s, e.push(r));
  }
  return e;
}
var Kt2 = class t3 {
  constructor(e, r) {
    if (e instanceof t3) {
      this.file = e.file, this.input = e.input, this.end = e.end;
      let n = e.state;
      this.state = { peek: n.peek, offset: n.offset, line: n.line, column: n.column };
    } else {
      if (!r)
        throw new Error("Programming error: the range argument must be provided with a file argument.");
      this.file = e, this.input = e.content, this.end = r.endPos, this.state = { peek: -1, offset: r.startPos, line: r.startLine, column: r.startCol };
    }
  }
  clone() {
    return new t3(this);
  }
  peek() {
    return this.state.peek;
  }
  charsLeft() {
    return this.end - this.state.offset;
  }
  diff(e) {
    return this.state.offset - e.state.offset;
  }
  advance() {
    this.advanceState(this.state);
  }
  init() {
    this.updatePeek(this.state);
  }
  getSpan(e, r) {
    e = e || this;
    let n = e;
    if (r)
      for (; this.diff(e) > 0 && r.indexOf(e.peek()) !== -1; )
        n === e && (e = e.clone()), e.advance();
    let s = this.locationFromCursor(e), i = this.locationFromCursor(this), a = n !== e ? this.locationFromCursor(n) : s;
    return new f(s, i, a);
  }
  getChars(e) {
    return this.input.substring(e.state.offset, this.state.offset);
  }
  charAt(e) {
    return this.input.charCodeAt(e);
  }
  advanceState(e) {
    if (e.offset >= this.end)
      throw this.state = e, new ft2('Unexpected character "EOF"', this);
    let r = this.charAt(e.offset);
    r === 10 ? (e.line++, e.column = 0) : Sr2(r) || e.column++, e.offset++, this.updatePeek(e);
  }
  updatePeek(e) {
    e.peek = e.offset >= this.end ? 0 : this.charAt(e.offset);
  }
  locationFromCursor(e) {
    return new ae2(e.file, e.state.offset, e.state.line, e.state.column);
  }
};
var Ir2 = class t4 extends Kt2 {
  constructor(e, r) {
    e instanceof t4 ? (super(e), this.internalState = { ...e.internalState }) : (super(e, r), this.internalState = this.state);
  }
  advance() {
    this.state = this.internalState, super.advance(), this.processEscapeSequence();
  }
  init() {
    super.init(), this.processEscapeSequence();
  }
  clone() {
    return new t4(this);
  }
  getChars(e) {
    let r = e.clone(), n = "";
    for (; r.internalState.offset < this.internalState.offset; )
      n += String.fromCodePoint(r.peek()), r.advance();
    return n;
  }
  processEscapeSequence() {
    let e = () => this.internalState.peek;
    if (e() === 92)
      if (this.internalState = { ...this.state }, this.advanceState(this.internalState), e() === 110)
        this.state.peek = 10;
      else if (e() === 114)
        this.state.peek = 13;
      else if (e() === 118)
        this.state.peek = 11;
      else if (e() === 116)
        this.state.peek = 9;
      else if (e() === 98)
        this.state.peek = 8;
      else if (e() === 102)
        this.state.peek = 12;
      else if (e() === 117)
        if (this.advanceState(this.internalState), e() === 123) {
          this.advanceState(this.internalState);
          let r = this.clone(), n = 0;
          for (; e() !== 125; )
            this.advanceState(this.internalState), n++;
          this.state.peek = this.decodeHexDigits(r, n);
        } else {
          let r = this.clone();
          this.advanceState(this.internalState), this.advanceState(this.internalState), this.advanceState(this.internalState), this.state.peek = this.decodeHexDigits(r, 4);
        }
      else if (e() === 120) {
        this.advanceState(this.internalState);
        let r = this.clone();
        this.advanceState(this.internalState), this.state.peek = this.decodeHexDigits(r, 2);
      } else if (_r2(e())) {
        let r = "", n = 0, s = this.clone();
        for (; _r2(e()) && n < 3; )
          s = this.clone(), r += String.fromCodePoint(e()), this.advanceState(this.internalState), n++;
        this.state.peek = parseInt(r, 8), this.internalState = s.internalState;
      } else
        Sr2(this.internalState.peek) ? (this.advanceState(this.internalState), this.state = this.internalState) : this.state.peek = this.internalState.peek;
  }
  decodeHexDigits(e, r) {
    let n = this.input.slice(e.internalState.offset, e.internalState.offset + r), s = parseInt(n, 16);
    if (isNaN(s))
      throw e.state = e.internalState, new ft2("Invalid hexadecimal escape sequence", e);
    return s;
  }
};
var ft2 = class {
  constructor(e, r) {
    this.msg = e, this.cursor = r;
  }
};
var $ = class t5 extends Ve2 {
  static create(e, r, n) {
    return new t5(e, r, n);
  }
  constructor(e, r, n) {
    super(r, n), this.elementName = e;
  }
};
var Or2 = class {
  constructor(e, r) {
    this.rootNodes = e, this.errors = r;
  }
};
var Qt2 = class {
  constructor(e) {
    this.getTagDefinition = e;
  }
  parse(e, r, n, s = false, i) {
    let a = (D) => (I2, ...B) => D(I2.toLowerCase(), ...B), o = s ? this.getTagDefinition : a(this.getTagDefinition), u = (D) => o(D).getContentType(), p = s ? i : a(i), m = Ms(e, r, i ? (D, I2, B, c) => {
      let d = p(D, I2, B, c);
      return d !== void 0 ? d : u(D);
    } : u, n), g = n && n.canSelfClose || false, C2 = n && n.allowHtmComponentClosingTags || false, _2 = new Mr2(m.tokens, o, g, C2, s);
    return _2.build(), new Or2(_2.rootNodes, m.errors.concat(_2.errors));
  }
};
var Mr2 = class t6 {
  constructor(e, r, n, s, i) {
    this.tokens = e, this.getTagDefinition = r, this.canSelfClose = n, this.allowHtmComponentClosingTags = s, this.isTagNameCaseSensitive = i, this._index = -1, this._containerStack = [], this.rootNodes = [], this.errors = [], this._advance();
  }
  build() {
    for (; this._peek.type !== 30; )
      this._peek.type === 0 || this._peek.type === 4 ? this._consumeStartTag(this._advance()) : this._peek.type === 3 ? (this._closeVoidElement(), this._consumeEndTag(this._advance())) : this._peek.type === 12 ? (this._closeVoidElement(), this._consumeCdata(this._advance())) : this._peek.type === 10 ? (this._closeVoidElement(), this._consumeComment(this._advance())) : this._peek.type === 5 || this._peek.type === 7 || this._peek.type === 6 ? (this._closeVoidElement(), this._consumeText(this._advance())) : this._peek.type === 20 ? this._consumeExpansion(this._advance()) : this._peek.type === 25 ? (this._closeVoidElement(), this._consumeBlockOpen(this._advance())) : this._peek.type === 27 ? (this._closeVoidElement(), this._consumeBlockClose(this._advance())) : this._peek.type === 29 ? (this._closeVoidElement(), this._consumeIncompleteBlock(this._advance())) : this._peek.type === 18 ? this._consumeDocType(this._advance()) : this._advance();
    for (let e of this._containerStack)
      e instanceof Z2 && this.errors.push($.create(e.name, e.sourceSpan, `Unclosed block "${e.name}"`));
  }
  _advance() {
    let e = this._peek;
    return this._index < this.tokens.length - 1 && this._index++, this._peek = this.tokens[this._index], e;
  }
  _advanceIf(e) {
    return this._peek.type === e ? this._advance() : null;
  }
  _consumeCdata(e) {
    let r = this._advance(), n = this._getText(r), s = this._advanceIf(13);
    this._addToParent(new Mt2(n, new f(e.sourceSpan.start, (s || r).sourceSpan.end), [r]));
  }
  _consumeComment(e) {
    let r = this._advanceIf(7), n = this._advanceIf(11), s = r != null ? r.parts[0].trim() : null, i = new f(e.sourceSpan.start, (n || r || e).sourceSpan.end);
    this._addToParent(new Ut2(s, i));
  }
  _consumeDocType(e) {
    let r = this._advanceIf(7), n = this._advanceIf(19), s = r != null ? r.parts[0].trim() : null, i = new f(e.sourceSpan.start, (n || r || e).sourceSpan.end);
    this._addToParent(new Wt2(s, i));
  }
  _consumeExpansion(e) {
    let r = this._advance(), n = this._advance(), s = [];
    for (; this._peek.type === 21; ) {
      let a = this._parseExpansionCase();
      if (!a)
        return;
      s.push(a);
    }
    if (this._peek.type !== 24) {
      this.errors.push($.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
      return;
    }
    let i = new f(e.sourceSpan.start, this._peek.sourceSpan.end, e.sourceSpan.fullStart);
    this._addToParent(new qt2(r.parts[0], n.parts[0], s, i, r.sourceSpan)), this._advance();
  }
  _parseExpansionCase() {
    let e = this._advance();
    if (this._peek.type !== 22)
      return this.errors.push($.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'.")), null;
    let r = this._advance(), n = this._collectExpansionExpTokens(r);
    if (!n)
      return null;
    let s = this._advance();
    n.push({ type: 30, parts: [], sourceSpan: s.sourceSpan });
    let i = new t6(n, this.getTagDefinition, this.canSelfClose, this.allowHtmComponentClosingTags, this.isTagNameCaseSensitive);
    if (i.build(), i.errors.length > 0)
      return this.errors = this.errors.concat(i.errors), null;
    let a = new f(e.sourceSpan.start, s.sourceSpan.end, e.sourceSpan.fullStart), o = new f(r.sourceSpan.start, s.sourceSpan.end, r.sourceSpan.fullStart);
    return new Ht(e.parts[0], i.rootNodes, a, e.sourceSpan, o);
  }
  _collectExpansionExpTokens(e) {
    let r = [], n = [22];
    for (; ; ) {
      if ((this._peek.type === 20 || this._peek.type === 22) && n.push(this._peek.type), this._peek.type === 23)
        if (qs(n, 22)) {
          if (n.pop(), n.length === 0)
            return r;
        } else
          return this.errors.push($.create(null, e.sourceSpan, "Invalid ICU message. Missing '}'.")), null;
      if (this._peek.type === 24)
        if (qs(n, 20))
          n.pop();
        else
          return this.errors.push($.create(null, e.sourceSpan, "Invalid ICU message. Missing '}'.")), null;
      if (this._peek.type === 30)
        return this.errors.push($.create(null, e.sourceSpan, "Invalid ICU message. Missing '}'.")), null;
      r.push(this._advance());
    }
  }
  _getText(e) {
    let r = e.parts[0];
    if (r.length > 0 && r[0] == `
`) {
      let n = this._getClosestParentElement();
      n != null && n.children.length == 0 && this.getTagDefinition(n.name).ignoreFirstLf && (r = r.substring(1));
    }
    return r;
  }
  _consumeText(e) {
    let r = [e], n = e.sourceSpan, s = e.parts[0];
    if (s.length > 0 && s[0] === `
`) {
      let i = this._getContainer();
      i != null && i.children.length === 0 && this.getTagDefinition(i.name).ignoreFirstLf && (s = s.substring(1), r[0] = { type: e.type, sourceSpan: e.sourceSpan, parts: [s] });
    }
    for (; this._peek.type === 8 || this._peek.type === 5 || this._peek.type === 9; )
      e = this._advance(), r.push(e), e.type === 8 ? s += e.parts.join("").replace(/&([^;]+);/g, Hs) : e.type === 9 ? s += e.parts[0] : s += e.parts.join("");
    if (s.length > 0) {
      let i = e.sourceSpan;
      this._addToParent(new Ot2(s, new f(n.start, i.end, n.fullStart, n.details), r));
    }
  }
  _closeVoidElement() {
    let e = this._getContainer();
    e instanceof G3 && this.getTagDefinition(e.name).isVoid && this._containerStack.pop();
  }
  _consumeStartTag(e) {
    let [r, n] = e.parts, s = [];
    for (; this._peek.type === 14; )
      s.push(this._consumeAttr(this._advance()));
    let i = this._getElementFullName(r, n, this._getClosestParentElement()), a = false;
    if (this._peek.type === 2) {
      this._advance(), a = true;
      let C2 = this.getTagDefinition(i);
      this.canSelfClose || C2.canSelfClose || Ue2(i) !== null || C2.isVoid || this.errors.push($.create(i, e.sourceSpan, `Only void, custom and foreign elements can be self closed "${e.parts[1]}"`));
    } else
      this._peek.type === 1 && (this._advance(), a = false);
    let o = this._peek.sourceSpan.fullStart, u = new f(e.sourceSpan.start, o, e.sourceSpan.fullStart), p = new f(e.sourceSpan.start, o, e.sourceSpan.fullStart), l = new f(e.sourceSpan.start.moveBy(1), e.sourceSpan.end), m = new G3(i, s, [], u, p, void 0, l), g = this._getContainer();
    this._pushContainer(m, g instanceof G3 && this.getTagDefinition(g.name).isClosedByChild(m.name)), a ? this._popContainer(i, G3, u) : e.type === 4 && (this._popContainer(i, G3, null), this.errors.push($.create(i, u, `Opening tag "${i}" not terminated.`)));
  }
  _pushContainer(e, r) {
    r && this._containerStack.pop(), this._addToParent(e), this._containerStack.push(e);
  }
  _consumeEndTag(e) {
    let r = this.allowHtmComponentClosingTags && e.parts.length === 0 ? null : this._getElementFullName(e.parts[0], e.parts[1], this._getClosestParentElement());
    if (r && this.getTagDefinition(r).isVoid)
      this.errors.push($.create(r, e.sourceSpan, `Void elements do not have end tags "${e.parts[1]}"`));
    else if (!this._popContainer(r, G3, e.sourceSpan)) {
      let n = `Unexpected closing tag "${r}". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;
      this.errors.push($.create(r, e.sourceSpan, n));
    }
  }
  _popContainer(e, r, n) {
    let s = false;
    for (let i = this._containerStack.length - 1; i >= 0; i--) {
      let a = this._containerStack[i];
      if (Ue2(a.name) ? a.name === e : (e == null || a.name.toLowerCase() === e.toLowerCase()) && a instanceof r)
        return a.endSourceSpan = n, a.sourceSpan.end = n !== null ? n.end : a.sourceSpan.end, this._containerStack.splice(i, this._containerStack.length - i), !s;
      (a instanceof Z2 || a instanceof G3 && !this.getTagDefinition(a.name).closedByParent) && (s = true);
    }
    return false;
  }
  _consumeAttr(e) {
    var _a3, _b;
    let r = We2(e.parts[0], e.parts[1]), n = e.sourceSpan.end, s;
    this._peek.type === 15 && (s = this._advance());
    let i = "", a = [], o, u;
    if (this._peek.type === 16)
      for (o = this._peek.sourceSpan, u = this._peek.sourceSpan.end; this._peek.type === 16 || this._peek.type === 17 || this._peek.type === 9; ) {
        let m = this._advance();
        a.push(m), m.type === 17 ? i += m.parts.join("").replace(/&([^;]+);/g, Hs) : m.type === 9 ? i += m.parts[0] : i += m.parts.join(""), u = n = m.sourceSpan.end;
      }
    this._peek.type === 15 && (u = n = this._advance().sourceSpan.end);
    let l = o && u && new f((_a3 = s == null ? void 0 : s.sourceSpan.start) != null ? _a3 : o.start, u, (_b = s == null ? void 0 : s.sourceSpan.fullStart) != null ? _b : o.fullStart);
    return new Vt2(r, i, new f(e.sourceSpan.start, n, e.sourceSpan.fullStart), e.sourceSpan, l, a.length > 0 ? a : void 0, void 0);
  }
  _consumeBlockOpen(e) {
    let r = [];
    for (; this._peek.type === 28; ) {
      let o = this._advance();
      r.push(new ut2(o.parts[0], o.sourceSpan));
    }
    this._peek.type === 26 && this._advance();
    let n = this._peek.sourceSpan.fullStart, s = new f(e.sourceSpan.start, n, e.sourceSpan.fullStart), i = new f(e.sourceSpan.start, n, e.sourceSpan.fullStart), a = new Z2(e.parts[0], r, [], s, i);
    this._pushContainer(a, false);
  }
  _consumeBlockClose(e) {
    this._popContainer(null, Z2, e.sourceSpan) || this.errors.push($.create(null, e.sourceSpan, 'Unexpected closing block. The block may have been closed earlier. If you meant to write the } character, you should use the "&#125;" HTML entity instead.'));
  }
  _consumeIncompleteBlock(e) {
    let r = [];
    for (; this._peek.type === 28; ) {
      let o = this._advance();
      r.push(new ut2(o.parts[0], o.sourceSpan));
    }
    let n = this._peek.sourceSpan.fullStart, s = new f(e.sourceSpan.start, n, e.sourceSpan.fullStart), i = new f(e.sourceSpan.start, n, e.sourceSpan.fullStart), a = new Z2(e.parts[0], r, [], s, i);
    this._pushContainer(a, false), this._popContainer(null, Z2, null), this.errors.push($.create(e.parts[0], s, `Incomplete block "${e.parts[0]}". If you meant to write the @ character, you should use the "&#64;" HTML entity instead.`));
  }
  _getContainer() {
    return this._containerStack.length > 0 ? this._containerStack[this._containerStack.length - 1] : null;
  }
  _getClosestParentElement() {
    for (let e = this._containerStack.length - 1; e > -1; e--)
      if (this._containerStack[e] instanceof G3)
        return this._containerStack[e];
    return null;
  }
  _addToParent(e) {
    let r = this._getContainer();
    r === null ? this.rootNodes.push(e) : r.children.push(e);
  }
  _getElementFullName(e, r, n) {
    if (e === "" && (e = this.getTagDefinition(r).implicitNamespacePrefix || "", e === "" && n != null)) {
      let s = at2(n.name)[1];
      this.getTagDefinition(s).preventNamespaceInheritance || (e = Ue2(n.name));
    }
    return We2(e, r);
  }
};
function qs(t8, e) {
  return t8.length > 0 && t8[t8.length - 1] === e;
}
function Hs(t8, e) {
  return Ge2[e] !== void 0 ? Ge2[e] || t8 : /^#x[a-f0-9]+$/i.test(e) ? String.fromCodePoint(parseInt(e.slice(2), 16)) : /^#\d+$/.test(e) ? String.fromCodePoint(parseInt(e.slice(1), 10)) : t8;
}
var Xt2 = class extends Qt2 {
  constructor() {
    super(ze2);
  }
  parse(e, r, n, s = false, i) {
    return super.parse(e, r, n, s, i);
  }
};
var qr2 = null;
var mo2 = () => (qr2 || (qr2 = new Xt2()), qr2);
function Hr2(t8, e = {}) {
  let { canSelfClose: r = false, allowHtmComponentClosingTags: n = false, isTagNameCaseSensitive: s = false, getTagContentType: i, tokenizeAngularBlocks: a = false } = e;
  return mo2().parse(t8, "angular-html-parser", { tokenizeExpansionForms: a, interpolationConfig: void 0, canSelfClose: r, allowHtmComponentClosingTags: n, tokenizeBlocks: a }, s, i);
}
function go(t8, e) {
  let r = new SyntaxError(t8 + " (" + e.loc.start.line + ":" + e.loc.start.column + ")");
  return Object.assign(r, e);
}
var Vs = go;
var Co2 = new RegExp("^(?<startDelimiter>-{3}|\\+{3})(?<language>[^\\n]*)\\n(?:|(?<value>.*?)\\n)(?<endDelimiter>\\k<startDelimiter>|\\.{3})[^\\S\\n]*(?:\\n|$)", "s");
function So2(t8) {
  let e = t8.match(Co2);
  if (!e)
    return { content: t8 };
  let { startDelimiter: r, language: n, value: s = "", endDelimiter: i } = e.groups, a = n.trim() || "yaml";
  if (r === "+++" && (a = "toml"), a !== "yaml" && r !== i)
    return { content: t8 };
  let [o] = e;
  return { frontMatter: { type: "front-matter", lang: a, value: s, startDelimiter: r, endDelimiter: i, raw: o.replace(/\n$/, "") }, content: w2(false, o, /[^\n]/g, " ") + t8.slice(o.length) };
}
var Us = So2;
var Jt2 = { attrs: true, children: true, cases: true, expression: true };
var Ws = /* @__PURE__ */ new Set(["parent"]);
var Zt2 = class t7 {
  constructor(e = {}) {
    for (let r of /* @__PURE__ */ new Set([...Ws, ...Object.keys(e)]))
      this.setProperty(r, e[r]);
  }
  setProperty(e, r) {
    if (this[e] !== r) {
      if (e in Jt2 && (r = r.map((n) => this.createChild(n))), !Ws.has(e)) {
        this[e] = r;
        return;
      }
      Object.defineProperty(this, e, { value: r, enumerable: false, configurable: true });
    }
  }
  map(e) {
    let r;
    for (let n in Jt2) {
      let s = this[n];
      if (s) {
        let i = _o2(s, (a) => a.map(e));
        r !== s && (r || (r = new t7({ parent: this.parent })), r.setProperty(n, i));
      }
    }
    if (r)
      for (let n in this)
        n in Jt2 || (r[n] = this[n]);
    return e(r || this);
  }
  walk(e) {
    for (let r in Jt2) {
      let n = this[r];
      if (n)
        for (let s = 0; s < n.length; s++)
          n[s].walk(e);
    }
    e(this);
  }
  createChild(e) {
    let r = e instanceof t7 ? e.clone() : new t7(e);
    return r.setProperty("parent", this), r;
  }
  insertChildBefore(e, r) {
    this.children.splice(this.children.indexOf(e), 0, this.createChild(r));
  }
  removeChild(e) {
    this.children.splice(this.children.indexOf(e), 1);
  }
  replaceChild(e, r) {
    this.children[this.children.indexOf(e)] = this.createChild(r);
  }
  clone() {
    return new t7(this);
  }
  get firstChild() {
    var e;
    return (e = this.children) == null ? void 0 : e[0];
  }
  get lastChild() {
    var e;
    return (e = this.children) == null ? void 0 : e[this.children.length - 1];
  }
  get prev() {
    var e, r;
    return (r = (e = this.parent) == null ? void 0 : e.children) == null ? void 0 : r[this.parent.children.indexOf(this) - 1];
  }
  get next() {
    var e, r;
    return (r = (e = this.parent) == null ? void 0 : e.children) == null ? void 0 : r[this.parent.children.indexOf(this) + 1];
  }
  get rawName() {
    return this.hasExplicitNamespace ? this.fullName : this.name;
  }
  get fullName() {
    return this.namespace ? this.namespace + ":" + this.name : this.name;
  }
  get attrMap() {
    return Object.fromEntries(this.attrs.map((e) => [e.fullName, e.value]));
  }
};
function _o2(t8, e) {
  let r = t8.map(e);
  return r.some((n, s) => n !== t8[s]) ? r : t8;
}
var Eo2 = [{ regex: /^(\[if([^\]]*)]>)(.*?)<!\s*\[endif]$/s, parse: Ao }, { regex: /^\[if([^\]]*)]><!$/, parse: Do2 }, { regex: /^<!\s*\[endif]$/, parse: vo2 }];
function zs(t8, e) {
  if (t8.value)
    for (let { regex: r, parse: n } of Eo2) {
      let s = t8.value.match(r);
      if (s)
        return n(t8, e, s);
    }
  return null;
}
function Ao(t8, e, r) {
  let [, n, s, i] = r, a = 4 + n.length, o = t8.sourceSpan.start.moveBy(a), u = o.moveBy(i.length), [p, l] = (() => {
    try {
      return [true, e(i, o).children];
    } catch (e2) {
      return [false, [{ type: "text", value: i, sourceSpan: new f(o, u) }]];
    }
  })();
  return { type: "ieConditionalComment", complete: p, children: l, condition: w2(false, s.trim(), /\s+/g, " "), sourceSpan: t8.sourceSpan, startSourceSpan: new f(t8.sourceSpan.start, o), endSourceSpan: new f(u, t8.sourceSpan.end) };
}
function Do2(t8, e, r) {
  let [, n] = r;
  return { type: "ieConditionalStartComment", condition: w2(false, n.trim(), /\s+/g, " "), sourceSpan: t8.sourceSpan };
}
function vo2(t8) {
  return { type: "ieConditionalEndComment", sourceSpan: t8.sourceSpan };
}
var er2 = /* @__PURE__ */ new Map([["*", /* @__PURE__ */ new Set(["accesskey", "autocapitalize", "autofocus", "class", "contenteditable", "dir", "draggable", "enterkeyhint", "hidden", "id", "inert", "inputmode", "is", "itemid", "itemprop", "itemref", "itemscope", "itemtype", "lang", "nonce", "popover", "slot", "spellcheck", "style", "tabindex", "title", "translate"])], ["a", /* @__PURE__ */ new Set(["charset", "coords", "download", "href", "hreflang", "name", "ping", "referrerpolicy", "rel", "rev", "shape", "target", "type"])], ["applet", /* @__PURE__ */ new Set(["align", "alt", "archive", "code", "codebase", "height", "hspace", "name", "object", "vspace", "width"])], ["area", /* @__PURE__ */ new Set(["alt", "coords", "download", "href", "hreflang", "nohref", "ping", "referrerpolicy", "rel", "shape", "target", "type"])], ["audio", /* @__PURE__ */ new Set(["autoplay", "controls", "crossorigin", "loop", "muted", "preload", "src"])], ["base", /* @__PURE__ */ new Set(["href", "target"])], ["basefont", /* @__PURE__ */ new Set(["color", "face", "size"])], ["blockquote", /* @__PURE__ */ new Set(["cite"])], ["body", /* @__PURE__ */ new Set(["alink", "background", "bgcolor", "link", "text", "vlink"])], ["br", /* @__PURE__ */ new Set(["clear"])], ["button", /* @__PURE__ */ new Set(["disabled", "form", "formaction", "formenctype", "formmethod", "formnovalidate", "formtarget", "name", "popovertarget", "popovertargetaction", "type", "value"])], ["canvas", /* @__PURE__ */ new Set(["height", "width"])], ["caption", /* @__PURE__ */ new Set(["align"])], ["col", /* @__PURE__ */ new Set(["align", "char", "charoff", "span", "valign", "width"])], ["colgroup", /* @__PURE__ */ new Set(["align", "char", "charoff", "span", "valign", "width"])], ["data", /* @__PURE__ */ new Set(["value"])], ["del", /* @__PURE__ */ new Set(["cite", "datetime"])], ["details", /* @__PURE__ */ new Set(["name", "open"])], ["dialog", /* @__PURE__ */ new Set(["open"])], ["dir", /* @__PURE__ */ new Set(["compact"])], ["div", /* @__PURE__ */ new Set(["align"])], ["dl", /* @__PURE__ */ new Set(["compact"])], ["embed", /* @__PURE__ */ new Set(["height", "src", "type", "width"])], ["fieldset", /* @__PURE__ */ new Set(["disabled", "form", "name"])], ["font", /* @__PURE__ */ new Set(["color", "face", "size"])], ["form", /* @__PURE__ */ new Set(["accept", "accept-charset", "action", "autocomplete", "enctype", "method", "name", "novalidate", "target"])], ["frame", /* @__PURE__ */ new Set(["frameborder", "longdesc", "marginheight", "marginwidth", "name", "noresize", "scrolling", "src"])], ["frameset", /* @__PURE__ */ new Set(["cols", "rows"])], ["h1", /* @__PURE__ */ new Set(["align"])], ["h2", /* @__PURE__ */ new Set(["align"])], ["h3", /* @__PURE__ */ new Set(["align"])], ["h4", /* @__PURE__ */ new Set(["align"])], ["h5", /* @__PURE__ */ new Set(["align"])], ["h6", /* @__PURE__ */ new Set(["align"])], ["head", /* @__PURE__ */ new Set(["profile"])], ["hr", /* @__PURE__ */ new Set(["align", "noshade", "size", "width"])], ["html", /* @__PURE__ */ new Set(["manifest", "version"])], ["iframe", /* @__PURE__ */ new Set(["align", "allow", "allowfullscreen", "allowpaymentrequest", "allowusermedia", "frameborder", "height", "loading", "longdesc", "marginheight", "marginwidth", "name", "referrerpolicy", "sandbox", "scrolling", "src", "srcdoc", "width"])], ["img", /* @__PURE__ */ new Set(["align", "alt", "border", "crossorigin", "decoding", "fetchpriority", "height", "hspace", "ismap", "loading", "longdesc", "name", "referrerpolicy", "sizes", "src", "srcset", "usemap", "vspace", "width"])], ["input", /* @__PURE__ */ new Set(["accept", "align", "alt", "autocomplete", "checked", "dirname", "disabled", "form", "formaction", "formenctype", "formmethod", "formnovalidate", "formtarget", "height", "ismap", "list", "max", "maxlength", "min", "minlength", "multiple", "name", "pattern", "placeholder", "popovertarget", "popovertargetaction", "readonly", "required", "size", "src", "step", "type", "usemap", "value", "width"])], ["ins", /* @__PURE__ */ new Set(["cite", "datetime"])], ["isindex", /* @__PURE__ */ new Set(["prompt"])], ["label", /* @__PURE__ */ new Set(["for", "form"])], ["legend", /* @__PURE__ */ new Set(["align"])], ["li", /* @__PURE__ */ new Set(["type", "value"])], ["link", /* @__PURE__ */ new Set(["as", "blocking", "charset", "color", "crossorigin", "disabled", "fetchpriority", "href", "hreflang", "imagesizes", "imagesrcset", "integrity", "media", "referrerpolicy", "rel", "rev", "sizes", "target", "type"])], ["map", /* @__PURE__ */ new Set(["name"])], ["menu", /* @__PURE__ */ new Set(["compact"])], ["meta", /* @__PURE__ */ new Set(["charset", "content", "http-equiv", "media", "name", "scheme"])], ["meter", /* @__PURE__ */ new Set(["high", "low", "max", "min", "optimum", "value"])], ["object", /* @__PURE__ */ new Set(["align", "archive", "border", "classid", "codebase", "codetype", "data", "declare", "form", "height", "hspace", "name", "standby", "type", "typemustmatch", "usemap", "vspace", "width"])], ["ol", /* @__PURE__ */ new Set(["compact", "reversed", "start", "type"])], ["optgroup", /* @__PURE__ */ new Set(["disabled", "label"])], ["option", /* @__PURE__ */ new Set(["disabled", "label", "selected", "value"])], ["output", /* @__PURE__ */ new Set(["for", "form", "name"])], ["p", /* @__PURE__ */ new Set(["align"])], ["param", /* @__PURE__ */ new Set(["name", "type", "value", "valuetype"])], ["pre", /* @__PURE__ */ new Set(["width"])], ["progress", /* @__PURE__ */ new Set(["max", "value"])], ["q", /* @__PURE__ */ new Set(["cite"])], ["script", /* @__PURE__ */ new Set(["async", "blocking", "charset", "crossorigin", "defer", "fetchpriority", "integrity", "language", "nomodule", "referrerpolicy", "src", "type"])], ["select", /* @__PURE__ */ new Set(["autocomplete", "disabled", "form", "multiple", "name", "required", "size"])], ["slot", /* @__PURE__ */ new Set(["name"])], ["source", /* @__PURE__ */ new Set(["height", "media", "sizes", "src", "srcset", "type", "width"])], ["style", /* @__PURE__ */ new Set(["blocking", "media", "type"])], ["table", /* @__PURE__ */ new Set(["align", "bgcolor", "border", "cellpadding", "cellspacing", "frame", "rules", "summary", "width"])], ["tbody", /* @__PURE__ */ new Set(["align", "char", "charoff", "valign"])], ["td", /* @__PURE__ */ new Set(["abbr", "align", "axis", "bgcolor", "char", "charoff", "colspan", "headers", "height", "nowrap", "rowspan", "scope", "valign", "width"])], ["template", /* @__PURE__ */ new Set(["shadowrootdelegatesfocus", "shadowrootmode"])], ["textarea", /* @__PURE__ */ new Set(["autocomplete", "cols", "dirname", "disabled", "form", "maxlength", "minlength", "name", "placeholder", "readonly", "required", "rows", "wrap"])], ["tfoot", /* @__PURE__ */ new Set(["align", "char", "charoff", "valign"])], ["th", /* @__PURE__ */ new Set(["abbr", "align", "axis", "bgcolor", "char", "charoff", "colspan", "headers", "height", "nowrap", "rowspan", "scope", "valign", "width"])], ["thead", /* @__PURE__ */ new Set(["align", "char", "charoff", "valign"])], ["time", /* @__PURE__ */ new Set(["datetime"])], ["tr", /* @__PURE__ */ new Set(["align", "bgcolor", "char", "charoff", "valign"])], ["track", /* @__PURE__ */ new Set(["default", "kind", "label", "src", "srclang"])], ["ul", /* @__PURE__ */ new Set(["compact", "type"])], ["video", /* @__PURE__ */ new Set(["autoplay", "controls", "crossorigin", "height", "loop", "muted", "playsinline", "poster", "preload", "src", "width"])]]);
var Gs = /* @__PURE__ */ new Set(["a", "abbr", "acronym", "address", "applet", "area", "article", "aside", "audio", "b", "base", "basefont", "bdi", "bdo", "bgsound", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "command", "content", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "embed", "fieldset", "figcaption", "figure", "font", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "image", "img", "input", "ins", "isindex", "kbd", "keygen", "label", "legend", "li", "link", "listing", "main", "map", "mark", "marquee", "math", "menu", "menuitem", "meta", "meter", "multicol", "nav", "nextid", "nobr", "noembed", "noframes", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "plaintext", "pre", "progress", "q", "rb", "rbc", "rp", "rt", "rtc", "ruby", "s", "samp", "script", "search", "section", "select", "shadow", "slot", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "svg", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "tt", "u", "ul", "var", "video", "wbr", "xmp"]);
function yo(t8) {
  if (t8.type === "block") {
    if (t8.name = w2(false, t8.name.toLowerCase(), /\s+/g, " ").trim(), t8.type = "angularControlFlowBlock", !Me2(t8.parameters)) {
      delete t8.parameters;
      return;
    }
    for (let e of t8.parameters)
      e.type = "angularControlFlowBlockParameter";
    t8.parameters = { type: "angularControlFlowBlockParameters", children: t8.parameters, sourceSpan: new f(t8.parameters[0].sourceSpan.start, X2(false, t8.parameters, -1).sourceSpan.end) };
  }
}
function wo2(t8) {
  (t8.type === "plural" || t8.type === "select") && (t8.clause = t8.type, t8.type = "angularIcuExpression"), t8.type === "expansionCase" && (t8.type = "angularIcuCase");
}
function js(t8, e, r) {
  let { name: n, canSelfClose: s = true, normalizeTagName: i = false, normalizeAttributeName: a = false, allowHtmComponentClosingTags: o = false, isTagNameCaseSensitive: u = false, shouldParseAsRawText: p } = e, { rootNodes: l, errors: m } = Hr2(t8, { canSelfClose: s, allowHtmComponentClosingTags: o, isTagNameCaseSensitive: u, getTagContentType: p ? (...c) => p(...c) ? N2.RAW_TEXT : void 0 : void 0, tokenizeAngularBlocks: n === "angular" ? true : void 0 });
  if (n === "vue") {
    if (l.some((b2) => b2.type === "docType" && b2.value === "html" || b2.type === "element" && b2.name.toLowerCase() === "html"))
      return js(t8, Qs, r);
    let d, y2 = () => d != null ? d : d = Hr2(t8, { canSelfClose: s, allowHtmComponentClosingTags: o, isTagNameCaseSensitive: u }), O2 = (b2) => {
      var _a3;
      return (_a3 = y2().rootNodes.find(({ startSourceSpan: V4 }) => V4 && V4.start.offset === b2.startSourceSpan.start.offset)) != null ? _a3 : b2;
    };
    for (let [b2, V4] of l.entries()) {
      let { endSourceSpan: Wr2, startSourceSpan: Xs } = V4;
      if (Wr2 === null)
        m = y2().errors, l[b2] = O2(V4);
      else if (bo2(V4, r)) {
        let zr2 = y2().errors.find((Gr2) => Gr2.span.start.offset > Xs.start.offset && Gr2.span.start.offset < Wr2.end.offset);
        zr2 && Ys(zr2), l[b2] = O2(V4);
      }
    }
  }
  m.length > 0 && Ys(m[0]);
  let g = (c) => {
    let d = c.name.startsWith(":") ? c.name.slice(1).split(":")[0] : null, y2 = c.nameSpan.toString(), O2 = d !== null && y2.startsWith(`${d}:`), b2 = O2 ? y2.slice(d.length + 1) : y2;
    c.name = b2, c.namespace = d, c.hasExplicitNamespace = O2;
  }, C2 = (c) => {
    switch (c.type) {
      case "element":
        g(c);
        for (let d of c.attrs)
          g(d), d.valueSpan ? (d.value = d.valueSpan.toString(), /["']/.test(d.value[0]) && (d.value = d.value.slice(1, -1))) : d.value = null;
        break;
      case "comment":
        c.value = c.sourceSpan.toString().slice(4, -3);
        break;
      case "text":
        c.value = c.sourceSpan.toString();
        break;
    }
  }, _2 = (c, d) => {
    let y2 = c.toLowerCase();
    return d(y2) ? y2 : c;
  }, D = (c) => {
    if (c.type === "element" && (i && (!c.namespace || c.namespace === c.tagDefinition.implicitNamespacePrefix || de2(c)) && (c.name = _2(c.name, (d) => Gs.has(d))), a))
      for (let d of c.attrs)
        d.namespace || (d.name = _2(d.name, (y2) => er2.has(c.name) && (er2.get("*").has(y2) || er2.get(c.name).has(y2))));
  }, I2 = (c) => {
    c.sourceSpan && c.endSourceSpan && (c.sourceSpan = new f(c.sourceSpan.start, c.endSourceSpan.end));
  }, B = (c) => {
    if (c.type === "element") {
      let d = ze2(u ? c.name : c.name.toLowerCase());
      !c.namespace || c.namespace === d.implicitNamespacePrefix || de2(c) ? c.tagDefinition = d : c.tagDefinition = ze2("");
    }
  };
  return zt2(new class extends lt2 {
    visitExpansionCase(c, d) {
      n === "angular" && this.visitChildren(d, (y2) => {
        y2(c.expression);
      });
    }
    visit(c) {
      C2(c), B(c), D(c), I2(c);
    }
  }(), l), l;
}
function bo2(t8, e) {
  var n;
  if (t8.type !== "element" || t8.name !== "template")
    return false;
  let r = (n = t8.attrs.find((s) => s.name === "lang")) == null ? void 0 : n.value;
  return !r || $e2(e, { language: r }) === "html";
}
function Ys(t8) {
  let { msg: e, span: { start: r, end: n } } = t8;
  throw Vs(e, { loc: { start: { line: r.line + 1, column: r.col + 1 }, end: { line: n.line + 1, column: n.col + 1 } }, cause: t8 });
}
function Ks(t8, e, r = {}, n = true) {
  let { frontMatter: s, content: i } = n ? Us(t8) : { frontMatter: null, content: t8 }, a = new we2(t8, r.filepath), o = new ae2(a, 0, 0, 0), u = o.moveBy(t8.length), p = { type: "root", sourceSpan: new f(o, u), children: js(i, e, r) };
  if (s) {
    let g = new ae2(a, 0, 0, 0), C2 = g.moveBy(s.raw.length);
    s.sourceSpan = new f(g, C2), p.children.unshift(s);
  }
  let l = new Zt2(p), m = (g, C2) => {
    let { offset: _2 } = C2, D = w2(false, t8.slice(0, _2), /[^\n\r]/g, " "), B = Ks(D + g, e, r, false);
    B.sourceSpan = new f(C2, X2(false, B.children, -1).sourceSpan.end);
    let c = B.children[0];
    return c.length === _2 ? B.children.shift() : (c.sourceSpan = new f(c.sourceSpan.start.moveBy(_2), c.sourceSpan.end), c.value = c.value.slice(_2)), B;
  };
  return l.walk((g) => {
    if (g.type === "comment") {
      let C2 = zs(g, m);
      C2 && g.parent.replaceChild(g, C2);
    }
    yo(g), wo2(g);
  }), l;
}
function tr2(t8) {
  return { parse: (e, r) => Ks(e, t8, r), hasPragma: rs, astFormat: "html", locStart: se3, locEnd: ie2 };
}
var Qs = { name: "html", normalizeTagName: true, normalizeAttributeName: true, allowHtmComponentClosingTags: true };
var To2 = tr2(Qs);
var xo2 = tr2({ name: "angular" });
var ko2 = tr2({ name: "vue", isTagNameCaseSensitive: true, shouldParseAsRawText(t8, e, r, n) {
  return t8.toLowerCase() !== "html" && !r && (t8 !== "template" || n.some(({ name: s, value: i }) => s === "lang" && i !== "html" && i !== "" && i !== void 0));
} });
var Bo = tr2({ name: "lwc", canSelfClose: false });
var Lo2 = { html: ds };
var xh = Ur2;

// node_modules/prettier/plugins/markdown.mjs
var markdown_exports = {};
__export(markdown_exports, {
  default: () => KE,
  languages: () => _u,
  options: () => Ou2,
  parsers: () => _n3,
  printers: () => Bm
});
var rl = Object.create;
var lt3 = Object.defineProperty;
var tl = Object.getOwnPropertyDescriptor;
var nl = Object.getOwnPropertyNames;
var ul = Object.getPrototypeOf;
var il = Object.prototype.hasOwnProperty;
var C = (e, r) => () => (r || e((r = { exports: {} }).exports, r), r.exports);
var Pn3 = (e, r) => {
  for (var t8 in r)
    lt3(e, t8, { get: r[t8], enumerable: true });
};
var al = (e, r, t8, n) => {
  if (r && typeof r == "object" || typeof r == "function")
    for (let a of nl(r))
      !il.call(e, a) && a !== t8 && lt3(e, a, { get: () => r[a], enumerable: !(n = tl(r, a)) || n.enumerable });
  return e;
};
var Ne3 = (e, r, t8) => (t8 = e != null ? rl(ul(e)) : {}, al(r || !e || !e.__esModule ? lt3(t8, "default", { value: e, enumerable: true }) : t8, e));
var xr3 = C((_m, Ln3) => {
  "use strict";
  Ln3.exports = cl;
  function cl(e) {
    return String(e).replace(/\s+/g, " ");
  }
});
var Lu2 = C((Gg, Pu2) => {
  "use strict";
  Pu2.exports = hf;
  var lr3 = 9, Nr3 = 10, ze3 = 32, ff = 33, Df = 58, Me3 = 91, pf = 92, At3 = 93, fr3 = 94, Rr2 = 96, Ur3 = 4, df = 1024;
  function hf(e) {
    var r = this.Parser, t8 = this.Compiler;
    mf(r) && gf(r, e), Ff(t8) && vf(t8);
  }
  function mf(e) {
    return !!(e && e.prototype && e.prototype.blockTokenizers);
  }
  function Ff(e) {
    return !!(e && e.prototype && e.prototype.visitors);
  }
  function gf(e, r) {
    for (var t8 = r || {}, n = e.prototype, a = n.blockTokenizers, u = n.inlineTokenizers, i = n.blockMethods, o = n.inlineMethods, s = a.definition, l = u.reference, c = [], f2 = -1, D = i.length, h2; ++f2 < D; )
      h2 = i[f2], !(h2 === "newline" || h2 === "indentedCode" || h2 === "paragraph" || h2 === "footnoteDefinition") && c.push([h2]);
    c.push(["footnoteDefinition"]), t8.inlineNotes && (xt3(o, "reference", "inlineNote"), u.inlineNote = m), xt3(i, "definition", "footnoteDefinition"), xt3(o, "reference", "footnoteCall"), a.definition = y2, a.footnoteDefinition = p, u.footnoteCall = d, u.reference = F3, n.interruptFootnoteDefinition = c, F3.locator = l.locator, d.locator = v3, m.locator = B;
    function p(b2, g, A3) {
      for (var x3 = this, E2 = x3.interruptFootnoteDefinition, k3 = x3.offset, w3 = g.length + 1, q4 = 0, T3 = [], R3, O2, _2, S3, P3, ke3, G4, I2, X3, K3, me3, Fe3, z3; q4 < w3 && (S3 = g.charCodeAt(q4), !(S3 !== lr3 && S3 !== ze3)); )
        q4++;
      if (g.charCodeAt(q4++) === Me3 && g.charCodeAt(q4++) === fr3) {
        for (O2 = q4; q4 < w3; ) {
          if (S3 = g.charCodeAt(q4), S3 !== S3 || S3 === Nr3 || S3 === lr3 || S3 === ze3)
            return;
          if (S3 === At3) {
            _2 = q4, q4++;
            break;
          }
          q4++;
        }
        if (!(_2 === void 0 || O2 === _2 || g.charCodeAt(q4++) !== Df)) {
          if (A3)
            return true;
          for (R3 = g.slice(O2, _2), P3 = b2.now(), X3 = 0, K3 = 0, me3 = q4, Fe3 = []; q4 < w3; ) {
            if (S3 = g.charCodeAt(q4), S3 !== S3 || S3 === Nr3)
              z3 = { start: X3, contentStart: me3 || q4, contentEnd: q4, end: q4 }, Fe3.push(z3), S3 === Nr3 && (X3 = q4 + 1, K3 = 0, me3 = void 0, z3.end = X3);
            else if (K3 !== void 0)
              if (S3 === ze3 || S3 === lr3)
                K3 += S3 === ze3 ? 1 : Ur3 - K3 % Ur3, K3 > Ur3 && (K3 = void 0, me3 = q4);
              else {
                if (K3 < Ur3 && z3 && (z3.contentStart === z3.contentEnd || Ef(E2, a, x3, [b2, g.slice(q4, df), true])))
                  break;
                K3 = void 0, me3 = q4;
              }
            q4++;
          }
          for (q4 = -1, w3 = Fe3.length; w3 > 0 && (z3 = Fe3[w3 - 1], z3.contentStart === z3.contentEnd); )
            w3--;
          for (ke3 = b2(g.slice(0, z3.contentEnd)); ++q4 < w3; )
            z3 = Fe3[q4], k3[P3.line + q4] = (k3[P3.line + q4] || 0) + (z3.contentStart - z3.start), T3.push(g.slice(z3.contentStart, z3.end));
          return G4 = x3.enterBlock(), I2 = x3.tokenizeBlock(T3.join(""), P3), G4(), ke3({ type: "footnoteDefinition", identifier: R3.toLowerCase(), label: R3, children: I2 });
        }
      }
    }
    function d(b2, g, A3) {
      var x3 = g.length + 1, E2 = 0, k3, w3, q4, T3;
      if (g.charCodeAt(E2++) === Me3 && g.charCodeAt(E2++) === fr3) {
        for (w3 = E2; E2 < x3; ) {
          if (T3 = g.charCodeAt(E2), T3 !== T3 || T3 === Nr3 || T3 === lr3 || T3 === ze3)
            return;
          if (T3 === At3) {
            q4 = E2, E2++;
            break;
          }
          E2++;
        }
        if (!(q4 === void 0 || w3 === q4))
          return A3 ? true : (k3 = g.slice(w3, q4), b2(g.slice(0, E2))({ type: "footnoteReference", identifier: k3.toLowerCase(), label: k3 }));
      }
    }
    function m(b2, g, A3) {
      var x3 = this, E2 = g.length + 1, k3 = 0, w3 = 0, q4, T3, R3, O2, _2, S3, P3;
      if (g.charCodeAt(k3++) === fr3 && g.charCodeAt(k3++) === Me3) {
        for (R3 = k3; k3 < E2; ) {
          if (T3 = g.charCodeAt(k3), T3 !== T3)
            return;
          if (S3 === void 0)
            if (T3 === pf)
              k3 += 2;
            else if (T3 === Me3)
              w3++, k3++;
            else if (T3 === At3)
              if (w3 === 0) {
                O2 = k3, k3++;
                break;
              } else
                w3--, k3++;
            else if (T3 === Rr2) {
              for (_2 = k3, S3 = 1; g.charCodeAt(_2 + S3) === Rr2; )
                S3++;
              k3 += S3;
            } else
              k3++;
          else if (T3 === Rr2) {
            for (_2 = k3, P3 = 1; g.charCodeAt(_2 + P3) === Rr2; )
              P3++;
            k3 += P3, S3 === P3 && (S3 = void 0), P3 = void 0;
          } else
            k3++;
        }
        if (O2 !== void 0)
          return A3 ? true : (q4 = b2.now(), q4.column += 2, q4.offset += 2, b2(g.slice(0, k3))({ type: "footnote", children: x3.tokenizeInline(g.slice(R3, O2), q4) }));
      }
    }
    function F3(b2, g, A3) {
      var x3 = 0;
      if (g.charCodeAt(x3) === ff && x3++, g.charCodeAt(x3) === Me3 && g.charCodeAt(x3 + 1) !== fr3)
        return l.call(this, b2, g, A3);
    }
    function y2(b2, g, A3) {
      for (var x3 = 0, E2 = g.charCodeAt(x3); E2 === ze3 || E2 === lr3; )
        E2 = g.charCodeAt(++x3);
      if (E2 === Me3 && g.charCodeAt(x3 + 1) !== fr3)
        return s.call(this, b2, g, A3);
    }
    function v3(b2, g) {
      return b2.indexOf("[", g);
    }
    function B(b2, g) {
      return b2.indexOf("^[", g);
    }
  }
  function vf(e) {
    var r = e.prototype.visitors, t8 = "    ";
    r.footnote = n, r.footnoteReference = a, r.footnoteDefinition = u;
    function n(i) {
      return "^[" + this.all(i).join("") + "]";
    }
    function a(i) {
      return "[^" + (i.label || i.identifier) + "]";
    }
    function u(i) {
      for (var o = this.all(i).join(`

`).split(`
`), s = 0, l = o.length, c; ++s < l; )
        c = o[s], c !== "" && (o[s] = t8 + c);
      return "[^" + (i.label || i.identifier) + "]: " + o.join(`
`);
    }
  }
  function xt3(e, r, t8) {
    e.splice(e.indexOf(r), 0, t8);
  }
  function Ef(e, r, t8, n) {
    for (var a = e.length, u = -1; ++u < a; )
      if (r[e[u][0]].apply(t8, n))
        return true;
    return false;
  }
});
var wt3 = C((kt3) => {
  kt3.isRemarkParser = Cf;
  kt3.isRemarkCompiler = bf;
  function Cf(e) {
    return !!(e && e.prototype && e.prototype.blockTokenizers);
  }
  function bf(e) {
    return !!(e && e.prototype && e.prototype.visitors);
  }
});
var Yu2 = C((jg, Mu2) => {
  var Iu2 = wt3();
  Mu2.exports = kf;
  var Nu2 = 9, Ru2 = 32, zr2 = 36, yf = 48, Af = 57, Uu2 = 92, xf = ["math", "math-inline"], zu2 = "math-display";
  function kf(e) {
    let r = this.Parser, t8 = this.Compiler;
    Iu2.isRemarkParser(r) && wf(r, e), Iu2.isRemarkCompiler(t8) && Bf(t8, e);
  }
  function wf(e, r) {
    let t8 = e.prototype, n = t8.inlineMethods;
    u.locator = a, t8.inlineTokenizers.math = u, n.splice(n.indexOf("text"), 0, "math");
    function a(i, o) {
      return i.indexOf("$", o);
    }
    function u(i, o, s) {
      let l = o.length, c = false, f2 = false, D = 0, h2, p, d, m, F3, y2, v3;
      if (o.charCodeAt(D) === Uu2 && (f2 = true, D++), o.charCodeAt(D) === zr2) {
        if (D++, f2)
          return s ? true : i(o.slice(0, D))({ type: "text", value: "$" });
        if (o.charCodeAt(D) === zr2 && (c = true, D++), d = o.charCodeAt(D), !(d === Ru2 || d === Nu2)) {
          for (m = D; D < l; ) {
            if (p = d, d = o.charCodeAt(D + 1), p === zr2) {
              if (h2 = o.charCodeAt(D - 1), h2 !== Ru2 && h2 !== Nu2 && (d !== d || d < yf || d > Af) && (!c || d === zr2)) {
                F3 = D - 1, D++, c && D++, y2 = D;
                break;
              }
            } else
              p === Uu2 && (D++, d = o.charCodeAt(D + 1));
            D++;
          }
          if (y2 !== void 0)
            return s ? true : (v3 = o.slice(m, F3 + 1), i(o.slice(0, y2))({ type: "inlineMath", value: v3, data: { hName: "span", hProperties: { className: xf.concat(c && r.inlineMathDouble ? [zu2] : []) }, hChildren: [{ type: "text", value: v3 }] } }));
        }
      }
    }
  }
  function Bf(e) {
    let r = e.prototype;
    r.visitors.inlineMath = t8;
    function t8(n) {
      let a = "$";
      return (n.data && n.data.hProperties && n.data.hProperties.className || []).includes(zu2) && (a = "$$"), a + n.value + a;
    }
  }
});
var Wu2 = C((Wg, ju2) => {
  var Vu2 = wt3();
  ju2.exports = _f;
  var Gu2 = 10, Dr3 = 32, Bt3 = 36, $u2 = `
`, qf = "$", Tf = 2, Sf = ["math", "math-display"];
  function _f() {
    let e = this.Parser, r = this.Compiler;
    Vu2.isRemarkParser(e) && Of(e), Vu2.isRemarkCompiler(r) && Pf(r);
  }
  function Of(e) {
    let r = e.prototype, t8 = r.blockMethods, n = r.interruptParagraph, a = r.interruptList, u = r.interruptBlockquote;
    r.blockTokenizers.math = i, t8.splice(t8.indexOf("fencedCode") + 1, 0, "math"), n.splice(n.indexOf("fencedCode") + 1, 0, ["math"]), a.splice(a.indexOf("fencedCode") + 1, 0, ["math"]), u.splice(u.indexOf("fencedCode") + 1, 0, ["math"]);
    function i(o, s, l) {
      var c = s.length, f2 = 0;
      let D, h2, p, d, m, F3, y2, v3, B, b2, g;
      for (; f2 < c && s.charCodeAt(f2) === Dr3; )
        f2++;
      for (m = f2; f2 < c && s.charCodeAt(f2) === Bt3; )
        f2++;
      if (F3 = f2 - m, !(F3 < Tf)) {
        for (; f2 < c && s.charCodeAt(f2) === Dr3; )
          f2++;
        for (y2 = f2; f2 < c; ) {
          if (D = s.charCodeAt(f2), D === Bt3)
            return;
          if (D === Gu2)
            break;
          f2++;
        }
        if (s.charCodeAt(f2) === Gu2) {
          if (l)
            return true;
          for (h2 = [], y2 !== f2 && h2.push(s.slice(y2, f2)), f2++, p = s.indexOf($u2, f2 + 1), p = p === -1 ? c : p; f2 < c; ) {
            for (v3 = false, b2 = f2, g = p, d = p, B = 0; d > b2 && s.charCodeAt(d - 1) === Dr3; )
              d--;
            for (; d > b2 && s.charCodeAt(d - 1) === Bt3; )
              B++, d--;
            for (F3 <= B && s.indexOf(qf, b2) === d && (v3 = true, g = d); b2 <= g && b2 - f2 < m && s.charCodeAt(b2) === Dr3; )
              b2++;
            if (v3)
              for (; g > b2 && s.charCodeAt(g - 1) === Dr3; )
                g--;
            if ((!v3 || b2 !== g) && h2.push(s.slice(b2, g)), v3)
              break;
            f2 = p + 1, p = s.indexOf($u2, f2 + 1), p = p === -1 ? c : p;
          }
          return h2 = h2.join(`
`), o(s.slice(0, p))({ type: "math", value: h2, data: { hName: "div", hProperties: { className: Sf.concat() }, hChildren: [{ type: "text", value: h2 }] } });
        }
      }
    }
  }
  function Pf(e) {
    let r = e.prototype;
    r.visitors.math = t8;
    function t8(n) {
      return `$$
` + n.value + `
$$`;
    }
  }
});
var Ku2 = C((Hg, Hu2) => {
  var Lf = Yu2(), If = Wu2();
  Hu2.exports = Nf;
  function Nf(e) {
    var r = e || {};
    If.call(this, r), Lf.call(this, r);
  }
});
var Pe3 = C((Kg, Xu2) => {
  Xu2.exports = Uf;
  var Rf = Object.prototype.hasOwnProperty;
  function Uf() {
    for (var e = {}, r = 0; r < arguments.length; r++) {
      var t8 = arguments[r];
      for (var n in t8)
        Rf.call(t8, n) && (e[n] = t8[n]);
    }
    return e;
  }
});
var Ju2 = C((Xg, qt3) => {
  typeof Object.create == "function" ? qt3.exports = function(r, t8) {
    t8 && (r.super_ = t8, r.prototype = Object.create(t8.prototype, { constructor: { value: r, enumerable: false, writable: true, configurable: true } }));
  } : qt3.exports = function(r, t8) {
    if (t8) {
      r.super_ = t8;
      var n = function() {
      };
      n.prototype = t8.prototype, r.prototype = new n(), r.prototype.constructor = r;
    }
  };
});
var ei3 = C((Jg, Zu2) => {
  "use strict";
  var zf = Pe3(), Qu2 = Ju2();
  Zu2.exports = Mf;
  function Mf(e) {
    var r, t8, n;
    Qu2(u, e), Qu2(a, u), r = u.prototype;
    for (t8 in r)
      n = r[t8], n && typeof n == "object" && (r[t8] = "concat" in n ? n.concat() : zf(n));
    return u;
    function a(i) {
      return e.apply(this, i);
    }
    function u() {
      return this instanceof u ? e.apply(this, arguments) : new a(arguments);
    }
  }
});
var ti3 = C((Qg, ri3) => {
  "use strict";
  ri3.exports = Yf;
  function Yf(e, r, t8) {
    return n;
    function n() {
      var a = t8 || this, u = a[e];
      return a[e] = !r, i;
      function i() {
        a[e] = u;
      }
    }
  }
});
var ui3 = C((Zg, ni3) => {
  "use strict";
  ni3.exports = Vf;
  function Vf(e) {
    for (var r = String(e), t8 = [], n = /\r?\n|\r/g; n.exec(r); )
      t8.push(n.lastIndex);
    return t8.push(r.length + 1), { toPoint: a, toPosition: a, toOffset: u };
    function a(i) {
      var o = -1;
      if (i > -1 && i < t8[t8.length - 1]) {
        for (; ++o < t8.length; )
          if (t8[o] > i)
            return { line: o + 1, column: i - (t8[o - 1] || 0) + 1, offset: i };
      }
      return {};
    }
    function u(i) {
      var o = i && i.line, s = i && i.column, l;
      return !isNaN(o) && !isNaN(s) && o - 1 in t8 && (l = (t8[o - 2] || 0) + s - 1 || 0), l > -1 && l < t8[t8.length - 1] ? l : -1;
    }
  }
});
var ai2 = C((ev, ii2) => {
  "use strict";
  ii2.exports = Gf;
  var Tt3 = "\\";
  function Gf(e, r) {
    return t8;
    function t8(n) {
      for (var a = 0, u = n.indexOf(Tt3), i = e[r], o = [], s; u !== -1; )
        o.push(n.slice(a, u)), a = u + 1, s = n.charAt(a), (!s || i.indexOf(s) === -1) && o.push(Tt3), u = n.indexOf(Tt3, a + 1);
      return o.push(n.slice(a)), o.join("");
    }
  }
});
var oi2 = C((rv, $f) => {
  $f.exports = { AElig: "\xC6", AMP: "&", Aacute: "\xC1", Acirc: "\xC2", Agrave: "\xC0", Aring: "\xC5", Atilde: "\xC3", Auml: "\xC4", COPY: "\xA9", Ccedil: "\xC7", ETH: "\xD0", Eacute: "\xC9", Ecirc: "\xCA", Egrave: "\xC8", Euml: "\xCB", GT: ">", Iacute: "\xCD", Icirc: "\xCE", Igrave: "\xCC", Iuml: "\xCF", LT: "<", Ntilde: "\xD1", Oacute: "\xD3", Ocirc: "\xD4", Ograve: "\xD2", Oslash: "\xD8", Otilde: "\xD5", Ouml: "\xD6", QUOT: '"', REG: "\xAE", THORN: "\xDE", Uacute: "\xDA", Ucirc: "\xDB", Ugrave: "\xD9", Uuml: "\xDC", Yacute: "\xDD", aacute: "\xE1", acirc: "\xE2", acute: "\xB4", aelig: "\xE6", agrave: "\xE0", amp: "&", aring: "\xE5", atilde: "\xE3", auml: "\xE4", brvbar: "\xA6", ccedil: "\xE7", cedil: "\xB8", cent: "\xA2", copy: "\xA9", curren: "\xA4", deg: "\xB0", divide: "\xF7", eacute: "\xE9", ecirc: "\xEA", egrave: "\xE8", eth: "\xF0", euml: "\xEB", frac12: "\xBD", frac14: "\xBC", frac34: "\xBE", gt: ">", iacute: "\xED", icirc: "\xEE", iexcl: "\xA1", igrave: "\xEC", iquest: "\xBF", iuml: "\xEF", laquo: "\xAB", lt: "<", macr: "\xAF", micro: "\xB5", middot: "\xB7", nbsp: "\xA0", not: "\xAC", ntilde: "\xF1", oacute: "\xF3", ocirc: "\xF4", ograve: "\xF2", ordf: "\xAA", ordm: "\xBA", oslash: "\xF8", otilde: "\xF5", ouml: "\xF6", para: "\xB6", plusmn: "\xB1", pound: "\xA3", quot: '"', raquo: "\xBB", reg: "\xAE", sect: "\xA7", shy: "\xAD", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", szlig: "\xDF", thorn: "\xFE", times: "\xD7", uacute: "\xFA", ucirc: "\xFB", ugrave: "\xF9", uml: "\xA8", uuml: "\xFC", yacute: "\xFD", yen: "\xA5", yuml: "\xFF" };
});
var si2 = C((tv, jf) => {
  jf.exports = { "0": "\uFFFD", "128": "\u20AC", "130": "\u201A", "131": "\u0192", "132": "\u201E", "133": "\u2026", "134": "\u2020", "135": "\u2021", "136": "\u02C6", "137": "\u2030", "138": "\u0160", "139": "\u2039", "140": "\u0152", "142": "\u017D", "145": "\u2018", "146": "\u2019", "147": "\u201C", "148": "\u201D", "149": "\u2022", "150": "\u2013", "151": "\u2014", "152": "\u02DC", "153": "\u2122", "154": "\u0161", "155": "\u203A", "156": "\u0153", "158": "\u017E", "159": "\u0178" };
});
var Le3 = C((nv, ci2) => {
  "use strict";
  ci2.exports = Wf;
  function Wf(e) {
    var r = typeof e == "string" ? e.charCodeAt(0) : e;
    return r >= 48 && r <= 57;
  }
});
var fi2 = C((uv, li2) => {
  "use strict";
  li2.exports = Hf;
  function Hf(e) {
    var r = typeof e == "string" ? e.charCodeAt(0) : e;
    return r >= 97 && r <= 102 || r >= 65 && r <= 70 || r >= 48 && r <= 57;
  }
});
var Ye3 = C((iv, Di2) => {
  "use strict";
  Di2.exports = Kf;
  function Kf(e) {
    var r = typeof e == "string" ? e.charCodeAt(0) : e;
    return r >= 97 && r <= 122 || r >= 65 && r <= 90;
  }
});
var di2 = C((av, pi2) => {
  "use strict";
  var Xf = Ye3(), Jf = Le3();
  pi2.exports = Qf;
  function Qf(e) {
    return Xf(e) || Jf(e);
  }
});
var hi2 = C((ov, Zf) => {
  Zf.exports = { AEli: "\xC6", AElig: "\xC6", AM: "&", AMP: "&", Aacut: "\xC1", Aacute: "\xC1", Abreve: "\u0102", Acir: "\xC2", Acirc: "\xC2", Acy: "\u0410", Afr: "\u{1D504}", Agrav: "\xC0", Agrave: "\xC0", Alpha: "\u0391", Amacr: "\u0100", And: "\u2A53", Aogon: "\u0104", Aopf: "\u{1D538}", ApplyFunction: "\u2061", Arin: "\xC5", Aring: "\xC5", Ascr: "\u{1D49C}", Assign: "\u2254", Atild: "\xC3", Atilde: "\xC3", Aum: "\xC4", Auml: "\xC4", Backslash: "\u2216", Barv: "\u2AE7", Barwed: "\u2306", Bcy: "\u0411", Because: "\u2235", Bernoullis: "\u212C", Beta: "\u0392", Bfr: "\u{1D505}", Bopf: "\u{1D539}", Breve: "\u02D8", Bscr: "\u212C", Bumpeq: "\u224E", CHcy: "\u0427", COP: "\xA9", COPY: "\xA9", Cacute: "\u0106", Cap: "\u22D2", CapitalDifferentialD: "\u2145", Cayleys: "\u212D", Ccaron: "\u010C", Ccedi: "\xC7", Ccedil: "\xC7", Ccirc: "\u0108", Cconint: "\u2230", Cdot: "\u010A", Cedilla: "\xB8", CenterDot: "\xB7", Cfr: "\u212D", Chi: "\u03A7", CircleDot: "\u2299", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", Colon: "\u2237", Colone: "\u2A74", Congruent: "\u2261", Conint: "\u222F", ContourIntegral: "\u222E", Copf: "\u2102", Coproduct: "\u2210", CounterClockwiseContourIntegral: "\u2233", Cross: "\u2A2F", Cscr: "\u{1D49E}", Cup: "\u22D3", CupCap: "\u224D", DD: "\u2145", DDotrahd: "\u2911", DJcy: "\u0402", DScy: "\u0405", DZcy: "\u040F", Dagger: "\u2021", Darr: "\u21A1", Dashv: "\u2AE4", Dcaron: "\u010E", Dcy: "\u0414", Del: "\u2207", Delta: "\u0394", Dfr: "\u{1D507}", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", Diamond: "\u22C4", DifferentialD: "\u2146", Dopf: "\u{1D53B}", Dot: "\xA8", DotDot: "\u20DC", DotEqual: "\u2250", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrow: "\u2193", DownArrowBar: "\u2913", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVector: "\u21BD", DownLeftVectorBar: "\u2956", DownRightTeeVector: "\u295F", DownRightVector: "\u21C1", DownRightVectorBar: "\u2957", DownTee: "\u22A4", DownTeeArrow: "\u21A7", Downarrow: "\u21D3", Dscr: "\u{1D49F}", Dstrok: "\u0110", ENG: "\u014A", ET: "\xD0", ETH: "\xD0", Eacut: "\xC9", Eacute: "\xC9", Ecaron: "\u011A", Ecir: "\xCA", Ecirc: "\xCA", Ecy: "\u042D", Edot: "\u0116", Efr: "\u{1D508}", Egrav: "\xC8", Egrave: "\xC8", Element: "\u2208", Emacr: "\u0112", EmptySmallSquare: "\u25FB", EmptyVerySmallSquare: "\u25AB", Eogon: "\u0118", Eopf: "\u{1D53C}", Epsilon: "\u0395", Equal: "\u2A75", EqualTilde: "\u2242", Equilibrium: "\u21CC", Escr: "\u2130", Esim: "\u2A73", Eta: "\u0397", Eum: "\xCB", Euml: "\xCB", Exists: "\u2203", ExponentialE: "\u2147", Fcy: "\u0424", Ffr: "\u{1D509}", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", Fopf: "\u{1D53D}", ForAll: "\u2200", Fouriertrf: "\u2131", Fscr: "\u2131", GJcy: "\u0403", G: ">", GT: ">", Gamma: "\u0393", Gammad: "\u03DC", Gbreve: "\u011E", Gcedil: "\u0122", Gcirc: "\u011C", Gcy: "\u0413", Gdot: "\u0120", Gfr: "\u{1D50A}", Gg: "\u22D9", Gopf: "\u{1D53E}", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", Gt: "\u226B", HARDcy: "\u042A", Hacek: "\u02C7", Hat: "^", Hcirc: "\u0124", Hfr: "\u210C", HilbertSpace: "\u210B", Hopf: "\u210D", HorizontalLine: "\u2500", Hscr: "\u210B", Hstrok: "\u0126", HumpDownHump: "\u224E", HumpEqual: "\u224F", IEcy: "\u0415", IJlig: "\u0132", IOcy: "\u0401", Iacut: "\xCD", Iacute: "\xCD", Icir: "\xCE", Icirc: "\xCE", Icy: "\u0418", Idot: "\u0130", Ifr: "\u2111", Igrav: "\xCC", Igrave: "\xCC", Im: "\u2111", Imacr: "\u012A", ImaginaryI: "\u2148", Implies: "\u21D2", Int: "\u222C", Integral: "\u222B", Intersection: "\u22C2", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", Iogon: "\u012E", Iopf: "\u{1D540}", Iota: "\u0399", Iscr: "\u2110", Itilde: "\u0128", Iukcy: "\u0406", Ium: "\xCF", Iuml: "\xCF", Jcirc: "\u0134", Jcy: "\u0419", Jfr: "\u{1D50D}", Jopf: "\u{1D541}", Jscr: "\u{1D4A5}", Jsercy: "\u0408", Jukcy: "\u0404", KHcy: "\u0425", KJcy: "\u040C", Kappa: "\u039A", Kcedil: "\u0136", Kcy: "\u041A", Kfr: "\u{1D50E}", Kopf: "\u{1D542}", Kscr: "\u{1D4A6}", LJcy: "\u0409", L: "<", LT: "<", Lacute: "\u0139", Lambda: "\u039B", Lang: "\u27EA", Laplacetrf: "\u2112", Larr: "\u219E", Lcaron: "\u013D", Lcedil: "\u013B", Lcy: "\u041B", LeftAngleBracket: "\u27E8", LeftArrow: "\u2190", LeftArrowBar: "\u21E4", LeftArrowRightArrow: "\u21C6", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVector: "\u21C3", LeftDownVectorBar: "\u2959", LeftFloor: "\u230A", LeftRightArrow: "\u2194", LeftRightVector: "\u294E", LeftTee: "\u22A3", LeftTeeArrow: "\u21A4", LeftTeeVector: "\u295A", LeftTriangle: "\u22B2", LeftTriangleBar: "\u29CF", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVector: "\u21BF", LeftUpVectorBar: "\u2958", LeftVector: "\u21BC", LeftVectorBar: "\u2952", Leftarrow: "\u21D0", Leftrightarrow: "\u21D4", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", LessLess: "\u2AA1", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", Lfr: "\u{1D50F}", Ll: "\u22D8", Lleftarrow: "\u21DA", Lmidot: "\u013F", LongLeftArrow: "\u27F5", LongLeftRightArrow: "\u27F7", LongRightArrow: "\u27F6", Longleftarrow: "\u27F8", Longleftrightarrow: "\u27FA", Longrightarrow: "\u27F9", Lopf: "\u{1D543}", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", Lscr: "\u2112", Lsh: "\u21B0", Lstrok: "\u0141", Lt: "\u226A", Map: "\u2905", Mcy: "\u041C", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", MinusPlus: "\u2213", Mopf: "\u{1D544}", Mscr: "\u2133", Mu: "\u039C", NJcy: "\u040A", Nacute: "\u0143", Ncaron: "\u0147", Ncedil: "\u0145", Ncy: "\u041D", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: `
`, Nfr: "\u{1D511}", NoBreak: "\u2060", NonBreakingSpace: "\xA0", Nopf: "\u2115", Not: "\u2AEC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangle: "\u22EB", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", Nscr: "\u{1D4A9}", Ntild: "\xD1", Ntilde: "\xD1", Nu: "\u039D", OElig: "\u0152", Oacut: "\xD3", Oacute: "\xD3", Ocir: "\xD4", Ocirc: "\xD4", Ocy: "\u041E", Odblac: "\u0150", Ofr: "\u{1D512}", Ograv: "\xD2", Ograve: "\xD2", Omacr: "\u014C", Omega: "\u03A9", Omicron: "\u039F", Oopf: "\u{1D546}", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", Or: "\u2A54", Oscr: "\u{1D4AA}", Oslas: "\xD8", Oslash: "\xD8", Otild: "\xD5", Otilde: "\xD5", Otimes: "\u2A37", Oum: "\xD6", Ouml: "\xD6", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", PartialD: "\u2202", Pcy: "\u041F", Pfr: "\u{1D513}", Phi: "\u03A6", Pi: "\u03A0", PlusMinus: "\xB1", Poincareplane: "\u210C", Popf: "\u2119", Pr: "\u2ABB", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", Prime: "\u2033", Product: "\u220F", Proportion: "\u2237", Proportional: "\u221D", Pscr: "\u{1D4AB}", Psi: "\u03A8", QUO: '"', QUOT: '"', Qfr: "\u{1D514}", Qopf: "\u211A", Qscr: "\u{1D4AC}", RBarr: "\u2910", RE: "\xAE", REG: "\xAE", Racute: "\u0154", Rang: "\u27EB", Rarr: "\u21A0", Rarrtl: "\u2916", Rcaron: "\u0158", Rcedil: "\u0156", Rcy: "\u0420", Re: "\u211C", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", Rfr: "\u211C", Rho: "\u03A1", RightAngleBracket: "\u27E9", RightArrow: "\u2192", RightArrowBar: "\u21E5", RightArrowLeftArrow: "\u21C4", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVector: "\u21C2", RightDownVectorBar: "\u2955", RightFloor: "\u230B", RightTee: "\u22A2", RightTeeArrow: "\u21A6", RightTeeVector: "\u295B", RightTriangle: "\u22B3", RightTriangleBar: "\u29D0", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVector: "\u21BE", RightUpVectorBar: "\u2954", RightVector: "\u21C0", RightVectorBar: "\u2953", Rightarrow: "\u21D2", Ropf: "\u211D", RoundImplies: "\u2970", Rrightarrow: "\u21DB", Rscr: "\u211B", Rsh: "\u21B1", RuleDelayed: "\u29F4", SHCHcy: "\u0429", SHcy: "\u0428", SOFTcy: "\u042C", Sacute: "\u015A", Sc: "\u2ABC", Scaron: "\u0160", Scedil: "\u015E", Scirc: "\u015C", Scy: "\u0421", Sfr: "\u{1D516}", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", Sigma: "\u03A3", SmallCircle: "\u2218", Sopf: "\u{1D54A}", Sqrt: "\u221A", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", Sscr: "\u{1D4AE}", Star: "\u22C6", Sub: "\u22D0", Subset: "\u22D0", SubsetEqual: "\u2286", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", SuchThat: "\u220B", Sum: "\u2211", Sup: "\u22D1", Superset: "\u2283", SupersetEqual: "\u2287", Supset: "\u22D1", THOR: "\xDE", THORN: "\xDE", TRADE: "\u2122", TSHcy: "\u040B", TScy: "\u0426", Tab: "	", Tau: "\u03A4", Tcaron: "\u0164", Tcedil: "\u0162", Tcy: "\u0422", Tfr: "\u{1D517}", Therefore: "\u2234", Theta: "\u0398", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", Topf: "\u{1D54B}", TripleDot: "\u20DB", Tscr: "\u{1D4AF}", Tstrok: "\u0166", Uacut: "\xDA", Uacute: "\xDA", Uarr: "\u219F", Uarrocir: "\u2949", Ubrcy: "\u040E", Ubreve: "\u016C", Ucir: "\xDB", Ucirc: "\xDB", Ucy: "\u0423", Udblac: "\u0170", Ufr: "\u{1D518}", Ugrav: "\xD9", Ugrave: "\xD9", Umacr: "\u016A", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", Uopf: "\u{1D54C}", UpArrow: "\u2191", UpArrowBar: "\u2912", UpArrowDownArrow: "\u21C5", UpDownArrow: "\u2195", UpEquilibrium: "\u296E", UpTee: "\u22A5", UpTeeArrow: "\u21A5", Uparrow: "\u21D1", Updownarrow: "\u21D5", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", Upsi: "\u03D2", Upsilon: "\u03A5", Uring: "\u016E", Uscr: "\u{1D4B0}", Utilde: "\u0168", Uum: "\xDC", Uuml: "\xDC", VDash: "\u22AB", Vbar: "\u2AEB", Vcy: "\u0412", Vdash: "\u22A9", Vdashl: "\u2AE6", Vee: "\u22C1", Verbar: "\u2016", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", Vopf: "\u{1D54D}", Vscr: "\u{1D4B1}", Vvdash: "\u22AA", Wcirc: "\u0174", Wedge: "\u22C0", Wfr: "\u{1D51A}", Wopf: "\u{1D54E}", Wscr: "\u{1D4B2}", Xfr: "\u{1D51B}", Xi: "\u039E", Xopf: "\u{1D54F}", Xscr: "\u{1D4B3}", YAcy: "\u042F", YIcy: "\u0407", YUcy: "\u042E", Yacut: "\xDD", Yacute: "\xDD", Ycirc: "\u0176", Ycy: "\u042B", Yfr: "\u{1D51C}", Yopf: "\u{1D550}", Yscr: "\u{1D4B4}", Yuml: "\u0178", ZHcy: "\u0416", Zacute: "\u0179", Zcaron: "\u017D", Zcy: "\u0417", Zdot: "\u017B", ZeroWidthSpace: "\u200B", Zeta: "\u0396", Zfr: "\u2128", Zopf: "\u2124", Zscr: "\u{1D4B5}", aacut: "\xE1", aacute: "\xE1", abreve: "\u0103", ac: "\u223E", acE: "\u223E\u0333", acd: "\u223F", acir: "\xE2", acirc: "\xE2", acut: "\xB4", acute: "\xB4", acy: "\u0430", aeli: "\xE6", aelig: "\xE6", af: "\u2061", afr: "\u{1D51E}", agrav: "\xE0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", alpha: "\u03B1", amacr: "\u0101", amalg: "\u2A3F", am: "&", amp: "&", and: "\u2227", andand: "\u2A55", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsd: "\u2221", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", aogon: "\u0105", aopf: "\u{1D552}", ap: "\u2248", apE: "\u2A70", apacir: "\u2A6F", ape: "\u224A", apid: "\u224B", apos: "'", approx: "\u2248", approxeq: "\u224A", arin: "\xE5", aring: "\xE5", ascr: "\u{1D4B6}", ast: "*", asymp: "\u2248", asympeq: "\u224D", atild: "\xE3", atilde: "\xE3", aum: "\xE4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", bNot: "\u2AED", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", barvee: "\u22BD", barwed: "\u2305", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", beta: "\u03B2", beth: "\u2136", between: "\u226C", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bnot: "\u2310", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxDL: "\u2557", boxDR: "\u2554", boxDl: "\u2556", boxDr: "\u2553", boxH: "\u2550", boxHD: "\u2566", boxHU: "\u2569", boxHd: "\u2564", boxHu: "\u2567", boxUL: "\u255D", boxUR: "\u255A", boxUl: "\u255C", boxUr: "\u2559", boxV: "\u2551", boxVH: "\u256C", boxVL: "\u2563", boxVR: "\u2560", boxVh: "\u256B", boxVl: "\u2562", boxVr: "\u255F", boxbox: "\u29C9", boxdL: "\u2555", boxdR: "\u2552", boxdl: "\u2510", boxdr: "\u250C", boxh: "\u2500", boxhD: "\u2565", boxhU: "\u2568", boxhd: "\u252C", boxhu: "\u2534", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxuL: "\u255B", boxuR: "\u2558", boxul: "\u2518", boxur: "\u2514", boxv: "\u2502", boxvH: "\u256A", boxvL: "\u2561", boxvR: "\u255E", boxvh: "\u253C", boxvl: "\u2524", boxvr: "\u251C", bprime: "\u2035", breve: "\u02D8", brvba: "\xA6", brvbar: "\xA6", bscr: "\u{1D4B7}", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsol: "\\", bsolb: "\u29C5", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", bumpeq: "\u224F", cacute: "\u0107", cap: "\u2229", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", capcup: "\u2A47", capdot: "\u2A40", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", ccaps: "\u2A4D", ccaron: "\u010D", ccedi: "\xE7", ccedil: "\xE7", ccirc: "\u0109", ccups: "\u2A4C", ccupssm: "\u2A50", cdot: "\u010B", cedi: "\xB8", cedil: "\xB8", cemptyv: "\u29B2", cen: "\xA2", cent: "\xA2", centerdot: "\xB7", cfr: "\u{1D520}", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", chi: "\u03C7", cir: "\u25CB", cirE: "\u29C3", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledR: "\xAE", circledS: "\u24C8", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", clubs: "\u2663", clubsuit: "\u2663", colon: ":", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", conint: "\u222E", copf: "\u{1D554}", coprod: "\u2210", cop: "\xA9", copy: "\xA9", copysr: "\u2117", crarr: "\u21B5", cross: "\u2717", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cup: "\u222A", cupbrcap: "\u2A48", cupcap: "\u2A46", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curre: "\xA4", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dArr: "\u21D3", dHar: "\u2965", dagger: "\u2020", daleth: "\u2138", darr: "\u2193", dash: "\u2010", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", dcaron: "\u010F", dcy: "\u0434", dd: "\u2146", ddagger: "\u2021", ddarr: "\u21CA", ddotseq: "\u2A77", de: "\xB0", deg: "\xB0", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", dfr: "\u{1D521}", dharl: "\u21C3", dharr: "\u21C2", diam: "\u22C4", diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divid: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", dopf: "\u{1D555}", dot: "\u02D9", doteq: "\u2250", doteqdot: "\u2251", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", downarrow: "\u2193", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", dscr: "\u{1D4B9}", dscy: "\u0455", dsol: "\u29F6", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", dzcy: "\u045F", dzigrarr: "\u27FF", eDDot: "\u2A77", eDot: "\u2251", eacut: "\xE9", eacute: "\xE9", easter: "\u2A6E", ecaron: "\u011B", ecir: "\xEA", ecirc: "\xEA", ecolon: "\u2255", ecy: "\u044D", edot: "\u0117", ee: "\u2147", efDot: "\u2252", efr: "\u{1D522}", eg: "\u2A9A", egrav: "\xE8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", emptyv: "\u2205", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", eng: "\u014B", ensp: "\u2002", eogon: "\u0119", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", equals: "=", equest: "\u225F", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erDot: "\u2253", erarr: "\u2971", escr: "\u212F", esdot: "\u2250", esim: "\u2242", eta: "\u03B7", et: "\xF0", eth: "\xF0", eum: "\xEB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", expectation: "\u2130", exponentiale: "\u2147", fallingdotseq: "\u2252", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", ffr: "\u{1D523}", filig: "\uFB01", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", fopf: "\u{1D557}", forall: "\u2200", fork: "\u22D4", forkv: "\u2AD9", fpartint: "\u2A0D", frac1: "\xBC", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac3: "\xBE", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", gE: "\u2267", gEl: "\u2A8C", gacute: "\u01F5", gamma: "\u03B3", gammad: "\u03DD", gap: "\u2A86", gbreve: "\u011F", gcirc: "\u011D", gcy: "\u0433", gdot: "\u0121", ge: "\u2265", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", ges: "\u2A7E", gescc: "\u2AA9", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", gfr: "\u{1D524}", gg: "\u226B", ggg: "\u22D9", gimel: "\u2137", gjcy: "\u0453", gl: "\u2277", glE: "\u2A92", gla: "\u2AA5", glj: "\u2AA4", gnE: "\u2269", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", gopf: "\u{1D558}", grave: "`", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", g: ">", gt: ">", gtcc: "\u2AA7", gtcir: "\u2A7A", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", hArr: "\u21D4", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", hardcy: "\u044A", harr: "\u2194", harrcir: "\u2948", harrw: "\u21AD", hbar: "\u210F", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", horbar: "\u2015", hscr: "\u{1D4BD}", hslash: "\u210F", hstrok: "\u0127", hybull: "\u2043", hyphen: "\u2010", iacut: "\xED", iacute: "\xED", ic: "\u2063", icir: "\xEE", icirc: "\xEE", icy: "\u0438", iecy: "\u0435", iexc: "\xA1", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", igrav: "\xEC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", ijlig: "\u0133", imacr: "\u012B", image: "\u2111", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", imof: "\u22B7", imped: "\u01B5", in: "\u2208", incare: "\u2105", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", int: "\u222B", intcal: "\u22BA", integers: "\u2124", intercal: "\u22BA", intlarhk: "\u2A17", intprod: "\u2A3C", iocy: "\u0451", iogon: "\u012F", iopf: "\u{1D55A}", iota: "\u03B9", iprod: "\u2A3C", iques: "\xBF", iquest: "\xBF", iscr: "\u{1D4BE}", isin: "\u2208", isinE: "\u22F9", isindot: "\u22F5", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", itilde: "\u0129", iukcy: "\u0456", ium: "\xEF", iuml: "\xEF", jcirc: "\u0135", jcy: "\u0439", jfr: "\u{1D527}", jmath: "\u0237", jopf: "\u{1D55B}", jscr: "\u{1D4BF}", jsercy: "\u0458", jukcy: "\u0454", kappa: "\u03BA", kappav: "\u03F0", kcedil: "\u0137", kcy: "\u043A", kfr: "\u{1D528}", kgreen: "\u0138", khcy: "\u0445", kjcy: "\u045C", kopf: "\u{1D55C}", kscr: "\u{1D4C0}", lAarr: "\u21DA", lArr: "\u21D0", lAtail: "\u291B", lBarr: "\u290E", lE: "\u2266", lEg: "\u2A8B", lHar: "\u2962", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", lambda: "\u03BB", lang: "\u27E8", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", laqu: "\xAB", laquo: "\xAB", larr: "\u2190", larrb: "\u21E4", larrbfs: "\u291F", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", lat: "\u2AAB", latail: "\u2919", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", lcaron: "\u013E", lcedil: "\u013C", lceil: "\u2308", lcub: "{", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", leftarrow: "\u2190", leftarrowtail: "\u21A2", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", leftthreetimes: "\u22CB", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", les: "\u2A7D", lescc: "\u2AA8", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", lessgtr: "\u2276", lesssim: "\u2272", lfisht: "\u297C", lfloor: "\u230A", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", ljcy: "\u0459", ll: "\u226A", llarr: "\u21C7", llcorner: "\u231E", llhard: "\u296B", lltri: "\u25FA", lmidot: "\u0140", lmoust: "\u23B0", lmoustache: "\u23B0", lnE: "\u2268", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", longleftrightarrow: "\u27F7", longmapsto: "\u27FC", longrightarrow: "\u27F6", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", lstrok: "\u0142", l: "<", lt: "<", ltcc: "\u2AA6", ltcir: "\u2A79", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltrPar: "\u2996", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", mDDot: "\u223A", mac: "\xAF", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", mcy: "\u043C", mdash: "\u2014", measuredangle: "\u2221", mfr: "\u{1D52A}", mho: "\u2127", micr: "\xB5", micro: "\xB5", mid: "\u2223", midast: "*", midcir: "\u2AF0", middo: "\xB7", middot: "\xB7", minus: "\u2212", minusb: "\u229F", minusd: "\u2238", minusdu: "\u2A2A", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", mstpos: "\u223E", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nGg: "\u22D9\u0338", nGt: "\u226B\u20D2", nGtv: "\u226B\u0338", nLeftarrow: "\u21CD", nLeftrightarrow: "\u21CE", nLl: "\u22D8\u0338", nLt: "\u226A\u20D2", nLtv: "\u226A\u0338", nRightarrow: "\u21CF", nVDash: "\u22AF", nVdash: "\u22AE", nabla: "\u2207", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natur: "\u266E", natural: "\u266E", naturals: "\u2115", nbs: "\xA0", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", ncaron: "\u0148", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", ncy: "\u043D", ndash: "\u2013", ne: "\u2260", neArr: "\u21D7", nearhk: "\u2924", nearr: "\u2197", nearrow: "\u2197", nedot: "\u2250\u0338", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", nexist: "\u2204", nexists: "\u2204", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", ngsim: "\u2275", ngt: "\u226F", ngtr: "\u226F", nhArr: "\u21CE", nharr: "\u21AE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", njcy: "\u045A", nlArr: "\u21CD", nlE: "\u2266\u0338", nlarr: "\u219A", nldr: "\u2025", nle: "\u2270", nleftarrow: "\u219A", nleftrightarrow: "\u21AE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nlsim: "\u2274", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nmid: "\u2224", nopf: "\u{1D55F}", no: "\xAC", not: "\xAC", notin: "\u2209", notinE: "\u22F9\u0338", notindot: "\u22F5\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", npar: "\u2226", nparallel: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", npre: "\u2AAF\u0338", nprec: "\u2280", npreceq: "\u2AAF\u0338", nrArr: "\u21CF", nrarr: "\u219B", nrarrc: "\u2933\u0338", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", ntild: "\xF1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvDash: "\u22AD", nvHarr: "\u2904", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwArr: "\u21D6", nwarhk: "\u2923", nwarr: "\u2196", nwarrow: "\u2196", nwnear: "\u2927", oS: "\u24C8", oacut: "\xF3", oacute: "\xF3", oast: "\u229B", ocir: "\xF4", ocirc: "\xF4", ocy: "\u043E", odash: "\u229D", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", oelig: "\u0153", ofcir: "\u29BF", ofr: "\u{1D52C}", ogon: "\u02DB", ograv: "\xF2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", omacr: "\u014D", omega: "\u03C9", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", oopf: "\u{1D560}", opar: "\u29B7", operp: "\u29B9", oplus: "\u2295", or: "\u2228", orarr: "\u21BB", ord: "\xBA", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oscr: "\u2134", oslas: "\xF8", oslash: "\xF8", osol: "\u2298", otild: "\xF5", otilde: "\xF5", otimes: "\u2297", otimesas: "\u2A36", oum: "\xF6", ouml: "\xF6", ovbar: "\u233D", par: "\xB6", para: "\xB6", parallel: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", pfr: "\u{1D52D}", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plus: "+", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", plusm: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", pointint: "\u2A15", popf: "\u{1D561}", poun: "\xA3", pound: "\xA3", pr: "\u227A", prE: "\u2AB3", prap: "\u2AB7", prcue: "\u227C", pre: "\u2AAF", prec: "\u227A", precapprox: "\u2AB7", preccurlyeq: "\u227C", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", precsim: "\u227E", prime: "\u2032", primes: "\u2119", prnE: "\u2AB5", prnap: "\u2AB9", prnsim: "\u22E8", prod: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", pscr: "\u{1D4C5}", psi: "\u03C8", puncsp: "\u2008", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", qprime: "\u2057", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quo: '"', quot: '"', rAarr: "\u21DB", rArr: "\u21D2", rAtail: "\u291C", rBarr: "\u290F", rHar: "\u2964", race: "\u223D\u0331", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raqu: "\xBB", raquo: "\xBB", rarr: "\u2192", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", rcaron: "\u0159", rcedil: "\u0157", rceil: "\u2309", rcub: "}", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", rect: "\u25AD", re: "\xAE", reg: "\xAE", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", rho: "\u03C1", rhov: "\u03F1", rightarrow: "\u2192", rightarrowtail: "\u21A3", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", rightthreetimes: "\u22CC", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoust: "\u23B1", rmoustache: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", roplus: "\u2A2E", rotimes: "\u2A35", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", rsaquo: "\u203A", rscr: "\u{1D4C7}", rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", ruluhar: "\u2968", rx: "\u211E", sacute: "\u015B", sbquo: "\u201A", sc: "\u227B", scE: "\u2AB4", scap: "\u2AB8", scaron: "\u0161", sccue: "\u227D", sce: "\u2AB0", scedil: "\u015F", scirc: "\u015D", scnE: "\u2AB6", scnap: "\u2ABA", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", scy: "\u0441", sdot: "\u22C5", sdotb: "\u22A1", sdote: "\u2A66", seArr: "\u21D8", searhk: "\u2925", searr: "\u2198", searrow: "\u2198", sec: "\xA7", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", shchcy: "\u0449", shcy: "\u0448", shortmid: "\u2223", shortparallel: "\u2225", sh: "\xAD", shy: "\xAD", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", softcy: "\u044C", sol: "/", solb: "\u29C4", solbar: "\u233F", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", squ: "\u25A1", square: "\u25A1", squarf: "\u25AA", squf: "\u25AA", srarr: "\u2192", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", subE: "\u2AC5", subdot: "\u2ABD", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", subseteq: "\u2286", subseteqq: "\u2AC5", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succ: "\u227B", succapprox: "\u2AB8", succcurlyeq: "\u227D", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", sum: "\u2211", sung: "\u266A", sup: "\u2283", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", supE: "\u2AC6", supdot: "\u2ABE", supdsub: "\u2AD8", supe: "\u2287", supedot: "\u2AC4", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swArr: "\u21D9", swarhk: "\u2926", swarr: "\u2199", swarrow: "\u2199", swnwar: "\u292A", szli: "\xDF", szlig: "\xDF", target: "\u2316", tau: "\u03C4", tbrk: "\u23B4", tcaron: "\u0165", tcedil: "\u0163", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", thor: "\xFE", thorn: "\xFE", tilde: "\u02DC", time: "\xD7", times: "\xD7", timesb: "\u22A0", timesbar: "\u2A31", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", top: "\u22A4", topbot: "\u2336", topcir: "\u2AF1", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", tscr: "\u{1D4C9}", tscy: "\u0446", tshcy: "\u045B", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", uArr: "\u21D1", uHar: "\u2963", uacut: "\xFA", uacute: "\xFA", uarr: "\u2191", ubrcy: "\u045E", ubreve: "\u016D", ucir: "\xFB", ucirc: "\xFB", ucy: "\u0443", udarr: "\u21C5", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", ufr: "\u{1D532}", ugrav: "\xF9", ugrave: "\xF9", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", umacr: "\u016B", um: "\xA8", uml: "\xA8", uogon: "\u0173", uopf: "\u{1D566}", uparrow: "\u2191", updownarrow: "\u2195", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", upsi: "\u03C5", upsih: "\u03D2", upsilon: "\u03C5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", uring: "\u016F", urtri: "\u25F9", uscr: "\u{1D4CA}", utdot: "\u22F0", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", uum: "\xFC", uuml: "\xFC", uwangle: "\u29A7", vArr: "\u21D5", vBar: "\u2AE8", vBarv: "\u2AE9", vDash: "\u22A8", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vcy: "\u0432", vdash: "\u22A2", vee: "\u2228", veebar: "\u22BB", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", vert: "|", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", vzigzag: "\u299A", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", wedgeq: "\u2259", weierp: "\u2118", wfr: "\u{1D534}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", xfr: "\u{1D535}", xhArr: "\u27FA", xharr: "\u27F7", xi: "\u03BE", xlArr: "\u27F8", xlarr: "\u27F5", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrArr: "\u27F9", xrarr: "\u27F6", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", yacut: "\xFD", yacute: "\xFD", yacy: "\u044F", ycirc: "\u0177", ycy: "\u044B", ye: "\xA5", yen: "\xA5", yfr: "\u{1D536}", yicy: "\u0457", yopf: "\u{1D56A}", yscr: "\u{1D4CE}", yucy: "\u044E", yum: "\xFF", yuml: "\xFF", zacute: "\u017A", zcaron: "\u017E", zcy: "\u0437", zdot: "\u017C", zeetrf: "\u2128", zeta: "\u03B6", zfr: "\u{1D537}", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
});
var gi2 = C((sv, Fi2) => {
  "use strict";
  var mi2 = hi2();
  Fi2.exports = rD;
  var eD = {}.hasOwnProperty;
  function rD(e) {
    return eD.call(mi2, e) ? mi2[e] : false;
  }
});
var pr3 = C((cv, Si2) => {
  "use strict";
  var vi2 = oi2(), Ei2 = si2(), tD = Le3(), nD = fi2(), Ai2 = di2(), uD = gi2();
  Si2.exports = FD;
  var iD = {}.hasOwnProperty, Ve3 = String.fromCharCode, aD = Function.prototype, Ci2 = { warning: null, reference: null, text: null, warningContext: null, referenceContext: null, textContext: null, position: {}, additional: null, attribute: false, nonTerminated: true }, oD = 9, bi2 = 10, sD = 12, cD = 32, yi2 = 38, lD = 59, fD = 60, DD = 61, pD = 35, dD = 88, hD = 120, mD = 65533, Ge3 = "named", _t3 = "hexadecimal", Ot3 = "decimal", Pt3 = {};
  Pt3[_t3] = 16;
  Pt3[Ot3] = 10;
  var Mr3 = {};
  Mr3[Ge3] = Ai2;
  Mr3[Ot3] = tD;
  Mr3[_t3] = nD;
  var xi2 = 1, ki2 = 2, wi2 = 3, Bi2 = 4, qi2 = 5, St3 = 6, Ti2 = 7, ye2 = {};
  ye2[xi2] = "Named character references must be terminated by a semicolon";
  ye2[ki2] = "Numeric character references must be terminated by a semicolon";
  ye2[wi2] = "Named character references cannot be empty";
  ye2[Bi2] = "Numeric character references cannot be empty";
  ye2[qi2] = "Named character references must be known";
  ye2[St3] = "Numeric character references cannot be disallowed";
  ye2[Ti2] = "Numeric character references cannot be outside the permissible Unicode range";
  function FD(e, r) {
    var t8 = {}, n, a;
    r || (r = {});
    for (a in Ci2)
      n = r[a], t8[a] = n != null ? n : Ci2[a];
    return (t8.position.indent || t8.position.start) && (t8.indent = t8.position.indent || [], t8.position = t8.position.start), gD(e, t8);
  }
  function gD(e, r) {
    var t8 = r.additional, n = r.nonTerminated, a = r.text, u = r.reference, i = r.warning, o = r.textContext, s = r.referenceContext, l = r.warningContext, c = r.position, f2 = r.indent || [], D = e.length, h2 = 0, p = -1, d = c.column || 1, m = c.line || 1, F3 = "", y2 = [], v3, B, b2, g, A3, x3, E2, k3, w3, q4, T3, R3, O2, _2, S3, P3, ke3, G4, I2;
    for (typeof t8 == "string" && (t8 = t8.charCodeAt(0)), P3 = X3(), k3 = i ? K3 : aD, h2--, D++; ++h2 < D; )
      if (A3 === bi2 && (d = f2[p] || 1), A3 = e.charCodeAt(h2), A3 === yi2) {
        if (E2 = e.charCodeAt(h2 + 1), E2 === oD || E2 === bi2 || E2 === sD || E2 === cD || E2 === yi2 || E2 === fD || E2 !== E2 || t8 && E2 === t8) {
          F3 += Ve3(A3), d++;
          continue;
        }
        for (O2 = h2 + 1, R3 = O2, I2 = O2, E2 === pD ? (I2 = ++R3, E2 = e.charCodeAt(I2), E2 === dD || E2 === hD ? (_2 = _t3, I2 = ++R3) : _2 = Ot3) : _2 = Ge3, v3 = "", T3 = "", g = "", S3 = Mr3[_2], I2--; ++I2 < D && (E2 = e.charCodeAt(I2), !!S3(E2)); )
          g += Ve3(E2), _2 === Ge3 && iD.call(vi2, g) && (v3 = g, T3 = vi2[g]);
        b2 = e.charCodeAt(I2) === lD, b2 && (I2++, B = _2 === Ge3 ? uD(g) : false, B && (v3 = g, T3 = B)), G4 = 1 + I2 - O2, !b2 && !n || (g ? _2 === Ge3 ? (b2 && !T3 ? k3(qi2, 1) : (v3 !== g && (I2 = R3 + v3.length, G4 = 1 + I2 - R3, b2 = false), b2 || (w3 = v3 ? xi2 : wi2, r.attribute ? (E2 = e.charCodeAt(I2), E2 === DD ? (k3(w3, G4), T3 = null) : Ai2(E2) ? T3 = null : k3(w3, G4)) : k3(w3, G4))), x3 = T3) : (b2 || k3(ki2, G4), x3 = parseInt(g, Pt3[_2]), vD(x3) ? (k3(Ti2, G4), x3 = Ve3(mD)) : x3 in Ei2 ? (k3(St3, G4), x3 = Ei2[x3]) : (q4 = "", ED(x3) && k3(St3, G4), x3 > 65535 && (x3 -= 65536, q4 += Ve3(x3 >>> 10 | 55296), x3 = 56320 | x3 & 1023), x3 = q4 + Ve3(x3))) : _2 !== Ge3 && k3(Bi2, G4)), x3 ? (me3(), P3 = X3(), h2 = I2 - 1, d += I2 - O2 + 1, y2.push(x3), ke3 = X3(), ke3.offset++, u && u.call(s, x3, { start: P3, end: ke3 }, e.slice(O2 - 1, I2)), P3 = ke3) : (g = e.slice(O2 - 1, I2), F3 += g, d += g.length, h2 = I2 - 1);
      } else
        A3 === 10 && (m++, p++, d = 0), A3 === A3 ? (F3 += Ve3(A3), d++) : me3();
    return y2.join("");
    function X3() {
      return { line: m, column: d, offset: h2 + (c.offset || 0) };
    }
    function K3(Fe3, z3) {
      var ct2 = X3();
      ct2.column += z3, ct2.offset += z3, i.call(l, ye2[Fe3], ct2, Fe3);
    }
    function me3() {
      F3 && (y2.push(F3), a && a.call(o, F3, { start: P3, end: X3() }), F3 = "");
    }
  }
  function vD(e) {
    return e >= 55296 && e <= 57343 || e > 1114111;
  }
  function ED(e) {
    return e >= 1 && e <= 8 || e === 11 || e >= 13 && e <= 31 || e >= 127 && e <= 159 || e >= 64976 && e <= 65007 || (e & 65535) === 65535 || (e & 65535) === 65534;
  }
});
var Pi2 = C((lv, Oi2) => {
  "use strict";
  var CD = Pe3(), _i2 = pr3();
  Oi2.exports = bD;
  function bD(e) {
    return t8.raw = n, t8;
    function r(u) {
      for (var i = e.offset, o = u.line, s = []; ++o && o in i; )
        s.push((i[o] || 0) + 1);
      return { start: u, indent: s };
    }
    function t8(u, i, o) {
      _i2(u, { position: r(i), warning: a, text: o, reference: o, textContext: e, referenceContext: e });
    }
    function n(u, i, o) {
      return _i2(u, CD(o, { position: r(i), warning: a }));
    }
    function a(u, i, o) {
      o !== 3 && e.file.message(u, i);
    }
  }
});
var Ni2 = C((fv, Ii2) => {
  "use strict";
  Ii2.exports = yD;
  function yD(e) {
    return r;
    function r(t8, n) {
      var a = this, u = a.offset, i = [], o = a[e + "Methods"], s = a[e + "Tokenizers"], l = n.line, c = n.column, f2, D, h2, p, d, m;
      if (!t8)
        return i;
      for (x3.now = v3, x3.file = a.file, F3(""); t8; ) {
        for (f2 = -1, D = o.length, d = false; ++f2 < D && (p = o[f2], h2 = s[p], !(h2 && (!h2.onlyAtStart || a.atStart) && (!h2.notInList || !a.inList) && (!h2.notInBlock || !a.inBlock) && (!h2.notInLink || !a.inLink) && (m = t8.length, h2.apply(a, [x3, t8]), d = m !== t8.length, d))); )
          ;
        d || a.file.fail(new Error("Infinite loop"), x3.now());
      }
      return a.eof = v3(), i;
      function F3(E2) {
        for (var k3 = -1, w3 = E2.indexOf(`
`); w3 !== -1; )
          l++, k3 = w3, w3 = E2.indexOf(`
`, w3 + 1);
        k3 === -1 ? c += E2.length : c = E2.length - k3, l in u && (k3 !== -1 ? c += u[l] : c <= u[l] && (c = u[l] + 1));
      }
      function y2() {
        var E2 = [], k3 = l + 1;
        return function() {
          for (var w3 = l + 1; k3 < w3; )
            E2.push((u[k3] || 0) + 1), k3++;
          return E2;
        };
      }
      function v3() {
        var E2 = { line: l, column: c };
        return E2.offset = a.toOffset(E2), E2;
      }
      function B(E2) {
        this.start = E2, this.end = v3();
      }
      function b2(E2) {
        t8.slice(0, E2.length) !== E2 && a.file.fail(new Error("Incorrectly eaten value: please report this warning on https://git.io/vg5Ft"), v3());
      }
      function g() {
        var E2 = v3();
        return k3;
        function k3(w3, q4) {
          var T3 = w3.position, R3 = T3 ? T3.start : E2, O2 = [], _2 = T3 && T3.end.line, S3 = E2.line;
          if (w3.position = new B(R3), T3 && q4 && T3.indent) {
            if (O2 = T3.indent, _2 < S3) {
              for (; ++_2 < S3; )
                O2.push((u[_2] || 0) + 1);
              O2.push(E2.column);
            }
            q4 = O2.concat(q4);
          }
          return w3.position.indent = q4 || [], w3;
        }
      }
      function A3(E2, k3) {
        var w3 = k3 ? k3.children : i, q4 = w3[w3.length - 1], T3;
        return q4 && E2.type === q4.type && (E2.type === "text" || E2.type === "blockquote") && Li2(q4) && Li2(E2) && (T3 = E2.type === "text" ? AD : xD, E2 = T3.call(a, q4, E2)), E2 !== q4 && w3.push(E2), a.atStart && i.length !== 0 && a.exitStart(), E2;
      }
      function x3(E2) {
        var k3 = y2(), w3 = g(), q4 = v3();
        return b2(E2), T3.reset = R3, R3.test = O2, T3.test = O2, t8 = t8.slice(E2.length), F3(E2), k3 = k3(), T3;
        function T3(_2, S3) {
          return w3(A3(w3(_2), S3), k3);
        }
        function R3() {
          var _2 = T3.apply(null, arguments);
          return l = q4.line, c = q4.column, t8 = E2 + t8, _2;
        }
        function O2() {
          var _2 = w3({});
          return l = q4.line, c = q4.column, t8 = E2 + t8, _2.position;
        }
      }
    }
  }
  function Li2(e) {
    var r, t8;
    return e.type !== "text" || !e.position ? true : (r = e.position.start, t8 = e.position.end, r.line !== t8.line || t8.column - r.column === e.value.length);
  }
  function AD(e, r) {
    return e.value += r.value, e;
  }
  function xD(e, r) {
    return this.options.commonmark || this.options.gfm ? r : (e.children = e.children.concat(r.children), e);
  }
});
var zi2 = C((Dv, Ui2) => {
  "use strict";
  Ui2.exports = Yr3;
  var Lt3 = ["\\", "`", "*", "{", "}", "[", "]", "(", ")", "#", "+", "-", ".", "!", "_", ">"], It3 = Lt3.concat(["~", "|"]), Ri2 = It3.concat([`
`, '"', "$", "%", "&", "'", ",", "/", ":", ";", "<", "=", "?", "@", "^"]);
  Yr3.default = Lt3;
  Yr3.gfm = It3;
  Yr3.commonmark = Ri2;
  function Yr3(e) {
    var r = e || {};
    return r.commonmark ? Ri2 : r.gfm ? It3 : Lt3;
  }
});
var Yi2 = C((pv, Mi2) => {
  "use strict";
  Mi2.exports = ["address", "article", "aside", "base", "basefont", "blockquote", "body", "caption", "center", "col", "colgroup", "dd", "details", "dialog", "dir", "div", "dl", "dt", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "legend", "li", "link", "main", "menu", "menuitem", "meta", "nav", "noframes", "ol", "optgroup", "option", "p", "param", "pre", "section", "source", "title", "summary", "table", "tbody", "td", "tfoot", "th", "thead", "title", "tr", "track", "ul"];
});
var Nt3 = C((dv, Vi2) => {
  "use strict";
  Vi2.exports = { position: true, gfm: true, commonmark: false, pedantic: false, blocks: Yi2() };
});
var $i2 = C((hv, Gi2) => {
  "use strict";
  var kD = Pe3(), wD = zi2(), BD = Nt3();
  Gi2.exports = qD;
  function qD(e) {
    var r = this, t8 = r.options, n, a;
    if (e == null)
      e = {};
    else if (typeof e == "object")
      e = kD(e);
    else
      throw new Error("Invalid value `" + e + "` for setting `options`");
    for (n in BD) {
      if (a = e[n], a == null && (a = t8[n]), n !== "blocks" && typeof a != "boolean" || n === "blocks" && typeof a != "object")
        throw new Error("Invalid value `" + a + "` for setting `options." + n + "`");
      e[n] = a;
    }
    return r.options = e, r.escape = wD(e), r;
  }
});
var Hi2 = C((mv, Wi2) => {
  "use strict";
  Wi2.exports = ji2;
  function ji2(e) {
    if (e == null)
      return OD;
    if (typeof e == "string")
      return _D(e);
    if (typeof e == "object")
      return "length" in e ? SD(e) : TD(e);
    if (typeof e == "function")
      return e;
    throw new Error("Expected function, string, or object as test");
  }
  function TD(e) {
    return r;
    function r(t8) {
      var n;
      for (n in e)
        if (t8[n] !== e[n])
          return false;
      return true;
    }
  }
  function SD(e) {
    for (var r = [], t8 = -1; ++t8 < e.length; )
      r[t8] = ji2(e[t8]);
    return n;
    function n() {
      for (var a = -1; ++a < r.length; )
        if (r[a].apply(this, arguments))
          return true;
      return false;
    }
  }
  function _D(e) {
    return r;
    function r(t8) {
      return !!(t8 && t8.type === e);
    }
  }
  function OD() {
    return true;
  }
});
var Xi2 = C((Fv, Ki2) => {
  Ki2.exports = PD;
  function PD(e) {
    return e;
  }
});
var ea2 = C((gv, Zi2) => {
  "use strict";
  Zi2.exports = Vr3;
  var LD = Hi2(), ID = Xi2(), Ji2 = true, Qi2 = "skip", Rt3 = false;
  Vr3.CONTINUE = Ji2;
  Vr3.SKIP = Qi2;
  Vr3.EXIT = Rt3;
  function Vr3(e, r, t8, n) {
    var a, u;
    typeof r == "function" && typeof t8 != "function" && (n = t8, t8 = r, r = null), u = LD(r), a = n ? -1 : 1, i(e, null, [])();
    function i(o, s, l) {
      var c = typeof o == "object" && o !== null ? o : {}, f2;
      return typeof c.type == "string" && (f2 = typeof c.tagName == "string" ? c.tagName : typeof c.name == "string" ? c.name : void 0, D.displayName = "node (" + ID(c.type + (f2 ? "<" + f2 + ">" : "")) + ")"), D;
      function D() {
        var h2 = l.concat(o), p = [], d, m;
        if ((!r || u(o, s, l[l.length - 1] || null)) && (p = ND(t8(o, l)), p[0] === Rt3))
          return p;
        if (o.children && p[0] !== Qi2)
          for (m = (n ? o.children.length : -1) + a; m > -1 && m < o.children.length; ) {
            if (d = i(o.children[m], m, h2)(), d[0] === Rt3)
              return d;
            m = typeof d[1] == "number" ? d[1] : m + a;
          }
        return p;
      }
    }
  }
  function ND(e) {
    return e !== null && typeof e == "object" && "length" in e ? e : typeof e == "number" ? [Ji2, e] : [e];
  }
});
var ta2 = C((vv, ra2) => {
  "use strict";
  ra2.exports = $r2;
  var Gr2 = ea2(), RD = Gr2.CONTINUE, UD = Gr2.SKIP, zD = Gr2.EXIT;
  $r2.CONTINUE = RD;
  $r2.SKIP = UD;
  $r2.EXIT = zD;
  function $r2(e, r, t8, n) {
    typeof r == "function" && typeof t8 != "function" && (n = t8, t8 = r, r = null), Gr2(e, r, a, n);
    function a(u, i) {
      var o = i[i.length - 1], s = o ? o.children.indexOf(u) : null;
      return t8(u, s, o);
    }
  }
});
var ua2 = C((Ev, na2) => {
  "use strict";
  var MD = ta2();
  na2.exports = YD;
  function YD(e, r) {
    return MD(e, r ? VD : GD), e;
  }
  function VD(e) {
    delete e.position;
  }
  function GD(e) {
    e.position = void 0;
  }
});
var oa2 = C((Cv, aa2) => {
  "use strict";
  var ia2 = Pe3(), $D = ua2();
  aa2.exports = HD;
  var jD = `
`, WD = /\r\n|\r/g;
  function HD() {
    var e = this, r = String(e.file), t8 = { line: 1, column: 1, offset: 0 }, n = ia2(t8), a;
    return r = r.replace(WD, jD), r.charCodeAt(0) === 65279 && (r = r.slice(1), n.column++, n.offset++), a = { type: "root", children: e.tokenizeBlock(r, n), position: { start: t8, end: e.eof || ia2(t8) } }, e.options.position || $D(a, true), a;
  }
});
var ca2 = C((bv, sa2) => {
  "use strict";
  var KD = /^[ \t]*(\n|$)/;
  sa2.exports = XD;
  function XD(e, r, t8) {
    for (var n, a = "", u = 0, i = r.length; u < i && (n = KD.exec(r.slice(u)), n != null); )
      u += n[0].length, a += n[0];
    if (a !== "") {
      if (t8)
        return true;
      e(a);
    }
  }
});
var jr3 = C((yv, la2) => {
  "use strict";
  var pe3 = "", Ut3;
  la2.exports = JD;
  function JD(e, r) {
    if (typeof e != "string")
      throw new TypeError("expected a string");
    if (r === 1)
      return e;
    if (r === 2)
      return e + e;
    var t8 = e.length * r;
    if (Ut3 !== e || typeof Ut3 > "u")
      Ut3 = e, pe3 = "";
    else if (pe3.length >= t8)
      return pe3.substr(0, t8);
    for (; t8 > pe3.length && r > 1; )
      r & 1 && (pe3 += e), r >>= 1, e += e;
    return pe3 += e, pe3 = pe3.substr(0, t8), pe3;
  }
});
var zt3 = C((Av, fa2) => {
  "use strict";
  fa2.exports = QD;
  function QD(e) {
    return String(e).replace(/\n+$/, "");
  }
});
var da2 = C((xv, pa2) => {
  "use strict";
  var ZD = jr3(), ep = zt3();
  pa2.exports = np;
  var Mt3 = `
`, Da2 = "	", Yt2 = " ", rp = 4, tp = ZD(Yt2, rp);
  function np(e, r, t8) {
    for (var n = -1, a = r.length, u = "", i = "", o = "", s = "", l, c, f2; ++n < a; )
      if (l = r.charAt(n), f2)
        if (f2 = false, u += o, i += s, o = "", s = "", l === Mt3)
          o = l, s = l;
        else
          for (u += l, i += l; ++n < a; ) {
            if (l = r.charAt(n), !l || l === Mt3) {
              s = l, o = l;
              break;
            }
            u += l, i += l;
          }
      else if (l === Yt2 && r.charAt(n + 1) === l && r.charAt(n + 2) === l && r.charAt(n + 3) === l)
        o += tp, n += 3, f2 = true;
      else if (l === Da2)
        o += l, f2 = true;
      else {
        for (c = ""; l === Da2 || l === Yt2; )
          c += l, l = r.charAt(++n);
        if (l !== Mt3)
          break;
        o += c + l, s += l;
      }
    if (i)
      return t8 ? true : e(u)({ type: "code", lang: null, meta: null, value: ep(i) });
  }
});
var Fa2 = C((kv, ma2) => {
  "use strict";
  ma2.exports = op;
  var Wr2 = `
`, dr3 = "	", $e3 = " ", up = "~", ha2 = "`", ip = 3, ap = 4;
  function op(e, r, t8) {
    var n = this, a = n.options.gfm, u = r.length + 1, i = 0, o = "", s, l, c, f2, D, h2, p, d, m, F3, y2, v3, B;
    if (a) {
      for (; i < u && (c = r.charAt(i), !(c !== $e3 && c !== dr3)); )
        o += c, i++;
      if (v3 = i, c = r.charAt(i), !(c !== up && c !== ha2)) {
        for (i++, l = c, s = 1, o += c; i < u && (c = r.charAt(i), c === l); )
          o += c, s++, i++;
        if (!(s < ip)) {
          for (; i < u && (c = r.charAt(i), !(c !== $e3 && c !== dr3)); )
            o += c, i++;
          for (f2 = "", p = ""; i < u && (c = r.charAt(i), !(c === Wr2 || l === ha2 && c === l)); )
            c === $e3 || c === dr3 ? p += c : (f2 += p + c, p = ""), i++;
          if (c = r.charAt(i), !(c && c !== Wr2)) {
            if (t8)
              return true;
            B = e.now(), B.column += o.length, B.offset += o.length, o += f2, f2 = n.decode.raw(n.unescape(f2), B), p && (o += p), p = "", F3 = "", y2 = "", d = "", m = "";
            for (var b2 = true; i < u; ) {
              if (c = r.charAt(i), d += F3, m += y2, F3 = "", y2 = "", c !== Wr2) {
                d += c, y2 += c, i++;
                continue;
              }
              for (b2 ? (o += c, b2 = false) : (F3 += c, y2 += c), p = "", i++; i < u && (c = r.charAt(i), c === $e3); )
                p += c, i++;
              if (F3 += p, y2 += p.slice(v3), !(p.length >= ap)) {
                for (p = ""; i < u && (c = r.charAt(i), c === l); )
                  p += c, i++;
                if (F3 += p, y2 += p, !(p.length < s)) {
                  for (p = ""; i < u && (c = r.charAt(i), !(c !== $e3 && c !== dr3)); )
                    F3 += c, y2 += c, i++;
                  if (!c || c === Wr2)
                    break;
                }
              }
            }
            for (o += d + F3, i = -1, u = f2.length; ++i < u; )
              if (c = f2.charAt(i), c === $e3 || c === dr3)
                D || (D = f2.slice(0, i));
              else if (D) {
                h2 = f2.slice(i);
                break;
              }
            return e(o)({ type: "code", lang: D || f2 || null, meta: h2 || null, value: m });
          }
        }
      }
    }
  }
});
var Ie3 = C((je2, ga2) => {
  je2 = ga2.exports = sp;
  function sp(e) {
    return e.trim ? e.trim() : je2.right(je2.left(e));
  }
  je2.left = function(e) {
    return e.trimLeft ? e.trimLeft() : e.replace(/^\s\s*/, "");
  };
  je2.right = function(e) {
    if (e.trimRight)
      return e.trimRight();
    for (var r = /\s/, t8 = e.length; r.test(e.charAt(--t8)); )
      ;
    return e.slice(0, t8 + 1);
  };
});
var Hr3 = C((wv, va2) => {
  "use strict";
  va2.exports = cp;
  function cp(e, r, t8, n) {
    for (var a = e.length, u = -1, i, o; ++u < a; )
      if (i = e[u], o = i[1] || {}, !(o.pedantic !== void 0 && o.pedantic !== t8.options.pedantic) && !(o.commonmark !== void 0 && o.commonmark !== t8.options.commonmark) && r[i[0]].apply(t8, n))
        return true;
    return false;
  }
});
var ya2 = C((Bv, ba2) => {
  "use strict";
  var lp = Ie3(), fp = Hr3();
  ba2.exports = Dp;
  var Vt3 = `
`, Ea2 = "	", Gt2 = " ", Ca2 = ">";
  function Dp(e, r, t8) {
    for (var n = this, a = n.offset, u = n.blockTokenizers, i = n.interruptBlockquote, o = e.now(), s = o.line, l = r.length, c = [], f2 = [], D = [], h2, p = 0, d, m, F3, y2, v3, B, b2, g; p < l && (d = r.charAt(p), !(d !== Gt2 && d !== Ea2)); )
      p++;
    if (r.charAt(p) === Ca2) {
      if (t8)
        return true;
      for (p = 0; p < l; ) {
        for (F3 = r.indexOf(Vt3, p), B = p, b2 = false, F3 === -1 && (F3 = l); p < l && (d = r.charAt(p), !(d !== Gt2 && d !== Ea2)); )
          p++;
        if (r.charAt(p) === Ca2 ? (p++, b2 = true, r.charAt(p) === Gt2 && p++) : p = B, y2 = r.slice(p, F3), !b2 && !lp(y2)) {
          p = B;
          break;
        }
        if (!b2 && (m = r.slice(p), fp(i, u, n, [e, m, true])))
          break;
        v3 = B === p ? y2 : r.slice(B, F3), D.push(p - B), c.push(v3), f2.push(y2), p = F3 + 1;
      }
      for (p = -1, l = D.length, h2 = e(c.join(Vt3)); ++p < l; )
        a[s] = (a[s] || 0) + D[p], s++;
      return g = n.enterBlock(), f2 = n.tokenizeBlock(f2.join(Vt3), o), g(), h2({ type: "blockquote", children: f2 });
    }
  }
});
var ka2 = C((qv, xa2) => {
  "use strict";
  xa2.exports = dp;
  var Aa2 = `
`, hr3 = "	", mr3 = " ", Fr2 = "#", pp = 6;
  function dp(e, r, t8) {
    for (var n = this, a = n.options.pedantic, u = r.length + 1, i = -1, o = e.now(), s = "", l = "", c, f2, D; ++i < u; ) {
      if (c = r.charAt(i), c !== mr3 && c !== hr3) {
        i--;
        break;
      }
      s += c;
    }
    for (D = 0; ++i <= u; ) {
      if (c = r.charAt(i), c !== Fr2) {
        i--;
        break;
      }
      s += c, D++;
    }
    if (!(D > pp) && !(!D || !a && r.charAt(i + 1) === Fr2)) {
      for (u = r.length + 1, f2 = ""; ++i < u; ) {
        if (c = r.charAt(i), c !== mr3 && c !== hr3) {
          i--;
          break;
        }
        f2 += c;
      }
      if (!(!a && f2.length === 0 && c && c !== Aa2)) {
        if (t8)
          return true;
        for (s += f2, f2 = "", l = ""; ++i < u && (c = r.charAt(i), !(!c || c === Aa2)); ) {
          if (c !== mr3 && c !== hr3 && c !== Fr2) {
            l += f2 + c, f2 = "";
            continue;
          }
          for (; c === mr3 || c === hr3; )
            f2 += c, c = r.charAt(++i);
          if (!a && l && !f2 && c === Fr2) {
            l += c;
            continue;
          }
          for (; c === Fr2; )
            f2 += c, c = r.charAt(++i);
          for (; c === mr3 || c === hr3; )
            f2 += c, c = r.charAt(++i);
          i--;
        }
        return o.column += s.length, o.offset += s.length, s += l + f2, e(s)({ type: "heading", depth: D, children: n.tokenizeInline(l, o) });
      }
    }
  }
});
var qa2 = C((Tv, Ba2) => {
  "use strict";
  Ba2.exports = Cp;
  var hp2 = "	", mp = `
`, wa2 = " ", Fp = "*", gp = "-", vp = "_", Ep = 3;
  function Cp(e, r, t8) {
    for (var n = -1, a = r.length + 1, u = "", i, o, s, l; ++n < a && (i = r.charAt(n), !(i !== hp2 && i !== wa2)); )
      u += i;
    if (!(i !== Fp && i !== gp && i !== vp))
      for (o = i, u += i, s = 1, l = ""; ++n < a; )
        if (i = r.charAt(n), i === o)
          s++, u += l + o, l = "";
        else if (i === wa2)
          l += i;
        else
          return s >= Ep && (!i || i === mp) ? (u += l, t8 ? true : e(u)({ type: "thematicBreak" })) : void 0;
  }
});
var $t3 = C((Sv, Sa2) => {
  "use strict";
  Sa2.exports = xp;
  var Ta2 = "	", bp = " ", yp = 1, Ap = 4;
  function xp(e) {
    for (var r = 0, t8 = 0, n = e.charAt(r), a = {}, u, i = 0; n === Ta2 || n === bp; ) {
      for (u = n === Ta2 ? Ap : yp, t8 += u, u > 1 && (t8 = Math.floor(t8 / u) * u); i < t8; )
        a[++i] = r;
      n = e.charAt(++r);
    }
    return { indent: t8, stops: a };
  }
});
var Pa2 = C((_v, Oa2) => {
  "use strict";
  var kp = Ie3(), wp = jr3(), Bp = $t3();
  Oa2.exports = Sp;
  var _a3 = `
`, qp = " ", Tp = "!";
  function Sp(e, r) {
    var t8 = e.split(_a3), n = t8.length + 1, a = 1 / 0, u = [], i, o, s;
    for (t8.unshift(wp(qp, r) + Tp); n--; )
      if (o = Bp(t8[n]), u[n] = o.stops, kp(t8[n]).length !== 0)
        if (o.indent)
          o.indent > 0 && o.indent < a && (a = o.indent);
        else {
          a = 1 / 0;
          break;
        }
    if (a !== 1 / 0)
      for (n = t8.length; n--; ) {
        for (s = u[n], i = a; i && !(i in s); )
          i--;
        t8[n] = t8[n].slice(s[i] + 1);
      }
    return t8.shift(), t8.join(_a3);
  }
});
var za = C((Ov, Ua) => {
  "use strict";
  var _p = Ie3(), Op = jr3(), La2 = Le3(), Pp = $t3(), Lp = Pa2(), Ip = Hr3();
  Ua.exports = Gp;
  var jt3 = "*", Np = "_", Ia2 = "+", Wt3 = "-", Na2 = ".", de3 = " ", te4 = `
`, Kr3 = "	", Ra2 = ")", Rp = "x", Ae3 = 4, Up = /\n\n(?!\s*$)/, zp = /^\[([ X\tx])][ \t]/, Mp = /^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/, Yp = /^([ \t]*)([*+-]|\d+[.)])([ \t]+)/, Vp = /^( {1,4}|\t)?/gm;
  function Gp(e, r, t8) {
    for (var n = this, a = n.options.commonmark, u = n.options.pedantic, i = n.blockTokenizers, o = n.interruptList, s = 0, l = r.length, c = null, f2, D, h2, p, d, m, F3, y2, v3, B, b2, g, A3, x3, E2, k3, w3, q4, T3, R3 = false, O2, _2, S3, P3; s < l && (p = r.charAt(s), !(p !== Kr3 && p !== de3)); )
      s++;
    if (p = r.charAt(s), p === jt3 || p === Ia2 || p === Wt3)
      d = p, h2 = false;
    else {
      for (h2 = true, D = ""; s < l && (p = r.charAt(s), !!La2(p)); )
        D += p, s++;
      if (p = r.charAt(s), !D || !(p === Na2 || a && p === Ra2) || t8 && D !== "1")
        return;
      c = parseInt(D, 10), d = p;
    }
    if (p = r.charAt(++s), !(p !== de3 && p !== Kr3 && (u || p !== te4 && p !== ""))) {
      if (t8)
        return true;
      for (s = 0, x3 = [], E2 = [], k3 = []; s < l; ) {
        for (m = r.indexOf(te4, s), F3 = s, y2 = false, P3 = false, m === -1 && (m = l), f2 = 0; s < l; ) {
          if (p = r.charAt(s), p === Kr3)
            f2 += Ae3 - f2 % Ae3;
          else if (p === de3)
            f2++;
          else
            break;
          s++;
        }
        if (w3 && f2 >= w3.indent && (P3 = true), p = r.charAt(s), v3 = null, !P3) {
          if (p === jt3 || p === Ia2 || p === Wt3)
            v3 = p, s++, f2++;
          else {
            for (D = ""; s < l && (p = r.charAt(s), !!La2(p)); )
              D += p, s++;
            p = r.charAt(s), s++, D && (p === Na2 || a && p === Ra2) && (v3 = p, f2 += D.length + 1);
          }
          if (v3)
            if (p = r.charAt(s), p === Kr3)
              f2 += Ae3 - f2 % Ae3, s++;
            else if (p === de3) {
              for (S3 = s + Ae3; s < S3 && r.charAt(s) === de3; )
                s++, f2++;
              s === S3 && r.charAt(s) === de3 && (s -= Ae3 - 1, f2 -= Ae3 - 1);
            } else
              p !== te4 && p !== "" && (v3 = null);
        }
        if (v3) {
          if (!u && d !== v3)
            break;
          y2 = true;
        } else
          !a && !P3 && r.charAt(F3) === de3 ? P3 = true : a && w3 && (P3 = f2 >= w3.indent || f2 > Ae3), y2 = false, s = F3;
        if (b2 = r.slice(F3, m), B = F3 === s ? b2 : r.slice(s, m), (v3 === jt3 || v3 === Np || v3 === Wt3) && i.thematicBreak.call(n, e, b2, true))
          break;
        if (g = A3, A3 = !y2 && !_p(B).length, P3 && w3)
          w3.value = w3.value.concat(k3, b2), E2 = E2.concat(k3, b2), k3 = [];
        else if (y2)
          k3.length !== 0 && (R3 = true, w3.value.push(""), w3.trail = k3.concat()), w3 = { value: [b2], indent: f2, trail: [] }, x3.push(w3), E2 = E2.concat(k3, b2), k3 = [];
        else if (A3) {
          if (g && !a)
            break;
          k3.push(b2);
        } else {
          if (g || Ip(o, i, n, [e, b2, true]))
            break;
          w3.value = w3.value.concat(k3, b2), E2 = E2.concat(k3, b2), k3 = [];
        }
        s = m + 1;
      }
      for (O2 = e(E2.join(te4)).reset({ type: "list", ordered: h2, start: c, spread: R3, children: [] }), q4 = n.enterList(), T3 = n.enterBlock(), s = -1, l = x3.length; ++s < l; )
        w3 = x3[s].value.join(te4), _2 = e.now(), e(w3)($p(n, w3, _2), O2), w3 = x3[s].trail.join(te4), s !== l - 1 && (w3 += te4), e(w3);
      return q4(), T3(), O2;
    }
  }
  function $p(e, r, t8) {
    var n = e.offset, a = e.options.pedantic ? jp : Wp, u = null, i, o;
    return r = a.apply(null, arguments), e.options.gfm && (i = r.match(zp), i && (o = i[0].length, u = i[1].toLowerCase() === Rp, n[t8.line] += o, r = r.slice(o))), { type: "listItem", spread: Up.test(r), checked: u, children: e.tokenizeBlock(r, t8) };
  }
  function jp(e, r, t8) {
    var n = e.offset, a = t8.line;
    return r = r.replace(Yp, u), a = t8.line, r.replace(Vp, u);
    function u(i) {
      return n[a] = (n[a] || 0) + i.length, a++, "";
    }
  }
  function Wp(e, r, t8) {
    var n = e.offset, a = t8.line, u, i, o, s, l, c, f2;
    for (r = r.replace(Mp, D), s = r.split(te4), l = Lp(r, Pp(u).indent).split(te4), l[0] = o, n[a] = (n[a] || 0) + i.length, a++, c = 0, f2 = s.length; ++c < f2; )
      n[a] = (n[a] || 0) + s[c].length - l[c].length, a++;
    return l.join(te4);
    function D(h2, p, d, m, F3) {
      return i = p + d + m, o = F3, Number(d) < 10 && i.length % 2 === 1 && (d = de3 + d), u = p + Op(de3, d.length) + m, u + o;
    }
  }
});
var Ga = C((Pv, Va) => {
  "use strict";
  Va.exports = Zp;
  var Ht2 = `
`, Hp = "	", Ma = " ", Ya = "=", Kp = "-", Xp = 3, Jp = 1, Qp = 2;
  function Zp(e, r, t8) {
    for (var n = this, a = e.now(), u = r.length, i = -1, o = "", s, l, c, f2, D; ++i < u; ) {
      if (c = r.charAt(i), c !== Ma || i >= Xp) {
        i--;
        break;
      }
      o += c;
    }
    for (s = "", l = ""; ++i < u; ) {
      if (c = r.charAt(i), c === Ht2) {
        i--;
        break;
      }
      c === Ma || c === Hp ? l += c : (s += l + c, l = "");
    }
    if (a.column += o.length, a.offset += o.length, o += s + l, c = r.charAt(++i), f2 = r.charAt(++i), !(c !== Ht2 || f2 !== Ya && f2 !== Kp)) {
      for (o += c, l = f2, D = f2 === Ya ? Jp : Qp; ++i < u; ) {
        if (c = r.charAt(i), c !== f2) {
          if (c !== Ht2)
            return;
          i--;
          break;
        }
        l += c;
      }
      return t8 ? true : e(o + l)({ type: "heading", depth: D, children: n.tokenizeInline(s, a) });
    }
  }
});
var Xt3 = C((Kt3) => {
  "use strict";
  var ed = "[a-zA-Z_:][a-zA-Z0-9:._-]*", rd = "[^\"'=<>`\\u0000-\\u0020]+", td = "'[^']*'", nd = '"[^"]*"', ud = "(?:" + rd + "|" + td + "|" + nd + ")", id = "(?:\\s+" + ed + "(?:\\s*=\\s*" + ud + ")?)", $a2 = "<[A-Za-z][A-Za-z0-9\\-]*" + id + "*\\s*\\/?>", ja = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>", ad = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->", od = "<[?].*?[?]>", sd = "<![A-Za-z]+\\s+[^>]*>", cd = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>";
  Kt3.openCloseTag = new RegExp("^(?:" + $a2 + "|" + ja + ")");
  Kt3.tag = new RegExp("^(?:" + $a2 + "|" + ja + "|" + ad + "|" + od + "|" + sd + "|" + cd + ")");
});
var Xa = C((Iv, Ka) => {
  "use strict";
  var ld = Xt3().openCloseTag;
  Ka.exports = xd;
  var fd = "	", Dd = " ", Wa = `
`, pd = "<", dd = /^<(script|pre|style)(?=(\s|>|$))/i, hd = /<\/(script|pre|style)>/i, md = /^<!--/, Fd = /-->/, gd = /^<\?/, vd = /\?>/, Ed = /^<![A-Za-z]/, Cd = />/, bd = /^<!\[CDATA\[/, yd = /]]>/, Ha2 = /^$/, Ad = new RegExp(ld.source + "\\s*$");
  function xd(e, r, t8) {
    for (var n = this, a = n.options.blocks.join("|"), u = new RegExp("^</?(" + a + ")(?=(\\s|/?>|$))", "i"), i = r.length, o = 0, s, l, c, f2, D, h2, p, d = [[dd, hd, true], [md, Fd, true], [gd, vd, true], [Ed, Cd, true], [bd, yd, true], [u, Ha2, true], [Ad, Ha2, false]]; o < i && (f2 = r.charAt(o), !(f2 !== fd && f2 !== Dd)); )
      o++;
    if (r.charAt(o) === pd) {
      for (s = r.indexOf(Wa, o + 1), s = s === -1 ? i : s, l = r.slice(o, s), c = -1, D = d.length; ++c < D; )
        if (d[c][0].test(l)) {
          h2 = d[c];
          break;
        }
      if (h2) {
        if (t8)
          return h2[2];
        if (o = s, !h2[1].test(l))
          for (; o < i; ) {
            if (s = r.indexOf(Wa, o + 1), s = s === -1 ? i : s, l = r.slice(o + 1, s), h2[1].test(l)) {
              l && (o = s);
              break;
            }
            o = s;
          }
        return p = r.slice(0, o), e(p)({ type: "html", value: p });
      }
    }
  }
});
var ne4 = C((Nv, Ja) => {
  "use strict";
  Ja.exports = Bd;
  var kd = String.fromCharCode, wd = /\s/;
  function Bd(e) {
    return wd.test(typeof e == "number" ? kd(e) : e.charAt(0));
  }
});
var Jt3 = C((Rv, Qa) => {
  "use strict";
  var qd = xr3();
  Qa.exports = Td;
  function Td(e) {
    return qd(e).toLowerCase();
  }
});
var io2 = C((Uv, uo3) => {
  "use strict";
  var Sd = ne4(), _d = Jt3();
  uo3.exports = Id;
  var Za = '"', eo2 = "'", Od = "\\", We3 = `
`, Xr3 = "	", Jr3 = " ", Zt3 = "[", gr3 = "]", Pd = "(", Ld = ")", ro2 = ":", to2 = "<", no2 = ">";
  function Id(e, r, t8) {
    for (var n = this, a = n.options.commonmark, u = 0, i = r.length, o = "", s, l, c, f2, D, h2, p, d; u < i && (f2 = r.charAt(u), !(f2 !== Jr3 && f2 !== Xr3)); )
      o += f2, u++;
    if (f2 = r.charAt(u), f2 === Zt3) {
      for (u++, o += f2, c = ""; u < i && (f2 = r.charAt(u), f2 !== gr3); )
        f2 === Od && (c += f2, u++, f2 = r.charAt(u)), c += f2, u++;
      if (!(!c || r.charAt(u) !== gr3 || r.charAt(u + 1) !== ro2)) {
        for (h2 = c, o += c + gr3 + ro2, u = o.length, c = ""; u < i && (f2 = r.charAt(u), !(f2 !== Xr3 && f2 !== Jr3 && f2 !== We3)); )
          o += f2, u++;
        if (f2 = r.charAt(u), c = "", s = o, f2 === to2) {
          for (u++; u < i && (f2 = r.charAt(u), !!Qt3(f2)); )
            c += f2, u++;
          if (f2 = r.charAt(u), f2 === Qt3.delimiter)
            o += to2 + c + f2, u++;
          else {
            if (a)
              return;
            u -= c.length + 1, c = "";
          }
        }
        if (!c) {
          for (; u < i && (f2 = r.charAt(u), !!Nd(f2)); )
            c += f2, u++;
          o += c;
        }
        if (c) {
          for (p = c, c = ""; u < i && (f2 = r.charAt(u), !(f2 !== Xr3 && f2 !== Jr3 && f2 !== We3)); )
            c += f2, u++;
          if (f2 = r.charAt(u), D = null, f2 === Za ? D = Za : f2 === eo2 ? D = eo2 : f2 === Pd && (D = Ld), !D)
            c = "", u = o.length;
          else if (c) {
            for (o += c + f2, u = o.length, c = ""; u < i && (f2 = r.charAt(u), f2 !== D); ) {
              if (f2 === We3) {
                if (u++, f2 = r.charAt(u), f2 === We3 || f2 === D)
                  return;
                c += We3;
              }
              c += f2, u++;
            }
            if (f2 = r.charAt(u), f2 !== D)
              return;
            l = o, o += c + f2, u++, d = c, c = "";
          } else
            return;
          for (; u < i && (f2 = r.charAt(u), !(f2 !== Xr3 && f2 !== Jr3)); )
            o += f2, u++;
          if (f2 = r.charAt(u), !f2 || f2 === We3)
            return t8 ? true : (s = e(s).test().end, p = n.decode.raw(n.unescape(p), s, { nonTerminated: false }), d && (l = e(l).test().end, d = n.decode.raw(n.unescape(d), l)), e(o)({ type: "definition", identifier: _d(h2), label: h2, title: d || null, url: p }));
        }
      }
    }
  }
  function Qt3(e) {
    return e !== no2 && e !== Zt3 && e !== gr3;
  }
  Qt3.delimiter = no2;
  function Nd(e) {
    return e !== Zt3 && e !== gr3 && !Sd(e);
  }
});
var so2 = C((zv, oo3) => {
  "use strict";
  var Rd = ne4();
  oo3.exports = Hd;
  var Ud = "	", Qr2 = `
`, zd = " ", Md = "-", Yd = ":", Vd = "\\", en2 = "|", Gd = 1, $d = 2, ao3 = "left", jd = "center", Wd = "right";
  function Hd(e, r, t8) {
    var n = this, a, u, i, o, s, l, c, f2, D, h2, p, d, m, F3, y2, v3, B, b2, g, A3, x3, E2;
    if (n.options.gfm) {
      for (a = 0, v3 = 0, l = r.length + 1, c = []; a < l; ) {
        if (A3 = r.indexOf(Qr2, a), x3 = r.indexOf(en2, a + 1), A3 === -1 && (A3 = r.length), x3 === -1 || x3 > A3) {
          if (v3 < $d)
            return;
          break;
        }
        c.push(r.slice(a, A3)), v3++, a = A3 + 1;
      }
      for (o = c.join(Qr2), u = c.splice(1, 1)[0] || [], a = 0, l = u.length, v3--, i = false, p = []; a < l; ) {
        if (D = u.charAt(a), D === en2) {
          if (h2 = null, i === false) {
            if (E2 === false)
              return;
          } else
            p.push(i), i = false;
          E2 = false;
        } else if (D === Md)
          h2 = true, i = i || null;
        else if (D === Yd)
          i === ao3 ? i = jd : h2 && i === null ? i = Wd : i = ao3;
        else if (!Rd(D))
          return;
        a++;
      }
      if (i !== false && p.push(i), !(p.length < Gd)) {
        if (t8)
          return true;
        for (y2 = -1, b2 = [], g = e(o).reset({ type: "table", align: p, children: b2 }); ++y2 < v3; ) {
          for (B = c[y2], s = { type: "tableRow", children: [] }, y2 && e(Qr2), e(B).reset(s, g), l = B.length + 1, a = 0, f2 = "", d = "", m = true; a < l; ) {
            if (D = B.charAt(a), D === Ud || D === zd) {
              d ? f2 += D : e(D), a++;
              continue;
            }
            D === "" || D === en2 ? m ? e(D) : ((d || D) && !m && (o = d, f2.length > 1 && (D ? (o += f2.slice(0, -1), f2 = f2.charAt(f2.length - 1)) : (o += f2, f2 = "")), F3 = e.now(), e(o)({ type: "tableCell", children: n.tokenizeInline(d, F3) }, s)), e(f2 + D), f2 = "", d = "") : (f2 && (d += f2, f2 = ""), d += D, D === Vd && a !== l - 2 && (d += B.charAt(a + 1), a++)), m = false, a++;
          }
          y2 || e(Qr2 + u);
        }
        return g;
      }
    }
  }
});
var fo3 = C((Mv, lo3) => {
  "use strict";
  var Kd = Ie3(), Xd = zt3(), Jd = Hr3();
  lo3.exports = e0;
  var Qd = "	", vr3 = `
`, Zd = " ", co2 = 4;
  function e0(e, r, t8) {
    for (var n = this, a = n.options, u = a.commonmark, i = n.blockTokenizers, o = n.interruptParagraph, s = r.indexOf(vr3), l = r.length, c, f2, D, h2, p; s < l; ) {
      if (s === -1) {
        s = l;
        break;
      }
      if (r.charAt(s + 1) === vr3)
        break;
      if (u) {
        for (h2 = 0, c = s + 1; c < l; ) {
          if (D = r.charAt(c), D === Qd) {
            h2 = co2;
            break;
          } else if (D === Zd)
            h2++;
          else
            break;
          c++;
        }
        if (h2 >= co2 && D !== vr3) {
          s = r.indexOf(vr3, s + 1);
          continue;
        }
      }
      if (f2 = r.slice(s + 1), Jd(o, i, n, [e, f2, true]))
        break;
      if (c = s, s = r.indexOf(vr3, s + 1), s !== -1 && Kd(r.slice(c, s)) === "") {
        s = c;
        break;
      }
    }
    return f2 = r.slice(0, s), t8 ? true : (p = e.now(), f2 = Xd(f2), e(f2)({ type: "paragraph", children: n.tokenizeInline(f2, p) }));
  }
});
var po3 = C((Yv, Do3) => {
  "use strict";
  Do3.exports = r0;
  function r0(e, r) {
    return e.indexOf("\\", r);
  }
});
var go2 = C((Vv, Fo2) => {
  "use strict";
  var t0 = po3();
  Fo2.exports = mo3;
  mo3.locator = t0;
  var n0 = `
`, ho2 = "\\";
  function mo3(e, r, t8) {
    var n = this, a, u;
    if (r.charAt(0) === ho2 && (a = r.charAt(1), n.escape.indexOf(a) !== -1))
      return t8 ? true : (a === n0 ? u = { type: "break" } : u = { type: "text", value: a }, e(ho2 + a)(u));
  }
});
var rn3 = C((Gv, vo3) => {
  "use strict";
  vo3.exports = u0;
  function u0(e, r) {
    return e.indexOf("<", r);
  }
});
var Ao2 = C(($v, yo2) => {
  "use strict";
  var Eo3 = ne4(), i0 = pr3(), a0 = rn3();
  yo2.exports = an3;
  an3.locator = a0;
  an3.notInLink = true;
  var Co3 = "<", tn3 = ">", bo3 = "@", nn3 = "/", un3 = "mailto:", Zr3 = un3.length;
  function an3(e, r, t8) {
    var n = this, a = "", u = r.length, i = 0, o = "", s = false, l = "", c, f2, D, h2, p;
    if (r.charAt(0) === Co3) {
      for (i++, a = Co3; i < u && (c = r.charAt(i), !(Eo3(c) || c === tn3 || c === bo3 || c === ":" && r.charAt(i + 1) === nn3)); )
        o += c, i++;
      if (o) {
        if (l += o, o = "", c = r.charAt(i), l += c, i++, c === bo3)
          s = true;
        else {
          if (c !== ":" || r.charAt(i + 1) !== nn3)
            return;
          l += nn3, i++;
        }
        for (; i < u && (c = r.charAt(i), !(Eo3(c) || c === tn3)); )
          o += c, i++;
        if (c = r.charAt(i), !(!o || c !== tn3))
          return t8 ? true : (l += o, D = l, a += l + c, f2 = e.now(), f2.column++, f2.offset++, s && (l.slice(0, Zr3).toLowerCase() === un3 ? (D = D.slice(Zr3), f2.column += Zr3, f2.offset += Zr3) : l = un3 + l), h2 = n.inlineTokenizers, n.inlineTokenizers = { text: h2.text }, p = n.enterLink(), D = n.tokenizeInline(D, f2), n.inlineTokenizers = h2, p(), e(a)({ type: "link", title: null, url: i0(l, { nonTerminated: false }), children: D }));
      }
    }
  }
});
var ko3 = C((jv, xo3) => {
  "use strict";
  xo3.exports = o0;
  function o0(e, r) {
    var t8 = String(e), n = 0, a;
    if (typeof r != "string")
      throw new Error("Expected character");
    for (a = t8.indexOf(r); a !== -1; )
      n++, a = t8.indexOf(r, a + r.length);
    return n;
  }
});
var qo2 = C((Wv, Bo2) => {
  "use strict";
  Bo2.exports = s0;
  var wo3 = ["www.", "http://", "https://"];
  function s0(e, r) {
    var t8 = -1, n, a, u;
    if (!this.options.gfm)
      return t8;
    for (a = wo3.length, n = -1; ++n < a; )
      u = e.indexOf(wo3[n], r), u !== -1 && (t8 === -1 || u < t8) && (t8 = u);
    return t8;
  }
});
var Po2 = C((Hv, Oo2) => {
  "use strict";
  var To3 = ko3(), c0 = pr3(), l0 = Le3(), on3 = Ye3(), f0 = ne4(), D0 = qo2();
  Oo2.exports = cn3;
  cn3.locator = D0;
  cn3.notInLink = true;
  var p0 = 33, d0 = 38, h0 = 41, m0 = 42, F0 = 44, g0 = 45, sn3 = 46, v0 = 58, E0 = 59, C0 = 63, b0 = 60, So3 = 95, y0 = 126, A0 = "(", _o3 = ")";
  function cn3(e, r, t8) {
    var n = this, a = n.options.gfm, u = n.inlineTokenizers, i = r.length, o = -1, s = false, l, c, f2, D, h2, p, d, m, F3, y2, v3, B, b2, g;
    if (a) {
      if (r.slice(0, 4) === "www.")
        s = true, D = 4;
      else if (r.slice(0, 7).toLowerCase() === "http://")
        D = 7;
      else if (r.slice(0, 8).toLowerCase() === "https://")
        D = 8;
      else
        return;
      for (o = D - 1, f2 = D, l = []; D < i; ) {
        if (d = r.charCodeAt(D), d === sn3) {
          if (o === D - 1)
            break;
          l.push(D), o = D, D++;
          continue;
        }
        if (l0(d) || on3(d) || d === g0 || d === So3) {
          D++;
          continue;
        }
        break;
      }
      if (d === sn3 && (l.pop(), D--), l[0] !== void 0 && (c = l.length < 2 ? f2 : l[l.length - 2] + 1, r.slice(c, D).indexOf("_") === -1)) {
        if (t8)
          return true;
        for (m = D, h2 = D; D < i && (d = r.charCodeAt(D), !(f0(d) || d === b0)); )
          D++, d === p0 || d === m0 || d === F0 || d === sn3 || d === v0 || d === C0 || d === So3 || d === y0 || (m = D);
        if (D = m, r.charCodeAt(D - 1) === h0)
          for (p = r.slice(h2, D), F3 = To3(p, A0), y2 = To3(p, _o3); y2 > F3; )
            D = h2 + p.lastIndexOf(_o3), p = r.slice(h2, D), y2--;
        if (r.charCodeAt(D - 1) === E0 && (D--, on3(r.charCodeAt(D - 1)))) {
          for (m = D - 2; on3(r.charCodeAt(m)); )
            m--;
          r.charCodeAt(m) === d0 && (D = m);
        }
        return v3 = r.slice(0, D), b2 = c0(v3, { nonTerminated: false }), s && (b2 = "http://" + b2), g = n.enterLink(), n.inlineTokenizers = { text: u.text }, B = n.tokenizeInline(v3, e.now()), n.inlineTokenizers = u, g(), e(v3)({ type: "link", title: null, url: b2, children: B });
      }
    }
  }
});
var Ro2 = C((Kv, No2) => {
  "use strict";
  var x0 = Le3(), k0 = Ye3(), w0 = 43, B0 = 45, q0 = 46, T0 = 95;
  No2.exports = Io;
  function Io(e, r) {
    var t8 = this, n, a;
    if (!this.options.gfm || (n = e.indexOf("@", r), n === -1))
      return -1;
    if (a = n, a === r || !Lo3(e.charCodeAt(a - 1)))
      return Io.call(t8, e, n + 1);
    for (; a > r && Lo3(e.charCodeAt(a - 1)); )
      a--;
    return a;
  }
  function Lo3(e) {
    return x0(e) || k0(e) || e === w0 || e === B0 || e === q0 || e === T0;
  }
});
var Yo2 = C((Xv, Mo2) => {
  "use strict";
  var S0 = pr3(), Uo2 = Le3(), zo2 = Ye3(), _0 = Ro2();
  Mo2.exports = Dn3;
  Dn3.locator = _0;
  Dn3.notInLink = true;
  var O0 = 43, ln3 = 45, et3 = 46, P0 = 64, fn3 = 95;
  function Dn3(e, r, t8) {
    var n = this, a = n.options.gfm, u = n.inlineTokenizers, i = 0, o = r.length, s = -1, l, c, f2, D;
    if (a) {
      for (l = r.charCodeAt(i); Uo2(l) || zo2(l) || l === O0 || l === ln3 || l === et3 || l === fn3; )
        l = r.charCodeAt(++i);
      if (i !== 0 && l === P0) {
        for (i++; i < o; ) {
          if (l = r.charCodeAt(i), Uo2(l) || zo2(l) || l === ln3 || l === et3 || l === fn3) {
            i++, s === -1 && l === et3 && (s = i);
            continue;
          }
          break;
        }
        if (!(s === -1 || s === i || l === ln3 || l === fn3))
          return l === et3 && i--, c = r.slice(0, i), t8 ? true : (D = n.enterLink(), n.inlineTokenizers = { text: u.text }, f2 = n.tokenizeInline(c, e.now()), n.inlineTokenizers = u, D(), e(c)({ type: "link", title: null, url: "mailto:" + S0(c, { nonTerminated: false }), children: f2 }));
      }
    }
  }
});
var $o2 = C((Jv, Go2) => {
  "use strict";
  var L0 = Ye3(), I0 = rn3(), N0 = Xt3().tag;
  Go2.exports = Vo2;
  Vo2.locator = I0;
  var R0 = "<", U0 = "?", z0 = "!", M0 = "/", Y0 = /^<a /i, V0 = /^<\/a>/i;
  function Vo2(e, r, t8) {
    var n = this, a = r.length, u, i;
    if (!(r.charAt(0) !== R0 || a < 3) && (u = r.charAt(1), !(!L0(u) && u !== U0 && u !== z0 && u !== M0) && (i = r.match(N0), !!i)))
      return t8 ? true : (i = i[0], !n.inLink && Y0.test(i) ? n.inLink = true : n.inLink && V0.test(i) && (n.inLink = false), e(i)({ type: "html", value: i }));
  }
});
var pn3 = C((Qv, jo2) => {
  "use strict";
  jo2.exports = G0;
  function G0(e, r) {
    var t8 = e.indexOf("[", r), n = e.indexOf("![", r);
    return n === -1 || t8 < n ? t8 : n;
  }
});
var Zo2 = C((Zv, Qo2) => {
  "use strict";
  var Er3 = ne4(), $0 = pn3();
  Qo2.exports = Jo2;
  Jo2.locator = $0;
  var j0 = `
`, W0 = "!", Wo2 = '"', Ho2 = "'", He2 = "(", Cr3 = ")", dn3 = "<", hn3 = ">", Ko2 = "[", br3 = "\\", H0 = "]", Xo2 = "`";
  function Jo2(e, r, t8) {
    var n = this, a = "", u = 0, i = r.charAt(0), o = n.options.pedantic, s = n.options.commonmark, l = n.options.gfm, c, f2, D, h2, p, d, m, F3, y2, v3, B, b2, g, A3, x3, E2, k3, w3;
    if (i === W0 && (F3 = true, a = i, i = r.charAt(++u)), i === Ko2 && !(!F3 && n.inLink)) {
      for (a += i, A3 = "", u++, B = r.length, E2 = e.now(), g = 0, E2.column += u, E2.offset += u; u < B; ) {
        if (i = r.charAt(u), d = i, i === Xo2) {
          for (f2 = 1; r.charAt(u + 1) === Xo2; )
            d += i, u++, f2++;
          D ? f2 >= D && (D = 0) : D = f2;
        } else if (i === br3)
          u++, d += r.charAt(u);
        else if ((!D || l) && i === Ko2)
          g++;
        else if ((!D || l) && i === H0)
          if (g)
            g--;
          else {
            if (r.charAt(u + 1) !== He2)
              return;
            d += He2, c = true, u++;
            break;
          }
        A3 += d, d = "", u++;
      }
      if (c) {
        for (y2 = A3, a += A3 + d, u++; u < B && (i = r.charAt(u), !!Er3(i)); )
          a += i, u++;
        if (i = r.charAt(u), A3 = "", h2 = a, i === dn3) {
          for (u++, h2 += dn3; u < B && (i = r.charAt(u), i !== hn3); ) {
            if (s && i === j0)
              return;
            A3 += i, u++;
          }
          if (r.charAt(u) !== hn3)
            return;
          a += dn3 + A3 + hn3, x3 = A3, u++;
        } else {
          for (i = null, d = ""; u < B && (i = r.charAt(u), !(d && (i === Wo2 || i === Ho2 || s && i === He2))); ) {
            if (Er3(i)) {
              if (!o)
                break;
              d += i;
            } else {
              if (i === He2)
                g++;
              else if (i === Cr3) {
                if (g === 0)
                  break;
                g--;
              }
              A3 += d, d = "", i === br3 && (A3 += br3, i = r.charAt(++u)), A3 += i;
            }
            u++;
          }
          a += A3, x3 = A3, u = a.length;
        }
        for (A3 = ""; u < B && (i = r.charAt(u), !!Er3(i)); )
          A3 += i, u++;
        if (i = r.charAt(u), a += A3, A3 && (i === Wo2 || i === Ho2 || s && i === He2))
          if (u++, a += i, A3 = "", v3 = i === He2 ? Cr3 : i, p = a, s) {
            for (; u < B && (i = r.charAt(u), i !== v3); )
              i === br3 && (A3 += br3, i = r.charAt(++u)), u++, A3 += i;
            if (i = r.charAt(u), i !== v3)
              return;
            for (b2 = A3, a += A3 + i, u++; u < B && (i = r.charAt(u), !!Er3(i)); )
              a += i, u++;
          } else
            for (d = ""; u < B; ) {
              if (i = r.charAt(u), i === v3)
                m && (A3 += v3 + d, d = ""), m = true;
              else if (!m)
                A3 += i;
              else if (i === Cr3) {
                a += A3 + v3 + d, b2 = A3;
                break;
              } else
                Er3(i) ? d += i : (A3 += v3 + d + i, d = "", m = false);
              u++;
            }
        if (r.charAt(u) === Cr3)
          return t8 ? true : (a += Cr3, x3 = n.decode.raw(n.unescape(x3), e(h2).test().end, { nonTerminated: false }), b2 && (p = e(p).test().end, b2 = n.decode.raw(n.unescape(b2), p)), w3 = { type: F3 ? "image" : "link", title: b2 || null, url: x3 }, F3 ? w3.alt = n.decode.raw(n.unescape(y2), E2) || null : (k3 = n.enterLink(), w3.children = n.tokenizeInline(y2, E2), k3()), e(a)(w3));
      }
    }
  }
});
var ts2 = C((eE, rs2) => {
  "use strict";
  var K0 = ne4(), X0 = pn3(), J0 = Jt3();
  rs2.exports = es2;
  es2.locator = X0;
  var mn3 = "link", Q0 = "image", Z0 = "shortcut", eh = "collapsed", Fn3 = "full", rh = "!", rt3 = "[", tt3 = "\\", nt3 = "]";
  function es2(e, r, t8) {
    var n = this, a = n.options.commonmark, u = r.charAt(0), i = 0, o = r.length, s = "", l = "", c = mn3, f2 = Z0, D, h2, p, d, m, F3, y2, v3;
    if (u === rh && (c = Q0, l = u, u = r.charAt(++i)), u === rt3) {
      for (i++, l += u, F3 = "", v3 = 0; i < o; ) {
        if (u = r.charAt(i), u === rt3)
          y2 = true, v3++;
        else if (u === nt3) {
          if (!v3)
            break;
          v3--;
        }
        u === tt3 && (F3 += tt3, u = r.charAt(++i)), F3 += u, i++;
      }
      if (s = F3, D = F3, u = r.charAt(i), u === nt3) {
        if (i++, s += u, F3 = "", !a)
          for (; i < o && (u = r.charAt(i), !!K0(u)); )
            F3 += u, i++;
        if (u = r.charAt(i), u === rt3) {
          for (h2 = "", F3 += u, i++; i < o && (u = r.charAt(i), !(u === rt3 || u === nt3)); )
            u === tt3 && (h2 += tt3, u = r.charAt(++i)), h2 += u, i++;
          u = r.charAt(i), u === nt3 ? (f2 = h2 ? Fn3 : eh, F3 += h2 + u, i++) : h2 = "", s += F3, F3 = "";
        } else {
          if (!D)
            return;
          h2 = D;
        }
        if (!(f2 !== Fn3 && y2))
          return s = l + s, c === mn3 && n.inLink ? null : t8 ? true : (p = e.now(), p.column += l.length, p.offset += l.length, h2 = f2 === Fn3 ? h2 : D, d = { type: c + "Reference", identifier: J0(h2), label: h2, referenceType: f2 }, c === mn3 ? (m = n.enterLink(), d.children = n.tokenizeInline(D, p), m()) : d.alt = n.decode.raw(n.unescape(D), p) || null, e(s)(d));
      }
    }
  }
});
var us2 = C((rE, ns2) => {
  "use strict";
  ns2.exports = th;
  function th(e, r) {
    var t8 = e.indexOf("**", r), n = e.indexOf("__", r);
    return n === -1 ? t8 : t8 === -1 || n < t8 ? n : t8;
  }
});
var ss2 = C((tE, os2) => {
  "use strict";
  var nh = Ie3(), is5 = ne4(), uh = us2();
  os2.exports = as2;
  as2.locator = uh;
  var ih = "\\", ah = "*", oh = "_";
  function as2(e, r, t8) {
    var n = this, a = 0, u = r.charAt(a), i, o, s, l, c, f2, D;
    if (!(u !== ah && u !== oh || r.charAt(++a) !== u) && (o = n.options.pedantic, s = u, c = s + s, f2 = r.length, a++, l = "", u = "", !(o && is5(r.charAt(a)))))
      for (; a < f2; ) {
        if (D = u, u = r.charAt(a), u === s && r.charAt(a + 1) === s && (!o || !is5(D)) && (u = r.charAt(a + 2), u !== s))
          return nh(l) ? t8 ? true : (i = e.now(), i.column += 2, i.offset += 2, e(c + l + c)({ type: "strong", children: n.tokenizeInline(l, i) })) : void 0;
        !o && u === ih && (l += u, u = r.charAt(++a)), l += u, a++;
      }
  }
});
var ls2 = C((nE, cs2) => {
  "use strict";
  cs2.exports = lh;
  var sh = String.fromCharCode, ch = /\w/;
  function lh(e) {
    return ch.test(typeof e == "number" ? sh(e) : e.charAt(0));
  }
});
var Ds2 = C((uE, fs) => {
  "use strict";
  fs.exports = fh;
  function fh(e, r) {
    var t8 = e.indexOf("*", r), n = e.indexOf("_", r);
    return n === -1 ? t8 : t8 === -1 || n < t8 ? n : t8;
  }
});
var Fs2 = C((iE, ms2) => {
  "use strict";
  var Dh = Ie3(), ph = ls2(), ps2 = ne4(), dh = Ds2();
  ms2.exports = hs2;
  hs2.locator = dh;
  var hh = "*", ds2 = "_", mh = "\\";
  function hs2(e, r, t8) {
    var n = this, a = 0, u = r.charAt(a), i, o, s, l, c, f2, D;
    if (!(u !== hh && u !== ds2) && (o = n.options.pedantic, c = u, s = u, f2 = r.length, a++, l = "", u = "", !(o && ps2(r.charAt(a)))))
      for (; a < f2; ) {
        if (D = u, u = r.charAt(a), u === s && (!o || !ps2(D))) {
          if (u = r.charAt(++a), u !== s) {
            if (!Dh(l) || D === s)
              return;
            if (!o && s === ds2 && ph(u)) {
              l += s;
              continue;
            }
            return t8 ? true : (i = e.now(), i.column++, i.offset++, e(c + l + s)({ type: "emphasis", children: n.tokenizeInline(l, i) }));
          }
          l += s;
        }
        !o && u === mh && (l += u, u = r.charAt(++a)), l += u, a++;
      }
  }
});
var vs2 = C((aE, gs2) => {
  "use strict";
  gs2.exports = Fh;
  function Fh(e, r) {
    return e.indexOf("~~", r);
  }
});
var As2 = C((oE, ys2) => {
  "use strict";
  var Es2 = ne4(), gh = vs2();
  ys2.exports = bs;
  bs.locator = gh;
  var ut3 = "~", Cs2 = "~~";
  function bs(e, r, t8) {
    var n = this, a = "", u = "", i = "", o = "", s, l, c;
    if (!(!n.options.gfm || r.charAt(0) !== ut3 || r.charAt(1) !== ut3 || Es2(r.charAt(2))))
      for (s = 1, l = r.length, c = e.now(), c.column += 2, c.offset += 2; ++s < l; ) {
        if (a = r.charAt(s), a === ut3 && u === ut3 && (!i || !Es2(i)))
          return t8 ? true : e(Cs2 + o + Cs2)({ type: "delete", children: n.tokenizeInline(o, c) });
        o += u, i = u, u = a;
      }
  }
});
var ks = C((sE, xs) => {
  "use strict";
  xs.exports = vh;
  function vh(e, r) {
    return e.indexOf("`", r);
  }
});
var qs2 = C((cE, Bs) => {
  "use strict";
  var Eh = ks();
  Bs.exports = ws2;
  ws2.locator = Eh;
  var gn3 = 10, vn2 = 32, En3 = 96;
  function ws2(e, r, t8) {
    for (var n = r.length, a = 0, u, i, o, s, l, c; a < n && r.charCodeAt(a) === En3; )
      a++;
    if (!(a === 0 || a === n)) {
      for (u = a, l = r.charCodeAt(a); a < n; ) {
        if (s = l, l = r.charCodeAt(a + 1), s === En3) {
          if (i === void 0 && (i = a), o = a + 1, l !== En3 && o - i === u) {
            c = true;
            break;
          }
        } else
          i !== void 0 && (i = void 0, o = void 0);
        a++;
      }
      if (c) {
        if (t8)
          return true;
        if (a = u, n = i, s = r.charCodeAt(a), l = r.charCodeAt(n - 1), c = false, n - a > 2 && (s === vn2 || s === gn3) && (l === vn2 || l === gn3)) {
          for (a++, n--; a < n; ) {
            if (s = r.charCodeAt(a), s !== vn2 && s !== gn3) {
              c = true;
              break;
            }
            a++;
          }
          c === true && (u++, i--);
        }
        return e(r.slice(0, o))({ type: "inlineCode", value: r.slice(u, i) });
      }
    }
  }
});
var Ss2 = C((lE, Ts) => {
  "use strict";
  Ts.exports = Ch;
  function Ch(e, r) {
    for (var t8 = e.indexOf(`
`, r); t8 > r && e.charAt(t8 - 1) === " "; )
      t8--;
    return t8;
  }
});
var Ps2 = C((fE, Os) => {
  "use strict";
  var bh = Ss2();
  Os.exports = _s2;
  _s2.locator = bh;
  var yh = " ", Ah = `
`, xh2 = 2;
  function _s2(e, r, t8) {
    for (var n = r.length, a = -1, u = "", i; ++a < n; ) {
      if (i = r.charAt(a), i === Ah)
        return a < xh2 ? void 0 : t8 ? true : (u += i, e(u)({ type: "break" }));
      if (i !== yh)
        return;
      u += i;
    }
  }
});
var Is2 = C((DE, Ls2) => {
  "use strict";
  Ls2.exports = kh;
  function kh(e, r, t8) {
    var n = this, a, u, i, o, s, l, c, f2, D, h2;
    if (t8)
      return true;
    for (a = n.inlineMethods, o = a.length, u = n.inlineTokenizers, i = -1, D = r.length; ++i < o; )
      f2 = a[i], !(f2 === "text" || !u[f2]) && (c = u[f2].locator, c || e.file.fail("Missing locator: `" + f2 + "`"), l = c.call(n, r, 1), l !== -1 && l < D && (D = l));
    s = r.slice(0, D), h2 = e.now(), n.decode(s, h2, p);
    function p(d, m, F3) {
      e(F3 || d)({ type: "text", value: d });
    }
  }
});
var zs2 = C((pE, Us2) => {
  "use strict";
  var wh = Pe3(), it3 = ti3(), Bh = ui3(), qh = ai2(), Th = Pi2(), Cn3 = Ni2();
  Us2.exports = Ns2;
  function Ns2(e, r) {
    this.file = r, this.offset = {}, this.options = wh(this.options), this.setOptions({}), this.inList = false, this.inBlock = false, this.inLink = false, this.atStart = true, this.toOffset = Bh(r).toOffset, this.unescape = qh(this, "escape"), this.decode = Th(this);
  }
  var U3 = Ns2.prototype;
  U3.setOptions = $i2();
  U3.parse = oa2();
  U3.options = Nt3();
  U3.exitStart = it3("atStart", true);
  U3.enterList = it3("inList", false);
  U3.enterLink = it3("inLink", false);
  U3.enterBlock = it3("inBlock", false);
  U3.interruptParagraph = [["thematicBreak"], ["list"], ["atxHeading"], ["fencedCode"], ["blockquote"], ["html"], ["setextHeading", { commonmark: false }], ["definition", { commonmark: false }]];
  U3.interruptList = [["atxHeading", { pedantic: false }], ["fencedCode", { pedantic: false }], ["thematicBreak", { pedantic: false }], ["definition", { commonmark: false }]];
  U3.interruptBlockquote = [["indentedCode", { commonmark: true }], ["fencedCode", { commonmark: true }], ["atxHeading", { commonmark: true }], ["setextHeading", { commonmark: true }], ["thematicBreak", { commonmark: true }], ["html", { commonmark: true }], ["list", { commonmark: true }], ["definition", { commonmark: false }]];
  U3.blockTokenizers = { blankLine: ca2(), indentedCode: da2(), fencedCode: Fa2(), blockquote: ya2(), atxHeading: ka2(), thematicBreak: qa2(), list: za(), setextHeading: Ga(), html: Xa(), definition: io2(), table: so2(), paragraph: fo3() };
  U3.inlineTokenizers = { escape: go2(), autoLink: Ao2(), url: Po2(), email: Yo2(), html: $o2(), link: Zo2(), reference: ts2(), strong: ss2(), emphasis: Fs2(), deletion: As2(), code: qs2(), break: Ps2(), text: Is2() };
  U3.blockMethods = Rs(U3.blockTokenizers);
  U3.inlineMethods = Rs(U3.inlineTokenizers);
  U3.tokenizeBlock = Cn3("block");
  U3.tokenizeInline = Cn3("inline");
  U3.tokenizeFactory = Cn3;
  function Rs(e) {
    var r = [], t8;
    for (t8 in e)
      r.push(t8);
    return r;
  }
});
var Gs2 = C((dE, Vs2) => {
  "use strict";
  var Sh = ei3(), _h = Pe3(), Ms2 = zs2();
  Vs2.exports = Ys2;
  Ys2.Parser = Ms2;
  function Ys2(e) {
    var r = this.data("settings"), t8 = Sh(Ms2);
    t8.prototype.options = _h(t8.prototype.options, r, e), this.Parser = t8;
  }
});
var js2 = C((hE, $s) => {
  "use strict";
  $s.exports = Oh;
  function Oh(e) {
    if (e)
      throw e;
  }
});
var bn3 = C((mE, Ws2) => {
  Ws2.exports = function(r) {
    return r != null && r.constructor != null && typeof r.constructor.isBuffer == "function" && r.constructor.isBuffer(r);
  };
});
var tc = C((FE, rc) => {
  "use strict";
  var at3 = Object.prototype.hasOwnProperty, ec = Object.prototype.toString, Hs2 = Object.defineProperty, Ks2 = Object.getOwnPropertyDescriptor, Xs = function(r) {
    return typeof Array.isArray == "function" ? Array.isArray(r) : ec.call(r) === "[object Array]";
  }, Js2 = function(r) {
    if (!r || ec.call(r) !== "[object Object]")
      return false;
    var t8 = at3.call(r, "constructor"), n = r.constructor && r.constructor.prototype && at3.call(r.constructor.prototype, "isPrototypeOf");
    if (r.constructor && !t8 && !n)
      return false;
    var a;
    for (a in r)
      ;
    return typeof a > "u" || at3.call(r, a);
  }, Qs2 = function(r, t8) {
    Hs2 && t8.name === "__proto__" ? Hs2(r, t8.name, { enumerable: true, configurable: true, value: t8.newValue, writable: true }) : r[t8.name] = t8.newValue;
  }, Zs2 = function(r, t8) {
    if (t8 === "__proto__")
      if (at3.call(r, t8)) {
        if (Ks2)
          return Ks2(r, t8).value;
      } else
        return;
    return r[t8];
  };
  rc.exports = function e() {
    var r, t8, n, a, u, i, o = arguments[0], s = 1, l = arguments.length, c = false;
    for (typeof o == "boolean" && (c = o, o = arguments[1] || {}, s = 2), (o == null || typeof o != "object" && typeof o != "function") && (o = {}); s < l; ++s)
      if (r = arguments[s], r != null)
        for (t8 in r)
          n = Zs2(o, t8), a = Zs2(r, t8), o !== a && (c && a && (Js2(a) || (u = Xs(a))) ? (u ? (u = false, i = n && Xs(n) ? n : []) : i = n && Js2(n) ? n : {}, Qs2(o, { name: t8, newValue: e(c, i, a) })) : typeof a < "u" && Qs2(o, { name: t8, newValue: a }));
    return o;
  };
});
var uc = C((gE, nc) => {
  "use strict";
  nc.exports = (e) => {
    if (Object.prototype.toString.call(e) !== "[object Object]")
      return false;
    let r = Object.getPrototypeOf(e);
    return r === null || r === Object.prototype;
  };
});
var ac = C((vE, ic) => {
  "use strict";
  var Ph = [].slice;
  ic.exports = Lh;
  function Lh(e, r) {
    var t8;
    return n;
    function n() {
      var i = Ph.call(arguments, 0), o = e.length > i.length, s;
      o && i.push(a);
      try {
        s = e.apply(null, i);
      } catch (l) {
        if (o && t8)
          throw l;
        return a(l);
      }
      o || (s && typeof s.then == "function" ? s.then(u, a) : s instanceof Error ? a(s) : u(s));
    }
    function a() {
      t8 || (t8 = true, r.apply(null, arguments));
    }
    function u(i) {
      a(null, i);
    }
  }
});
var fc = C((EE, lc) => {
  "use strict";
  var sc = ac();
  lc.exports = cc;
  cc.wrap = sc;
  var oc = [].slice;
  function cc() {
    var e = [], r = {};
    return r.run = t8, r.use = n, r;
    function t8() {
      var a = -1, u = oc.call(arguments, 0, -1), i = arguments[arguments.length - 1];
      if (typeof i != "function")
        throw new Error("Expected function as last argument, not " + i);
      o.apply(null, [null].concat(u));
      function o(s) {
        var l = e[++a], c = oc.call(arguments, 0), f2 = c.slice(1), D = u.length, h2 = -1;
        if (s) {
          i(s);
          return;
        }
        for (; ++h2 < D; )
          (f2[h2] === null || f2[h2] === void 0) && (f2[h2] = u[h2]);
        u = f2, l ? sc(l, o).apply(null, u) : i.apply(null, [null].concat(u));
      }
    }
    function n(a) {
      if (typeof a != "function")
        throw new Error("Expected `fn` to be a function, not " + a);
      return e.push(a), r;
    }
  }
});
var hc = C((CE, dc) => {
  "use strict";
  var Ke2 = {}.hasOwnProperty;
  dc.exports = Ih;
  function Ih(e) {
    return !e || typeof e != "object" ? "" : Ke2.call(e, "position") || Ke2.call(e, "type") ? Dc(e.position) : Ke2.call(e, "start") || Ke2.call(e, "end") ? Dc(e) : Ke2.call(e, "line") || Ke2.call(e, "column") ? yn3(e) : "";
  }
  function yn3(e) {
    return (!e || typeof e != "object") && (e = {}), pc(e.line) + ":" + pc(e.column);
  }
  function Dc(e) {
    return (!e || typeof e != "object") && (e = {}), yn3(e.start) + "-" + yn3(e.end);
  }
  function pc(e) {
    return e && typeof e == "number" ? e : 1;
  }
});
var gc = C((bE, Fc) => {
  "use strict";
  var Nh = hc();
  Fc.exports = An3;
  function mc() {
  }
  mc.prototype = Error.prototype;
  An3.prototype = new mc();
  var xe3 = An3.prototype;
  xe3.file = "";
  xe3.name = "";
  xe3.reason = "";
  xe3.message = "";
  xe3.stack = "";
  xe3.fatal = null;
  xe3.column = null;
  xe3.line = null;
  function An3(e, r, t8) {
    var n, a, u;
    typeof r == "string" && (t8 = r, r = null), n = Rh(t8), a = Nh(r) || "1:1", u = { start: { line: null, column: null }, end: { line: null, column: null } }, r && r.position && (r = r.position), r && (r.start ? (u = r, r = r.start) : u.start = r), e.stack && (this.stack = e.stack, e = e.message), this.message = e, this.name = a, this.reason = e, this.line = r ? r.line : null, this.column = r ? r.column : null, this.location = u, this.source = n[0], this.ruleId = n[1];
  }
  function Rh(e) {
    var r = [null, null], t8;
    return typeof e == "string" && (t8 = e.indexOf(":"), t8 === -1 ? r[1] = e : (r[0] = e.slice(0, t8), r[1] = e.slice(t8 + 1))), r;
  }
});
var vc = C((Xe3) => {
  "use strict";
  Xe3.basename = Uh;
  Xe3.dirname = zh;
  Xe3.extname = Mh;
  Xe3.join = Yh;
  Xe3.sep = "/";
  function Uh(e, r) {
    var t8 = 0, n = -1, a, u, i, o;
    if (r !== void 0 && typeof r != "string")
      throw new TypeError('"ext" argument must be a string');
    if (yr3(e), a = e.length, r === void 0 || !r.length || r.length > e.length) {
      for (; a--; )
        if (e.charCodeAt(a) === 47) {
          if (i) {
            t8 = a + 1;
            break;
          }
        } else
          n < 0 && (i = true, n = a + 1);
      return n < 0 ? "" : e.slice(t8, n);
    }
    if (r === e)
      return "";
    for (u = -1, o = r.length - 1; a--; )
      if (e.charCodeAt(a) === 47) {
        if (i) {
          t8 = a + 1;
          break;
        }
      } else
        u < 0 && (i = true, u = a + 1), o > -1 && (e.charCodeAt(a) === r.charCodeAt(o--) ? o < 0 && (n = a) : (o = -1, n = u));
    return t8 === n ? n = u : n < 0 && (n = e.length), e.slice(t8, n);
  }
  function zh(e) {
    var r, t8, n;
    if (yr3(e), !e.length)
      return ".";
    for (r = -1, n = e.length; --n; )
      if (e.charCodeAt(n) === 47) {
        if (t8) {
          r = n;
          break;
        }
      } else
        t8 || (t8 = true);
    return r < 0 ? e.charCodeAt(0) === 47 ? "/" : "." : r === 1 && e.charCodeAt(0) === 47 ? "//" : e.slice(0, r);
  }
  function Mh(e) {
    var r = -1, t8 = 0, n = -1, a = 0, u, i, o;
    for (yr3(e), o = e.length; o--; ) {
      if (i = e.charCodeAt(o), i === 47) {
        if (u) {
          t8 = o + 1;
          break;
        }
        continue;
      }
      n < 0 && (u = true, n = o + 1), i === 46 ? r < 0 ? r = o : a !== 1 && (a = 1) : r > -1 && (a = -1);
    }
    return r < 0 || n < 0 || a === 0 || a === 1 && r === n - 1 && r === t8 + 1 ? "" : e.slice(r, n);
  }
  function Yh() {
    for (var e = -1, r; ++e < arguments.length; )
      yr3(arguments[e]), arguments[e] && (r = r === void 0 ? arguments[e] : r + "/" + arguments[e]);
    return r === void 0 ? "." : Vh(r);
  }
  function Vh(e) {
    var r, t8;
    return yr3(e), r = e.charCodeAt(0) === 47, t8 = Gh(e, !r), !t8.length && !r && (t8 = "."), t8.length && e.charCodeAt(e.length - 1) === 47 && (t8 += "/"), r ? "/" + t8 : t8;
  }
  function Gh(e, r) {
    for (var t8 = "", n = 0, a = -1, u = 0, i = -1, o, s; ++i <= e.length; ) {
      if (i < e.length)
        o = e.charCodeAt(i);
      else {
        if (o === 47)
          break;
        o = 47;
      }
      if (o === 47) {
        if (!(a === i - 1 || u === 1))
          if (a !== i - 1 && u === 2) {
            if (t8.length < 2 || n !== 2 || t8.charCodeAt(t8.length - 1) !== 46 || t8.charCodeAt(t8.length - 2) !== 46) {
              if (t8.length > 2) {
                if (s = t8.lastIndexOf("/"), s !== t8.length - 1) {
                  s < 0 ? (t8 = "", n = 0) : (t8 = t8.slice(0, s), n = t8.length - 1 - t8.lastIndexOf("/")), a = i, u = 0;
                  continue;
                }
              } else if (t8.length) {
                t8 = "", n = 0, a = i, u = 0;
                continue;
              }
            }
            r && (t8 = t8.length ? t8 + "/.." : "..", n = 2);
          } else
            t8.length ? t8 += "/" + e.slice(a + 1, i) : t8 = e.slice(a + 1, i), n = i - a - 1;
        a = i, u = 0;
      } else
        o === 46 && u > -1 ? u++ : u = -1;
    }
    return t8;
  }
  function yr3(e) {
    if (typeof e != "string")
      throw new TypeError("Path must be a string. Received " + JSON.stringify(e));
  }
});
var Cc = C((Ec) => {
  "use strict";
  Ec.cwd = $h;
  function $h() {
    return "/";
  }
});
var Ac = C((xE, yc) => {
  "use strict";
  var ue3 = vc(), jh = Cc(), Wh = bn3();
  yc.exports = he3;
  var Hh = {}.hasOwnProperty, xn3 = ["history", "path", "basename", "stem", "extname", "dirname"];
  he3.prototype.toString = im;
  Object.defineProperty(he3.prototype, "path", { get: Kh, set: Xh });
  Object.defineProperty(he3.prototype, "dirname", { get: Jh, set: Qh });
  Object.defineProperty(he3.prototype, "basename", { get: Zh, set: em });
  Object.defineProperty(he3.prototype, "extname", { get: rm, set: tm });
  Object.defineProperty(he3.prototype, "stem", { get: nm, set: um });
  function he3(e) {
    var r, t8;
    if (!e)
      e = {};
    else if (typeof e == "string" || Wh(e))
      e = { contents: e };
    else if ("message" in e && "messages" in e)
      return e;
    if (!(this instanceof he3))
      return new he3(e);
    for (this.data = {}, this.messages = [], this.history = [], this.cwd = jh.cwd(), t8 = -1; ++t8 < xn3.length; )
      r = xn3[t8], Hh.call(e, r) && (this[r] = e[r]);
    for (r in e)
      xn3.indexOf(r) < 0 && (this[r] = e[r]);
  }
  function Kh() {
    return this.history[this.history.length - 1];
  }
  function Xh(e) {
    wn2(e, "path"), this.path !== e && this.history.push(e);
  }
  function Jh() {
    return typeof this.path == "string" ? ue3.dirname(this.path) : void 0;
  }
  function Qh(e) {
    bc(this.path, "dirname"), this.path = ue3.join(e || "", this.basename);
  }
  function Zh() {
    return typeof this.path == "string" ? ue3.basename(this.path) : void 0;
  }
  function em(e) {
    wn2(e, "basename"), kn3(e, "basename"), this.path = ue3.join(this.dirname || "", e);
  }
  function rm() {
    return typeof this.path == "string" ? ue3.extname(this.path) : void 0;
  }
  function tm(e) {
    if (kn3(e, "extname"), bc(this.path, "extname"), e) {
      if (e.charCodeAt(0) !== 46)
        throw new Error("`extname` must start with `.`");
      if (e.indexOf(".", 1) > -1)
        throw new Error("`extname` cannot contain multiple dots");
    }
    this.path = ue3.join(this.dirname, this.stem + (e || ""));
  }
  function nm() {
    return typeof this.path == "string" ? ue3.basename(this.path, this.extname) : void 0;
  }
  function um(e) {
    wn2(e, "stem"), kn3(e, "stem"), this.path = ue3.join(this.dirname || "", e + (this.extname || ""));
  }
  function im(e) {
    return (this.contents || "").toString(e);
  }
  function kn3(e, r) {
    if (e && e.indexOf(ue3.sep) > -1)
      throw new Error("`" + r + "` cannot be a path: did not expect `" + ue3.sep + "`");
  }
  function wn2(e, r) {
    if (!e)
      throw new Error("`" + r + "` cannot be empty");
  }
  function bc(e, r) {
    if (!e)
      throw new Error("Setting `" + r + "` requires `path` to be set too");
  }
});
var kc = C((kE, xc) => {
  "use strict";
  var am = gc(), ot3 = Ac();
  xc.exports = ot3;
  ot3.prototype.message = om;
  ot3.prototype.info = cm;
  ot3.prototype.fail = sm;
  function om(e, r, t8) {
    var n = new am(e, r, t8);
    return this.path && (n.name = this.path + ":" + n.name, n.file = this.path), n.fatal = false, this.messages.push(n), n;
  }
  function sm() {
    var e = this.message.apply(this, arguments);
    throw e.fatal = true, e;
  }
  function cm() {
    var e = this.message.apply(this, arguments);
    return e.fatal = null, e;
  }
});
var Bc = C((wE, wc) => {
  "use strict";
  wc.exports = kc();
});
var Nc = C((BE, Ic) => {
  "use strict";
  var qc = js2(), lm = bn3(), st3 = tc(), Tc = uc(), Pc = fc(), Ar3 = Bc();
  Ic.exports = Lc().freeze();
  var fm = [].slice, Dm = {}.hasOwnProperty, pm = Pc().use(dm).use(hm).use(mm);
  function dm(e, r) {
    r.tree = e.parse(r.file);
  }
  function hm(e, r, t8) {
    e.run(r.tree, r.file, n);
    function n(a, u, i) {
      a ? t8(a) : (r.tree = u, r.file = i, t8());
    }
  }
  function mm(e, r) {
    var t8 = e.stringify(r.tree, r.file);
    t8 == null || (typeof t8 == "string" || lm(t8) ? ("value" in r.file && (r.file.value = t8), r.file.contents = t8) : r.file.result = t8);
  }
  function Lc() {
    var e = [], r = Pc(), t8 = {}, n = -1, a;
    return u.data = o, u.freeze = i, u.attachers = e, u.use = s, u.parse = c, u.stringify = h2, u.run = f2, u.runSync = D, u.process = p, u.processSync = d, u;
    function u() {
      for (var m = Lc(), F3 = -1; ++F3 < e.length; )
        m.use.apply(null, e[F3]);
      return m.data(st3(true, {}, t8)), m;
    }
    function i() {
      var m, F3;
      if (a)
        return u;
      for (; ++n < e.length; )
        m = e[n], m[1] !== false && (m[1] === true && (m[1] = void 0), F3 = m[0].apply(u, m.slice(1)), typeof F3 == "function" && r.use(F3));
      return a = true, n = 1 / 0, u;
    }
    function o(m, F3) {
      return typeof m == "string" ? arguments.length === 2 ? (Tn2("data", a), t8[m] = F3, u) : Dm.call(t8, m) && t8[m] || null : m ? (Tn2("data", a), t8 = m, u) : t8;
    }
    function s(m) {
      var F3;
      if (Tn2("use", a), m != null)
        if (typeof m == "function")
          b2.apply(null, arguments);
        else if (typeof m == "object")
          "length" in m ? B(m) : y2(m);
        else
          throw new Error("Expected usable value, not `" + m + "`");
      return F3 && (t8.settings = st3(t8.settings || {}, F3)), u;
      function y2(g) {
        B(g.plugins), g.settings && (F3 = st3(F3 || {}, g.settings));
      }
      function v3(g) {
        if (typeof g == "function")
          b2(g);
        else if (typeof g == "object")
          "length" in g ? b2.apply(null, g) : y2(g);
        else
          throw new Error("Expected usable value, not `" + g + "`");
      }
      function B(g) {
        var A3 = -1;
        if (g != null)
          if (typeof g == "object" && "length" in g)
            for (; ++A3 < g.length; )
              v3(g[A3]);
          else
            throw new Error("Expected a list of plugins, not `" + g + "`");
      }
      function b2(g, A3) {
        var x3 = l(g);
        x3 ? (Tc(x3[1]) && Tc(A3) && (A3 = st3(true, x3[1], A3)), x3[1] = A3) : e.push(fm.call(arguments));
      }
    }
    function l(m) {
      for (var F3 = -1; ++F3 < e.length; )
        if (e[F3][0] === m)
          return e[F3];
    }
    function c(m) {
      var F3 = Ar3(m), y2;
      return i(), y2 = u.Parser, Bn3("parse", y2), Sc(y2, "parse") ? new y2(String(F3), F3).parse() : y2(String(F3), F3);
    }
    function f2(m, F3, y2) {
      if (_c(m), i(), !y2 && typeof F3 == "function" && (y2 = F3, F3 = null), !y2)
        return new Promise(v3);
      v3(null, y2);
      function v3(B, b2) {
        r.run(m, Ar3(F3), g);
        function g(A3, x3, E2) {
          x3 = x3 || m, A3 ? b2(A3) : B ? B(x3) : y2(null, x3, E2);
        }
      }
    }
    function D(m, F3) {
      var y2, v3;
      return f2(m, F3, B), Oc("runSync", "run", v3), y2;
      function B(b2, g) {
        v3 = true, y2 = g, qc(b2);
      }
    }
    function h2(m, F3) {
      var y2 = Ar3(F3), v3;
      return i(), v3 = u.Compiler, qn3("stringify", v3), _c(m), Sc(v3, "compile") ? new v3(m, y2).compile() : v3(m, y2);
    }
    function p(m, F3) {
      if (i(), Bn3("process", u.Parser), qn3("process", u.Compiler), !F3)
        return new Promise(y2);
      y2(null, F3);
      function y2(v3, B) {
        var b2 = Ar3(m);
        pm.run(u, { file: b2 }, g);
        function g(A3) {
          A3 ? B(A3) : v3 ? v3(b2) : F3(null, b2);
        }
      }
    }
    function d(m) {
      var F3, y2;
      return i(), Bn3("processSync", u.Parser), qn3("processSync", u.Compiler), F3 = Ar3(m), p(F3, v3), Oc("processSync", "process", y2), F3;
      function v3(B) {
        y2 = true, qc(B);
      }
    }
  }
  function Sc(e, r) {
    return typeof e == "function" && e.prototype && (Fm(e.prototype) || r in e.prototype);
  }
  function Fm(e) {
    var r;
    for (r in e)
      return true;
    return false;
  }
  function Bn3(e, r) {
    if (typeof r != "function")
      throw new Error("Cannot `" + e + "` without `Parser`");
  }
  function qn3(e, r) {
    if (typeof r != "function")
      throw new Error("Cannot `" + e + "` without `Compiler`");
  }
  function Tn2(e, r) {
    if (r)
      throw new Error("Cannot invoke `" + e + "` on a frozen processor.\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.");
  }
  function _c(e) {
    if (!e || typeof e.type != "string")
      throw new Error("Expected node, got `" + e + "`");
  }
  function Oc(e, r, t8) {
    if (!t8)
      throw new Error("`" + e + "` finished async. Use `" + r + "` instead");
  }
});
var On2 = {};
Pn3(On2, { languages: () => _u, options: () => Ou2, parsers: () => _n3, printers: () => Bm });
var ol = (e, r, t8, n) => {
  if (!(e && r == null))
    return r.replaceAll ? r.replaceAll(t8, n) : t8.global ? r.replace(t8, n) : r.split(t8).join(n);
};
var N3 = ol;
var sl = (e, r, t8) => {
  if (!(e && r == null))
    return Array.isArray(r) || typeof r == "string" ? r[t8 < 0 ? r.length + t8 : t8] : r.at(t8);
};
var M3 = sl;
var Tu2 = Ne3(xr3(), 1);
var ie3 = "string";
var J3 = "array";
var ge2 = "cursor";
var Q3 = "indent";
var Z3 = "align";
var ae3 = "trim";
var j3 = "group";
var W3 = "fill";
var H2 = "if-break";
var oe3 = "indent-if-break";
var se4 = "line-suffix";
var ce3 = "line-suffix-boundary";
var $2 = "line";
var le3 = "label";
var ee3 = "break-parent";
var kr2 = /* @__PURE__ */ new Set([ge2, Q3, Z3, ae3, j3, W3, H2, oe3, se4, ce3, $2, le3, ee3]);
function ll(e) {
  if (typeof e == "string")
    return ie3;
  if (Array.isArray(e))
    return J3;
  if (!e)
    return;
  let { type: r } = e;
  if (kr2.has(r))
    return r;
}
var fe3 = ll;
var fl = (e) => new Intl.ListFormat("en-US", { type: "disjunction" }).format(e);
function Dl(e) {
  let r = e === null ? "null" : typeof e;
  if (r !== "string" && r !== "object")
    return `Unexpected doc '${r}', 
Expected it to be 'string' or 'object'.`;
  if (fe3(e))
    throw new Error("doc is valid.");
  let t8 = Object.prototype.toString.call(e);
  if (t8 !== "[object Object]")
    return `Unexpected doc '${t8}'.`;
  let n = fl([...kr2].map((a) => `'${a}'`));
  return `Unexpected doc.type '${e.type}'.
Expected it to be ${n}.`;
}
var ft3 = class extends Error {
  constructor(r) {
    super(Dl(r));
    __publicField(this, "name", "InvalidDocError");
    this.doc = r;
  }
};
var we3 = ft3;
var In3 = {};
function pl(e, r, t8, n) {
  let a = [e];
  for (; a.length > 0; ) {
    let u = a.pop();
    if (u === In3) {
      t8(a.pop());
      continue;
    }
    t8 && a.push(u, In3);
    let i = fe3(u);
    if (!i)
      throw new we3(u);
    if ((r == null ? void 0 : r(u)) !== false)
      switch (i) {
        case J3:
        case W3: {
          let o = i === J3 ? u : u.parts;
          for (let s = o.length, l = s - 1; l >= 0; --l)
            a.push(o[l]);
          break;
        }
        case H2:
          a.push(u.flatContents, u.breakContents);
          break;
        case j3:
          if (n && u.expandedStates)
            for (let o = u.expandedStates.length, s = o - 1; s >= 0; --s)
              a.push(u.expandedStates[s]);
          else
            a.push(u.contents);
          break;
        case Z3:
        case Q3:
        case oe3:
        case le3:
        case se4:
          a.push(u.contents);
          break;
        case ie3:
        case ge2:
        case ae3:
        case ce3:
        case $2:
        case ee3:
          break;
        default:
          throw new we3(u);
      }
  }
}
var Nn2 = pl;
var Rn3 = () => {
};
var Be3 = Rn3;
var wr3 = Rn3;
function Je3(e) {
  return Be3(e), { type: Q3, contents: e };
}
function ve3(e, r) {
  return Be3(r), { type: Z3, contents: r, n: e };
}
function Qe3(e, r = {}) {
  return Be3(e), wr3(r.expandedStates, true), { type: j3, id: r.id, contents: e, break: !!r.shouldBreak, expandedStates: r.expandedStates };
}
function qe3(e) {
  return ve3({ type: "root" }, e);
}
function Br2(e) {
  return wr3(e), { type: W3, parts: e };
}
function Un3(e, r = "", t8 = {}) {
  return Be3(e), r !== "" && Be3(r), { type: H2, breakContents: e, flatContents: r, groupId: t8.groupId };
}
var Ze3 = { type: ee3 };
var Re3 = { type: $2, hard: true };
var dl = { type: $2, hard: true, literal: true };
var qr3 = { type: $2 };
var er3 = { type: $2, soft: true };
var L3 = [Re3, Ze3];
var rr3 = [dl, Ze3];
function tr3(e, r) {
  Be3(e), wr3(r);
  let t8 = [];
  for (let n = 0; n < r.length; n++)
    n !== 0 && t8.push(e), t8.push(r[n]);
  return t8;
}
function zn3(e) {
  switch (e) {
    case "cr":
      return "\r";
    case "crlf":
      return `\r
`;
    default:
      return `
`;
  }
}
var Mn3 = () => /[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;
function Yn3(e) {
  return e === 12288 || e >= 65281 && e <= 65376 || e >= 65504 && e <= 65510;
}
function Vn3(e) {
  return e >= 4352 && e <= 4447 || e === 8986 || e === 8987 || e === 9001 || e === 9002 || e >= 9193 && e <= 9196 || e === 9200 || e === 9203 || e === 9725 || e === 9726 || e === 9748 || e === 9749 || e >= 9800 && e <= 9811 || e === 9855 || e === 9875 || e === 9889 || e === 9898 || e === 9899 || e === 9917 || e === 9918 || e === 9924 || e === 9925 || e === 9934 || e === 9940 || e === 9962 || e === 9970 || e === 9971 || e === 9973 || e === 9978 || e === 9981 || e === 9989 || e === 9994 || e === 9995 || e === 10024 || e === 10060 || e === 10062 || e >= 10067 && e <= 10069 || e === 10071 || e >= 10133 && e <= 10135 || e === 10160 || e === 10175 || e === 11035 || e === 11036 || e === 11088 || e === 11093 || e >= 11904 && e <= 11929 || e >= 11931 && e <= 12019 || e >= 12032 && e <= 12245 || e >= 12272 && e <= 12287 || e >= 12289 && e <= 12350 || e >= 12353 && e <= 12438 || e >= 12441 && e <= 12543 || e >= 12549 && e <= 12591 || e >= 12593 && e <= 12686 || e >= 12688 && e <= 12771 || e >= 12783 && e <= 12830 || e >= 12832 && e <= 12871 || e >= 12880 && e <= 19903 || e >= 19968 && e <= 42124 || e >= 42128 && e <= 42182 || e >= 43360 && e <= 43388 || e >= 44032 && e <= 55203 || e >= 63744 && e <= 64255 || e >= 65040 && e <= 65049 || e >= 65072 && e <= 65106 || e >= 65108 && e <= 65126 || e >= 65128 && e <= 65131 || e >= 94176 && e <= 94180 || e === 94192 || e === 94193 || e >= 94208 && e <= 100343 || e >= 100352 && e <= 101589 || e >= 101632 && e <= 101640 || e >= 110576 && e <= 110579 || e >= 110581 && e <= 110587 || e === 110589 || e === 110590 || e >= 110592 && e <= 110882 || e === 110898 || e >= 110928 && e <= 110930 || e === 110933 || e >= 110948 && e <= 110951 || e >= 110960 && e <= 111355 || e === 126980 || e === 127183 || e === 127374 || e >= 127377 && e <= 127386 || e >= 127488 && e <= 127490 || e >= 127504 && e <= 127547 || e >= 127552 && e <= 127560 || e === 127568 || e === 127569 || e >= 127584 && e <= 127589 || e >= 127744 && e <= 127776 || e >= 127789 && e <= 127797 || e >= 127799 && e <= 127868 || e >= 127870 && e <= 127891 || e >= 127904 && e <= 127946 || e >= 127951 && e <= 127955 || e >= 127968 && e <= 127984 || e === 127988 || e >= 127992 && e <= 128062 || e === 128064 || e >= 128066 && e <= 128252 || e >= 128255 && e <= 128317 || e >= 128331 && e <= 128334 || e >= 128336 && e <= 128359 || e === 128378 || e === 128405 || e === 128406 || e === 128420 || e >= 128507 && e <= 128591 || e >= 128640 && e <= 128709 || e === 128716 || e >= 128720 && e <= 128722 || e >= 128725 && e <= 128727 || e >= 128732 && e <= 128735 || e === 128747 || e === 128748 || e >= 128756 && e <= 128764 || e >= 128992 && e <= 129003 || e === 129008 || e >= 129292 && e <= 129338 || e >= 129340 && e <= 129349 || e >= 129351 && e <= 129535 || e >= 129648 && e <= 129660 || e >= 129664 && e <= 129672 || e >= 129680 && e <= 129725 || e >= 129727 && e <= 129733 || e >= 129742 && e <= 129755 || e >= 129760 && e <= 129768 || e >= 129776 && e <= 129784 || e >= 131072 && e <= 196605 || e >= 196608 && e <= 262141;
}
var Gn3 = (e) => !(Yn3(e) || Vn3(e));
var hl = /[^\x20-\x7F]/;
function ml(e) {
  if (!e)
    return 0;
  if (!hl.test(e))
    return e.length;
  e = e.replace(Mn3(), "  ");
  let r = 0;
  for (let t8 of e) {
    let n = t8.codePointAt(0);
    n <= 31 || n >= 127 && n <= 159 || n >= 768 && n <= 879 || (r += Gn3(n) ? 1 : 2);
  }
  return r;
}
var nr2 = ml;
var Wn3 = (e) => {
  if (Array.isArray(e))
    return e;
  if (e.type !== W3)
    throw new Error(`Expect doc to be 'array' or '${W3}'.`);
  return e.parts;
};
function Hn3(e, r) {
  if (typeof e == "string")
    return r(e);
  let t8 = /* @__PURE__ */ new Map();
  return n(e);
  function n(u) {
    if (t8.has(u))
      return t8.get(u);
    let i = a(u);
    return t8.set(u, i), i;
  }
  function a(u) {
    switch (fe3(u)) {
      case J3:
        return r(u.map(n));
      case W3:
        return r({ ...u, parts: u.parts.map(n) });
      case H2:
        return r({ ...u, breakContents: n(u.breakContents), flatContents: n(u.flatContents) });
      case j3: {
        let { expandedStates: i, contents: o } = u;
        return i ? (i = i.map(n), o = i[0]) : o = n(o), r({ ...u, contents: o, expandedStates: i });
      }
      case Z3:
      case Q3:
      case oe3:
      case le3:
      case se4:
        return r({ ...u, contents: n(u.contents) });
      case ie3:
      case ge2:
      case ae3:
      case ce3:
      case $2:
      case ee3:
        return r(u);
      default:
        throw new we3(u);
    }
  }
}
function $n3(e) {
  if (e.length > 0) {
    let r = M3(false, e, -1);
    !r.expandedStates && !r.break && (r.break = "propagated");
  }
  return null;
}
function Kn3(e) {
  let r = /* @__PURE__ */ new Set(), t8 = [];
  function n(u) {
    if (u.type === ee3 && $n3(t8), u.type === j3) {
      if (t8.push(u), r.has(u))
        return false;
      r.add(u);
    }
  }
  function a(u) {
    u.type === j3 && t8.pop().break && $n3(t8);
  }
  Nn2(e, n, a, true);
}
function jn3(e) {
  let r = [], t8 = e.filter(Boolean);
  for (; t8.length > 0; ) {
    let n = t8.shift();
    if (n) {
      if (Array.isArray(n)) {
        t8.unshift(...n);
        continue;
      }
      if (r.length > 0 && typeof M3(false, r, -1) == "string" && typeof n == "string") {
        r[r.length - 1] += n;
        continue;
      }
      r.push(n);
    }
  }
  return r;
}
function Xn3(e) {
  return Hn3(e, (r) => Array.isArray(r) ? jn3(r) : r.parts ? { ...r, parts: jn3(r.parts) } : r);
}
function Ee3(e, r = rr3) {
  return Hn3(e, (t8) => typeof t8 == "string" ? tr3(r, t8.split(`
`)) : t8);
}
var V3 = Symbol("MODE_BREAK");
var re4 = Symbol("MODE_FLAT");
var ur3 = Symbol("cursor");
function Jn3() {
  return { value: "", length: 0, queue: [] };
}
function Fl(e, r) {
  return Dt3(e, { type: "indent" }, r);
}
function gl(e, r, t8) {
  return r === Number.NEGATIVE_INFINITY ? e.root || Jn3() : r < 0 ? Dt3(e, { type: "dedent" }, t8) : r ? r.type === "root" ? { ...e, root: e } : Dt3(e, { type: typeof r == "string" ? "stringAlign" : "numberAlign", n: r }, t8) : e;
}
function Dt3(e, r, t8) {
  let n = r.type === "dedent" ? e.queue.slice(0, -1) : [...e.queue, r], a = "", u = 0, i = 0, o = 0;
  for (let p of n)
    switch (p.type) {
      case "indent":
        c(), t8.useTabs ? s(1) : l(t8.tabWidth);
        break;
      case "stringAlign":
        c(), a += p.n, u += p.n.length;
        break;
      case "numberAlign":
        i += 1, o += p.n;
        break;
      default:
        throw new Error(`Unexpected type '${p.type}'`);
    }
  return D(), { ...e, value: a, length: u, queue: n };
  function s(p) {
    a += "	".repeat(p), u += t8.tabWidth * p;
  }
  function l(p) {
    a += " ".repeat(p), u += p;
  }
  function c() {
    t8.useTabs ? f2() : D();
  }
  function f2() {
    i > 0 && s(i), h2();
  }
  function D() {
    o > 0 && l(o), h2();
  }
  function h2() {
    i = 0, o = 0;
  }
}
function pt3(e) {
  let r = 0, t8 = 0, n = e.length;
  e:
    for (; n--; ) {
      let a = e[n];
      if (a === ur3) {
        t8++;
        continue;
      }
      for (let u = a.length - 1; u >= 0; u--) {
        let i = a[u];
        if (i === " " || i === "	")
          r++;
        else {
          e[n] = a.slice(0, u + 1);
          break e;
        }
      }
    }
  if (r > 0 || t8 > 0)
    for (e.length = n + 1; t8-- > 0; )
      e.push(ur3);
  return r;
}
function Tr3(e, r, t8, n, a, u) {
  if (t8 === Number.POSITIVE_INFINITY)
    return true;
  let i = r.length, o = [e], s = [];
  for (; t8 >= 0; ) {
    if (o.length === 0) {
      if (i === 0)
        return true;
      o.push(r[--i]);
      continue;
    }
    let { mode: l, doc: c } = o.pop();
    switch (fe3(c)) {
      case ie3:
        s.push(c), t8 -= nr2(c);
        break;
      case J3:
      case W3: {
        let f2 = Wn3(c);
        for (let D = f2.length - 1; D >= 0; D--)
          o.push({ mode: l, doc: f2[D] });
        break;
      }
      case Q3:
      case Z3:
      case oe3:
      case le3:
        o.push({ mode: l, doc: c.contents });
        break;
      case ae3:
        t8 += pt3(s);
        break;
      case j3: {
        if (u && c.break)
          return false;
        let f2 = c.break ? V3 : l, D = c.expandedStates && f2 === V3 ? M3(false, c.expandedStates, -1) : c.contents;
        o.push({ mode: f2, doc: D });
        break;
      }
      case H2: {
        let D = (c.groupId ? a[c.groupId] || re4 : l) === V3 ? c.breakContents : c.flatContents;
        D && o.push({ mode: l, doc: D });
        break;
      }
      case $2:
        if (l === V3 || c.hard)
          return true;
        c.soft || (s.push(" "), t8--);
        break;
      case se4:
        n = true;
        break;
      case ce3:
        if (n)
          return false;
        break;
    }
  }
  return false;
}
function Qn3(e, r) {
  let t8 = {}, n = r.printWidth, a = zn3(r.endOfLine), u = 0, i = [{ ind: Jn3(), mode: V3, doc: e }], o = [], s = false, l = [], c = 0;
  for (Kn3(e); i.length > 0; ) {
    let { ind: D, mode: h2, doc: p } = i.pop();
    switch (fe3(p)) {
      case ie3: {
        let d = a !== `
` ? N3(false, p, `
`, a) : p;
        o.push(d), i.length > 0 && (u += nr2(d));
        break;
      }
      case J3:
        for (let d = p.length - 1; d >= 0; d--)
          i.push({ ind: D, mode: h2, doc: p[d] });
        break;
      case ge2:
        if (c >= 2)
          throw new Error("There are too many 'cursor' in doc.");
        o.push(ur3), c++;
        break;
      case Q3:
        i.push({ ind: Fl(D, r), mode: h2, doc: p.contents });
        break;
      case Z3:
        i.push({ ind: gl(D, p.n, r), mode: h2, doc: p.contents });
        break;
      case ae3:
        u -= pt3(o);
        break;
      case j3:
        switch (h2) {
          case re4:
            if (!s) {
              i.push({ ind: D, mode: p.break ? V3 : re4, doc: p.contents });
              break;
            }
          case V3: {
            s = false;
            let d = { ind: D, mode: re4, doc: p.contents }, m = n - u, F3 = l.length > 0;
            if (!p.break && Tr3(d, i, m, F3, t8))
              i.push(d);
            else if (p.expandedStates) {
              let y2 = M3(false, p.expandedStates, -1);
              if (p.break) {
                i.push({ ind: D, mode: V3, doc: y2 });
                break;
              } else
                for (let v3 = 1; v3 < p.expandedStates.length + 1; v3++)
                  if (v3 >= p.expandedStates.length) {
                    i.push({ ind: D, mode: V3, doc: y2 });
                    break;
                  } else {
                    let B = p.expandedStates[v3], b2 = { ind: D, mode: re4, doc: B };
                    if (Tr3(b2, i, m, F3, t8)) {
                      i.push(b2);
                      break;
                    }
                  }
            } else
              i.push({ ind: D, mode: V3, doc: p.contents });
            break;
          }
        }
        p.id && (t8[p.id] = M3(false, i, -1).mode);
        break;
      case W3: {
        let d = n - u, { parts: m } = p;
        if (m.length === 0)
          break;
        let [F3, y2] = m, v3 = { ind: D, mode: re4, doc: F3 }, B = { ind: D, mode: V3, doc: F3 }, b2 = Tr3(v3, [], d, l.length > 0, t8, true);
        if (m.length === 1) {
          b2 ? i.push(v3) : i.push(B);
          break;
        }
        let g = { ind: D, mode: re4, doc: y2 }, A3 = { ind: D, mode: V3, doc: y2 };
        if (m.length === 2) {
          b2 ? i.push(g, v3) : i.push(A3, B);
          break;
        }
        m.splice(0, 2);
        let x3 = { ind: D, mode: h2, doc: Br2(m) }, E2 = m[0];
        Tr3({ ind: D, mode: re4, doc: [F3, y2, E2] }, [], d, l.length > 0, t8, true) ? i.push(x3, g, v3) : b2 ? i.push(x3, A3, v3) : i.push(x3, A3, B);
        break;
      }
      case H2:
      case oe3: {
        let d = p.groupId ? t8[p.groupId] : h2;
        if (d === V3) {
          let m = p.type === H2 ? p.breakContents : p.negate ? p.contents : Je3(p.contents);
          m && i.push({ ind: D, mode: h2, doc: m });
        }
        if (d === re4) {
          let m = p.type === H2 ? p.flatContents : p.negate ? Je3(p.contents) : p.contents;
          m && i.push({ ind: D, mode: h2, doc: m });
        }
        break;
      }
      case se4:
        l.push({ ind: D, mode: h2, doc: p.contents });
        break;
      case ce3:
        l.length > 0 && i.push({ ind: D, mode: h2, doc: Re3 });
        break;
      case $2:
        switch (h2) {
          case re4:
            if (p.hard)
              s = true;
            else {
              p.soft || (o.push(" "), u += 1);
              break;
            }
          case V3:
            if (l.length > 0) {
              i.push({ ind: D, mode: h2, doc: p }, ...l.reverse()), l.length = 0;
              break;
            }
            p.literal ? D.root ? (o.push(a, D.root.value), u = D.root.length) : (o.push(a), u = 0) : (u -= pt3(o), o.push(a + D.value), u = D.length);
            break;
        }
        break;
      case le3:
        i.push({ ind: D, mode: h2, doc: p.contents });
        break;
      case ee3:
        break;
      default:
        throw new we3(p);
    }
    i.length === 0 && l.length > 0 && (i.push(...l.reverse()), l.length = 0);
  }
  let f2 = o.indexOf(ur3);
  if (f2 !== -1) {
    let D = o.indexOf(ur3, f2 + 1), h2 = o.slice(0, f2).join(""), p = o.slice(f2 + 1, D).join(""), d = o.slice(D + 1).join("");
    return { formatted: h2 + p + d, cursorNodeStart: h2.length, cursorNodeText: p };
  }
  return { formatted: o.join("") };
}
function ir3(e) {
  if (typeof e != "string")
    throw new TypeError("Expected a string");
  return e.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function vl(e, r) {
  let t8 = e.match(new RegExp(`(${ir3(r)})+`, "g"));
  return t8 === null ? 0 : t8.reduce((n, a) => Math.max(n, a.length / r.length), 0);
}
var Sr3 = vl;
function El(e, r) {
  let t8 = e.match(new RegExp(`(${ir3(r)})+`, "g"));
  if (t8 === null)
    return 0;
  let n = /* @__PURE__ */ new Map(), a = 0;
  for (let u of t8) {
    let i = u.length / r.length;
    n.set(i, true), i > a && (a = i);
  }
  for (let u = 1; u < a; u++)
    if (!n.get(u))
      return u;
  return a + 1;
}
var Zn3 = El;
var _r3 = "'";
var eu2 = '"';
function Cl(e, r) {
  let t8 = r === true || r === _r3 ? _r3 : eu2, n = t8 === _r3 ? eu2 : _r3, a = 0, u = 0;
  for (let i of e)
    i === t8 ? a++ : i === n && u++;
  return a > u ? n : t8;
}
var ru2 = Cl;
var dt3 = class extends Error {
  constructor(r, t8, n = "type") {
    super(`Unexpected ${t8} node ${n}: ${JSON.stringify(r[n])}.`);
    __publicField(this, "name", "UnexpectedNodeError");
    this.node = r;
  }
};
var tu2 = dt3;
var ou2 = Ne3(xr3(), 1);
function bl(e) {
  return (e == null ? void 0 : e.type) === "front-matter";
}
var nu2 = bl;
var yl = new RegExp("^(?<startDelimiter>-{3}|\\+{3})(?<language>[^\\n]*)\\n(?:|(?<value>.*?)\\n)(?<endDelimiter>\\k<startDelimiter>|\\.{3})[^\\S\\n]*(?:\\n|$)", "s");
function Al(e) {
  let r = e.match(yl);
  if (!r)
    return { content: e };
  let { startDelimiter: t8, language: n, value: a = "", endDelimiter: u } = r.groups, i = n.trim() || "yaml";
  if (t8 === "+++" && (i = "toml"), i !== "yaml" && t8 !== u)
    return { content: e };
  let [o] = r;
  return { frontMatter: { type: "front-matter", lang: i, value: a, startDelimiter: t8, endDelimiter: u, raw: o.replace(/\n$/, "") }, content: N3(false, o, /[^\n]/g, " ") + e.slice(o.length) };
}
var ar3 = Al;
var uu2 = ["format", "prettier"];
function ht3(e) {
  let r = `@(${uu2.join("|")})`, t8 = new RegExp([`<!--\\s*${r}\\s*-->`, `{\\s*\\/\\*\\s*${r}\\s*\\*\\/\\s*}`, `<!--.*\r?
[\\s\\S]*(^|
)[^\\S
]*${r}[^\\S
]*($|
)[\\s\\S]*
.*-->`].join("|"), "m"), n = e.match(t8);
  return (n == null ? void 0 : n.index) === 0;
}
var iu2 = (e) => ht3(ar3(e).content.trimStart());
var au2 = (e) => {
  let r = ar3(e), t8 = `<!-- @${uu2[0]} -->`;
  return r.frontMatter ? `${r.frontMatter.raw}

${t8}

${r.content}` : `${t8}

${r.content}`;
};
var xl = /* @__PURE__ */ new Set(["position", "raw"]);
function su2(e, r, t8) {
  if ((e.type === "front-matter" || e.type === "code" || e.type === "yaml" || e.type === "import" || e.type === "export" || e.type === "jsx") && delete r.value, e.type === "list" && delete r.isAligned, (e.type === "list" || e.type === "listItem") && delete r.spread, e.type === "text")
    return null;
  if (e.type === "inlineCode" && (r.value = N3(false, e.value, `
`, " ")), e.type === "wikiLink" && (r.value = N3(false, e.value.trim(), /[\t\n]+/g, " ")), (e.type === "definition" || e.type === "linkReference" || e.type === "imageReference") && (r.label = (0, ou2.default)(e.label)), (e.type === "link" || e.type === "image") && e.url && e.url.includes("("))
    for (let n of "<>")
      r.url = N3(false, e.url, n, encodeURIComponent(n));
  if ((e.type === "definition" || e.type === "link" || e.type === "image") && e.title && (r.title = N3(false, e.title, /\\(?=["')])/g, "")), (t8 == null ? void 0 : t8.type) === "root" && t8.children.length > 0 && (t8.children[0] === e || nu2(t8.children[0]) && t8.children[1] === e) && e.type === "html" && ht3(e.value))
    return null;
}
su2.ignoredProperties = xl;
var cu2 = su2;
var lu2 = /(?:[\u02ea-\u02eb\u1100-\u11ff\u2e80-\u2e99\u2e9b-\u2ef3\u2f00-\u2fd5\u2ff0-\u303f\u3041-\u3096\u3099-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u3190-\u4dbf\u4e00-\u9fff\ua700-\ua707\ua960-\ua97c\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufe10-\ufe1f\ufe30-\ufe6f\uff00-\uffef]|[\ud840-\ud868\ud86a-\ud86c\ud86f-\ud872\ud874-\ud879\ud880-\ud883\ud885-\ud887][\udc00-\udfff]|\ud81b[\udfe3]|\ud82b[\udff0-\udff3\udff5-\udffb\udffd-\udffe]|\ud82c[\udc00-\udd22\udd32\udd50-\udd52\udd55\udd64-\udd67]|\ud83c[\ude00\ude50-\ude51]|\ud869[\udc00-\udedf\udf00-\udfff]|\ud86d[\udc00-\udf39\udf40-\udfff]|\ud86e[\udc00-\udc1d\udc20-\udfff]|\ud873[\udc00-\udea1\udeb0-\udfff]|\ud87a[\udc00-\udfe0]|\ud87e[\udc00-\ude1d]|\ud884[\udc00-\udf4a\udf50-\udfff]|\ud888[\udc00-\udfaf])(?:[\ufe00-\ufe0f]|\udb40[\udd00-\uddef])?/;
var fu2 = /[\u1100-\u11ff\u3001-\u3003\u3008-\u3011\u3013-\u301f\u302e-\u3030\u3037\u30fb\u3131-\u318e\u3200-\u321e\u3260-\u327e\ua960-\ua97c\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\ufe45-\ufe46\uff61-\uff65\uffa0-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]/;
var Te2 = /[\u0021-\u002f\u003a-\u0040\u005b-\u0060\u007b-\u007e\u00a1\u00a7\u00ab\u00b6-\u00b7\u00bb\u00bf\u037e\u0387\u055a-\u055f\u0589-\u058a\u05be\u05c0\u05c3\u05c6\u05f3-\u05f4\u0609-\u060a\u060c-\u060d\u061b\u061d-\u061f\u066a-\u066d\u06d4\u0700-\u070d\u07f7-\u07f9\u0830-\u083e\u085e\u0964-\u0965\u0970\u09fd\u0a76\u0af0\u0c77\u0c84\u0df4\u0e4f\u0e5a-\u0e5b\u0f04-\u0f12\u0f14\u0f3a-\u0f3d\u0f85\u0fd0-\u0fd4\u0fd9-\u0fda\u104a-\u104f\u10fb\u1360-\u1368\u1400\u166e\u169b-\u169c\u16eb-\u16ed\u1735-\u1736\u17d4-\u17d6\u17d8-\u17da\u1800-\u180a\u1944-\u1945\u1a1e-\u1a1f\u1aa0-\u1aa6\u1aa8-\u1aad\u1b5a-\u1b60\u1b7d-\u1b7e\u1bfc-\u1bff\u1c3b-\u1c3f\u1c7e-\u1c7f\u1cc0-\u1cc7\u1cd3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205e\u207d-\u207e\u208d-\u208e\u2308-\u230b\u2329-\u232a\u2768-\u2775\u27c5-\u27c6\u27e6-\u27ef\u2983-\u2998\u29d8-\u29db\u29fc-\u29fd\u2cf9-\u2cfc\u2cfe-\u2cff\u2d70\u2e00-\u2e2e\u2e30-\u2e4f\u2e52-\u2e5d\u3001-\u3003\u3008-\u3011\u3014-\u301f\u3030\u303d\u30a0\u30fb\ua4fe-\ua4ff\ua60d-\ua60f\ua673\ua67e\ua6f2-\ua6f7\ua874-\ua877\ua8ce-\ua8cf\ua8f8-\ua8fa\ua8fc\ua92e-\ua92f\ua95f\ua9c1-\ua9cd\ua9de-\ua9df\uaa5c-\uaa5f\uaade-\uaadf\uaaf0-\uaaf1\uabeb\ufd3e-\ufd3f\ufe10-\ufe19\ufe30-\ufe52\ufe54-\ufe61\ufe63\ufe68\ufe6a-\ufe6b\uff01-\uff03\uff05-\uff0a\uff0c-\uff0f\uff1a-\uff1b\uff1f-\uff20\uff3b-\uff3d\uff3f\uff5b\uff5d\uff5f-\uff65]|\ud800[\udd00-\udd02\udf9f\udfd0]|\ud801[\udd6f]|\ud802[\udc57\udd1f\udd3f\ude50-\ude58\ude7f\udef0-\udef6\udf39-\udf3f\udf99-\udf9c]|\ud803[\udead\udf55-\udf59\udf86-\udf89]|\ud804[\udc47-\udc4d\udcbb-\udcbc\udcbe-\udcc1\udd40-\udd43\udd74-\udd75\uddc5-\uddc8\uddcd\udddb\udddd-\udddf\ude38-\ude3d\udea9]|\ud805[\udc4b-\udc4f\udc5a-\udc5b\udc5d\udcc6\uddc1-\uddd7\ude41-\ude43\ude60-\ude6c\udeb9\udf3c-\udf3e]|\ud806[\udc3b\udd44-\udd46\udde2\ude3f-\ude46\ude9a-\ude9c\ude9e-\udea2\udf00-\udf09]|\ud807[\udc41-\udc45\udc70-\udc71\udef7-\udef8\udf43-\udf4f\udfff]|\ud809[\udc70-\udc74]|\ud80b[\udff1-\udff2]|\ud81a[\ude6e-\ude6f\udef5\udf37-\udf3b\udf44]|\ud81b[\ude97-\ude9a\udfe2]|\ud82f[\udc9f]|\ud836[\ude87-\ude8b]|\ud83a[\udd5e-\udd5f]/;
async function kl(e, r) {
  if (e.lang === "yaml") {
    let t8 = e.value.trim(), n = t8 ? await r(t8, { parser: "yaml" }) : "";
    return qe3([e.startDelimiter, L3, n, n ? L3 : "", e.endDelimiter]);
  }
}
var Du2 = kl;
var wl = (e) => String(e).split(/[/\\]/).pop();
function pu2(e, r) {
  var _a3;
  if (!r)
    return;
  let t8 = wl(r).toLowerCase();
  return (_a3 = e.find(({ filenames: n }) => n == null ? void 0 : n.some((a) => a.toLowerCase() === t8))) != null ? _a3 : e.find(({ extensions: n }) => n == null ? void 0 : n.some((a) => t8.endsWith(a)));
}
function Bl(e, r) {
  var _a3, _b;
  if (r)
    return (_b = (_a3 = e.find(({ name: t8 }) => t8.toLowerCase() === r)) != null ? _a3 : e.find(({ aliases: t8 }) => t8 == null ? void 0 : t8.includes(r))) != null ? _b : e.find(({ extensions: t8 }) => t8 == null ? void 0 : t8.includes(`.${r}`));
}
function ql(e, r) {
  var _a3, _b, _c;
  let t8 = e.plugins.flatMap((a) => {
    var _a4;
    return (_a4 = a.languages) != null ? _a4 : [];
  }), n = (_c = (_b = (_a3 = Bl(t8, r.language)) != null ? _a3 : pu2(t8, r.physicalFile)) != null ? _b : pu2(t8, r.file)) != null ? _c : (r.physicalFile, void 0);
  return n == null ? void 0 : n.parsers[0];
}
var du2 = ql;
var Tl = new Proxy(() => {
}, { get: () => Tl });
function Se3(e) {
  return e.position.start.offset;
}
function _e3(e) {
  return e.position.end.offset;
}
var mt3 = /* @__PURE__ */ new Set(["liquidNode", "inlineCode", "emphasis", "esComment", "strong", "delete", "wikiLink", "link", "linkReference", "image", "imageReference", "footnote", "footnoteReference", "sentence", "whitespace", "word", "break", "inlineMath"]);
var Or3 = /* @__PURE__ */ new Set([...mt3, "tableCell", "paragraph", "heading"]);
var Oe3 = "non-cjk";
var De3 = "cj-letter";
var Ce3 = "k-letter";
var or2 = "cjk-punctuation";
function Pr3(e) {
  let r = [], t8 = e.split(/([\t\n ]+)/);
  for (let [a, u] of t8.entries()) {
    if (a % 2 === 1) {
      r.push({ type: "whitespace", value: /\n/.test(u) ? `
` : " " });
      continue;
    }
    if ((a === 0 || a === t8.length - 1) && u === "")
      continue;
    let i = u.split(new RegExp(`(${lu2.source})`));
    for (let [o, s] of i.entries())
      if (!((o === 0 || o === i.length - 1) && s === "")) {
        if (o % 2 === 0) {
          s !== "" && n({ type: "word", value: s, kind: Oe3, hasLeadingPunctuation: Te2.test(s[0]), hasTrailingPunctuation: Te2.test(M3(false, s, -1)) });
          continue;
        }
        n(Te2.test(s) ? { type: "word", value: s, kind: or2, hasLeadingPunctuation: true, hasTrailingPunctuation: true } : { type: "word", value: s, kind: fu2.test(s) ? Ce3 : De3, hasLeadingPunctuation: false, hasTrailingPunctuation: false });
      }
  }
  return r;
  function n(a) {
    let u = M3(false, r, -1);
    (u == null ? void 0 : u.type) === "word" && !i(Oe3, or2) && ![u.value, a.value].some((o) => /\u3000/.test(o)) && r.push({ type: "whitespace", value: "" }), r.push(a);
    function i(o, s) {
      return u.kind === o && a.kind === s || u.kind === s && a.kind === o;
    }
  }
}
function Ue3(e, r) {
  let [, t8, n, a] = r.slice(e.position.start.offset, e.position.end.offset).match(/^\s*(\d+)(\.|\))(\s*)/);
  return { numberText: t8, marker: n, leadingSpaces: a };
}
function hu2(e, r) {
  if (!e.ordered || e.children.length < 2)
    return false;
  let t8 = Number(Ue3(e.children[0], r.originalText).numberText), n = Number(Ue3(e.children[1], r.originalText).numberText);
  if (t8 === 0 && e.children.length > 2) {
    let a = Number(Ue3(e.children[2], r.originalText).numberText);
    return n === 1 && a === 1;
  }
  return n === 1;
}
function Lr2(e, r) {
  let { value: t8 } = e;
  return e.position.end.offset === r.length && t8.endsWith(`
`) && r.endsWith(`
`) ? t8.slice(0, -1) : t8;
}
function be3(e, r) {
  return function t8(n, a, u) {
    let i = { ...r(n, a, u) };
    return i.children && (i.children = i.children.map((o, s) => t8(o, s, [i, ...u]))), i;
  }(e, null, []);
}
function Ft3(e) {
  if ((e == null ? void 0 : e.type) !== "link" || e.children.length !== 1)
    return false;
  let [r] = e.children;
  return Se3(e) === Se3(r) && _e3(e) === _e3(r);
}
function Sl(e, r) {
  let { node: t8 } = e;
  if (t8.type === "code" && t8.lang !== null) {
    let n = du2(r, { language: t8.lang });
    if (n)
      return async (a) => {
        let u = r.__inJsTemplate ? "~" : "`", i = u.repeat(Math.max(3, Sr3(t8.value, u) + 1)), o = { parser: n };
        t8.lang === "ts" || t8.lang === "typescript" ? o.filepath = "dummy.ts" : t8.lang === "tsx" && (o.filepath = "dummy.tsx");
        let s = await a(Lr2(t8, r.originalText), o);
        return qe3([i, t8.lang, t8.meta ? " " + t8.meta : "", L3, Ee3(s), L3, i]);
      };
  }
  switch (t8.type) {
    case "front-matter":
      return (n) => Du2(t8, n);
    case "import":
    case "export":
      return (n) => n(t8.value, { parser: "babel" });
    case "jsx":
      return (n) => n(`<$>${t8.value}</$>`, { parser: "__js_expression", rootMarker: "mdx" });
  }
  return null;
}
var mu2 = Sl;
var sr3 = null;
function cr3(e) {
  if (sr3 !== null && typeof sr3.property) {
    let r = sr3;
    return sr3 = cr3.prototype = null, r;
  }
  return sr3 = cr3.prototype = e != null ? e : /* @__PURE__ */ Object.create(null), new cr3();
}
var _l = 10;
for (let e = 0; e <= _l; e++)
  cr3();
function gt2(e) {
  return cr3(e);
}
function Ol(e, r = "type") {
  gt2(e);
  function t8(n) {
    let a = n[r], u = e[a];
    if (!Array.isArray(u))
      throw Object.assign(new Error(`Missing visitor keys for '${a}'.`), { node: n });
    return u;
  }
  return t8;
}
var Fu2 = Ol;
var Pl = { "front-matter": [], root: ["children"], paragraph: ["children"], sentence: ["children"], word: [], whitespace: [], emphasis: ["children"], strong: ["children"], delete: ["children"], inlineCode: [], wikiLink: [], link: ["children"], image: [], blockquote: ["children"], heading: ["children"], code: [], html: [], list: ["children"], thematicBreak: [], linkReference: ["children"], imageReference: [], definition: [], footnote: ["children"], footnoteReference: [], footnoteDefinition: ["children"], table: ["children"], tableCell: ["children"], break: [], liquidNode: [], import: [], export: [], esComment: [], jsx: [], math: [], inlineMath: [], tableRow: ["children"], listItem: ["children"], text: [] };
var gu2 = Pl;
var Ll = Fu2(gu2);
var vu2 = Ll;
var Il = /^.$/su;
function Nl(e, r) {
  return e = Rl(e, r), e = zl(e), e = Yl(e, r), e = Vl(e, r), e = Ml(e), e;
}
function Rl(e, r) {
  return be3(e, (t8) => t8.type !== "text" || t8.value === "*" || t8.value === "_" || !Il.test(t8.value) || t8.position.end.offset - t8.position.start.offset === t8.value.length ? t8 : { ...t8, value: r.originalText.slice(t8.position.start.offset, t8.position.end.offset) });
}
function Ul(e, r, t8) {
  return be3(e, (n) => {
    if (!n.children)
      return n;
    let a = n.children.reduce((u, i) => {
      let o = M3(false, u, -1);
      return o && r(o, i) ? u.splice(-1, 1, t8(o, i)) : u.push(i), u;
    }, []);
    return { ...n, children: a };
  });
}
function zl(e) {
  return Ul(e, (r, t8) => r.type === "text" && t8.type === "text", (r, t8) => ({ type: "text", value: r.value + t8.value, position: { start: r.position.start, end: t8.position.end } }));
}
function Ml(e) {
  return be3(e, (r, t8, [n]) => {
    if (r.type !== "text")
      return r;
    let { value: a } = r;
    return n.type === "paragraph" && (t8 === 0 && (a = a.trimStart()), t8 === n.children.length - 1 && (a = a.trimEnd())), { type: "sentence", position: r.position, children: Pr3(a) };
  });
}
function Yl(e, r) {
  return be3(e, (t8, n, a) => {
    if (t8.type === "code") {
      let u = /^\n?(?: {4,}|\t)/.test(r.originalText.slice(t8.position.start.offset, t8.position.end.offset));
      if (t8.isIndented = u, u)
        for (let i = 0; i < a.length; i++) {
          let o = a[i];
          if (o.hasIndentedCodeblock)
            break;
          o.type === "list" && (o.hasIndentedCodeblock = true);
        }
    }
    return t8;
  });
}
function Vl(e, r) {
  return be3(e, (a, u, i) => {
    if (a.type === "list" && a.children.length > 0) {
      for (let o = 0; o < i.length; o++) {
        let s = i[o];
        if (s.type === "list" && !s.isAligned)
          return a.isAligned = false, a;
      }
      a.isAligned = n(a);
    }
    return a;
  });
  function t8(a) {
    return a.children.length === 0 ? -1 : a.children[0].position.start.column - 1;
  }
  function n(a) {
    if (!a.ordered)
      return true;
    let [u, i] = a.children;
    if (Ue3(u, r.originalText).leadingSpaces.length > 1)
      return true;
    let s = t8(u);
    if (s === -1)
      return false;
    if (a.children.length === 1)
      return s % r.tabWidth === 0;
    let l = t8(i);
    return s !== l ? false : s % r.tabWidth === 0 ? true : Ue3(i, r.originalText).leadingSpaces.length > 1;
  }
}
var Eu2 = Nl;
var Gl = /* @__PURE__ */ new Set(["heading", "tableCell", "link", "wikiLink"]);
var $l = new Set(`$(\xA3\xA5\xB7'"\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u301D\uFE59\uFE5B\uFF04\uFF08\uFF3B\uFF5B\uFFE1\uFFE5[{\u2035\uFE34\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE4F\u3018\uFF5F\xAB`);
var jl = new Set(`!%),.:;?]}\xA2\xB0\xB7'"\u2020\u2021\u203A\u2103\u2236\u3001\u3002\u3003\u3006\u3015\u3017\u301E\uFE5A\uFE5C\uFF01\uFF02\uFF05\uFF07\uFF09\uFF0C\uFF0E\uFF1A\uFF1B\uFF1F\uFF3D\uFF5D\uFF5E\u2013\u2014\u2022\u3009\u300B\u300D\uFE30\uFE31\uFE32\uFE33\uFE50\uFE51\uFE52\uFE53\uFE54\uFE55\uFE56\uFE58\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE57\uFF5C\uFF64\u300F\u3011\u3019\u301F\uFF60\xBB\u30FD\u30FE\u30FC\u30A1\u30A3\u30A5\u30A7\u30A9\u30C3\u30E3\u30E5\u30E7\u30EE\u30F5\u30F6\u3041\u3043\u3045\u3047\u3049\u3063\u3083\u3085\u3087\u308E\u3095\u3096\u31F0\u31F1\u31F2\u31F3\u31F4\u31F5\u31F6\u31F7\u31F8\u31F9\u31FA\u31FB\u31FC\u31FD\u31FE\u31FF\u3005\u303B\u2010\u30A0\u301C\uFF5E\u203C\u2047\u2048\u2049\u30FB\u3099\u309A`);
var Cu2 = new Set("!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~");
function Wl({ parent: e }) {
  if (e.usesCJSpaces === void 0) {
    let r = { " ": 0, "": 0 }, { children: t8 } = e;
    for (let n = 1; n < t8.length - 1; ++n) {
      let a = t8[n];
      if (a.type === "whitespace" && (a.value === " " || a.value === "")) {
        let u = t8[n - 1].kind, i = t8[n + 1].kind;
        (u === De3 && i === Oe3 || u === Oe3 && i === De3) && ++r[a.value];
      }
    }
    e.usesCJSpaces = r[" "] > r[""];
  }
  return e.usesCJSpaces;
}
function Hl(e, r) {
  if (r)
    return true;
  let { previous: t8, next: n } = e;
  if (!t8 || !n)
    return true;
  let a = t8.kind, u = n.kind;
  return yu(a) && yu(u) || a === Ce3 && u === De3 || u === Ce3 && a === De3 ? true : a === or2 || u === or2 || a === De3 && u === De3 ? false : Cu2.has(n.value[0]) || Cu2.has(M3(false, t8.value, -1)) ? true : t8.hasTrailingPunctuation || n.hasLeadingPunctuation ? false : Wl(e);
}
function bu2(e) {
  return e === Oe3 || e === De3 || e === Ce3;
}
function yu(e) {
  return e === Oe3 || e === Ce3;
}
function Kl(e, r, t8, n, a) {
  if (t8 !== "always" || e.hasAncestor((s) => Gl.has(s.type)))
    return false;
  if (n)
    return r !== "";
  if (r === " ")
    return true;
  let { previous: u, next: i } = e;
  return !(r === "" && ((u == null ? void 0 : u.kind) === Ce3 && bu2(i == null ? void 0 : i.kind) || (i == null ? void 0 : i.kind) === Ce3 && bu2(u == null ? void 0 : u.kind)) || !a && (i && jl.has(i.value[0]) || u && $l.has(M3(false, u.value, -1))));
}
function vt3(e, r, t8, n) {
  if (t8 === "preserve" && r === `
`)
    return L3;
  let a = r === " " || r === `
` && Hl(e, n);
  return Kl(e, r, t8, n, a) ? a ? qr3 : er3 : a ? " " : "";
}
var Xl = /* @__PURE__ */ new Set(["listItem", "definition", "footnoteDefinition"]);
function Jl(e, r, t8) {
  var a, u, i;
  let { node: n } = e;
  if (uf(e))
    return Pr3(r.originalText.slice(n.position.start.offset, n.position.end.offset)).map((o) => o.type === "word" ? o.value : vt3(e, o.value, r.proseWrap, true));
  switch (n.type) {
    case "front-matter":
      return r.originalText.slice(n.position.start.offset, n.position.end.offset);
    case "root":
      return n.children.length === 0 ? "" : [Xn3(rf(e, r, t8)), L3];
    case "paragraph":
      return Y4(e, r, t8, { postprocessor: Br2 });
    case "sentence":
      return Y4(e, r, t8);
    case "word": {
      let o = N3(false, N3(false, n.value, "*", "\\*"), new RegExp([`(^|${Te2.source})(_+)`, `(_+)(${Te2.source}|$)`].join("|"), "g"), (c, f2, D, h2, p) => N3(false, D ? `${f2}${D}` : `${h2}${p}`, "_", "\\_")), s = (c, f2, D) => c.type === "sentence" && D === 0, l = (c, f2, D) => Ft3(c.children[D - 1]);
      return o !== n.value && (e.match(void 0, s, l) || e.match(void 0, s, (c, f2, D) => c.type === "emphasis" && D === 0, l)) && (o = o.replace(/^(\\?[*_])+/, (c) => N3(false, c, "\\", ""))), o;
    }
    case "whitespace": {
      let { next: o } = e, s = o && /^>|^(?:[*+-]|#{1,6}|\d+[).])$/.test(o.value) ? "never" : r.proseWrap;
      return vt3(e, n.value, s);
    }
    case "emphasis": {
      let o;
      if (Ft3(n.children[0]))
        o = r.originalText[n.position.start.offset];
      else {
        let { previous: s, next: l } = e;
        o = (s == null ? void 0 : s.type) === "sentence" && ((a = M3(false, s.children, -1)) == null ? void 0 : a.type) === "word" && !M3(false, s.children, -1).hasTrailingPunctuation || (l == null ? void 0 : l.type) === "sentence" && ((u = l.children[0]) == null ? void 0 : u.type) === "word" && !l.children[0].hasLeadingPunctuation || e.hasAncestor((f2) => f2.type === "emphasis") ? "*" : "_";
      }
      return [o, Y4(e, r, t8), o];
    }
    case "strong":
      return ["**", Y4(e, r, t8), "**"];
    case "delete":
      return ["~~", Y4(e, r, t8), "~~"];
    case "inlineCode": {
      let o = r.proseWrap === "preserve" ? n.value : N3(false, n.value, `
`, " "), s = Zn3(o, "`"), l = "`".repeat(s || 1), c = o.startsWith("`") || o.endsWith("`") || /^[\n ]/.test(o) && /[\n ]$/.test(o) && /[^\n ]/.test(o) ? " " : "";
      return [l, c, o, c, l];
    }
    case "wikiLink": {
      let o = "";
      return r.proseWrap === "preserve" ? o = n.value : o = N3(false, n.value, /[\t\n]+/g, " "), ["[[", o, "]]"];
    }
    case "link":
      switch (r.originalText[n.position.start.offset]) {
        case "<": {
          let o = "mailto:";
          return ["<", n.url.startsWith(o) && r.originalText.slice(n.position.start.offset + 1, n.position.start.offset + 1 + o.length) !== o ? n.url.slice(o.length) : n.url, ">"];
        }
        case "[":
          return ["[", Y4(e, r, t8), "](", Et2(n.url, ")"), Ir3(n.title, r), ")"];
        default:
          return r.originalText.slice(n.position.start.offset, n.position.end.offset);
      }
    case "image":
      return ["![", n.alt || "", "](", Et2(n.url, ")"), Ir3(n.title, r), ")"];
    case "blockquote":
      return ["> ", ve3("> ", Y4(e, r, t8))];
    case "heading":
      return ["#".repeat(n.depth) + " ", Y4(e, r, t8)];
    case "code": {
      if (n.isIndented) {
        let l = " ".repeat(4);
        return ve3(l, [l, Ee3(n.value, L3)]);
      }
      let o = r.__inJsTemplate ? "~" : "`", s = o.repeat(Math.max(3, Sr3(n.value, o) + 1));
      return [s, n.lang || "", n.meta ? " " + n.meta : "", L3, Ee3(Lr2(n, r.originalText), L3), L3, s];
    }
    case "html": {
      let { parent: o, isLast: s } = e, l = o.type === "root" && s ? n.value.trimEnd() : n.value, c = /^<!--.*-->$/s.test(l);
      return Ee3(l, c ? L3 : qe3(rr3));
    }
    case "list": {
      let o = xu2(n, e.parent), s = hu2(n, r);
      return Y4(e, r, t8, { processor(l) {
        let c = D(), f2 = l.node;
        if (f2.children.length === 2 && f2.children[1].type === "html" && f2.children[0].position.start.column !== f2.children[1].position.start.column)
          return [c, Au(l, r, t8, c)];
        return [c, ve3(" ".repeat(c.length), Au(l, r, t8, c))];
        function D() {
          let h2 = n.ordered ? (l.isFirst ? n.start : s ? 1 : n.start + l.index) + (o % 2 === 0 ? ". " : ") ") : o % 2 === 0 ? "- " : "* ";
          return n.isAligned || n.hasIndentedCodeblock ? Ql(h2, r) : h2;
        }
      } });
    }
    case "thematicBreak": {
      let { ancestors: o } = e, s = o.findIndex((c) => c.type === "list");
      return s === -1 ? "---" : xu2(o[s], o[s + 1]) % 2 === 0 ? "***" : "---";
    }
    case "linkReference":
      return ["[", Y4(e, r, t8), "]", n.referenceType === "full" ? Ct3(n) : n.referenceType === "collapsed" ? "[]" : ""];
    case "imageReference":
      switch (n.referenceType) {
        case "full":
          return ["![", n.alt || "", "]", Ct3(n)];
        default:
          return ["![", n.alt, "]", n.referenceType === "collapsed" ? "[]" : ""];
      }
    case "definition": {
      let o = r.proseWrap === "always" ? qr3 : " ";
      return Qe3([Ct3(n), ":", Je3([o, Et2(n.url), n.title === null ? "" : [o, Ir3(n.title, r, false)]])]);
    }
    case "footnote":
      return ["[^", Y4(e, r, t8), "]"];
    case "footnoteReference":
      return qu2(n);
    case "footnoteDefinition": {
      let o = n.children.length === 1 && n.children[0].type === "paragraph" && (r.proseWrap === "never" || r.proseWrap === "preserve" && n.children[0].position.start.line === n.children[0].position.end.line);
      return [qu2(n), ": ", o ? Y4(e, r, t8) : Qe3([ve3(" ".repeat(4), Y4(e, r, t8, { processor: ({ isFirst: s }) => s ? Qe3([er3, t8()]) : t8() })), ((i = e.next) == null ? void 0 : i.type) === "footnoteDefinition" ? er3 : ""])];
    }
    case "table":
      return ef(e, r, t8);
    case "tableCell":
      return Y4(e, r, t8);
    case "break":
      return /\s/.test(r.originalText[n.position.start.offset]) ? ["  ", qe3(rr3)] : ["\\", L3];
    case "liquidNode":
      return Ee3(n.value, L3);
    case "import":
    case "export":
    case "jsx":
      return n.value;
    case "esComment":
      return ["{/* ", n.value, " */}"];
    case "math":
      return ["$$", L3, n.value ? [Ee3(n.value, L3), L3] : "", "$$"];
    case "inlineMath":
      return r.originalText.slice(Se3(n), _e3(n));
    case "tableRow":
    case "listItem":
    case "text":
    default:
      throw new tu2(n, "Markdown");
  }
}
function Au(e, r, t8, n) {
  let { node: a } = e, u = a.checked === null ? "" : a.checked ? "[x] " : "[ ] ";
  return [u, Y4(e, r, t8, { processor({ node: i, isFirst: o }) {
    if (o && i.type !== "list")
      return ve3(" ".repeat(u.length), t8());
    let s = " ".repeat(of(r.tabWidth - n.length, 0, 3));
    return [s, ve3(s, t8())];
  } })];
}
function Ql(e, r) {
  let t8 = n();
  return e + " ".repeat(t8 >= 4 ? 0 : t8);
  function n() {
    let a = e.length % r.tabWidth;
    return a === 0 ? 0 : r.tabWidth - a;
  }
}
function xu2(e, r) {
  return Zl(e, r, (t8) => t8.ordered === e.ordered);
}
function Zl(e, r, t8) {
  let n = -1;
  for (let a of r.children)
    if (a.type === e.type && t8(a) ? n++ : n = -1, a === e)
      return n;
}
function ef(e, r, t8) {
  let { node: n } = e, a = [], u = e.map(() => e.map(({ index: f2 }) => {
    let D = Qn3(t8(), r).formatted, h2 = nr2(D);
    return a[f2] = Math.max(a[f2] || 3, h2), { text: D, width: h2 };
  }, "children"), "children"), i = s(false);
  if (r.proseWrap !== "never")
    return [Ze3, i];
  let o = s(true);
  return [Ze3, Qe3(Un3(o, i))];
  function s(f2) {
    let D = [c(u[0], f2), l(f2)];
    return u.length > 1 && D.push(tr3(Re3, u.slice(1).map((h2) => c(h2, f2)))), tr3(Re3, D);
  }
  function l(f2) {
    return `| ${a.map((h2, p) => {
      let d = n.align[p], m = d === "center" || d === "left" ? ":" : "-", F3 = d === "center" || d === "right" ? ":" : "-", y2 = f2 ? "-" : "-".repeat(h2 - 2);
      return `${m}${y2}${F3}`;
    }).join(" | ")} |`;
  }
  function c(f2, D) {
    return `| ${f2.map(({ text: p, width: d }, m) => {
      if (D)
        return p;
      let F3 = a[m] - d, y2 = n.align[m], v3 = 0;
      y2 === "right" ? v3 = F3 : y2 === "center" && (v3 = Math.floor(F3 / 2));
      let B = F3 - v3;
      return `${" ".repeat(v3)}${p}${" ".repeat(B)}`;
    }).join(" | ")} |`;
  }
}
function rf(e, r, t8) {
  let n = [], a = null, { children: u } = e.node;
  for (let [i, o] of u.entries())
    switch (bt3(o)) {
      case "start":
        a === null && (a = { index: i, offset: o.position.end.offset });
        break;
      case "end":
        a !== null && (n.push({ start: a, end: { index: i, offset: o.position.start.offset } }), a = null);
        break;
      default:
        break;
    }
  return Y4(e, r, t8, { processor({ index: i }) {
    if (n.length > 0) {
      let o = n[0];
      if (i === o.start.index)
        return [ku(u[o.start.index]), r.originalText.slice(o.start.offset, o.end.offset), ku(u[o.end.index])];
      if (o.start.index < i && i < o.end.index)
        return false;
      if (i === o.end.index)
        return n.shift(), false;
    }
    return t8();
  } });
}
function Y4(e, r, t8, n = {}) {
  let { postprocessor: a = (o) => o, processor: u = () => t8() } = n, i = [];
  return e.each(() => {
    let o = u(e);
    o !== false && (i.length > 0 && tf(e) && (i.push(L3), (nf(e, r) || Bu(e)) && i.push(L3), Bu(e) && i.push(L3)), i.push(o));
  }, "children"), a(i);
}
function ku(e) {
  if (e.type === "html")
    return e.value;
  if (e.type === "paragraph" && Array.isArray(e.children) && e.children.length === 1 && e.children[0].type === "esComment")
    return ["{/* ", e.children[0].value, " */}"];
}
function bt3(e) {
  let r;
  if (e.type === "html")
    r = e.value.match(/^<!--\s*prettier-ignore(?:-(start|end))?\s*-->$/);
  else {
    let t8;
    e.type === "esComment" ? t8 = e : e.type === "paragraph" && e.children.length === 1 && e.children[0].type === "esComment" && (t8 = e.children[0]), t8 && (r = t8.value.match(/^prettier-ignore(?:-(start|end))?$/));
  }
  return r ? r[1] || "next" : false;
}
function tf({ node: e, parent: r }) {
  let t8 = mt3.has(e.type), n = e.type === "html" && Or3.has(r.type);
  return !t8 && !n;
}
function wu2(e, r) {
  return e.type === "listItem" && (e.spread || r.originalText.charAt(e.position.end.offset - 1) === `
`);
}
function nf({ node: e, previous: r, parent: t8 }, n) {
  if (wu2(r, n))
    return true;
  let i = r.type === e.type && Xl.has(e.type), o = t8.type === "listItem" && !wu2(t8, n), s = bt3(r) === "next", l = e.type === "html" && r.type === "html" && r.position.end.line + 1 === e.position.start.line, c = e.type === "html" && t8.type === "listItem" && r.type === "paragraph" && r.position.end.line + 1 === e.position.start.line;
  return !(i || o || s || l || c);
}
function Bu({ node: e, previous: r }) {
  let t8 = r.type === "list", n = e.type === "code" && e.isIndented;
  return t8 && n;
}
function uf(e) {
  let r = e.findAncestor((t8) => t8.type === "linkReference" || t8.type === "imageReference");
  return r && (r.type !== "linkReference" || r.referenceType !== "full");
}
var af = (e, r) => {
  for (let t8 of r)
    e = N3(false, e, t8, encodeURIComponent(t8));
  return e;
};
function Et2(e, r = []) {
  let t8 = [" ", ...Array.isArray(r) ? r : [r]];
  return new RegExp(t8.map((n) => `\\${n}`).join("|")).test(e) ? `<${af(e, "<>")}>` : e;
}
function Ir3(e, r, t8 = true) {
  if (!e)
    return "";
  if (t8)
    return " " + Ir3(e, r, false);
  if (e = N3(false, e, /\\(?=["')])/g, ""), e.includes('"') && e.includes("'") && !e.includes(")"))
    return `(${e})`;
  let n = ru2(e, r.singleQuote);
  return e = N3(false, e, "\\", "\\\\"), e = N3(false, e, n, `\\${n}`), `${n}${e}${n}`;
}
function of(e, r, t8) {
  return e < r ? r : e > t8 ? t8 : e;
}
function sf(e) {
  return e.index > 0 && bt3(e.previous) === "next";
}
function Ct3(e) {
  return `[${(0, Tu2.default)(e.label)}]`;
}
function qu2(e) {
  return `[^${e.label}]`;
}
var cf = { preprocess: Eu2, print: Jl, embed: mu2, massageAstNode: cu2, hasPrettierIgnore: sf, insertPragma: au2, getVisitorKeys: vu2 };
var Su2 = cf;
var _u = [{ linguistLanguageId: 222, name: "Markdown", type: "prose", color: "#083fa1", aliases: ["md", "pandoc"], aceMode: "markdown", codemirrorMode: "gfm", codemirrorMimeType: "text/x-gfm", wrap: true, extensions: [".md", ".livemd", ".markdown", ".mdown", ".mdwn", ".mkd", ".mkdn", ".mkdown", ".ronn", ".scd", ".workbook"], filenames: ["contents.lr", "README"], tmScope: "text.md", parsers: ["markdown"], vscodeLanguageIds: ["markdown"] }, { linguistLanguageId: 222, name: "MDX", type: "prose", color: "#083fa1", aliases: ["md", "pandoc"], aceMode: "markdown", codemirrorMode: "gfm", codemirrorMimeType: "text/x-gfm", wrap: true, extensions: [".mdx"], filenames: [], tmScope: "text.md", parsers: ["mdx"], vscodeLanguageIds: ["mdx"] }];
var yt3 = { bracketSpacing: { category: "Common", type: "boolean", default: true, description: "Print spaces between brackets.", oppositeDescription: "Do not print spaces between brackets." }, singleQuote: { category: "Common", type: "boolean", default: false, description: "Use single quotes instead of double quotes." }, proseWrap: { category: "Common", type: "choice", default: "preserve", description: "How to wrap prose.", choices: [{ value: "always", description: "Wrap prose if it exceeds the print width." }, { value: "never", description: "Do not wrap prose." }, { value: "preserve", description: "Wrap prose as-is." }] }, bracketSameLine: { category: "Common", type: "boolean", default: false, description: "Put > of opening tags on the last line instead of on a new line." }, singleAttributePerLine: { category: "Common", type: "boolean", default: false, description: "Enforce single attribute per line in HTML, Vue and JSX." } };
var lf = { proseWrap: yt3.proseWrap, singleQuote: yt3.singleQuote };
var Ou2 = lf;
var _n3 = {};
Pn3(_n3, { markdown: () => km, mdx: () => wm, remark: () => km });
var Kc = Ne3(Lu2(), 1);
var Xc = Ne3(Ku2(), 1);
var Jc = Ne3(Gs2(), 1);
var Qc = Ne3(Nc(), 1);
var gm = /^import\s/;
var vm = /^export\s/;
var Rc = "[a-z][a-z0-9]*(\\.[a-z][a-z0-9]*)*|";
var Uc = /<!---->|<!---?[^>-](?:-?[^-])*-->/;
var Em = /^{\s*\/\*(.*)\*\/\s*}/;
var Cm = `

`;
var zc = (e) => gm.test(e);
var Sn2 = (e) => vm.test(e);
var Mc = (e, r) => {
  let t8 = r.indexOf(Cm), n = r.slice(0, t8);
  if (Sn2(n) || zc(n))
    return e(n)({ type: Sn2(n) ? "export" : "import", value: n });
};
var Yc = (e, r) => {
  let t8 = Em.exec(r);
  if (t8)
    return e(t8[0])({ type: "esComment", value: t8[1].trim() });
};
Mc.locator = (e) => Sn2(e) || zc(e) ? -1 : 1;
Yc.locator = (e, r) => e.indexOf("{", r);
var Vc = function() {
  let { Parser: e } = this, { blockTokenizers: r, blockMethods: t8, inlineTokenizers: n, inlineMethods: a } = e.prototype;
  r.esSyntax = Mc, n.esComment = Yc, t8.splice(t8.indexOf("paragraph"), 0, "esSyntax"), a.splice(a.indexOf("text"), 0, "esComment");
};
var bm = function() {
  let e = this.Parser.prototype;
  e.blockMethods = ["frontMatter", ...e.blockMethods], e.blockTokenizers.frontMatter = r;
  function r(t8, n) {
    let a = ar3(n);
    if (a.frontMatter)
      return t8(a.frontMatter.raw)(a.frontMatter);
  }
  r.onlyAtStart = true;
};
var Gc = bm;
function ym() {
  return (e) => be3(e, (r, t8, [n]) => r.type !== "html" || Uc.test(r.value) || Or3.has(n.type) ? r : { ...r, type: "jsx" });
}
var $c = ym;
var Am = function() {
  let e = this.Parser.prototype, r = e.inlineMethods;
  r.splice(r.indexOf("text"), 0, "liquid"), e.inlineTokenizers.liquid = t8;
  function t8(n, a) {
    let u = a.match(/^({%.*?%}|{{.*?}})/s);
    if (u)
      return n(u[0])({ type: "liquidNode", value: u[0] });
  }
  t8.locator = function(n, a) {
    return n.indexOf("{", a);
  };
};
var jc = Am;
var xm = function() {
  let e = "wikiLink", r = /^\[\[(?<linkContents>.+?)]]/s, t8 = this.Parser.prototype, n = t8.inlineMethods;
  n.splice(n.indexOf("link"), 0, e), t8.inlineTokenizers.wikiLink = a;
  function a(u, i) {
    let o = r.exec(i);
    if (o) {
      let s = o.groups.linkContents.trim();
      return u(o[0])({ type: e, value: s });
    }
  }
  a.locator = function(u, i) {
    return u.indexOf("[", i);
  };
};
var Wc = xm;
function Zc({ isMDX: e }) {
  return (r) => {
    let t8 = (0, Qc.default)().use(Jc.default, { commonmark: true, ...e && { blocks: [Rc] } }).use(Kc.default).use(Gc).use(Xc.default).use(e ? Vc : Hc).use(jc).use(e ? $c : Hc).use(Wc);
    return t8.run(t8.parse(r));
  };
}
function Hc() {
}
var el = { astFormat: "mdast", hasPragma: iu2, locStart: Se3, locEnd: _e3 };
var km = { ...el, parse: Zc({ isMDX: false }) };
var wm = { ...el, parse: Zc({ isMDX: true }) };
var Bm = { mdast: Su2 };
var KE = On2;

// src/modals/HelpModal.ts
var import_obsidian3 = require("obsidian");

// src/settings/help.ts
var helpModals = {
  appUrl: {
    title: "App URL",
    description: '<p>Load the playground from a custom URL (e.g. <a href="https://livecodes.io/docs/features/self-hosting" data-tooltip-position="top" aria-label="https://livecodes.io/docs/features/self-hosting" target="_blank" rel="noopener" class="external-link">self-hosted app</a>, <a href="https://livecodes.io/docs/features/permanent-url" data-tooltip-position="top" aria-label="https://livecodes.io/docs/features/permanent-url" target="_blank" rel="noopener" class="external-link">permanent URL</a>). Trailing slash <strong>/</strong> is required.</p><p>Default: <strong class="appurl-copy" aria-label="Click to copy" data-tooltip-position="top">https://v28.livecodes.io/</strong>'
  },
  shortUrl: {
    title: "Short share URL",
    description: '<p><span class="alert-icon" aria-label="Info"></span><span>This requires sending the playground configuration (<strong>including source code</strong>) to a server that saves the code and provides a short Id which can be used to retrieve the playground. <strong>It cannot then be deleted</strong>.</span></p><p>The app hosted on <a href="https://livecodes.io" target="_blank" rel="noopener" class="external-link">https://livecodes.io</a> uses an API endpoint specifically provided to generate short URLs for LiveCodes share service. We will make every effort to keep that online and available for free use, so long as it is not abused.</p><p>Short URLs generated by LiveCodes share service are <strong>private</strong> by default and are not listed or indexed.</p><p>See <a href="https://livecodes.io/docs/features/share" data-tooltip-position="top" aria-label="https://livecodes.io/docs/features/share" target="_blank" rel="noopener" class="external-link">Livecodes documentation</a> page on sharing for further up-to-date details.</p>'
  },
  githubToken: {
    title: "Github API token",
    description: 'Add a Github API token to enable creating gists from a playground. Create a token at <a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener" class="external-link">https://github.com/settings/tokens/new</a> (only gist permission required)'
  },
  githubGistPublic: {
    title: "Github gist privacy",
    description: `<p>Gists can be public or secret. public gists show up in <a href="https://gist.github.com/discover" data-tooltip-position="top" aria-label="https://gist.github.com/discover" target="_blank" rel="noopener" class="external-link">Github Discover</a>, where people can browse new gists as they're created. They're also searchable, so you can use them if you'd like other people to find and see your work.</p><p>Secret gists don't show up in <a href="https://gist.github.com/discover" data-tooltip-position="top" aria-label="https://gist.github.com/discover" target="_blank" rel="noopener" class="external-link">Github Discover</a> and are not searchable unless you are logged in and are the author of the secret gist. Secret gists aren't private. If you send the URL of a secret gist to a friend, they'll be able to see it. However, if someone you don't know discovers the URL, they'll also be able to see your gist.</p><p>After creating a gist, you cannot convert it from public to secret. However, a secret gist can be made public by editing the gist and updating the visibility to public.</p><p>See <a href="https://docs.github.com/en/get-started/writing-on-github/editing-and-sharing-content-with-gists/creating-gists" target="_blank" rel="noopener" class="external-link" data-tooltip-position="top" aria-label="https://docs.github.com/en/get-started/writing-on-github/editing-and-sharing-content-with-gists/creating-gists">Github gist documentation</a> page on creating gists for further up-to-date details.</p>`
  },
  playgroundFolder: {
    title: "Playground folder",
    description: "<p>Select a vault folder to save & persist playground configuration files (JSON).</p><p>Default: <strong>playgrounds</strong></p>"
  },
  notesFolder: {
    title: "Notes folder",
    description: "<p>Select a vault folder to save playground notes (Markdown).</p><p>Default: <strong>playgrounds/notes</strong></p>"
  },
  autoWatch: {
    title: "Auto watch",
    description: "<p>Automatically watch for playground changes, then update the corresponding configuration file (JSON).</p><p>Default: <strong>enabled</strong></p>"
  },
  editor: {
    title: "Code editor",
    description: '<p>The following code editors are supported:</p><div><p><strong><a href="https://microsoft.github.io/monaco-editor/" data-tooltip-position="top" aria-label="https://microsoft.github.io/monaco-editor/" target="_blank" rel="noopener" class="external-link">monaco</a></strong>: This is the code editor that powers <strong>VS Code</strong>. It is feature-rich and supports autocomplete with <strong>IntelliSense</strong> (including types for custom libraries).<!-- However, it requires a relatively large download and is not supported in mobile browsers. --></p><p><strong><a href="https://codemirror.net/" data-tooltip-position="top" aria-label="https://codemirror.net/" target="_blank" rel="noopener" class="external-link">codemirror</a></strong>: Has many editing features, including autocomplete, with good <strong>mobile support</strong>.</p><p><strong><a href="https://medv.io/codejar/" data-tooltip-position="top" aria-label="https://medv.io/codejar/" target="_blank" rel="noopener" class="external-link">codejar</a></strong>: A <strong>lightweight</strong> code editor with very basic editing features. PrismJs is used for syntax highlighting. Please note that some editor settings are not supported in CodeJar.</p></div><p>Default: <strong>monaco</strong></p><p>See <a href="https://livecodes.io/docs/features/editor-settings#code-editor" data-tooltip-position="top" aria-label="https://livecodes.io/docs/features/editor-settings#code-editor" target="_blank" rel="noopener" class="external-link">Livecodes docs</a> for further details.</p>'
  },
  editorTheme: {
    title: "Editor theme",
    description: "<p>Set the editor theme for each editor and on light/dark modes.</p>"
  },
  enableAI: {
    title: "Enable AI",
    description: '<p>LiveCodes supports AI-powered code completion, completely for <strong>free</strong> with <strong>no account or API token required</strong>, powered by <a href="https://codeium.com/" data-tooltip-position="top" aria-label="https://codeium.com/" target="_blank" rel="noopener" class="external-link">Codeium</a>, the ultrafast Copilot alternative.</p><p>The large generative machine learning model is capable of understanding the context of your code and comments in order to generate suggestions on what you might want to type next.</p><p>It has a wide range of language support.</p><p>Currently, only Monaco editor is supported. Wider editor support is planned.</p><p class="admonitionContent_S0QG"><p><span class="alert-icon" aria-label="Info"></span><span>Please note that when using Codeium AI assistant, your code is sent to their servers for code completion. However, your code is not used for training their model. Check Codeium <a href="https://codeium.com/faq#Will-Codeium-regurgitate-private-code%3F" data-tooltip-position="top" aria-label="https://codeium.com/faq#Will-Codeium-regurgitate-private-code%3F" target="_blank" rel="noopener" class="external-link">FAQ</a> and <a href="https://codeium.com/privacy-policy" data-tooltip-position="top" aria-label="https://codeium.com/privacy-policy" target="_blank" rel="noopener" class="external-link">privacy policy</a> for more details.</span></p>'
  },
  noteTemplate: {
    title: "Markdown template",
    description: '<p>Available (<a href="https://mozilla.github.io/nunjucks/templating.html" data-tooltip-position="top" aria-label="https://mozilla.github.io/nunjucks/templating.html" target="_blank" rel="noopener" class="external-link">Nunjucks</a>) variables:<table class="templates-table"><thead><tr><td>variable</td><td>replaced w/</td></tr></thead><tbody><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{appUrl}}</code></td><td>https://v28.livecodes.io/</td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{date}}</code></td><td>YYYY-MM-DD</td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{time}}</code></td><td>HH:mm</td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{timeFull}}</code></td><td>HH:mm:ss</td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{title}}</code></td><td><strong>title</strong> from playground settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{descProperty}}</code></td><td><strong>description</strong> from playground settings (formatted as a YAML multi-line string property)</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{descString}}</code></td><td><strong>description</strong> from playground settings (formatted as a markdown string)</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{tagsList}}</code></td><td><strong>tags</strong> from playground settings (formatted as a YAML list property)</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{tagsString}}</code></td><td><strong>tags</strong> from playground settings (formatted as a markdown string)</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{obsidianUrl}}</code></td><td>An Obsidian <strong>URL</strong> to directly open the playground in Livecodes</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{head}}</code></td><td><strong>head</strong> from playground settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{htmlAttrs}}</code></td><td><strong>html Attributes</strong> from playground settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{stylesheetsList}}</code></td><td>markdown list of <strong>stylesheet(s)</strong> from external resources settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{scriptsList}}</code></td><td>markdown list of <strong>script(s)</strong> from external resources settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{cssPreset}}</code></td><td><strong>CSS Preset</strong> from external resources settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{markupLanguage}}</code></td><td>markup <strong>language</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{markupCode}}</code></td><td>markup <strong>code</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{styleLanguage}}</code></td><td>style <strong>language</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{styleCode}}</code></td><td>style <strong>code</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{scriptLanguage}}</code></td><td>script <strong>language</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{scriptCode}}</code></td><td>script <strong>code</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{htmlResults}}</code></td><td><strong>HTML results</strong> from playground editor</td></tr></td></tr></tbody></table></p>'
  },
  gistTemplate: {
    title: "Gist markdown template",
    description: '<p>Available (<a href="https://mozilla.github.io/nunjucks/templating.html" data-tooltip-position="top" aria-label="https://mozilla.github.io/nunjucks/templating.html" target="_blank" rel="noopener" class="external-link">Nunjucks</a>) variables:<table class="templates-table"><thead><tr><td>variable</td><td>replaced w/</td></tr></thead><tbody><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{appUrl}}</code></td><td>https://v28.livecodes.io/</td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{date}}</code></td><td>YYYY-MM-DD</td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{time}}</code></td><td>HH:mm</td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{timeFull}}</code></td><td>HH:mm:ss</td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{title}}</code></td><td><strong>title</strong> from playground settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{descProperty}}</code></td><td><strong>description</strong> from playground settings (formatted as a YAML multi-line string property)</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{descString}}</code></td><td><strong>description</strong> from playground settings (formatted as a markdown string)</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{tagsList}}</code></td><td><strong>tags</strong> from playground settings (formatted as a YAML list property)</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{tagsString}}</code></td><td><strong>tags</strong> from playground settings (formatted as a markdown string)</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{obsidianUrl}}</code></td><td>An Obsidian <strong>URL</strong> to directly open the playground in Livecodes</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{head}}</code></td><td><strong>head</strong> from playground settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{htmlAttrs}}</code></td><td><strong>html Attributes</strong> from playground settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{stylesheetsList}}</code></td><td>markdown list of <strong>stylesheet(s)</strong> from external resources settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{scriptsList}}</code></td><td>markdown list of <strong>script(s)</strong> from external resources settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{cssPreset}}</code></td><td><strong>CSS Preset</strong> from external resources settings</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{markupLanguage}}</code></td><td>markup <strong>language</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{markupCode}}</code></td><td>markup <strong>code</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{styleLanguage}}</code></td><td>style <strong>language</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{styleCode}}</code></td><td>style <strong>code</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{scriptLanguage}}</code></td><td>script <strong>language</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{scriptCode}}</code></td><td>script <strong>code</strong> from playground editor</td></tr></td></tr><tr><td><code class="tpl-copy" aria-label="Click to copy" data-tooltip-position="top">{{htmlResults}}</code></td><td><strong>HTML results</strong> from playground editor</td></tr></td></tr></tbody></table></p>'
  },
  sponsorship: {
    title: "A message from the developers",
    description: "If this plugin adds value for you and you would like to help support continued development, please consider sponsoring the developers."
  }
};
var buttonTour = [
  {
    element: ".watch-button",
    popover: {
      title: "Watch for changes",
      description: '<p>Automatically watch for playground changes, then update the corresponding playground configuration file (JSON).</p><p>Default: <strong>enabled</strong></p><div><button data-prev="0" disabled="disabled">\u2190</button><span class="paging">(1 of 10)</span><button data-tooltip-position="top" aria-label="Next" data-step="1">\u2192</button></div>'
    }
  },
  {
    element: ".create-note-button",
    popover: {
      title: "Create note",
      description: '<p>Create a markdown note using the markdown template configured in the settings.</p><div><button data-tooltip-position="top" aria-label="Previous" data-prev="1">\u2190</button><span class="paging">(2 of 10)</span><button data-tooltip-position="top" aria-label="Next" data-step="2">\u2192</button></div>'
    }
  },
  {
    element: ".save-as-new-button",
    popover: {
      title: "Save as new playground",
      description: '<p><span class="default-icon"></span><span>The new playground will be opened in a new playground view.</span></p><div><button data-tooltip-position="top" aria-label="Previous" data-prev="2">\u2190</button><span class="paging">(3 of 10)</span><button data-tooltip-position="top" aria-label="Next" data-step="3">\u2192</button></div>'
    }
  },
  {
    element: ".save-html-button",
    popover: {
      title: "Save as HTML",
      description: '<p>Save playground results to HTML. A prompt will ask where to save the HTML file on your device.</p><div><button data-tooltip-position="top" aria-label="Previous" data-prev="3">\u2190</button><span class="paging">(4 of 10)</span><button data-tooltip-position="top" aria-label="Next" data-step="4">\u2192</button>'
    }
  },
  {
    element: ".copy-html-button",
    popover: {
      title: "Copy HTML to clipboard",
      description: '<p>Copy playground results HTML to the clipboard.</p><div><button data-tooltip-position="top" aria-label="Previous" data-prev="4">\u2190</button><span class="paging">(5 of 10)</span><button data-tooltip-position="top" aria-label="Next" data-step="5">\u2192</button>'
    }
  },
  {
    element: ".share-url-button",
    popover: {
      title: "Copy share URL to clipboard",
      description: '<p>The generated URL encodes the playground configuration in a base-64-encoded compressed query string. This step is generated locally without sending the code to any server. However, depending on the size of the playground, the URL can be very long.</p><p>If <strong>Short share URL</strong> is enabled in settings, a short share URL will be generated.</p><p><span class="alert-icon" aria-label="Info"></span><span>This requires sending the playground configuration (<strong>including source code</strong>) to a server that saves the code and provides a short Id which can be used to retrieve the playground.</span></p><p>See <a href="https://livecodes.io/docs/features/share" data-tooltip-position="top" aria-label="https://livecodes.io/docs/features/share" target="_blank" rel="noopener" class="external-link">Livecodes documentation</a> page on sharing for further up-to-date details.</p><div><button data-tooltip-position="top" aria-label="Previous" data-prev="5">\u2190</button><span class="paging">(6 of 10)</span><button data-tooltip-position="top" aria-label="Next" data-step="6">\u2192</button>'
    }
  },
  {
    element: ".create-gist-button",
    popover: {
      title: "Create Github gist",
      description: `<p>Create a gist which optionally consists of a Livecodes.io playground link and 3 files.</p><ol><li>The HTML results (<code>.html</code>)</li><li>The playground configuration file (<code>.json</code>)</li><li>A markdown file (<code>.md</code>) using the markdown template configured in the settings.</li></ol><p>3 URLs are copied to your clipboard and printed to the developer console.</p><ol><li>link to the gist</li><li>link to the Livecodes' PUBLIC url which can be used to share your playground.</li><li>link to open the playground in Obsidian</li></ol><div><button data-tooltip-position="top" aria-label="Previous" data-prev="6">\u2190</button><span class="paging">(7 of 10)</span><button data-tooltip-position="top" aria-label="Next" data-step="7">\u2192</button>`
    }
  },
  {
    element: ".theme-mode-button",
    popover: {
      title: "Set theme mode",
      description: '<p>Sets the playground theme to light/dark mode.</p><div><button data-tooltip-position="top" aria-label="Previous" data-prev="7">\u2190</button><span class="paging">(8 of 10)</span><button data-tooltip-position="top" aria-label="Next" data-step="8">\u2192</button>'
    }
  },
  {
    element: ".external-resources-button",
    popover: {
      title: "External resources",
      description: '<p>URLs to external CSS <strong>stylesheets</strong> and JS <strong>scripts</strong> can be added to the playground. URLs to stylesheets/scripts should be added each in a separate line. Stylesheets and scripts are loaded in the result page before editor codes. Thus, CSS properties defined in external stylesheets can be overriden in the style editor. Global javascript variables defined in external scripts are available to code in the script editor.</p><p>Choice of <strong>CSS presets</strong>, currently <a href="https://necolas.github.io/normalize.css/" data-tooltip-position="top" aria-label="https://necolas.github.io/normalize.css/" target="_blank" rel="noopener" class="external-link">Normalize.css</a> and <a href="https://meyerweb.com/eric/tools/css/reset/" data-tooltip-position="top" aria-label="https://meyerweb.com/eric/tools/css/reset/" target="_blank" rel="noopener" class="external-link">Reset CSS</a>.</p><div><button data-tooltip-position="top" aria-label="Previous" data-prev="8">\u2190</button><span class="paging">(9 of 10)</span><button data-tooltip-position="top" aria-label="Next" data-step="9">\u2192</button>'
    }
  },
  {
    element: ".playground-settings-button",
    popover: {
      title: "Playground settings",
      description: `<p>1. <strong>Title:</strong> used in result title tag and meta/title tag.</p><p>2. <strong>Description</strong>: used in result meta/description tag.</p><p>3. <strong>Tags</strong>: used when creating a playground note.</p><p>4. <strong>&lt;head&gt;:</strong> content added to the result &lt;head&gt; element. <p>Default:<br /><strong class="code">&lt;meta charset="UTF-8" /&gt;</strong><br /><strong class="code">&lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;</strong><p>5. <strong>htmlAttrs:</strong> attributes added to the result pane <strong class="code">&lt;html&gt;</strong> element. It can be an object or a string.</p><p>Example:<br /><strong class="code">{ lang: 'en', class: 'dark' }</strong> or <strong class="code">lang="en" class="dark"</strong><br />becomes<br /><strong class="code">&lt;html lang="en" class="dark"&gt;</strong></p><p>Default: <strong class="code">lang="en" class=""</strong></p><div><button data-tooltip-position="top" aria-label="Previous" data-prev="9">\u2190</button><span class="paging">(10 of 10)</span><button data-step="10" disabled="disabled">\u2192</button>`
    }
  }
];

// src/utils/index.ts
var import_obsidian2 = require("obsidian");

// src/utils/notice.ts
var import_obsidian = require("obsidian");

// src/assets/indicator.ts
var INDICATOR_SVG = `<svg height="120" viewBox="0 0 135 140" xmlns="http://www.w3.org/2000/svg"><rect y="10" width="15" height="120" rx="6"><animate attributeName="height" begin="0.5s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite" /><animate attributeName="y" begin="0.5s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite" /></rect><rect x="30" y="10" width="15" height="120" rx="6"><animate attributeName="height" begin="0.25s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite" /><animate attributeName="y" begin="0.25s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite" /></rect><rect x="60" width="15" height="140" rx="6"><animate attributeName="height" begin="0s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite" /><animate attributeName="y" begin="0s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite" /></rect><rect x="90" y="10" width="15" height="120" rx="6"><animate attributeName="height" begin="0.25s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite" /><animate attributeName="y" begin="0.25s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite" /></rect><rect x="120" y="10" width="15" height="120" rx="6"><animate attributeName="height" begin="0.5s" dur="1s" values="120;110;100;90;80;70;60;50;40;140;120" calcMode="linear" repeatCount="indefinite" /><animate attributeName="y" begin="0.5s" dur="1s" values="10;15;20;25;30;35;40;45;50;0;10" calcMode="linear" repeatCount="indefinite" /></rect></svg>`;

// src/utils/notice.ts
(0, import_obsidian.addIcon)("indicator", INDICATOR_SVG);
function showNotice(message, duration = 4e3, type) {
  const fragment = document.createDocumentFragment();
  let wrapper = fragment.createDiv({
    attr: {
      style: `display: flex; gap: .75em;`
    }
  });
  if (type === "error") {
    const header = wrapper.createDiv({
      attr: {
        style: `color: var(--color-red);`
      }
    });
    (0, import_obsidian.setIcon)(header, "alert-triangle");
  }
  if (type === "warning") {
    const header = wrapper.createDiv({
      attr: {
        style: `color: var(--color-yellow);`
      }
    });
    (0, import_obsidian.setIcon)(header, "alert-triangle");
  }
  if (type === "success") {
    const header = wrapper.createDiv({
      attr: {
        style: `color: var(--color-green);`
      }
    });
    (0, import_obsidian.setIcon)(header, "check-circle");
  }
  if (type === "info") {
    const header = wrapper.createDiv({
      attr: {
        style: `color: var(--color-blue);`
      }
    });
    (0, import_obsidian.setIcon)(header, "info");
  }
  if (type === "loading") {
    const header = wrapper.createDiv({
      attr: {
        cls: "indicator"
      }
    });
    (0, import_obsidian.setIcon)(header, "indicator");
  }
  wrapper.createDiv({
    text: message,
    attr: {
      style: ``
    }
  });
  new import_obsidian.Notice(fragment, duration);
}

// src/utils/index.ts
function saveJson(app2, path, content) {
  savePlaygroundToFile(app2, path, content);
}
async function savePlaygroundToFile(app2, path, content) {
  let filePath = (0, import_obsidian2.normalizePath)(path);
  let fPath = this.app.vault.getFileByPath(filePath);
  try {
    await app2.vault.modify(fPath, content);
  } catch (error) {
    console.log(error);
  }
}
async function downloadFile(data2, fileName, type = "text/plain") {
  let a = activeDocument.createElement("a");
  a.href = window.URL.createObjectURL(
    new Blob([data2], { type })
  );
  a.setAttribute("class", "download-file-link");
  a.setAttribute("download", fileName);
  activeDocument.body.appendChild(a);
  a.click();
  window.URL.revokeObjectURL(a.href);
  activeDocument.body.removeChild(a);
  return;
}
async function copyStringToClipboard(text4, topic = void 0) {
  navigator.clipboard.writeText(text4).then(function() {
    showNotice((topic !== void 0 ? topic + " " : "Text ") + "copied to clipboard", 2500, "success");
  }).catch(function(error) {
    console.error("Failed to copy to clipboard: ", error);
  });
}
function onElement(el2, event, selector, listener, options) {
  el2.on(event, selector, listener, options);
  return () => el2.off(event, selector, listener, options);
}

// src/modals/HelpModal.ts
var HelpModal = class extends import_obsidian3.Modal {
  constructor(app2, title = "", message = "", icon = "", clickToCopy = false, steps = false) {
    super(app2);
    this.title = title;
    this.message = message;
    this.icon = icon;
    this.clickToCopy = clickToCopy;
    this.steps = steps;
  }
  onOpen() {
    if (!this.message) {
      this.close();
    }
    let { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("livecodes-help-modal");
    contentEl.createEl("h1", { text: this.title });
    const range = document.createRange();
    range.selectNodeContents(contentEl);
    const node = range.createContextualFragment(`${this.message}`);
    contentEl.append(node);
    if (activeDocument.querySelector(".alert-icon")) {
      (0, import_obsidian3.setIcon)(activeDocument.querySelector(".alert-icon"), "alert-triangle");
    }
    if (this.clickToCopy) {
      let inputEl = contentEl.querySelectorAll("[class$=-copy]");
      inputEl.forEach((el2) => {
        let iconEl = contentEl.createSpan({ cls: "copy-icon", attr: { "aria-label": "Click to copy" } });
        (0, import_obsidian3.setIcon)(iconEl, "copy");
        iconEl.setAttribute("data-tooltip-position", "top");
        iconEl.setAttribute("tabindex", "0");
        el2.insertAdjacentElement("beforebegin", iconEl);
        [iconEl, el2].forEach((elt) => {
          elt.addEventListener("click", async () => {
            await copyStringToClipboard(el2 == null ? void 0 : el2.textContent, el2 == null ? void 0 : el2.textContent);
          });
          elt.addEventListener("keydown", (evt) => {
            const keyDown = evt.key;
            if (keyDown === "Enter" || ["Spacebar", " "].indexOf(keyDown) >= 0) {
              evt.preventDefault();
              elt.click();
            }
          });
        });
      });
    }
    if (this.steps) {
      let toolButtons = activeDocument.querySelectorAll('[class$="-button clickable-icon"]');
      let button = activeDocument.querySelector("[data-step]");
      if (button) {
        button.addEventListener("click", (el2) => {
          let dataStep2 = el2.target.getAttribute("data-step");
          this.close();
          new HelpModal(this.app, buttonTour[dataStep2].popover.title, buttonTour[dataStep2].popover.description, "", false, true).open();
          toolButtons[dataStep2].addClass("button-highlight");
        });
      }
      let prevButtons = activeDocument.querySelectorAll("[data-prev]");
      prevButtons.forEach((button2) => {
        button2.addEventListener("click", (el2) => {
          let dataPrev = button2.getAttribute("data-prev");
          this.close();
          new HelpModal(this.app, buttonTour[dataPrev - 1].popover.title, buttonTour[dataPrev - 1].popover.description, "", false, true).open();
          toolButtons[dataPrev - 1].addClass("button-highlight");
        });
      });
      let stepsDiv = activeDocument.createElement("div");
      stepsDiv.addClass("steps-bullets");
      let stepsList = activeDocument.createElement("ul");
      stepsList.setAttribute("role", "tablist");
      let i = 0;
      let dataStep = activeDocument.querySelector("[data-step]");
      let dataStepStr = dataStep.getAttribute("data-step");
      while (i <= 9) {
        let newStep = activeDocument.createElement("li");
        newStep.setAttribute("role", "presentation");
        let stepLink = activeDocument.createElement("a");
        stepLink.setAttribute("role", "button");
        stepLink.setAttribute("tabindex", "0");
        let dataStepNum = +dataStepStr;
        stepLink.setAttribute("aria-label", buttonTour[i].popover.title);
        stepLink.setAttribute("data-tooltip-position", "top");
        if (i === dataStepNum - 1) {
          stepLink.addClass("active");
          stepLink.setAttribute("aria-label", "Current: " + buttonTour[i].popover.title);
        }
        stepLink.setAttribute("data-step-number", `${i}`);
        stepLink.addEventListener("keydown", (evt) => {
          const keyDown = evt.key;
          if (keyDown === "Enter" || ["Spacebar", " "].indexOf(keyDown) >= 0) {
            evt.preventDefault();
            stepLink.click();
          }
        });
        stepLink.addEventListener("click", (evt) => {
          let dataStepNumber = evt.target.getAttribute("data-step-number");
          this.close();
          new HelpModal(this.app, buttonTour[dataStepNumber].popover.title, buttonTour[dataStepNumber].popover.description, "", false, true).open();
          toolButtons[dataStepNumber].addClass("button-highlight");
        });
        newStep.appendChild(stepLink);
        stepsList.appendChild(newStep);
        i++;
      }
      stepsDiv.appendChild(stepsList);
      let pagingSpan = activeDocument.querySelector("div.modal-content.livecodes-help-modal div:has(span) > span");
      pagingSpan == null ? void 0 : pagingSpan.replaceWith(stepsDiv);
    }
  }
  onClose() {
    var _a3;
    let { contentEl } = this;
    contentEl.empty();
    (_a3 = activeDocument.querySelector(".button-highlight")) == null ? void 0 : _a3.removeClass("button-highlight");
  }
  copyStringToClipboard(text4) {
    navigator.clipboard.writeText(text4);
  }
};

// src/modals/SaveAs.ts
var import_obsidian4 = require("obsidian");
var SaveAsModal = class extends import_obsidian4.Modal {
  constructor(app2, title, message, messagDefault = "", placeholder = "", multiLine = false, callback) {
    super(app2);
    this.title = title;
    this.message = message;
    this.messagDefault = messagDefault;
    this.placeholder = placeholder;
    this.multiLine = multiLine;
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    this.containerEl.addClass("livecodes-prompt-modal");
    contentEl.empty();
    if (this.title)
      this.titleEl.setText(this.title);
    if (this.message)
      contentEl.createEl("p").setText(this.message);
    if (this.multiLine) {
      this.textComponent = new import_obsidian4.TextAreaComponent(contentEl);
    } else {
      this.textComponent = new import_obsidian4.TextComponent(contentEl);
    }
    this.textComponent.setValue(this.messagDefault).setPlaceholder(this.placeholder).then((cb) => {
      cb.inputEl.addClass("prompt-input");
      cb.inputEl.addEventListener("keydown", (event) => {
        if (!event.shiftKey && event.key === "Enter") {
          this.onOK();
          event.preventDefault();
        }
      });
    });
    const buttonDiv = contentEl.createDiv({
      cls: "modal-button-container"
    });
    new import_obsidian4.ButtonComponent(buttonDiv).setButtonText("OK").setCta().onClick(() => {
      this.onOK();
    }).setCta();
    new import_obsidian4.ButtonComponent(buttonDiv).setButtonText("Cancel").onClick(() => {
      this.close();
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  onOK() {
    this.callback(this.textComponent.getValue());
    this.close();
  }
};
async function saveAsModal(app2, title, message, messagDefault = "", placeholder = "", multiLine = false, callback) {
  return await new Promise((resolve, reject) => {
    new SaveAsModal(
      app2,
      title,
      message,
      messagDefault,
      placeholder,
      multiLine,
      callback != null ? callback : (text4) => {
        resolve(text4);
      }
    ).open();
  });
}

// src/modals/ShareGist.ts
var import_obsidian5 = require("obsidian");
var ShareGistModal = class extends import_obsidian5.Modal {
  constructor(app2, plugin, title, changes, callback) {
    super(app2);
    this.plugin = plugin;
    this.title = title;
    this.changes = { includeLivecodesLink: true, includeHtmlFile: true, includeJsonFile: true, includeMarkdownFile: true };
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    this.contentEl.addClass("livecodes-share-gist-modal");
    contentEl.empty();
    if (this.title)
      this.titleEl.setText(this.title);
    new import_obsidian5.Setting(contentEl).setName("Playground link").setDesc("Include link to open playground in Livecodes").addToggle(
      (toggle) => toggle.setValue(this.changes.includeLivecodesLink).onChange(async (newValue) => {
        this.changes.includeLivecodesLink = newValue;
        checkIsDisabled();
      })
    );
    new import_obsidian5.Setting(contentEl).setName("HTML file").setDesc("Include HTML results file").addToggle(
      (toggle) => toggle.setValue(this.changes.includeHtmlFile).onChange(async (newValue) => {
        this.changes.includeHtmlFile = newValue;
        checkIsDisabled();
      })
    );
    new import_obsidian5.Setting(contentEl).setName("JSON file").setDesc("Include JSON template file").addToggle(
      (toggle) => toggle.setValue(this.changes.includeJsonFile).onChange(async (newValue) => {
        this.changes.includeJsonFile = newValue;
        checkIsDisabled();
      })
    );
    new import_obsidian5.Setting(contentEl).setName("Markdown file").setDesc("Include markdown file with frontmatter and fenced codeblocks").addToggle(
      (toggle) => toggle.setValue(this.changes.includeMarkdownFile).onChange(async (newValue) => {
        this.changes.includeMarkdownFile = newValue;
        checkIsDisabled();
      })
    );
    let buttonDiv = contentEl.createDiv({ cls: "modal-button-container" });
    let noticeDiv = buttonDiv.createDiv({ cls: "modal-button-notice" });
    let noticeIcon = noticeDiv.createSpan({ cls: "modal-button-notice-icon" });
    noticeIcon.setAttribute("aria-label", "Notice");
    let noticeText = noticeDiv.createSpan({ cls: "modal-button-notice-text" });
    noticeText.textContent = "At least one option above must be enabled. If you enable the playground link, you must also enable the JSON file.";
    (0, import_obsidian5.setIcon)(noticeIcon, "alert-triangle");
    buttonDiv.appendChild(noticeDiv);
    let shareButton = new import_obsidian5.ButtonComponent(buttonDiv).setButtonText("Share").setClass("share-gist-button").setCta().onClick(() => {
      this.onOK();
    }).setCta();
    new import_obsidian5.ButtonComponent(buttonDiv).setButtonText("Cancel").onClick(() => {
      this.close();
    });
    let checkIsDisabled = () => {
      var _a3, _b;
      if (!this.changes.includeLivecodesLink && !this.changes.includeHtmlFile && !this.changes.includeJsonFile && !this.changes.includeMarkdownFile || this.changes.includeLivecodesLink && !this.changes.includeJsonFile) {
        shareButton.disabled = true;
        (_a3 = activeDocument.querySelector(".share-gist-button")) == null ? void 0 : _a3.setAttribute("disabled", "");
      } else {
        shareButton.disabled = false;
        (_b = activeDocument.querySelector(".share-gist-button")) == null ? void 0 : _b.removeAttribute("disabled");
      }
    };
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  onOK() {
    this.callback(JSON.stringify(this.changes));
    this.close();
  }
};
async function openShareGistModal(app2, plugin, title, changes, callback) {
  return await new Promise((resolve) => {
    new ShareGistModal(
      app2,
      plugin,
      title,
      changes,
      callback != null ? callback : (text4) => {
        resolve(text4);
      }
    ).open();
  });
}

// src/modals/ExternalResources.ts
var import_obsidian6 = require("obsidian");
var ExternalResourcesModal = class extends import_obsidian6.Modal {
  constructor(app2, plugin, title, changes, callback) {
    super(app2);
    this.plugin = plugin;
    this.title = title;
    this.changes = changes;
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    this.contentEl.addClass("livecodes-external-resources-modal");
    contentEl.empty();
    if (this.title)
      this.titleEl.setText(this.title);
    new import_obsidian6.Setting(this.contentEl).setName("External stylesheets").setDesc("One URL per line").setClass("stylesheets-setting").addTextArea(
      (text4) => text4.setValue(this.changes.stylesheets.join("\n")).setPlaceholder("https://").onChange(async (newStylesheetsSetting) => {
        this.changes.stylesheets = newStylesheetsSetting.trim().split("\n");
      })
    );
    new import_obsidian6.Setting(this.contentEl).setName("External scripts").setDesc("One URL per line").setClass("scripts-setting").addTextArea(
      (text4) => text4.setValue(this.changes.scripts.join("\n")).setPlaceholder("https://").onChange(async (newScriptsSetting) => {
        this.changes.scripts = newScriptsSetting.trim().split("\n");
      })
    );
    new import_obsidian6.Setting(this.contentEl).setName("CSS preset").setClass("cssPreset-setting").addDropdown((dropdown) => {
      dropdown.addOptions({
        "": "none",
        "normalize.css": "normalize.css",
        "reset-css": "reset-css"
      }).setValue(this.changes.cssPreset).onChange(async (newCssPresetSetting) => {
        this.changes.cssPreset = newCssPresetSetting;
      });
    });
    let buttonDiv = contentEl.createDiv({ cls: "modal-button-container" });
    let noticeDiv = buttonDiv.createDiv({ cls: "modal-button-notice" });
    let noticeIcon = noticeDiv.createSpan({ cls: "modal-button-notice-icon" });
    noticeIcon.setAttribute("aria-label", "Notice");
    let noticeText = noticeDiv.createSpan({ cls: "modal-button-notice-text" });
    noticeText.textContent = "Updating these settings will reset the playground editor and clipboard history.";
    (0, import_obsidian6.setIcon)(noticeIcon, "alert-triangle");
    buttonDiv.appendChild(noticeDiv);
    new import_obsidian6.ButtonComponent(buttonDiv).setButtonText("Update").setCta().onClick(() => {
      this.onOK();
    }).setCta();
    new import_obsidian6.ButtonComponent(buttonDiv).setButtonText("Cancel").onClick(() => {
      this.close();
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  onOK() {
    this.callback(JSON.stringify(this.changes));
    this.close();
  }
};
async function openExternalResourcesModal(app2, plugin, title, changes, callback) {
  return await new Promise((resolve, reject) => {
    new ExternalResourcesModal(
      app2,
      plugin,
      title,
      changes,
      callback != null ? callback : (text4) => {
        resolve(text4);
      }
    ).open();
  });
}

// src/modals/PlaygroundSettings.ts
var import_obsidian7 = require("obsidian");

// node_modules/svelte/src/runtime/easing/index.js
function cubicOut(t8) {
  const f2 = t8 - 1;
  return f2 * f2 * f2 + 1;
}

// node_modules/svelte/src/runtime/animate/index.js
function flip(node, { from, to: to2 }, params = {}) {
  const style = getComputedStyle(node);
  const transform = style.transform === "none" ? "" : style.transform;
  const [ox, oy] = style.transformOrigin.split(" ").map(parseFloat);
  const dx = from.left + from.width * ox / to2.width - (to2.left + ox);
  const dy = from.top + from.height * oy / to2.height - (to2.top + oy);
  const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
  return {
    delay,
    duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
    easing,
    css: (t8, u) => {
      const x3 = u * dx;
      const y2 = u * dy;
      const sx = t8 + u * from.width / to2.width;
      const sy = t8 + u * from.height / to2.height;
      return `transform: ${transform} translate(${x3}px, ${y2}px) scale(${sx}, ${sy});`;
    }
  };
}

// src/components/Tags.svelte
function add_css(target) {
  append_styles(target, "svelte-xn5m89", ".multi-select-container.svelte-xn5m89.svelte-xn5m89{--pill-color-hover:var(--text-normal);--pill-color-remove:var(--text-faint);--pill-color-remove-hover:var(--color-red);--pill-background-hover:transparent;--pill-border-color-hover:var(--background-modifier-border-hover);--pill-padding-x:0.65em;--pill-padding-y:0.5em;background:none;border:none}.multi-select-pill.svelte-xn5m89.svelte-xn5m89{height:fit-content}.multi-select-container.svelte-xn5m89 .tag-entry.svelte-xn5m89{border:0;outline:0;display:flex;margin:0;padding:3px 0;width:100%;min-width:75px;max-width:150px;border:var(--input-border-width) solid var(--background-modifier-border)}.multi-select-container.svelte-xn5m89 .tag-entry.svelte-xn5m89:focus{outline:0}.multi-select-container.svelte-xn5m89 .input.svelte-xn5m89{background:transparent;margin:0;padding:0;width:100%;flex:1;border:0}");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[9] = list[i];
  return child_ctx;
}
function create_each_block(key_1, ctx) {
  let div2;
  let div0;
  let span;
  let t0_value = (
    /*tag*/
    ctx[9] + ""
  );
  let t0;
  let t1;
  let div1;
  let rect;
  let stop_animation = noop;
  let mounted;
  let dispose;
  function click_handler() {
    return (
      /*click_handler*/
      ctx[6](
        /*tag*/
        ctx[9]
      )
    );
  }
  return {
    key: key_1,
    first: null,
    c() {
      div2 = element("div");
      div0 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      div1.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-x"><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg>`;
      attr(div0, "class", "multi-select-pill-content");
      attr(div1, "class", "multi-select-pill-remove-button");
      attr(div1, "aria-label", "Remove tag");
      attr(div2, "class", "multi-select-pill svelte-xn5m89");
      this.first = div2;
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div0, span);
      append(span, t0);
      append(div2, t1);
      append(div2, div1);
      if (!mounted) {
        dispose = listen(div1, "click", click_handler);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*changes*/
      1 && t0_value !== (t0_value = /*tag*/
      ctx[9] + ""))
        set_data(t0, t0_value);
    },
    r() {
      rect = div2.getBoundingClientRect();
    },
    f() {
      fix_position(div2);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div2, rect, flip, { duration: 200 });
    },
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      mounted = false;
      dispose();
    }
  };
}
function create_fragment(ctx) {
  let div6;
  let div2;
  let t32;
  let div5;
  let div4;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let t42;
  let div3;
  let input;
  let mounted;
  let dispose;
  let each_value = ensure_array_like([.../*changes*/
  ctx[0].tags.values()]);
  const get_key = (ctx2) => (
    /*tag*/
    ctx2[9]
  );
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
  }
  return {
    c() {
      div6 = element("div");
      div2 = element("div");
      div2.innerHTML = `<div class="setting-item-name">Tags</div> <div class="setting-item-description">Use alpha-numeric with dashes and/or underscores ONLY, for compatibility with Obsidian&#39;s tags.</div>`;
      t32 = space();
      div5 = element("div");
      div4 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t42 = space();
      div3 = element("div");
      input = element("input");
      attr(div2, "class", "setting-item-info");
      attr(input, "class", "tag-entry svelte-xn5m89");
      attr(input, "type", "text");
      attr(div3, "class", "input svelte-xn5m89");
      attr(div4, "class", "multi-select-container svelte-xn5m89");
      attr(div5, "class", "setting-item-control");
      attr(div6, "class", "setting-item tags-setting");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div2);
      append(div6, t32);
      append(div6, div5);
      append(div5, div4);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div4, null);
        }
      }
      append(div4, t42);
      append(div4, div3);
      append(div3, input);
      set_input_value(
        input,
        /*current*/
        ctx[1]
      );
      if (!mounted) {
        dispose = [
          listen(
            input,
            "keyup",
            /*handleInput*/
            ctx[3]
          ),
          listen(
            input,
            "blur",
            /*parseInput*/
            ctx[2]
          ),
          listen(
            input,
            "input",
            /*input_input_handler*/
            ctx[7]
          )
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & /*removeTag, changes*/
      17) {
        each_value = ensure_array_like([.../*changes*/
        ctx2[0].tags.values()]);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div4, fix_and_destroy_block, create_each_block, t42, get_each_context);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
      }
      if (dirty & /*current*/
      2 && input.value !== /*current*/
      ctx2[1]) {
        set_input_value(
          input,
          /*current*/
          ctx2[1]
        );
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div6);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { changes } = $$props;
  let { delimiter = "," } = $$props;
  let current = "";
  function parseInput() {
    const tagSet = new Set(changes.tags);
    current.split(delimiter).forEach((t8) => {
      const clean = t8 && t8.trim();
      clean && clean !== "" && tagSet.add(t8);
    });
    $$invalidate(1, current = "");
    sync(tagSet);
  }
  function handleInput({ key, code }) {
    (key === delimiter || code === "Enter") && parseInput();
  }
  function removeTag(tag) {
    const tagSet = new Set(changes.tags);
    tagSet.delete(tag);
    sync(tagSet);
  }
  function sync(tagSet) {
    $$invalidate(0, changes.tags = [...tagSet], changes);
  }
  onMount(() => {
  });
  const click_handler = (tag) => removeTag(tag);
  function input_input_handler() {
    current = this.value;
    $$invalidate(1, current);
  }
  $$self.$$set = ($$props2) => {
    if ("changes" in $$props2)
      $$invalidate(0, changes = $$props2.changes);
    if ("delimiter" in $$props2)
      $$invalidate(5, delimiter = $$props2.delimiter);
  };
  return [
    changes,
    current,
    parseInput,
    handleInput,
    removeTag,
    delimiter,
    click_handler,
    input_input_handler
  ];
}
var Tags = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, { changes: 0, delimiter: 5 }, add_css);
  }
};
var Tags_default = Tags;

// src/modals/PlaygroundSettings.ts
var PlaygroundSettingsModal = class extends import_obsidian7.Modal {
  constructor(app2, plugin, title, changes, callback) {
    super(app2);
    this.plugin = plugin;
    this.title = title;
    this.changes = changes;
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    this.contentEl.addClass("livecodes-editor-settings-modal");
    contentEl.empty();
    if (this.title)
      this.titleEl.setText(this.title);
    new import_obsidian7.Setting(this.contentEl).setName("Title").setClass("title-setting").addText(
      (text4) => text4.setValue(this.changes.title).onChange(async (newTitleSetting) => {
        this.changes.title = newTitleSetting.trim();
      })
    );
    new import_obsidian7.Setting(this.contentEl).setName("Description").setClass("description-setting").addTextArea(
      (text4) => text4.setValue(this.changes.description).onChange(async (newDescriptionSetting) => {
        this.changes.description = newDescriptionSetting.trim();
      })
    );
    new Tags_default({
      target: contentEl,
      props: { changes: this.changes }
    });
    new import_obsidian7.Setting(this.contentEl).setName("<head>").setDesc("Content for <head> element").setClass("head-setting").addTextArea(
      (text4) => text4.setValue(this.changes.head).onChange(async (newHeadSetting) => {
        this.changes.head = newHeadSetting.trim();
      })
    );
    new import_obsidian7.Setting(this.contentEl).setName("<html> Attrs").setDesc("Attributes for <html> element").setClass("htmlattrs-setting").addTextArea(
      (text4) => text4.setValue(this.changes.htmlAttrs).onChange(async (newHtmlAttrsSetting) => {
        this.changes.htmlAttrs = newHtmlAttrsSetting.trim();
      })
    );
    let buttonDiv = contentEl.createDiv({ cls: "modal-button-container" });
    let noticeDiv = buttonDiv.createDiv({ cls: "modal-button-notice" });
    let noticeIcon = noticeDiv.createSpan({ cls: "modal-button-notice-icon" });
    noticeIcon.setAttribute("aria-label", "Notice");
    let noticeText = noticeDiv.createSpan({ cls: "modal-button-notice-text" });
    noticeText.textContent = "Updating these settings will reset the playground editor and clipboard history.";
    (0, import_obsidian7.setIcon)(noticeIcon, "alert-triangle");
    buttonDiv.appendChild(noticeDiv);
    new import_obsidian7.ButtonComponent(buttonDiv).setButtonText("Update").setCta().onClick(() => {
      this.onOK();
    }).setCta();
    new import_obsidian7.ButtonComponent(buttonDiv).setButtonText("Cancel").onClick(() => {
      this.close();
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  onOK() {
    this.callback(JSON.stringify(this.changes));
    this.close();
  }
};
async function openPlaygroundSettingsModal(app2, plugin, title, changes, callback) {
  return await new Promise((resolve, reject) => {
    new PlaygroundSettingsModal(
      app2,
      plugin,
      title,
      changes,
      callback != null ? callback : (text4) => {
        resolve(text4);
      }
    ).open();
  });
}

// src/components/Playground.svelte
function create_fragment2(ctx) {
  let div2;
  let div0;
  let div0_data_height_value;
  let t0;
  let div1;
  let button0;
  let t1;
  let button1;
  let t22;
  let button2;
  let t32;
  let button3;
  let t42;
  let button4;
  let t52;
  let button5;
  let t62;
  let button6;
  let t72;
  let button7;
  let button7_aria_label_value;
  let t8;
  let button8;
  let t9;
  let button9;
  let t10;
  let button10;
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      button0 = element("button");
      t1 = space();
      button1 = element("button");
      t22 = space();
      button2 = element("button");
      t32 = space();
      button3 = element("button");
      t42 = space();
      button4 = element("button");
      t52 = space();
      button5 = element("button");
      t62 = space();
      button6 = element("button");
      t72 = space();
      button7 = element("button");
      t8 = space();
      button8 = element("button");
      t9 = space();
      button9 = element("button");
      t10 = space();
      button10 = element("button");
      attr(div0, "data-height", div0_data_height_value = /*plugin*/
      ctx[0].settings.dataHeight || "600");
      attr(button0, "aria-label", "Watch for changes & SAVE");
      attr(button0, "data-tooltip-position", "bottom");
      attr(button0, "class", "watch-button clickable-icon");
      attr(button1, "aria-label", "Create note");
      attr(button1, "data-tooltip-position", "bottom");
      attr(button1, "class", "create-note-button clickable-icon");
      attr(button2, "aria-label", "Save as new playground");
      attr(button2, "data-tooltip-position", "bottom");
      attr(button2, "class", "save-as-new-button clickable-icon");
      attr(button3, "aria-label", "Save as HTML");
      attr(button3, "data-tooltip-position", "bottom");
      attr(button3, "class", "save-html-button clickable-icon");
      attr(button4, "aria-label", "Copy HTML to clipboard");
      attr(button4, "data-tooltip-position", "bottom");
      attr(button4, "class", "copy-html-button clickable-icon");
      attr(button5, "aria-label", "Copy share URL to clipboard");
      attr(button5, "data-tooltip-position", "bottom");
      attr(button5, "class", "share-url-button clickable-icon");
      attr(button6, "aria-label", "Share as Github gist");
      attr(button6, "data-tooltip-position", "bottom");
      attr(button6, "class", "create-gist-button clickable-icon");
      attr(button7, "aria-label", button7_aria_label_value = "Set " + /*plugin*/
      (ctx[0].settings.darkTheme ? "light" : "dark") + " mode");
      attr(button7, "data-tooltip-position", "bottom");
      attr(button7, "class", "theme-mode-button clickable-icon");
      attr(button8, "aria-label", "External resources");
      attr(button8, "data-tooltip-position", "bottom");
      attr(button8, "class", "external-resources-button clickable-icon");
      attr(button9, "aria-label", "Playground settings");
      attr(button9, "data-tooltip-position", "bottom");
      attr(button9, "class", "playground-settings-button clickable-icon");
      attr(button10, "aria-label", "Help");
      attr(button10, "data-tooltip-position", "bottom");
      attr(button10, "class", "clickable-icon");
      attr(div1, "class", "buttons-wrapper");
      set_style(div1, "display", "none");
      attr(div2, "class", "livecodes-wrapper");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      ctx[16](div0);
      append(div2, t0);
      append(div2, div1);
      append(div1, button0);
      ctx[17](button0);
      append(div1, t1);
      append(div1, button1);
      ctx[18](button1);
      append(div1, t22);
      append(div1, button2);
      ctx[19](button2);
      append(div1, t32);
      append(div1, button3);
      ctx[20](button3);
      append(div1, t42);
      append(div1, button4);
      ctx[21](button4);
      append(div1, t52);
      append(div1, button5);
      ctx[22](button5);
      append(div1, t62);
      append(div1, button6);
      ctx[23](button6);
      append(div1, t72);
      append(div1, button7);
      ctx[24](button7);
      append(div1, t8);
      append(div1, button8);
      ctx[25](button8);
      append(div1, t9);
      append(div1, button9);
      ctx[26](button9);
      append(div1, t10);
      append(div1, button10);
      ctx[27](button10);
      ctx[28](div1);
    },
    p(ctx2, dirty) {
      if (dirty[0] & /*plugin*/
      1 && div0_data_height_value !== (div0_data_height_value = /*plugin*/
      ctx2[0].settings.dataHeight || "600")) {
        attr(div0, "data-height", div0_data_height_value);
      }
      if (dirty[0] & /*plugin*/
      1 && button7_aria_label_value !== (button7_aria_label_value = "Set " + /*plugin*/
      (ctx2[0].settings.darkTheme ? "light" : "dark") + " mode")) {
        attr(button7, "aria-label", button7_aria_label_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div2);
      }
      ctx[16](null);
      ctx[17](null);
      ctx[18](null);
      ctx[19](null);
      ctx[20](null);
      ctx[21](null);
      ctx[22](null);
      ctx[23](null);
      ctx[24](null);
      ctx[25](null);
      ctx[26](null);
      ctx[27](null);
      ctx[28](null);
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  const { Octokit } = require_dist_node5();
  let nunjucks = require_nunjucks();
  const plugin = this.app.plugins.plugins["livecodes-playground"];
  let container;
  let playground;
  let watcher;
  let { jsonTemplate } = $$props;
  let { playgroundPath } = $$props;
  let copyHTML;
  let downloadHTML;
  let createNote;
  let saveAsNewPlayground;
  let copyShareUrl;
  let toggleTheme;
  let onWatch;
  let openShareGist;
  let showHelp;
  let openExternalResources;
  let openPlaygroundSettings;
  let buttonsWrapper;
  const options = {
    config: jsonTemplate,
    appUrl: plugin.settings.appUrl,
    params: {
      editorTheme: plugin.settings.editorTheme,
      autoupdate: plugin.settings.autoUpdate,
      delay: plugin.settings.delay,
      theme: plugin.settings.darkTheme ? "dark" : "light",
      fontFamily: plugin.settings.fontFamily,
      fontSize: Number(plugin.settings.fontSize),
      closeBrackets: plugin.settings.closeBrackets,
      trailingComma: plugin.settings.trailingComma,
      singleQuote: plugin.settings.singleQuote,
      semicolons: plugin.settings.semicolons,
      useTabs: plugin.settings.useTabs,
      tabSize: Number(plugin.settings.tabSize),
      console: "open",
      lineNumbers: plugin.settings.lineNumbers,
      wordWrap: plugin.settings.wordWrap,
      // @ts-ignore
      enableAI: plugin.settings.enableAI,
      editor: plugin.settings.editor,
      version: "24"
    },
    loading: "eager"
  };
  onMount(() => {
    se(container, options).then((p) => {
      playground = p;
      (0, import_obsidian8.setIcon)(copyHTML, "copy");
      copyHTML.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        try {
          const code = yield playground.getCode();
          yield copyStringToClipboard(yield prettifyHtml("<!DOCTYPE html>\n" + code.result, "file.html"), "HTML code");
        } catch (error) {
          console.log(error.message || error);
        }
      }));
      (0, import_obsidian8.setIcon)(downloadHTML, "code-2");
      downloadHTML.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        showNotice("Preparing HTML\u2026", 3e3, "loading");
        try {
          const code = yield playground.getCode();
          let fileName = playgroundPath.substring(playgroundPath.lastIndexOf("/") + 1, playgroundPath.length);
          downloadFile(yield prettifyHtml("<!DOCTYPE html>\n" + code.result, fileName), fileName.replace(/\.json/, ".html"));
        } catch (error) {
          console.log(error.message || error);
        }
      }));
      (0, import_obsidian8.setIcon)(onWatch, "eye");
      onWatch.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        try {
          if (!watcher) {
            showNotice("Watching for changes", 2e3, "success");
            watcher = playground.watch(
              "code",
              //@ts-ignore
              ({ config }) => {
                handleWatchedTemplate(playgroundPath, config);
                showNotice("Changes saved", 2e3, "success");
              }
            );
            (0, import_obsidian8.setIcon)(onWatch, "eye");
            onWatch.setAttribute("aria-label", "Stop watching for changes");
            onWatch.setAttribute("style", "color:unset;");
          } else {
            watcher === null || watcher === void 0 ? void 0 : watcher.remove();
            watcher = null;
            (0, import_obsidian8.setIcon)(onWatch, "eye-off");
            onWatch.setAttribute("aria-label", "Start watching for changes");
            onWatch.setAttribute("style", "color:var(--text-error);");
            showNotice("Stopped watching for changes", 2e3, "error");
          }
        } catch (error) {
          console.log(error.message || error);
        }
      }));
      if (plugin.settings.darkTheme) {
        (0, import_obsidian8.setIcon)(toggleTheme, "sun");
      } else {
        (0, import_obsidian8.setIcon)(toggleTheme, "moon");
      }
      toggleTheme.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        const currentTheme = plugin.settings.darkTheme ? "dark" : "light";
        try {
          if (currentTheme !== "dark") {
            yield playground.setConfig({ theme: "dark" });
            $$invalidate(0, plugin.settings.darkTheme = true, plugin);
            yield plugin.saveSettings();
            (0, import_obsidian8.setIcon)(toggleTheme, "sun");
            toggleTheme.setAttribute("aria-label", "Set light mode");
          } else {
            yield playground.setConfig({ theme: "light" });
            $$invalidate(0, plugin.settings.darkTheme = false, plugin);
            yield plugin.saveSettings();
            (0, import_obsidian8.setIcon)(toggleTheme, "moon");
            toggleTheme.setAttribute("aria-label", "Set dark mode");
          }
        } catch (error) {
          console.log(error.message || error);
        }
      }));
      playground.watch("ready", () => __awaiter(void 0, void 0, void 0, function* () {
        buttonsWrapper.setAttribute("style", "");
      }));
      (0, import_obsidian8.setIcon)(saveAsNewPlayground, "file-code-2");
      saveAsNewPlayground.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        const cfg = yield playground.getConfig();
        let fName = yield saveAsModal(this.app, "Livecodes", "Save new playground as:", playgroundPath.substring(playgroundPath.lastIndexOf("/") + 1, playgroundPath.length).replace(/\.json/, ""), "e.g. New Playground", false);
        if ((fName === null || fName === void 0 ? void 0 : fName.length) === 0) {
          return;
        }
        let prettyCfg = JSON.stringify(cfg, null, 2);
        try {
          yield this.app.vault.create(plugin.settings.playgroundFolder + "/" + fName + ".json", yield createText(prettyCfg));
          const f2 = this.app.vault.getFileByPath(plugin.settings.playgroundFolder + "/" + fName + ".json");
          if (f2) {
            $$invalidate(0, plugin.settings.jsonTemplate = f2, plugin);
            yield plugin.saveSettings();
            yield plugin.activatePlaygroundView();
          }
          showNotice("Template saved as: " + plugin.settings.playgroundFolder + "/" + fName + ".json", 3e3, "success");
        } catch (error) {
          showNotice(plugin.settings.playgroundFolder + "/" + fName + ".json - " + error + " Click this message to dismiss.", 0, "error");
        }
      }));
      (0, import_obsidian8.setIcon)(openShareGist, "github");
      openShareGist.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        try {
          let conf = {
            includeLivecodesLink: yield playground.getConfig().then((t8) => {
              return t8.includeLivecodesLink;
            }),
            includeHtmlFile: yield playground.getConfig().then((t8) => {
              return t8.includeHtmlFile;
            }),
            includeJsonFile: yield playground.getConfig().then((t8) => {
              return t8.includeJsonFile;
            }),
            includeMarkdownFile: yield playground.getConfig().then((t8) => {
              return t8.includeMarkdownFile;
            })
          };
          yield openShareGistModal(this.app, this.plugin, "Share as gist", conf).then((setting) => __awaiter(void 0, void 0, void 0, function* () {
            if (setting !== null) {
              let gistSetting = JSON.parse(setting);
              const cfg = yield playground.getConfig();
              try {
                let link = "";
                let markDown = "";
                if (gistSetting.includeLivecodesLink && gistSetting.includeJsonFile) {
                  link = "obsidian://playground?vault=" + encodeURIComponent(this.app.vault.getName()) + "&playgroundPath=" + encodeURIComponent(playgroundPath);
                }
                if (gistSetting.includeMarkdownFile) {
                  let tagsListMD = "";
                  if (cfg.tags.length) {
                    let i = 1;
                    cfg.tags.forEach((tag) => {
                      let lineBreak = cfg.tags.length !== i ? "\n" : "";
                      if (i === 1) {
                        tagsListMD += "\n  - " + tag + lineBreak;
                      } else {
                        tagsListMD += "  - " + tag + lineBreak;
                      }
                      i++;
                    });
                  }
                  let descriptionPropertyMD = "";
                  if (cfg.description !== "") {
                    descriptionPropertyMD += "|\n";
                    let descLines = cfg.description.split("\n");
                    let k3 = 1;
                    descLines.forEach((line) => {
                      let lineBreak = descLines.length !== k3 ? "\n" : "";
                      descriptionPropertyMD += "  " + line + lineBreak;
                      k3++;
                    });
                  }
                  let tagsStringMD = "";
                  if (cfg.tags.length) {
                    cfg.tags.forEach((tag) => {
                      tagsStringMD += "#" + tag + " ";
                    });
                  }
                  let styleSheetListMD = "";
                  if (cfg.stylesheets.length) {
                    let l = 1;
                    cfg.stylesheets.forEach((stylesheet) => {
                      if (stylesheet !== "") {
                        let lineBreak = cfg.stylesheets.length !== l ? "\n" : "";
                        styleSheetListMD += "  - [" + stylesheet + "](" + stylesheet + ")" + lineBreak;
                        l++;
                      }
                    });
                  }
                  let scriptsListMD = "";
                  if (cfg.scripts.length) {
                    let n = 1;
                    cfg.scripts.forEach((script) => {
                      if (script !== "") {
                        let lineBreak = cfg.scripts.length !== n ? "\n" : "";
                        scriptsListMD += "  - [" + script + "](" + script + ")" + lineBreak;
                        n++;
                      }
                    });
                  }
                  let code = yield playground.getCode();
                  nunjucks.configure({ autoescape: false });
                  markDown = nunjucks.renderString(plugin.settings.gistMarkdownTemplate, {
                    date: (0, import_obsidian8.moment)().format("YYYY-MM-DD"),
                    time: (0, import_obsidian8.moment)().format("HH:mm"),
                    timeFull: (0, import_obsidian8.moment)().format("HH:mm:ss"),
                    title: cfg.title,
                    descProperty: descriptionPropertyMD,
                    descString: cfg.description,
                    tagsList: tagsListMD,
                    tagsString: tagsStringMD,
                    obsidianUrl: link,
                    head: cfg.head,
                    htmlAttrs: cfg.htmlAttrs,
                    stylesheetsList: styleSheetListMD,
                    scriptsList: scriptsListMD,
                    cssPreset: cfg.cssPreset,
                    markupLanguage: cfg.markup.language,
                    markupCode: cfg.markup.content,
                    styleLanguage: cfg.style.language,
                    styleCode: cfg.style.content,
                    scriptLanguage: cfg.script.language,
                    scriptCode: cfg.script.content,
                    htmlResults: yield prettifyHtml("<!DOCTYPE html>\n" + code.result, "code.html"),
                    appUrl: cfg.appUrl
                  });
                }
                try {
                  const code = yield playground.getCode();
                  yield saveAsGist(gistSetting, cfg.title + ".md", markDown, cfg.title + ".html", code.result, cfg.title + ".json", JSON.stringify(cfg, null, 2));
                } catch (error) {
                  showNotice("Error: " + error + " Click this message to dismiss.", 0, "error");
                  return;
                }
              } catch (error) {
                showNotice("Error: " + error + " Click this message to dismiss.", 0, "error");
              }
            }
          }));
        } catch (error) {
          console.log(error.message || error);
        }
      }));
      (0, import_obsidian8.setIcon)(createNote, "lucide-edit");
      createNote.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        const cfg = yield playground.getConfig();
        let fName = yield saveAsModal(this.app, "Livecodes", "Save note as:", playgroundPath.substring(playgroundPath.lastIndexOf("/") + 1, playgroundPath.length).replace(/\.json/, ""), "e.g. README", false);
        if ((fName === null || fName === void 0 ? void 0 : fName.length) === 0) {
          return;
        }
        try {
          let markDown = "";
          let link = "obsidian://playground?vault=" + encodeURIComponent(this.app.vault.getName()) + "&playgroundPath=" + encodeURIComponent(playgroundPath);
          let tagsListMD = "";
          if (cfg.tags.length) {
            let i = 1;
            cfg.tags.forEach((tag) => {
              let lineBreak = cfg.tags.length !== i ? "\n" : "";
              if (i === 1) {
                tagsListMD += "\n  - " + tag + lineBreak;
              } else {
                tagsListMD += "  - " + tag + lineBreak;
              }
              i++;
            });
          }
          let descriptionPropertyMD = "";
          if (cfg.description !== "") {
            descriptionPropertyMD += "|\n";
            let descLines = cfg.description.split("\n");
            let k3 = 1;
            descLines.forEach((line) => {
              let lineBreak = descLines.length !== k3 ? "\n" : "";
              descriptionPropertyMD += "  " + line + lineBreak;
              k3++;
            });
          }
          let tagsStringMD = "";
          if (cfg.tags.length) {
            cfg.tags.forEach((tag) => {
              tagsStringMD += "#" + tag + " ";
            });
          }
          let styleSheetListMD = "";
          if (cfg.stylesheets.length) {
            let l = 1;
            cfg.stylesheets.forEach((stylesheet) => {
              if (stylesheet !== "") {
                let lineBreak = cfg.stylesheets.length !== l ? "\n" : "";
                styleSheetListMD += "  - [" + stylesheet + "](" + stylesheet + ")" + lineBreak;
                l++;
              }
            });
          }
          let scriptsListMD = "";
          if (cfg.scripts.length) {
            let n = 1;
            cfg.scripts.forEach((script) => {
              if (script !== "") {
                let lineBreak = cfg.scripts.length !== n ? "\n" : "";
                scriptsListMD += "  - [" + script + "](" + script + ")" + lineBreak;
                n++;
              }
            });
          }
          let code = yield playground.getCode();
          nunjucks.configure({ autoescape: false });
          markDown = nunjucks.renderString(plugin.settings.noteMarkdownTemplate, {
            date: (0, import_obsidian8.moment)().format("YYYY-MM-DD"),
            time: (0, import_obsidian8.moment)().format("HH:mm"),
            timeFull: (0, import_obsidian8.moment)().format("HH:mm:ss"),
            title: cfg.title,
            descProperty: descriptionPropertyMD,
            descString: cfg.description,
            tagsList: tagsListMD,
            tagsString: tagsStringMD,
            obsidianUrl: link,
            head: cfg.head,
            htmlAttrs: cfg.htmlAttrs,
            stylesheetsList: styleSheetListMD,
            scriptsList: scriptsListMD,
            cssPreset: cfg.cssPreset,
            markupLanguage: cfg.markup.language,
            markupCode: cfg.markup.content,
            styleLanguage: cfg.style.language,
            styleCode: cfg.style.content,
            scriptLanguage: cfg.script.language,
            scriptCode: cfg.script.content,
            htmlResults: yield prettifyHtml("<!DOCTYPE html>\n" + code.result, "code.html"),
            appUrl: cfg.appUrl
          });
          try {
            yield this.app.vault.create(plugin.settings.notesFolder + "/" + fName + ".md", yield createText(yield prettifyMarkdown(markDown.replace(/\n{2,}/g, "\n"), fName + ".md")));
          } catch (error) {
            showNotice(plugin.settings.notesFolder + "/" + fName + ".md - " + error + " Click this message to dismiss.", 0, "error");
            return;
          }
          showNotice("Note saved as: " + plugin.settings.notesFolder + "/" + fName + ".md", 3e3, "success");
          yield this.app.workspace.openLinkText(fName, plugin.settings.notesFolder);
        } catch (error) {
          console.error("Error: " + error);
        }
      }));
      (0, import_obsidian8.setIcon)(copyShareUrl, "link");
      copyShareUrl.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        try {
          const shareUrl = yield playground.getShareUrl(plugin.settings.shortUrl);
          yield copyStringToClipboard(shareUrl, "Share URL");
        } catch (error) {
          console.log(error.message || error);
        }
      }));
      (0, import_obsidian8.setIcon)(openExternalResources, "folder-cog");
      openExternalResources.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        try {
          let conf = {
            stylesheets: yield playground.getConfig().then((t8) => {
              return t8.stylesheets;
            }),
            scripts: yield playground.getConfig().then((t8) => {
              return t8.scripts;
            }),
            cssPreset: yield playground.getConfig().then((t8) => {
              return t8.cssPreset;
            })
          };
          yield openExternalResourcesModal(this.app, this.plugin, "External resources", conf).then((setting) => __awaiter(void 0, void 0, void 0, function* () {
            let newConfig = JSON.parse(setting);
            yield playground.setConfig({
              stylesheets: newConfig.stylesheets,
              scripts: newConfig.scripts,
              cssPreset: newConfig.cssPreset
            });
          }));
        } catch (error) {
          console.log(error.message || error);
        }
      }));
      (0, import_obsidian8.setIcon)(openPlaygroundSettings, "info");
      openPlaygroundSettings.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        try {
          let conf = {
            title: yield playground.getConfig().then((t8) => {
              return t8.title;
            }),
            description: yield playground.getConfig().then((t8) => {
              return t8.description;
            }),
            tags: yield playground.getConfig().then((t8) => {
              return t8.tags;
            }),
            head: yield playground.getConfig().then((t8) => {
              return t8.head;
            }),
            htmlAttrs: yield playground.getConfig().then((t8) => {
              return t8.htmlAttrs;
            })
          };
          yield openPlaygroundSettingsModal(this.app, this.plugin, "Playground settings", conf).then((setting) => __awaiter(void 0, void 0, void 0, function* () {
            let newConfig = JSON.parse(setting);
            yield playground.setConfig({
              title: newConfig.title,
              description: newConfig.description,
              head: newConfig.head,
              htmlAttrs: newConfig.htmlAttrs,
              tags: newConfig.tags
            });
          }));
        } catch (error) {
          console.log(error.message || error);
        }
      }));
      if (plugin.settings.autoWatch) {
        try {
          (0, import_obsidian8.setIcon)(onWatch, "eye");
          onWatch.setAttribute("aria-label", "Stop watching for changes");
          watcher = playground.watch(
            "code",
            //@ts-ignore
            ({ config }) => {
              handleWatchedTemplate(playgroundPath, config);
              showNotice("Changes saved", 2e3, "success");
            }
          );
        } catch (error) {
          console.log(error.message || error);
        }
      } else {
        try {
          (0, import_obsidian8.setIcon)(onWatch, "eye-off");
          onWatch.setAttribute("aria-label", "Start watching for changes");
          onWatch.setAttribute("style", "color:var(--text-error);");
          watcher === null || watcher === void 0 ? void 0 : watcher.remove();
          watcher = null;
        } catch (error) {
          console.log(error.message || error);
        }
      }
      (0, import_obsidian8.setIcon)(showHelp, "help-circle");
      showHelp.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        try {
          new HelpModal(this.app, buttonTour[0].popover.title, buttonTour[0].popover.description, "", false, true).open();
          onWatch.addClass("button-highlight");
        } catch (error) {
          console.log(error.message || error);
        }
      }));
    });
  });
  const handleWatchedTemplate = (playgroundPath2, output) => {
    saveJson(app, playgroundPath2, JSON.stringify(output, null, 2));
  };
  const createText = (fileContent) => __awaiter(void 0, void 0, void 0, function* () {
    return fileContent === null || fileContent === void 0 ? void 0 : fileContent.trim();
  });
  function prettifyMarkdown(src, fileName) {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        return yield lu(src, {
          filepath: fileName,
          proseWrap: "preserve",
          embeddedLanguageFormatting: "off",
          plugins: [markdown_exports]
        }).then((pretty) => {
          return Promise.resolve(pretty);
        });
      } catch (error) {
        showNotice("Prettify error: " + error + " Click this message to dismiss.", 0, "error");
        return Promise.resolve(src);
      }
    });
  }
  function prettifyHtml(src, fileName) {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        return yield lu(src, {
          filepath: fileName,
          parser: "html",
          bracketSameLine: true,
          printWidth: 1e3,
          // singleAttributePerLine: true,
          htmlWhitespaceSensitivity: "ignore",
          plugins: [html_exports]
        }).then((pretty) => {
          let regex = /^\s*$(?:\r\n?|\n)/gm;
          let result = pretty.replace(regex, "");
          return Promise.resolve(result);
        });
      } catch (error) {
        showNotice("Prettify error: " + error + " Click this message to dismiss.", 0, "error");
        return Promise.resolve(src);
      }
    });
  }
  const saveAsGist = (gistSettings, fileName, body, htmlName, html3, jsonName, json) => __awaiter(void 0, void 0, void 0, function* () {
    const token = plugin.settings.githubApiToken;
    if (!token) {
      showNotice("Error: GitHub token not found, check livecodes settings. Click this message to dismiss.", 0, "error");
      return;
    }
    try {
      showNotice("Creating gist\u2026", 5e3, "loading");
      let prettyHtml = yield prettifyHtml(html3, htmlName);
      const octokit = new Octokit({ "auth": token });
      let filteredFiles = {
        [fileName]: { "content": body },
        [htmlName]: {
          "content": "<!DOCTYPE html>\n" + prettyHtml
        },
        [jsonName]: { "content": json }
      };
      if (!gistSettings.includeHtmlFile) {
        delete filteredFiles[`${htmlName}`];
      }
      if (!gistSettings.includeJsonFile) {
        delete filteredFiles[`${jsonName}`];
      }
      if (!gistSettings.includeMarkdownFile) {
        delete filteredFiles[`${fileName}`];
      }
      const result = yield octokit.request("POST /gists", {
        "description": "",
        "public": plugin.settings.githubGistPublic,
        "files": filteredFiles,
        "headers": { "X-GitHub-Api-Version": "2022-11-28" }
      });
      let gistId = result.data.id;
      let url = result.data.html_url;
      let files = Object.keys(result.data.files);
      let livecodesUrl = void 0;
      let openGistUrl = void 0;
      files.forEach((file) => __awaiter(void 0, void 0, void 0, function* () {
        let fileExt = result.data.files[file].filename.split(".").pop();
        if (fileExt === "json") {
          livecodesUrl = "\n" + plugin.settings.appUrl + "?config=" + result.data.files[file].raw_url;
          openGistUrl = "\nobsidian://playground?vault=" + encodeURIComponent(this.app.vault.getName()) + "&gistUrl=" + encodeURIComponent(result.data.files[file].raw_url);
          url += livecodesUrl + openGistUrl;
        }
      }));
      if (gistSettings.includeLivecodesLink && livecodesUrl) {
        try {
          yield octokit.request("PATCH /gists/" + gistId, {
            "description": "\u{1F449}\uFE0F Open this code in Livecodes: " + livecodesUrl,
            "headers": { "X-GitHub-Api-Version": "2022-11-28" }
          });
        } catch (error) {
          showNotice("Error: " + error + " Click this message to dismiss.", 0, "error");
        }
      }
      try {
        yield navigator.clipboard.writeText(url);
        url.split("\n").forEach((url2, index2) => {
          let i = index2 + 1;
          console.log(i + " - " + url2);
        });
      } catch (error) {
        console.log("Error: " + error);
      }
      showNotice("Gist created - URLs copied to your clipboard and logged to the developer console", 4e3, "success");
    } catch (err) {
      showNotice("There was an error creating your gist, check your token and connection.  Click this message to dismiss.", 0, "error");
      throw err;
    }
  });
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      container = $$value;
      $$invalidate(1, container);
    });
  }
  function button0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      onWatch = $$value;
      $$invalidate(8, onWatch);
    });
  }
  function button1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      createNote = $$value;
      $$invalidate(4, createNote);
    });
  }
  function button2_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      saveAsNewPlayground = $$value;
      $$invalidate(5, saveAsNewPlayground);
    });
  }
  function button3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      downloadHTML = $$value;
      $$invalidate(3, downloadHTML);
    });
  }
  function button4_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      copyHTML = $$value;
      $$invalidate(2, copyHTML);
    });
  }
  function button5_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      copyShareUrl = $$value;
      $$invalidate(6, copyShareUrl);
    });
  }
  function button6_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      openShareGist = $$value;
      $$invalidate(9, openShareGist);
    });
  }
  function button7_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      toggleTheme = $$value;
      $$invalidate(7, toggleTheme);
    });
  }
  function button8_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      openExternalResources = $$value;
      $$invalidate(11, openExternalResources);
    });
  }
  function button9_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      openPlaygroundSettings = $$value;
      $$invalidate(12, openPlaygroundSettings);
    });
  }
  function button10_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      showHelp = $$value;
      $$invalidate(10, showHelp);
    });
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      buttonsWrapper = $$value;
      $$invalidate(13, buttonsWrapper);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("jsonTemplate" in $$props2)
      $$invalidate(14, jsonTemplate = $$props2.jsonTemplate);
    if ("playgroundPath" in $$props2)
      $$invalidate(15, playgroundPath = $$props2.playgroundPath);
  };
  return [
    plugin,
    container,
    copyHTML,
    downloadHTML,
    createNote,
    saveAsNewPlayground,
    copyShareUrl,
    toggleTheme,
    onWatch,
    openShareGist,
    showHelp,
    openExternalResources,
    openPlaygroundSettings,
    buttonsWrapper,
    jsonTemplate,
    playgroundPath,
    div0_binding,
    button0_binding,
    button1_binding,
    button2_binding,
    button3_binding,
    button4_binding,
    button5_binding,
    button6_binding,
    button7_binding,
    button8_binding,
    button9_binding,
    button10_binding,
    div1_binding
  ];
}
var Playground = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance2, create_fragment2, safe_not_equal, { jsonTemplate: 14, playgroundPath: 15 }, null, [-1, -1]);
  }
};
var Playground_default = Playground;

// src/views/playground.ts
var VIEW_TYPE_PLAYGROUND = "Livecodes-view";
var PlaygroundView = class extends import_obsidian9.ItemView {
  constructor(app2, leaf, jsonTemplate, settings) {
    super(leaf);
    this.settings = settings;
    this.jsonTemplate = jsonTemplate;
  }
  getViewType() {
    return VIEW_TYPE_PLAYGROUND;
  }
  getDisplayText() {
    var _a3, _b, _c;
    if (this.jsonTemplate === void 0) {
      return "Plugin no longer active";
    }
    let fileName = (_c = this.jsonTemplate) == null ? void 0 : _c.path.substring(
      ((_a3 = this.jsonTemplate) == null ? void 0 : _a3.path.lastIndexOf("/")) + 1,
      (_b = this.jsonTemplate) == null ? void 0 : _b.path.length
    ).replace(
      ".json",
      ""
    ).replace(
      this.settings.playgroundFolder + "/",
      ""
    );
    return `${fileName}`;
  }
  getIcon() {
    return "code";
  }
  async onOpen() {
    if (this.contentEl) {
      this.contentEl.empty();
    }
    let foundTemplate = this.jsonTemplate !== void 0;
    if (!foundTemplate) {
      return;
    }
    let playgroundPath = (0, import_obsidian9.normalizePath)(this.jsonTemplate.path);
    let fPath = this.app.vault.getFileByPath(playgroundPath);
    let tpl = await this.app.vault.read(fPath);
    let newTemplate = JSON.parse(tpl);
    this.component = new Playground_default({
      target: this.contentEl,
      props: {
        jsonTemplate: newTemplate,
        playgroundPath
      }
    });
  }
  async onClose() {
    this.component.$destroy();
  }
  /**
   * https://github.com/zsviczian/obsidian-excalidraw-plugin/blob/146d04ea6486df84897bb1dc1b525affd691f042/src/ExcalidrawView.ts#L1124
   */
  onResize() {
  }
  onPaneMenu(menu, source) {
    menu.hide();
  }
};

// src/views/search.ts
var import_obsidian11 = require("obsidian");

// src/components/Search.svelte
var import_obsidian10 = require("obsidian");
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[17] = list[i];
  return child_ctx;
}
function create_if_block(ctx) {
  let div1;
  let div0;
  let t0_value = (
    /*entries*/
    (ctx[0].length === 50 ? (
      /*entries*/
      ctx[0].length + "+"
    ) : (
      /*entries*/
      ctx[0].length
    )) + ""
  );
  let t0;
  let t1;
  let t22;
  let each_value = ensure_array_like(
    /*entries*/
    ctx[0]
  );
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
  }
  let each_1_else = null;
  if (!each_value.length) {
    each_1_else = create_else_block(ctx);
  }
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = text(" playgrounds found");
      t22 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      if (each_1_else) {
        each_1_else.c();
      }
      attr(div0, "class", "results-note");
      attr(div1, "class", "search-results-wrapper");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, t0);
      append(div0, t1);
      append(div1, t22);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
      if (each_1_else) {
        each_1_else.m(div1, null);
      }
    },
    p(ctx2, dirty) {
      if (dirty & /*entries*/
      1 && t0_value !== (t0_value = /*entries*/
      (ctx2[0].length === 50 ? (
        /*entries*/
        ctx2[0].length + "+"
      ) : (
        /*entries*/
        ctx2[0].length
      )) + ""))
        set_data(t0, t0_value);
      if (dirty & /*entries, Math, encodeURIComponent, app*/
      65) {
        each_value = ensure_array_like(
          /*entries*/
          ctx2[0]
        );
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block2(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div1, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
        if (!each_value.length && each_1_else) {
          each_1_else.p(ctx2, dirty);
        } else if (!each_value.length) {
          each_1_else = create_else_block(ctx2);
          each_1_else.c();
          each_1_else.m(div1, null);
        } else if (each_1_else) {
          each_1_else.d(1);
          each_1_else = null;
        }
      }
    },
    d(detaching) {
      if (detaching) {
        detach(div1);
      }
      destroy_each(each_blocks, detaching);
      if (each_1_else)
        each_1_else.d();
    }
  };
}
function create_else_block(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      attr(div, "class", "search-results-wrapper");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching) {
        detach(div);
      }
    }
  };
}
function create_each_block2(ctx) {
  let div7;
  let div3;
  let div0;
  let a;
  let t0_value = (
    /*item*/
    ctx[17].title + ""
  );
  let t0;
  let a_href_value;
  let a_aria_label_value;
  let t1;
  let div1;
  let button0;
  let copyUrlHandler_action;
  let t22;
  let div2;
  let button1;
  let openJsonHandler_action;
  let t32;
  let div6;
  let div4;
  let raw0_value = "<span>Score:</span> " + Math.round(
    /*item*/
    ctx[17].score
  );
  let t42;
  let div5;
  let raw1_value = "<span>Matches:</span> " + /*item*/
  (ctx[17].matches.length === 99 ? (
    /*item*/
    ctx[17].matches.length + "+"
  ) : (
    /*item*/
    ctx[17].matches.length
  ));
  let t52;
  let mounted;
  let dispose;
  return {
    c() {
      div7 = element("div");
      div3 = element("div");
      div0 = element("div");
      a = element("a");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      button0 = element("button");
      button0.innerHTML = ``;
      t22 = space();
      div2 = element("div");
      button1 = element("button");
      button1.innerHTML = ``;
      t32 = space();
      div6 = element("div");
      div4 = element("div");
      t42 = space();
      div5 = element("div");
      t52 = space();
      attr(a, "href", a_href_value = "obsidian://playground?vault=" + encodeURIComponent(
        /*app*/
        ctx[6].vault.getName()
      ) + "&playgroundPath=" + encodeURIComponent(
        /*item*/
        ctx[17].path
      ));
      attr(a, "aria-label", a_aria_label_value = "Open playground \u2192 " + /*item*/
      ctx[17].path.split("/").pop().replace(".json", ""));
      attr(button0, "class", "clickable-icon setting-editor-extra-setting-button");
      attr(button0, "aria-label", "Copy Obsidian URL to clipboard");
      attr(button1, "class", "clickable-icon setting-editor-extra-setting-button");
      attr(button1, "aria-label", "Open JSON file");
      attr(div6, "class", "result-row-stats");
      attr(div7, "class", "result-row");
    },
    m(target, anchor) {
      insert(target, div7, anchor);
      append(div7, div3);
      append(div3, div0);
      append(div0, a);
      append(a, t0);
      append(div3, t1);
      append(div3, div1);
      append(div1, button0);
      append(div3, t22);
      append(div3, div2);
      append(div2, button1);
      append(div7, t32);
      append(div7, div6);
      append(div6, div4);
      div4.innerHTML = raw0_value;
      append(div6, t42);
      append(div6, div5);
      div5.innerHTML = raw1_value;
      append(div7, t52);
      if (!mounted) {
        dispose = [
          action_destroyer(copyUrlHandler_action = /*copyUrlHandler*/
          ctx[8].call(
            null,
            button0,
            /*item*/
            ctx[17].path
          )),
          action_destroyer(openJsonHandler_action = /*openJsonHandler*/
          ctx[9].call(
            null,
            button1,
            /*item*/
            ctx[17].path
          ))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & /*entries*/
      1 && t0_value !== (t0_value = /*item*/
      ctx[17].title + ""))
        set_data(t0, t0_value);
      if (dirty & /*entries*/
      1 && a_href_value !== (a_href_value = "obsidian://playground?vault=" + encodeURIComponent(
        /*app*/
        ctx[6].vault.getName()
      ) + "&playgroundPath=" + encodeURIComponent(
        /*item*/
        ctx[17].path
      ))) {
        attr(a, "href", a_href_value);
      }
      if (dirty & /*entries*/
      1 && a_aria_label_value !== (a_aria_label_value = "Open playground \u2192 " + /*item*/
      ctx[17].path.split("/").pop().replace(".json", ""))) {
        attr(a, "aria-label", a_aria_label_value);
      }
      if (copyUrlHandler_action && is_function(copyUrlHandler_action.update) && dirty & /*entries*/
      1)
        copyUrlHandler_action.update.call(
          null,
          /*item*/
          ctx[17].path
        );
      if (openJsonHandler_action && is_function(openJsonHandler_action.update) && dirty & /*entries*/
      1)
        openJsonHandler_action.update.call(
          null,
          /*item*/
          ctx[17].path
        );
      if (dirty & /*entries*/
      1 && raw0_value !== (raw0_value = "<span>Score:</span> " + Math.round(
        /*item*/
        ctx[17].score
      )))
        div4.innerHTML = raw0_value;
      ;
      if (dirty & /*entries*/
      1 && raw1_value !== (raw1_value = "<span>Matches:</span> " + /*item*/
      (ctx[17].matches.length === 99 ? (
        /*item*/
        ctx[17].matches.length + "+"
      ) : (
        /*item*/
        ctx[17].matches.length
      ))))
        div5.innerHTML = raw1_value;
      ;
    },
    d(detaching) {
      if (detaching) {
        detach(div7);
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment3(ctx) {
  let div0;
  let t1;
  let div3;
  let div2;
  let div1;
  let input;
  let t22;
  let button0;
  let t32;
  let button1;
  let t42;
  let t52;
  let div4;
  let t62;
  let div5;
  let t8;
  let div6;
  let p0;
  let span0;
  let t9;
  let span1;
  let t11;
  let p1;
  let mounted;
  let dispose;
  let if_block = (
    /*entries*/
    ctx[0].length && create_if_block(ctx)
  );
  return {
    c() {
      div0 = element("div");
      div0.textContent = "Playground search";
      t1 = space();
      div3 = element("div");
      div2 = element("div");
      div1 = element("div");
      input = element("input");
      t22 = space();
      button0 = element("button");
      button0.innerHTML = ``;
      t32 = space();
      button1 = element("button");
      button1.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-search"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"></path></svg>`;
      t42 = space();
      if (if_block)
        if_block.c();
      t52 = space();
      div4 = element("div");
      t62 = space();
      div5 = element("div");
      div5.textContent = "No playgrounds found";
      t8 = space();
      div6 = element("div");
      p0 = element("p");
      span0 = element("span");
      t9 = space();
      span1 = element("span");
      span1.textContent = "The Omnisearch plugin is required for searching playgrounds.";
      t11 = space();
      p1 = element("p");
      p1.innerHTML = `<a href="obsidian://show-plugin?id=omnisearch">Install Omnisearch plugin</a>`;
      attr(div0, "class", "search-form-heading");
      attr(input, "type", "text");
      attr(input, "placeholder", "What are you looking for?");
      attr(input, "class", "search-input");
      attr(button0, "class", "clear-input-button");
      attr(button0, "aria-label", "Clear input");
      attr(div1, "class", "clear-input");
      attr(div2, "class", "search-form-input");
      attr(button1, "class", "search-button");
      attr(button1, "aria-label", "Search");
      attr(button1, "data-tooltip-position", "bottom");
      attr(div3, "class", "search-form-wrapper");
      attr(div4, "class", "waiting-indicator");
      set_style(div4, "display", "none");
      attr(div5, "class", "no-result");
      set_style(div5, "display", "none");
      attr(div6, "class", "no-omnisearch");
      set_style(div6, "display", "none");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      insert(target, t1, anchor);
      insert(target, div3, anchor);
      append(div3, div2);
      append(div2, div1);
      append(div1, input);
      ctx[10](input);
      append(div1, t22);
      append(div1, button0);
      ctx[11](button0);
      append(div3, t32);
      append(div3, button1);
      ctx[12](button1);
      insert(target, t42, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t52, anchor);
      insert(target, div4, anchor);
      div4.innerHTML = INDICATOR_SVG;
      insert(target, t62, anchor);
      insert(target, div5, anchor);
      insert(target, t8, anchor);
      insert(target, div6, anchor);
      append(div6, p0);
      append(p0, span0);
      ctx[13](span0);
      append(p0, t9);
      append(p0, span1);
      append(div6, t11);
      append(div6, p1);
      ctx[14](div6);
      if (!mounted) {
        dispose = listen(
          input,
          "keypress",
          /*handleKeypress*/
          ctx[7]
        );
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (
        /*entries*/
        ctx2[0].length
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          if_block.m(t52.parentNode, t52);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching) {
        detach(div0);
        detach(t1);
        detach(div3);
        detach(t42);
        detach(t52);
        detach(div4);
        detach(t62);
        detach(div5);
        detach(t8);
        detach(div6);
      }
      ctx[10](null);
      ctx[11](null);
      ctx[12](null);
      if (if_block)
        if_block.d(detaching);
      ctx[13](null);
      ctx[14](null);
      mounted = false;
      dispose();
    }
  };
}
function instance3($$self, $$props, $$invalidate) {
  const app2 = this.app;
  const plugin = this.app.plugins.plugins["livecodes-playground"];
  let entries = [];
  let searchButton;
  let clearSearchButton;
  let searchInput;
  let noOmnisearch;
  let noOmnisearchIcon;
  let startSearch = function(query) {
    var _a3, _b, _c, _d, _e4, _f, _g;
    return __awaiter(this, void 0, void 0, function* () {
      (_a3 = activeDocument.querySelector(".no-result")) === null || _a3 === void 0 ? void 0 : _a3.setAttr("style", "display: none;");
      (_b = activeDocument.querySelector(".waiting-indicator")) === null || _b === void 0 ? void 0 : _b.setAttribute("style", "display: flex;");
      yield sleep(250);
      $$invalidate(0, entries = []);
      const result = yield this.omnisearch.search('ext:"json" ' + query);
      if (result.length) {
        result.forEach((res) => {
          let fileExt = res.path.split(".").pop();
          if (fileExt === "json") {
            $$invalidate(0, entries = [
              ...entries,
              {
                title: res.basename,
                path: res.path,
                score: res.score,
                excerpt: res.excerpt,
                matches: res.matches
              }
            ]);
          }
        });
        (_c = activeDocument.querySelector(".waiting-indicator")) === null || _c === void 0 ? void 0 : _c.setAttribute("style", "display: none;");
        if (entries.length) {
          (_d = activeDocument.querySelector(".search-results-wrapper")) === null || _d === void 0 ? void 0 : _d.setAttr("style", "display: block;");
        } else {
          (_e4 = activeDocument.querySelector(".no-result")) === null || _e4 === void 0 ? void 0 : _e4.setAttr("style", "display: flex;");
        }
      } else {
        (_f = activeDocument.querySelector(".waiting-indicator")) === null || _f === void 0 ? void 0 : _f.setAttribute("style", "display: none;");
        (_g = activeDocument.querySelector(".no-result")) === null || _g === void 0 ? void 0 : _g.setAttr("style", "display: flex;");
      }
    });
  };
  function handleKeypress(e) {
    var _a3, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
      e.preventDefault;
      if (e.key === "Enter" && e.target.classList.contains("search-input")) {
        let query = searchInput.value;
        if (query.length) {
          (_a3 = activeDocument.querySelector(".search-results-wrapper")) === null || _a3 === void 0 ? void 0 : _a3.setAttr("style", "display:none;");
          (_b = activeDocument.querySelector(".waiting-indicator")) === null || _b === void 0 ? void 0 : _b.setAttribute("style", "display: flex;");
          (_c = activeDocument.querySelector(".no-result")) === null || _c === void 0 ? void 0 : _c.setAttr("style", "display: none;");
          startSearch(query);
        }
      }
    });
  }
  function copyUrlHandler(node, path) {
    (0, import_obsidian10.setIcon)(node, "link");
    node.addEventListener("click", (e) => __awaiter(this, void 0, void 0, function* () {
      e.preventDefault();
      yield copyStringToClipboard("obsidian://playground?vault=" + encodeURIComponent(this.app.vault.getName()) + "&playgroundPath=" + encodeURIComponent(path), "Obsidian URL");
    }));
  }
  function openJsonHandler(node, path) {
    (0, import_obsidian10.setIcon)(node, "file-json-2");
    node.addEventListener("click", (e) => __awaiter(this, void 0, void 0, function* () {
      e.preventDefault();
      let splitPath = path.split("/");
      let fName = splitPath.pop();
      yield this.app.workspace.openLinkText(fName, splitPath.join("/"));
    }));
  }
  onMount(() => {
    var _a3, _b;
    if (!this.app.plugins.plugins["omnisearch"]) {
      (0, import_obsidian10.setIcon)(noOmnisearchIcon, "alert-triangle");
      (_a3 = activeDocument.querySelector(".search-form-wrapper")) === null || _a3 === void 0 ? void 0 : _a3.setAttr("style", "display: none;");
      (_b = activeDocument.querySelector(".no-omnisearch")) === null || _b === void 0 ? void 0 : _b.setAttr("style", "display: block;");
    }
    searchButton.addEventListener("click", (e) => __awaiter(void 0, void 0, void 0, function* () {
      var _c, _d, _e4;
      e.preventDefault();
      let query = searchInput.value;
      (_c = activeDocument.querySelector(".search-results-wrapper")) === null || _c === void 0 ? void 0 : _c.setAttr("style", "display:none;");
      (_d = activeDocument.querySelector(".waiting-indicator")) === null || _d === void 0 ? void 0 : _d.setAttribute("style", "display: flex;");
      (_e4 = activeDocument.querySelector(".no-result")) === null || _e4 === void 0 ? void 0 : _e4.setAttr("style", "display: none;");
      startSearch(query);
    }));
    searchInput.addEventListener("input", (evt) => {
      if (evt.currentTarget.value && !searchInput.classList.contains("clear-input--touched")) {
        searchInput.classList.add("clear-input--touched");
      } else if (!evt.currentTarget.value && searchInput.classList.contains("clear-input--touched")) {
        searchInput.classList.remove("clear-input--touched");
      }
    });
    clearSearchButton.addEventListener("click", (evt) => {
      $$invalidate(3, searchInput.value = "", searchInput);
      searchInput.focus();
      searchInput.classList.remove("clear-input--touched");
    });
    setTimeout(
      () => {
        searchInput.focus();
      },
      10
    );
  });
  function input_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      searchInput = $$value;
      $$invalidate(3, searchInput);
    });
  }
  function button0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      clearSearchButton = $$value;
      $$invalidate(2, clearSearchButton);
    });
  }
  function button1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      searchButton = $$value;
      $$invalidate(1, searchButton);
    });
  }
  function span0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      noOmnisearchIcon = $$value;
      $$invalidate(5, noOmnisearchIcon);
    });
  }
  function div6_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      noOmnisearch = $$value;
      $$invalidate(4, noOmnisearch);
    });
  }
  return [
    entries,
    searchButton,
    clearSearchButton,
    searchInput,
    noOmnisearch,
    noOmnisearchIcon,
    app2,
    handleKeypress,
    copyUrlHandler,
    openJsonHandler,
    input_binding,
    button0_binding,
    button1_binding,
    span0_binding,
    div6_binding
  ];
}
var Search = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance3, create_fragment3, safe_not_equal, {});
  }
};
var Search_default = Search;

// src/views/search.ts
var VIEW_TYPE_PLAYGROUND_SEARCH = "livecodes-search-view";
var LivecodesSearchView = class extends import_obsidian11.ItemView {
  constructor(app2, leaf, settings) {
    super(leaf);
    this.settings = settings;
    this.adapter = this.app.vault.adapter;
  }
  getViewType() {
    return VIEW_TYPE_PLAYGROUND_SEARCH;
  }
  getDisplayText() {
    return "Playground search ";
  }
  getIcon() {
    return "search-code";
  }
  async onOpen() {
    if (this.contentEl) {
      this.contentEl.empty();
    }
    this.component = new Search_default({
      target: this.contentEl
    });
  }
  async onClose() {
    this.component.$destroy();
  }
};

// src/settings/index.ts
var import_obsidian14 = require("obsidian");

// src/settings/FolderSuggester.ts
var import_obsidian12 = require("obsidian");
var FolderSuggest = class extends import_obsidian12.AbstractInputSuggest {
  constructor(inputEl, app2) {
    super(app2, inputEl);
    this.inputEl = inputEl;
    this.app = app2;
  }
  getSuggestions(inputStr) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const lowerCaseInputStr = inputStr.toLowerCase();
    const folders = abstractFiles.reduce((acc, folder) => {
      if (folder instanceof import_obsidian12.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        acc.push(folder);
      }
      return acc;
    }, []);
    return folders;
  }
  renderSuggestion(file, el2) {
    el2.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/livecodes/themes/monacoDarkThemes.ts
var monacoDarkThemes = [
  {
    name: "",
    desc: "Default"
  },
  {
    name: "monaco:active4d@dark",
    desc: "Active4D"
  },
  {
    name: "monaco:all-hallows-eve@dark",
    desc: "All Hallows Eve"
  },
  {
    name: "monaco:amy@dark",
    desc: "Amy"
  },
  {
    name: "monaco:birds-of-paradise@dark",
    desc: "Birds of Paradise"
  },
  {
    name: "monaco:blackboard@dark",
    desc: "Blackboard"
  },
  {
    name: "monaco:brilliance-black@dark",
    desc: "Brilliance Black"
  },
  {
    name: "monaco:brilliance-dull@dark",
    desc: "Brilliance Dull"
  },
  {
    name: "monaco:chrome-devtools@dark",
    desc: "Chrome DevTools"
  },
  {
    name: "monaco:clouds-midnight@dark",
    desc: "Clouds Midnight"
  },
  {
    name: "monaco:clouds@dark",
    desc: "Clouds"
  },
  {
    name: "monaco:cobalt@dark",
    desc: "Cobalt"
  },
  {
    name: "monaco:cobalt2@dark",
    desc: "Cobalt2"
  },
  {
    name: "monaco:dawn@dark",
    desc: "Dawn"
  },
  {
    name: "monaco:dracula@dark",
    desc: "Dracula"
  },
  {
    name: "monaco:dreamweaver@dark",
    desc: "Dreamweaver"
  },
  {
    name: "monaco:eiffel@dark",
    desc: "Eiffel"
  },
  {
    name: "monaco:espresso-libre@dark",
    desc: "Espresso Libre"
  },
  {
    name: "monaco:github@dark",
    desc: "GitHub"
  },
  {
    name: "monaco:github-dark@dark",
    desc: "GitHub Dark"
  },
  {
    name: "monaco:github-light@dark",
    desc: "GitHub Light"
  },
  {
    name: "monaco:hc-black@dark",
    desc: "High Contrast (Black)"
  },
  {
    name: "monaco:hc-light@dark",
    desc: "High Contrast (Light)"
  },
  {
    name: "monaco:idle@dark",
    desc: "Idle"
  },
  {
    name: "monaco:idlefingers@dark",
    desc: "Idle Fingers"
  },
  {
    name: "monaco:iplastic@dark",
    desc: "iPlastic"
  },
  {
    name: "monaco:katzenmilch@dark",
    desc: "Katzenmilch"
  },
  {
    name: "monaco:krtheme@dark",
    desc: "krTheme"
  },
  {
    name: "monaco:kuroir@dark",
    desc: "Kuroir Theme"
  },
  {
    name: "monaco:lazy@dark",
    desc: "Lazy"
  },
  {
    name: "monaco:magicwb-amiga@dark",
    desc: "MagicWB (Amiga)"
  },
  {
    name: "monaco:merbivore-soft@dark",
    desc: "Merbivore Soft"
  },
  {
    name: "monaco:merbivore@dark",
    desc: "Merbivore"
  },
  {
    name: "monaco:monochrome@dark",
    desc: "Monochrome"
  },
  {
    name: "monaco:monochrome-dark@dark",
    desc: "Monochrome Dark"
  },
  {
    name: "monaco:monoindustrial@dark",
    desc: "monoindustrial"
  },
  {
    name: "monaco:monokai@dark",
    desc: "Monokai"
  },
  {
    name: "monaco:monokai-bright@dark",
    desc: "Monokai Bright"
  },
  {
    name: "monaco:night-owl@dark",
    desc: "Night Owl"
  },
  {
    name: "monaco:nord@dark",
    desc: "Nord"
  },
  {
    name: "monaco:oceanic-next@dark",
    desc: "Oceanic Next"
  },
  {
    name: "monaco:pastels-on-dark@dark",
    desc: "Pastels on Dark"
  },
  {
    name: "monaco:slush-and-poppies@dark",
    desc: "Slush and Poppies"
  },
  {
    name: "monaco:solarized-dark@dark",
    desc: "Solarized Dark"
  },
  {
    name: "monaco:solarized-light@dark",
    desc: "Solarized Light"
  },
  {
    name: "monaco:spacecadet@dark",
    desc: "SpaceCadet"
  },
  {
    name: "monaco:sunburst@dark",
    desc: "Sunburst"
  },
  {
    name: "monaco:textmate-mac-classic@dark",
    desc: "Textmate (Mac Classic)"
  },
  {
    name: "monaco:tomorrow@dark",
    desc: "Tomorrow"
  },
  {
    name: "monaco:tomorrow-night@dark",
    desc: "Tomorrow Night"
  },
  {
    name: "monaco:tomorrow-night-blue@dark",
    desc: "Tomorrow Night Blue"
  },
  {
    name: "monaco:tomorrow-night-bright@dark",
    desc: "Tomorrow Night Bright"
  },
  {
    name: "monaco:tomorrow-night-eighties@dark",
    desc: "Tomorrow Night Eighties"
  },
  {
    name: "monaco:twilight@dark",
    desc: "Twilight"
  },
  {
    name: "monaco:upstream-sunburst@dark",
    desc: "Upstream Sunburst"
  },
  {
    name: "monaco:vibrant-ink@dark",
    desc: "Vibrant Ink"
  },
  {
    name: "monaco:vs@dark",
    desc: "VS"
  },
  {
    name: "monaco:vs-dark@dark",
    desc: "VS Dark"
  },
  {
    name: "monaco:xcode-default@dark",
    desc: "Xcode Default"
  },
  {
    name: "monaco:zenburnesque@dark",
    desc: "Zenburnesque"
  }
];

// src/livecodes/themes/monacoLightThemes.ts
var monacoLightThemes = [
  {
    name: "",
    desc: "Default"
  },
  {
    name: "monaco:active4d@light",
    desc: "Active4D"
  },
  {
    name: "monaco:all-hallows-eve@light",
    desc: "All Hallows Eve"
  },
  {
    name: "monaco:amy@light",
    desc: "Amy"
  },
  {
    name: "monaco:birds-of-paradise@light",
    desc: "Birds of Paradise"
  },
  {
    name: "monaco:blackboard@light",
    desc: "Blackboard"
  },
  {
    name: "monaco:brilliance-black@light",
    desc: "Brilliance Black"
  },
  {
    name: "monaco:brilliance-dull@light",
    desc: "Brilliance Dull"
  },
  {
    name: "monaco:chrome-devtools@light",
    desc: "Chrome DevTools"
  },
  {
    name: "monaco:clouds-midnight@light",
    desc: "Clouds Midnight"
  },
  {
    name: "monaco:clouds@light",
    desc: "Clouds"
  },
  {
    name: "monaco:cobalt@light",
    desc: "Cobalt"
  },
  {
    name: "monaco:cobalt2@light",
    desc: "Cobalt2"
  },
  {
    name: "monaco:dawn@light",
    desc: "Dawn"
  },
  {
    name: "monaco:dracula@light",
    desc: "Dracula"
  },
  {
    name: "monaco:dreamweaver@light",
    desc: "Dreamweaver"
  },
  {
    name: "monaco:eiffel@light",
    desc: "Eiffel"
  },
  {
    name: "monaco:espresso-libre@light",
    desc: "Espresso Libre"
  },
  {
    name: "monaco:github@light",
    desc: "GitHub"
  },
  {
    name: "monaco:github-dark@light",
    desc: "GitHub Dark"
  },
  {
    name: "monaco:github-light@light",
    desc: "GitHub Light"
  },
  {
    name: "monaco:hc-black@light",
    desc: "High Contrast (Black)"
  },
  {
    name: "monaco:hc-light@light",
    desc: "High Contrast (Light)"
  },
  {
    name: "monaco:idle@light",
    desc: "Idle"
  },
  {
    name: "monaco:idlefingers@light",
    desc: "Idle Fingers"
  },
  {
    name: "monaco:iplastic@light",
    desc: "iPlastic"
  },
  {
    name: "monaco:katzenmilch@light",
    desc: "Katzenmilch"
  },
  {
    name: "monaco:krtheme@light",
    desc: "krTheme"
  },
  {
    name: "monaco:kuroir@light",
    desc: "Kuroir Theme"
  },
  {
    name: "monaco:lazy@light",
    desc: "Lazy"
  },
  {
    name: "monaco:magicwb-amiga@light",
    desc: "MagicWB (Amiga)"
  },
  {
    name: "monaco:merbivore-soft@light",
    desc: "Merbivore Soft"
  },
  {
    name: "monaco:merbivore@light",
    desc: "Merbivore"
  },
  {
    name: "monaco:monochrome@light",
    desc: "Monochrome"
  },
  {
    name: "monaco:monochrome-dark@light",
    desc: "Monochrome Dark"
  },
  {
    name: "monaco:monoindustrial@light",
    desc: "monoindustrial"
  },
  {
    name: "monaco:monokai@light",
    desc: "Monokai"
  },
  {
    name: "monaco:monokai-bright@light",
    desc: "Monokai Bright"
  },
  {
    name: "monaco:night-owl@light",
    desc: "Night Owl"
  },
  {
    name: "monaco:nord@light",
    desc: "Nord"
  },
  {
    name: "monaco:oceanic-next@light",
    desc: "Oceanic Next"
  },
  {
    name: "monaco:pastels-on-dark@light",
    desc: "Pastels on Dark"
  },
  {
    name: "monaco:slush-and-poppies@light",
    desc: "Slush and Poppies"
  },
  {
    name: "monaco:solarized-dark@light",
    desc: "Solarized Dark"
  },
  {
    name: "monaco:solarized-light@light",
    desc: "Solarized Light"
  },
  {
    name: "monaco:spacecadet@light",
    desc: "SpaceCadet"
  },
  {
    name: "monaco:sunburst@light",
    desc: "Sunburst"
  },
  {
    name: "monaco:textmate-mac-classic@light",
    desc: "Textmate (Mac Classic)"
  },
  {
    name: "monaco:tomorrow@light",
    desc: "Tomorrow"
  },
  {
    name: "monaco:tomorrow-night@light",
    desc: "Tomorrow Night"
  },
  {
    name: "monaco:tomorrow-night-blue@light",
    desc: "Tomorrow Night Blue"
  },
  {
    name: "monaco:tomorrow-night-bright@light",
    desc: "Tomorrow Night Bright"
  },
  {
    name: "monaco:tomorrow-night-eighties@light",
    desc: "Tomorrow Night Eighties"
  },
  {
    name: "monaco:twilight@light",
    desc: "Twilight"
  },
  {
    name: "monaco:upstream-sunburst@light",
    desc: "Upstream Sunburst"
  },
  {
    name: "monaco:vibrant-ink@light",
    desc: "Vibrant Ink"
  },
  {
    name: "monaco:vs@light",
    desc: "VS"
  },
  {
    name: "monaco:vs-dark@light",
    desc: "VS Dark"
  },
  {
    name: "monaco:xcode-default@light",
    desc: "Xcode Default"
  },
  {
    name: "monaco:zenburnesque@light",
    desc: "Zenburnesque"
  }
];

// src/livecodes/themes/codemirrorDarkThemes.ts
var codemirrorDarkThemes = [
  {
    name: "",
    desc: "Default"
  },
  {
    name: "codemirror:amy@dark",
    desc: "Amy"
  },
  {
    name: "codemirror:aura@dark",
    desc: "Aura"
  },
  {
    name: "codemirror:ayu-light@dark",
    desc: "Ayu Light"
  },
  {
    name: "codemirror:barf@dark",
    desc: "Barf"
  },
  {
    name: "codemirror:basic-light@dark",
    desc: "Basic Light"
  },
  {
    name: "codemirror:basic-dark@dark",
    desc: "Basic Dark"
  },
  {
    name: "codemirror:bespin@dark",
    desc: "Bespin"
  },
  {
    name: "codemirror:birds-of-paradise@dark",
    desc: "Birds of Paradise"
  },
  {
    name: "codemirror:boys-and-girls@dark",
    desc: "Boys and Girls"
  },
  {
    name: "codemirror:clouds@dark",
    desc: "Clouds"
  },
  {
    name: "codemirror:cobalt@dark",
    desc: "Cobalt"
  },
  {
    name: "codemirror:cm-light@dark",
    desc: "Codemirror Light"
  },
  {
    name: "codemirror:cool-glow@dark",
    desc: "Cool Glow"
  },
  {
    name: "codemirror:dracula@dark",
    desc: "Dracula"
  },
  {
    name: "codemirror:espresso@dark",
    desc: "Espresso"
  },
  {
    name: "codemirror:github-dark@dark",
    desc: "GitHub Dark"
  },
  {
    name: "codemirror:github-light@dark",
    desc: "GitHub Light"
  },
  {
    name: "codemirror:gruvbox-dark@dark",
    desc: "Gruvbox Dark"
  },
  {
    name: "codemirror:gruvbox-light@dark",
    desc: "Gruvbox Light"
  },
  {
    name: "codemirror:material-dark@dark",
    desc: "Material Dark"
  },
  {
    name: "codemirror:material-light@dark",
    desc: "Material Light"
  },
  {
    name: "codemirror:monochrome@dark",
    desc: "Monochrome"
  },
  {
    name: "codemirror:monochrome-dark@dark",
    desc: "Monochrome Dark"
  },
  {
    name: "codemirror:noctis-lilac@dark",
    desc: "Noctis Lilac"
  },
  {
    name: "codemirror:nord@dark",
    desc: "Nord"
  },
  {
    name: "codemirror:one-dark@dark",
    desc: "One Dark"
  },
  {
    name: "codemirror:rose-pine-dawn@dark",
    desc: "Ros\xE9 Pine Dawn"
  },
  {
    name: "codemirror:smoothy@dark",
    desc: "Smoothy"
  },
  {
    name: "codemirror:solarized-dark@dark",
    desc: "Solarized Dark"
  },
  {
    name: "codemirror:solarized-light@dark",
    desc: "Solarized Light"
  },
  {
    name: "codemirror:tokyo-night@dark",
    desc: "Tokyo Night"
  },
  {
    name: "codemirror:tokyo-night-day@dark",
    desc: "Tokyo Night Day"
  },
  {
    name: "codemirror:tokyo-night-storm@dark",
    desc: "Tokyo Night Storm"
  },
  {
    name: "codemirror:tomorrow@dark",
    desc: "Tomorrow"
  }
];

// src/livecodes/themes/codemirrorLightThemes.ts
var codemirrorLightThemes = [
  {
    name: "",
    desc: "Default"
  },
  {
    name: "codemirror:amy@light",
    desc: "Amy"
  },
  {
    name: "codemirror:aura@light",
    desc: "Aura"
  },
  {
    name: "codemirror:ayu-light@light",
    desc: "Ayu Light"
  },
  {
    name: "codemirror:barf@light",
    desc: "Barf"
  },
  {
    name: "codemirror:basic-light@light",
    desc: "Basic Light"
  },
  {
    name: "codemirror:basic-dark@light",
    desc: "Basic Dark"
  },
  {
    name: "codemirror:bespin@light",
    desc: "Bespin"
  },
  {
    name: "codemirror:birds-of-paradise@light",
    desc: "Birds of Paradise"
  },
  {
    name: "codemirror:boys-and-girls@light",
    desc: "Boys and Girls"
  },
  {
    name: "codemirror:clouds@light",
    desc: "Clouds"
  },
  {
    name: "codemirror:cobalt@light",
    desc: "Cobalt"
  },
  {
    name: "codemirror:cm-light@light",
    desc: "Codemirror Light"
  },
  {
    name: "codemirror:cool-glow@light",
    desc: "Cool Glow"
  },
  {
    name: "codemirror:dracula@light",
    desc: "Dracula"
  },
  {
    name: "codemirror:espresso@light",
    desc: "Espresso"
  },
  {
    name: "codemirror:github-dark@light",
    desc: "GitHub Dark"
  },
  {
    name: "codemirror:github-light@light",
    desc: "GitHub Light"
  },
  {
    name: "codemirror:gruvbox-dark@light",
    desc: "Gruvbox Dark"
  },
  {
    name: "codemirror:gruvbox-light@light",
    desc: "Gruvbox Light"
  },
  {
    name: "codemirror:material-dark@light",
    desc: "Material Dark"
  },
  {
    name: "codemirror:material-light@light",
    desc: "Material Light"
  },
  {
    name: "codemirror:monochrome@light",
    desc: "Monochrome"
  },
  {
    name: "codemirror:monochrome-dark@light",
    desc: "Monochrome Dark"
  },
  {
    name: "codemirror:noctis-lilac@light",
    desc: "Noctis Lilac"
  },
  {
    name: "codemirror:nord@light",
    desc: "Nord"
  },
  {
    name: "codemirror:one-dark@light",
    desc: "One Dark"
  },
  {
    name: "codemirror:rose-pine-dawn@light",
    desc: "Ros\xE9 Pine Dawn"
  },
  {
    name: "codemirror:smoothy@light",
    desc: "Smoothy"
  },
  {
    name: "codemirror:solarized-dark@light",
    desc: "Solarized Dark"
  },
  {
    name: "codemirror:solarized-light@light",
    desc: "Solarized Light"
  },
  {
    name: "codemirror:tokyo-night@light",
    desc: "Tokyo Night"
  },
  {
    name: "codemirror:tokyo-night-day@light",
    desc: "Tokyo Night Day"
  },
  {
    name: "codemirror:tokyo-night-storm@light",
    desc: "Tokyo Night Storm"
  },
  {
    name: "codemirror:tomorrow@light",
    desc: "Tomorrow"
  }
];

// src/livecodes/themes/codejarDarkThemes.ts
var codejarDarkThemes = [
  {
    name: "",
    desc: "Default"
  },
  {
    name: "codejar:amy@dark",
    desc: "Amy"
  },
  {
    name: "codejar:a11y-dark@dark",
    desc: "A11y Dark"
  },
  {
    name: "codejar:atom-dark@dark",
    desc: "Atom Dark"
  },
  {
    name: "codejar:base16-ateliersulphurpool-light@dark",
    desc: "Base16 Ateliersulphurpool Light"
  },
  {
    name: "codejar:cb@dark",
    desc: "CB"
  },
  {
    name: "codejar:coldark-cold@dark",
    desc: "Coldark Cold"
  },
  {
    name: "codejar:coldark-dark@dark",
    desc: "Coldark Dark"
  },
  {
    name: "codejar:coy@dark",
    desc: "Coy"
  },
  {
    name: "codejar:coy-without-shadows@dark",
    desc: "Coy Without Shadows"
  },
  {
    name: "codejar:darcula@dark",
    desc: "Darcula"
  },
  {
    name: "codejar:dark@dark",
    desc: "Dark"
  },
  {
    name: "codejar:dracula@dark",
    desc: "Dracula"
  },
  {
    name: "codejar:duotone-dark@dark",
    desc: "Duotone Dark"
  },
  {
    name: "codejar:duotone-earth@dark",
    desc: "Duotone Earth"
  },
  {
    name: "codejar:duotone-forest@dark",
    desc: "Duotone Forest"
  },
  {
    name: "codejar:duotone-light@dark",
    desc: "Duotone Light"
  },
  {
    name: "codejar:duotone-sea@dark",
    desc: "Duotone Sea"
  },
  {
    name: "codejar:duotone-space@dark",
    desc: "Duotone Space"
  },
  {
    name: "codejar:funky@dark",
    desc: "Funky"
  },
  {
    name: "codejar:ghcolors@dark",
    desc: "GH Colors"
  },
  {
    name: "codejar:gruvbox-dark@dark",
    desc: "Gruvbox Dark"
  },
  {
    name: "codejar:gruvbox-light@dark",
    desc: "Gruvbox Light"
  },
  {
    name: "codejar:holi-theme@dark",
    desc: "Holi Theme"
  },
  {
    name: "codejar:hopscotch@dark",
    desc: "Hopscotch"
  },
  {
    name: "codejar:laserwave@dark",
    desc: "Laserwave"
  },
  {
    name: "codejar:lucario@dark",
    desc: "Lucario"
  },
  {
    name: "codejar:material-dark@dark",
    desc: "Material Dark"
  },
  {
    name: "codejar:material-light@dark",
    desc: "Material Light"
  },
  {
    name: "codejar:material-oceanic@dark",
    desc: "Material Oceanic"
  },
  {
    name: "codejar:monochrome@dark",
    desc: "Monochrome"
  },
  {
    name: "codejar:monochrome-dark@dark",
    desc: "Monochrome Dark"
  },
  {
    name: "codejar:night-owl@dark",
    desc: "Night Owl"
  },
  {
    name: "codejar:nord@dark",
    desc: "Nord"
  },
  {
    name: "codejar:okaidia@dark",
    desc: "Okaidia"
  },
  {
    name: "codejar:one-dark@dark",
    desc: "One Dark"
  },
  {
    name: "codejar:one-light@dark",
    desc: "One Light"
  },
  {
    name: "codejar:pojoaque@dark",
    desc: "Pojoaque"
  },
  {
    name: "codejar:shades-of-purple@dark",
    desc: "Shades of Purple"
  },
  {
    name: "codejar:solarized-dark-atom@dark",
    desc: "Solarized Dark Atom"
  },
  {
    name: "codejar:solarized-light@dark",
    desc: "Solarized Light"
  },
  {
    name: "codejar:synthwave84@dark",
    desc: "Synthwave 84"
  },
  {
    name: "codejar:tomorrow@dark",
    desc: "Tomorrow"
  },
  {
    name: "codejar:twilight@dark",
    desc: "Twilight"
  },
  {
    name: "codejar:vs@dark",
    desc: "VS"
  },
  {
    name: "codejar:vsc-dark-plus@dark",
    desc: "VSC Dark Plus"
  },
  {
    name: "codejar:xonokai@dark",
    desc: "Xonokai"
  },
  {
    name: "codejar:z-touchs@dark",
    desc: "Z-Touchs"
  }
];

// src/livecodes/themes/codejarLightThemes.ts
var codejarLightThemes = [
  {
    name: "",
    desc: "Default"
  },
  {
    name: "codejar:amy@light",
    desc: "Amy"
  },
  {
    name: "codejar:a11y-dark@light",
    desc: "A11y Dark"
  },
  {
    name: "codejar:atom-dark@light",
    desc: "Atom Dark"
  },
  {
    name: "codejar:base16-ateliersulphurpool-light@light",
    desc: "Base16 Ateliersulphurpool Light"
  },
  {
    name: "codejar:cb@light",
    desc: "CB"
  },
  {
    name: "codejar:coldark-cold@light",
    desc: "Coldark Cold"
  },
  {
    name: "codejar:coldark-dark@light",
    desc: "Coldark Dark"
  },
  {
    name: "codejar:coy@light",
    desc: "Coy"
  },
  {
    name: "codejar:coy-without-shadows@light",
    desc: "Coy Without Shadows"
  },
  {
    name: "codejar:darcula@light",
    desc: "Darcula"
  },
  {
    name: "codejar:dark@light",
    desc: "Dark"
  },
  {
    name: "codejar:dracula@light",
    desc: "Dracula"
  },
  {
    name: "codejar:duotone-dark@light",
    desc: "Duotone Dark"
  },
  {
    name: "codejar:duotone-earth@light",
    desc: "Duotone Earth"
  },
  {
    name: "codejar:duotone-forest@light",
    desc: "Duotone Forest"
  },
  {
    name: "codejar:duotone-light@light",
    desc: "Duotone Light"
  },
  {
    name: "codejar:duotone-sea@light",
    desc: "Duotone Sea"
  },
  {
    name: "codejar:duotone-space@light",
    desc: "Duotone Space"
  },
  {
    name: "codejar:funky@light",
    desc: "Funky"
  },
  {
    name: "codejar:ghcolors@light",
    desc: "GH Colors"
  },
  {
    name: "codejar:gruvbox-dark@light",
    desc: "Gruvbox Dark"
  },
  {
    name: "codejar:gruvbox-light@light",
    desc: "Gruvbox Light"
  },
  {
    name: "codejar:holi-theme@light",
    desc: "Holi Theme"
  },
  {
    name: "codejar:hopscotch@light",
    desc: "Hopscotch"
  },
  {
    name: "codejar:laserwave@light",
    desc: "Laserwave"
  },
  {
    name: "codejar:lucario@light",
    desc: "Lucario"
  },
  {
    name: "codejar:material-dark@light",
    desc: "Material Dark"
  },
  {
    name: "codejar:material-light@light",
    desc: "Material Light"
  },
  {
    name: "codejar:material-oceanic@light",
    desc: "Material Oceanic"
  },
  {
    name: "codejar:monochrome@light",
    desc: "Monochrome"
  },
  {
    name: "codejar:monochrome-dark@light",
    desc: "Monochrome Dark"
  },
  {
    name: "codejar:night-owl@light",
    desc: "Night Owl"
  },
  {
    name: "codejar:nord@light",
    desc: "Nord"
  },
  {
    name: "codejar:okaidia@light",
    desc: "Okaidia"
  },
  {
    name: "codejar:one-dark@light",
    desc: "One Dark"
  },
  {
    name: "codejar:one-light@light",
    desc: "One Light"
  },
  {
    name: "codejar:pojoaque@light",
    desc: "Pojoaque"
  },
  {
    name: "codejar:shades-of-purple@light",
    desc: "Shades of Purple"
  },
  {
    name: "codejar:solarized-dark-atom@light",
    desc: "Solarized Dark Atom"
  },
  {
    name: "codejar:solarized-light@light",
    desc: "Solarized Light"
  },
  {
    name: "codejar:synthwave84@light",
    desc: "Synthwave 84"
  },
  {
    name: "codejar:tomorrow@light",
    desc: "Tomorrow"
  },
  {
    name: "codejar:twilight@light",
    desc: "Twilight"
  },
  {
    name: "codejar:vs@light",
    desc: "VS"
  },
  {
    name: "codejar:vsc-dark-plus@light",
    desc: "VSC Dark Plus"
  },
  {
    name: "codejar:xonokai@light",
    desc: "Xonokai"
  },
  {
    name: "codejar:z-touchs@light",
    desc: "Z-Touchs"
  }
];

// src/livecodes/index.ts
var ALLOWED_LANGS = ["html", "mdx", "css", "scss", "javascript", "jsx", "typescript", "tsx", "astro", "svelte"];
var ALLOWED_EXTS = ["html", "mdx", "css", "scss", "js", "jsx", "ts", "tsx", "astro", "svelte"];
function codeLanguages() {
  const lists = {
    markup: [
      { name: "art-template", title: "art-template" },
      { name: "asciidoc", title: "AsciiDoc" },
      { name: "astro", title: "Astro" },
      { name: "diagrams", title: "Diagrams" },
      { name: "dot", title: "doT" },
      { name: "ejs", title: "EJS" },
      { name: "eta", title: "Eta" },
      { name: "haml", title: "Haml" },
      { name: "handlebars", title: "Handlebars" },
      { name: "html", title: "HTML" },
      { name: "liquid", title: "Liquid" },
      { name: "markdown", title: "Markdown" },
      { name: "mdx", title: "MDX" },
      { name: "mjml", title: "MJML" },
      { name: "mustache", title: "Mustache" },
      { name: "nunjucks", title: "Nunjucks" },
      { name: "pug", title: "Pug" },
      { name: "richtext", title: "Rich Text" },
      { name: "twig", title: "Twig" }
    ],
    style: [
      { name: "css", title: "CSS" },
      { name: "less", title: "Less" },
      { name: "scss", title: "SCSS" },
      { name: "stylis", title: "Stylis" },
      { name: "stylus", title: "Stylus" },
      { name: "tailwindcss", title: "Tailwind CSS", processor: true },
      { name: "windicss", title: "Windi CSS", processor: true },
      { name: "unocss", title: "UnoCSS", processor: true },
      { name: "lightningcss", title: "Lightning CSS", processor: true }
    ],
    script: [
      { name: "assemblyscript", title: "AssemblyScript" },
      { name: "babel", title: "Babel" },
      { name: "blockly", title: "Blockly" },
      { name: "civet", title: "Civet" },
      { name: "clio", title: "Clio" },
      { name: "clojurescript", title: "CLJS" },
      { name: "coffeescript", title: "CoffeeScript" },
      { name: "commonlisp", title: "Lisp" },
      { name: "cpp", title: "C++" },
      { name: "cpp-wasm", title: "C++ (Wasm)" },
      { name: "fennel", title: "Fennel" },
      { name: "flow", title: "Flow" },
      { name: "go", title: "Go" },
      { name: "imba", title: "Imba" },
      { name: "javascript", title: "JS" },
      { name: "jsx", title: "JSX" },
      { name: "julia", title: "Julia" },
      { name: "livescript", title: "LiveScript" },
      { name: "lua", title: "Lua" },
      { name: "lua-wasm", title: "Lua (Wasm)" },
      { name: "malina", title: "Malina.js" },
      { name: "ocaml", title: "OCaml" },
      { name: "perl", title: "Perl" },
      { name: "php", title: "PHP" },
      { name: "php-wasm", title: "PHP (Wasm)" },
      { name: "prolog", title: "Prolog" },
      { name: "python", title: "Python" },
      { name: "python-wasm", title: "Python (Wasm)" },
      { name: "r", title: "R" },
      { name: "react-native", title: "React Native" },
      { name: "react-native-tsx", title: "React Native (TSX)" },
      { name: "reason", title: "Reason" },
      { name: "rescript", title: "ReScript" },
      { name: "riot", title: "Riot.js" },
      { name: "ruby", title: "Ruby" },
      { name: "ruby-wasm", title: "Ruby (Wasm)" },
      { name: "scheme", title: "Scheme" },
      { name: "solid", title: "Solid" },
      { name: "solid.tsx", title: "Solid (TS)" },
      { name: "sql", title: "SQL" },
      { name: "stencil", title: "Stencil" },
      { name: "sucrase", title: "Sucrase" },
      { name: "svelte", title: "Svelte" },
      { name: "tcl", title: "Tcl" },
      { name: "teal", title: "Teal" },
      { name: "tsx", title: "TSX" },
      { name: "typescript", title: "Typescript" },
      { name: "vue", title: "Vue 3" },
      { name: "vue2", title: "Vue 2" },
      { name: "wat", title: "WAT" }
    ]
  };
  return lists;
}
function codeBlockLanguages() {
  const lists = {
    markup: [
      { name: "asciidoc", title: "AsciiDoc" },
      { name: "astro", title: "Astro" },
      { name: "ejs", title: "EJS" },
      { name: "haml", title: "Haml" },
      { name: "handlebars", title: "Handlebars" },
      { name: "html", title: "HTML" },
      { name: "liquid", title: "Liquid" },
      { name: "markdown", title: "Markdown" },
      { name: "mdx", title: "MDX" },
      { name: "pug", title: "Pug" },
      { name: "twig", title: "Twig" }
    ],
    style: [
      { name: "css", title: "CSS" },
      { name: "less", title: "Less" },
      { name: "scss", title: "SCSS" },
      { name: "stylus", title: "Stylus" }
    ],
    script: [
      { name: "coffeescript", title: "CoffeeScript" },
      { name: "cpp", title: "C++" },
      { name: "flow", title: "Flow" },
      { name: "go", title: "Go" },
      { name: "javascript", title: "JS" },
      { name: "jsx", title: "JSX" },
      { name: "julia", title: "Julia" },
      { name: "livescript", title: "LiveScript" },
      { name: "lua", title: "Lua" },
      { name: "ocaml", title: "OCaml" },
      { name: "perl", title: "Perl" },
      { name: "php", title: "PHP" },
      { name: "prolog", title: "Prolog" },
      { name: "python", title: "Python" },
      { name: "r", title: "R" },
      { name: "reason", title: "Reason" },
      { name: "ruby", title: "Ruby" },
      { name: "scheme", title: "Scheme" },
      { name: "solid", title: "Solid" },
      { name: "sql", title: "SQL" },
      { name: "svelte", title: "Svelte" },
      { name: "tcl", title: "Tcl" },
      { name: "tsx", title: "TSX" },
      { name: "typescript", title: "Typescript" }
    ]
  };
  return lists;
}
var blankPlayground = {
  appUrl: "https://v28.livecodes.io/",
  title: "New Playground",
  description: "",
  head: '<meta charset="UTF-8" />\n<meta name="viewport" content="width=device-width, initial-scale=1.0" />',
  htmlAttrs: 'lang="en" class=""',
  tags: "[]",
  autoupdate: false,
  autosave: false,
  autotest: false,
  delay: 1500,
  formatOnsave: false,
  mode: "full",
  theme: "dark",
  layout: "responsive",
  recoverUnsaved: true,
  showSpacing: false,
  welcome: true,
  readonly: false,
  allowLangChange: true,
  activeEditor: "markup",
  markup: {
    language: "html",
    content: ""
  },
  style: {
    language: "css",
    content: ""
  },
  script: {
    language: "javascript",
    content: ""
  },
  stylesheets: "[]",
  scripts: "[]",
  cssPreset: "",
  imports: "{}",
  types: "{}",
  tests: {
    language: "typescript",
    content: ""
  },
  tools: {
    enabled: "all",
    active: "console",
    status: "open"
  },
  zoom: 1,
  processors: "[]",
  customSettings: "{}",
  editor: "monaco",
  fontFamily: "Default",
  fontSize: 12,
  useTabs: false,
  tabSize: 2,
  lineNumbers: true,
  wordWrap: false,
  enableAI: false,
  closeBrackets: true,
  semicolons: true,
  singleQuote: false,
  trailingComma: true,
  emmet: true,
  editorTheme: "[]",
  version: "28"
};

// src/settings/default.ts
var NOTE_MD_TEMPLATE = '---\ncreated: {{date}}{% if title %}\ntitle: "{{title}}"{% endif %}\n{% if descProperty %}description: {{descProperty}}{% endif %}\n{% if tagsList %}tags: {{tagsList}}{% endif %}\n{% if obsidianUrl %}playground: {{obsidianUrl}}{% endif %}\n---\n\n{% if title %}## {{ title }}\n{% endif %}\n\n{% if descString %}{{ descString }}\n{% endif %}\n\n{% if tagsString %}{{ tagsString }}\n{% endif %}\n\n{% if head %}```html\n{{ head }}\n```\n{% endif %}\n\n{% if htmlAttrs %}```text\n{{ htmlAttrs }}\n```\n{% endif %}\n\n{% if stylesheetsList %}{{ stylesheetsList }}\n{% endif %}\n\n{% if scriptsList %}{{ scriptsList }}\n{% endif %}\n\n{% if cssPreset %}`{{ cssPreset }}`\n{% endif %}\n\n{% if markupCode %}```{{ markupLanguage }}\n{{ markupCode }}\n```\n{% endif %}\n\n{% if styleCode %}```{{ styleLanguage }}\n{{ styleCode }}\n```\n{% endif %}\n\n{% if scriptCode %}```{{ scriptLanguage }}\n{{ scriptCode }}\n```\n{% endif %}\n\n{% if htmlResults %}```html\n{{ htmlResults }}\n```\n{% endif %}\n\n{# this is a nunjucks comment #}\n\n{# https://mozilla.github.io/nunjucks/templating.html #}\n\n%% this is an Obsidian markdown comment %%\n';
var GIST_MD_TEMPLATE = '---\ncreated: {{date}}{% if title %}\ntitle: "{{title}}"{% endif %}\n{% if descProperty %}description: {{descProperty}}{% endif %}\n{% if tagsList %}tags: {{tagsList}}{% endif %}\n{% if obsidianUrl %}playground: {{obsidianUrl}}{% endif %}\n---\n\n{% if title %}## {{ title }}\n{% endif %}\n\n{% if descString %}{{ descString }}\n{% endif %}\n\n{% if tagsString %}{{ tagsString }}\n{% endif %}\n\n{% if head %}```html\n{{ head }}\n```\n{% endif %}\n\n{% if htmlAttrs %}```text\n{{ htmlAttrs }}\n```\n{% endif %}\n\n{% if stylesheetsList %}{{ stylesheetsList }}\n{% endif %}\n\n{% if scriptsList %}{{ scriptsList }}\n{% endif %}\n\n{% if cssPreset %}`{{ cssPreset }}`\n{% endif %}\n\n{% if markupCode %}```{{ markupLanguage }}\n{{ markupCode }}\n```\n{% endif %}\n\n{% if styleCode %}```{{ styleLanguage }}\n{{ styleCode }}\n```\n{% endif %}\n\n{% if scriptCode %}```{{ scriptLanguage }}\n{{ scriptCode }}\n```\n{% endif %}\n\n{% if htmlResults %}```html\n{{ htmlResults }}\n```\n{% endif %}\n\n{# this is a nunjucks comment #}\n\n{# https://mozilla.github.io/nunjucks/templating.html #}\n\n%% this is an Obsidian markdown comment %%\n';
var DEFAULT_SETTINGS = {
  playgroundFolder: "playgrounds",
  notesFolder: "playgrounds/notes",
  autoWatch: true,
  appUrl: "https://v28.livecodes.io/",
  shortUrl: false,
  fontFamily: "Default",
  fontSize: "12",
  editor: "monaco",
  lineNumbers: true,
  darkTheme: true,
  layout: "responsive",
  useTabs: false,
  tabSize: "2",
  closeBrackets: true,
  semicolons: true,
  singleQuote: false,
  trailingComma: true,
  wordWrap: false,
  enableAI: false,
  autoUpdate: false,
  editorTheme: ["vs@light", "vs-dark@dark"],
  monacoDarkTheme: "",
  monacoLightTheme: "",
  codemirrorDarkTheme: "",
  codemirrorLightTheme: "",
  codejarDarkTheme: "",
  codejarLightTheme: "",
  delay: 1500,
  jsonTemplate: void 0,
  dataHeight: "600",
  githubApiToken: "",
  githubGistPublic: false,
  quickPlaygroundMarkup: "html",
  quickPlaygroundStyle: "css",
  quickPlaygroundScript: "javascript",
  noteMarkdownTemplate: NOTE_MD_TEMPLATE,
  gistMarkdownTemplate: GIST_MD_TEMPLATE
};

// src/modals/Confirm.ts
var import_obsidian13 = require("obsidian");
var ConfirmModal = class extends import_obsidian13.Modal {
  constructor(app2) {
    super(app2);
    this.buttonContainerEl = this.modalEl.createDiv("modal-button-container");
    this.resolve = null;
    this.containerEl.addClass("mod-confirmation");
    this.addButton("mod-cta", "OK", () => this.resolve && this.resolve(true));
    this.addCancelButton();
  }
  open() {
    super.open();
    return new Promise((resolve) => this.resolve = resolve);
  }
  addButton(cls, text4, callback) {
    this.buttonContainerEl.createEl("button", { cls, text: text4 }).addEventListener("click", async (evt) => {
      callback && await callback(evt);
      this.close();
    });
    return this;
  }
  onClose() {
    this.resolve && this.resolve(false);
  }
  addCancelButton() {
    return this.addButton("", "Cancel", this.close.bind(this));
  }
};
var confirm = (message, app2) => {
  const modal = new ConfirmModal(app2);
  modal.contentEl.setText(message);
  return modal.open();
};

// src/settings/index.ts
var LivecodesSettingsTab = class extends import_obsidian14.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("livecodes-settings-tab");
    let debounceNotice = (0, import_obsidian14.debounce)(
      () => {
        showNotice("Trailing slash is required", 2e3, "error");
      },
      1e3
    );
    let desc = document.createDocumentFragment();
    desc.append(
      "All changes are applied to future Livecodes playground views.",
      desc.createEl("br"),
      desc.createEl("br"),
      "Need help or an introduction? Visit the plugin ",
      desc.createEl("a", {
        href: "https://github.com/gapmiss/livecodes-playground/",
        text: "README",
        attr: { "aria-label": "https://github.com/gapmiss/livecodes-playground/", "class": "external-link", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      " and ",
      desc.createEl("a", {
        href: "https://gapmiss.github.io/livecodes-playground-docs/",
        text: "documentation",
        attr: { "aria-label": "https://gapmiss.github.io/livecodes-playground-docs/", "class": "external-link", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      " and LiveCodes.io ",
      desc.createEl("a", {
        href: "https://livecodes.io/docs/getting-started/",
        text: "documentation",
        attr: { "aria-label": "https://livecodes.io/docs/getting-started/", "class": "external-link", "data-tooltip-position": "top", "tabindex": "0" }
      }),
      " for additional help."
    );
    new import_obsidian14.Setting(containerEl).setDesc(desc).setClass("setting-item-heading-onboarding").then((cb) => {
      cb.settingEl.classList.add("setting-head");
    }).then((cb) => {
      cb.settingEl.classList.add("setting-head");
    });
    new import_obsidian14.Setting(containerEl).setName("App URL").setDesc("URL for serving livecodes static codebase").setClass("livecodes-settings-input-appurl").addText(
      (text4) => text4.setPlaceholder("https://v28.livecodes.io/").setValue(this.plugin.settings.appUrl).onChange(async (newAppUrl) => {
        this.plugin.settings.appUrl = newAppUrl;
        await this.plugin.saveSettings();
        if (newAppUrl.split("").pop() != "/") {
          debounceNotice();
          return;
        }
      })
    ).addExtraButton((component) => {
      component.setIcon("help-circle").setTooltip("Help", { "placement": "left" }).onClick(() => {
        new HelpModal(this.app, helpModals.appUrl.title, helpModals.appUrl.description, "", true).open();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Playground folder").setDesc("Vault folder for saving playground JSON files").setClass("livecodes-settings-input-playgrounds").addSearch((cb) => {
      new FolderSuggest(cb.inputEl, this.app);
      cb.setPlaceholder("e.g. playgrounds").setValue(this.plugin.settings.playgroundFolder).onChange(async (newPath) => {
        this.plugin.settings.playgroundFolder = newPath;
        await this.plugin.saveSettings();
      });
    }).addExtraButton((component) => {
      component.setIcon("help-circle").setTooltip("Help", { "placement": "left" }).onClick(() => {
        new HelpModal(this.app, helpModals.playgroundFolder.title, helpModals.playgroundFolder.description).open();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Auto watch").setDesc("Enable to watch for playground changes and save JSON file").setClass("livecodes-settings-input-autowatch").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.autoWatch).onChange(async (newValue) => {
        this.plugin.settings.autoWatch = newValue;
        await this.plugin.saveSettings();
      });
    }).addExtraButton((component) => {
      component.setIcon("help-circle").setTooltip("Help", { "placement": "left" }).onClick(() => {
        new HelpModal(this.app, helpModals.autoWatch.title, helpModals.autoWatch.description).open();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Notes folder").setDesc("Vault folder for saving playground notes").setClass("livecodes-settings-input-notes").addSearch((cb) => {
      new FolderSuggest(cb.inputEl, this.app);
      cb.setPlaceholder("e.g. playgrounds/notes").setValue(this.plugin.settings.notesFolder).onChange(async (newPath) => {
        this.plugin.settings.notesFolder = newPath;
        await this.plugin.saveSettings();
      });
    }).addExtraButton((component) => {
      component.setIcon("help-circle").setTooltip("Help", { "placement": "left" }).onClick(() => {
        new HelpModal(this.app, helpModals.notesFolder.title, helpModals.notesFolder.description).open();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Sharing").setHeading();
    new import_obsidian14.Setting(containerEl).setName("Short share URL").setDesc("Enable short URL service for sharing a playground URL. Click the help icon for privacy implications.").setClass("livecodes-settings-input-shorturl").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.shortUrl).onChange(async (newValue) => {
        this.plugin.settings.shortUrl = newValue;
        await this.plugin.saveSettings();
      });
    }).addExtraButton((component) => {
      component.setIcon("help-circle").setTooltip("Help", { "placement": "left" }).onClick(() => {
        new HelpModal(this.app, helpModals.shortUrl.title, helpModals.shortUrl.description, "alert").open();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Github API token").setDesc("For creating Github gists. Click the help icon for further details.").setClass("livecodes-settings-input-githubtoken").addText(
      (text4) => text4.setPlaceholder("Github API token").setValue(this.plugin.settings.githubApiToken).onChange(async (newValue) => {
        this.plugin.settings.githubApiToken = newValue;
        await this.plugin.saveSettings();
      })
    ).addExtraButton((component) => {
      component.setIcon("help-circle").setTooltip("Help", { "placement": "left" }).onClick(() => {
        new HelpModal(this.app, helpModals.githubToken.title, helpModals.githubToken.description).open();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Github gist privacy").setDesc("Gists are secret by default. Enable this setting to create public gists.").setClass("livecodes-settings-input-githubgistpublic").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.githubGistPublic).onChange(async (newValue) => {
        this.plugin.settings.githubGistPublic = newValue;
        await this.plugin.saveSettings();
      });
    }).addExtraButton((component) => {
      component.setIcon("help-circle").setTooltip("Help", { "placement": "left" }).onClick(() => {
        new HelpModal(this.app, helpModals.githubGistPublic.title, helpModals.githubGistPublic.description).open();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("AI code assistant").setDesc("Enable Codeium AI").setClass("livecodes-settings-input-enableai").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableAI).onChange(async (newValue) => {
        this.plugin.settings.enableAI = newValue;
        await this.plugin.saveSettings();
      })
    ).addExtraButton((component) => {
      component.setIcon("help-circle").setTooltip("Help", { "placement": "left" }).onClick(() => {
        new HelpModal(this.app, helpModals.enableAI.title, helpModals.enableAI.description, "alert").open();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Editor").setHeading();
    new import_obsidian14.Setting(containerEl).setName("Code editor").setClass("dropdownEditor").addDropdown((dropdown) => {
      dropdown.addOptions({
        "monaco": "monaco",
        "codemirror": "codemirror",
        "codejar": "codejar"
      }).setValue(this.plugin.settings.editor).onChange(async (newValue) => {
        this.plugin.settings.editor = newValue;
        await toggleChoices(this.plugin.settings.editor);
        await this.plugin.saveSettings();
      });
    }).addExtraButton((component) => {
      component.setIcon("help-circle").setTooltip("Help", { "placement": "left" }).onClick(() => {
        new HelpModal(this.app, helpModals.editor.title, helpModals.editor.description).open();
      });
    });
    const dropdownMonacoDark = new import_obsidian14.Setting(containerEl).setName("Monaco theme (dark mode)").setClass("dropdownMonacoDark").addDropdown((dropdown) => {
      monacoDarkThemes.forEach(({ name, desc: desc2 }) => {
        dropdown.addOption(name, desc2);
      });
      dropdown.setValue(this.plugin.settings.monacoDarkTheme).onChange(async (newValue) => {
        this.plugin.settings.monacoDarkTheme = newValue;
        await toggleChoices(this.plugin.settings.editor);
        await this.plugin.saveSettings();
      });
    });
    const dropdownMonacoLight = new import_obsidian14.Setting(containerEl).setName("Monaco theme (light mode)").setClass("dropdownMonacoLight").addDropdown((dropdown) => {
      monacoLightThemes.forEach(({ name, desc: desc2 }) => {
        dropdown.addOption(name, desc2);
      });
      dropdown.setValue(this.plugin.settings.monacoLightTheme).onChange(async (newValue) => {
        this.plugin.settings.monacoLightTheme = newValue;
        await toggleChoices(this.plugin.settings.editor);
        await this.plugin.saveSettings();
      });
    });
    const dropdownCodemirrorDark = new import_obsidian14.Setting(containerEl).setName("Codemirror theme (dark mode)").setClass("dropdownCodemirrorDark").addDropdown((dropdown) => {
      codemirrorDarkThemes.forEach(({ name, desc: desc2 }) => {
        dropdown.addOption(name, desc2);
      });
      dropdown.setValue(this.plugin.settings.codemirrorDarkTheme).onChange(async (newValue) => {
        this.plugin.settings.codemirrorDarkTheme = newValue;
        await toggleChoices(this.plugin.settings.editor);
        await this.plugin.saveSettings();
      });
    });
    const dropdownCodemirrorLight = new import_obsidian14.Setting(containerEl).setName("Codemirror theme (light mode)").setClass("dropdownCodemirrorLight").addDropdown((dropdown) => {
      codemirrorLightThemes.forEach(({ name, desc: desc2 }) => {
        dropdown.addOption(name, desc2);
      });
      dropdown.setValue(this.plugin.settings.codemirrorLightTheme).onChange(async (newValue) => {
        this.plugin.settings.codemirrorLightTheme = newValue;
        await toggleChoices(this.plugin.settings.editor);
        await this.plugin.saveSettings();
      });
    });
    const dropdownCodejarDark = new import_obsidian14.Setting(containerEl).setName("Codejar theme (dark mode)").setClass("dropdownCodejarDark").addDropdown((dropdown) => {
      codejarDarkThemes.forEach(({ name, desc: desc2 }) => {
        dropdown.addOption(name, desc2);
      });
      dropdown.setValue(this.plugin.settings.codejarDarkTheme).onChange(async (newValue) => {
        this.plugin.settings.codejarDarkTheme = newValue;
        await toggleChoices(this.plugin.settings.editor);
        await this.plugin.saveSettings();
      });
    });
    const dropdownCodejarLight = new import_obsidian14.Setting(containerEl).setName("Codejar theme (light mode)").setClass("dropdownCodejarLight").addDropdown((dropdown) => {
      codejarLightThemes.forEach(({ name, desc: desc2 }) => {
        dropdown.addOption(name, desc2);
      });
      dropdown.setValue(this.plugin.settings.codejarLightTheme).onChange(async (newValue) => {
        this.plugin.settings.codejarLightTheme = newValue;
        await toggleChoices(this.plugin.settings.editor);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Playground height").setDesc("CSS height for livecodes playground. e.g. 600 or 100% (default: 600)").setClass("livecodes-setting-input-height").addText(
      (text4) => text4.setPlaceholder("e.g. 600 or 100%").setValue(this.plugin.settings.dataHeight).onChange(async (newValue) => {
        this.plugin.settings.dataHeight = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian14.Setting(containerEl).setName("Layout").setDesc('Sets the playground layout to horizontal or vertical. If set to "responsive", the layout is vertical in small screens when the playground height is larger than its width, otherwise horizontal. (default: responsive)').addDropdown((dropdown) => {
      dropdown.addOptions({
        "responsive": "responsive",
        "vertical": "vertical",
        "horizontal": "horizontal"
      }).setValue(this.plugin.settings.layout).onChange(async (newValue) => {
        this.plugin.settings.layout = newValue;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Dark theme").setDesc("Enable dark theme as default").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.darkTheme).onChange(async (newValue) => {
        this.plugin.settings.darkTheme = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian14.Setting(containerEl).setName("Editor font").addDropdown((dropdown) => {
      dropdown.addOptions({
        "Default": "Default",
        "Anonymous Pro": "Anonymous Pro",
        "Astigmata": "Astigmata",
        "Cascadia Code": "Cascadia Code",
        "Code New Roman": "Code New Roman",
        "Comic Mono": "Comic Mono",
        "Courier Prime": "Courier Prime",
        "DEC Terminal Modern": "DEC Terminal Modern",
        "DejaVu Mono": "DejaVu Mono",
        "TypoPRO Fantasque Sans Mono": "Fantasque Sans Mono",
        "Fira Code": "Fira Code",
        "Fixedsys 62": "Fixedsys",
        "Hack": "Hack",
        "Hermit": "Hermit",
        "IBM Plex Mono": "IBM Plex Mono",
        "Inconsolata": "Inconsolata",
        "Iosevka": "Iosevka",
        "JetBrains Mono": "JetBrains Mono",
        "Menlo": "Menlo",
        "Monaspace Argon": "Monaspace Argon",
        "Monaspace Krypton": "Monaspace Krypton",
        "Monaspace Neon": "Monaspace Neon",
        "Monaspace Radon": "Monaspace Radon",
        "Monaspace Xenon": "Monaspace Xenon",
        "Monofur": "Monofur",
        "TypoPRO Monoid": "Monoid",
        "Noto Sans Mono": "Noto Sans Mono",
        "Nova Mono": "Nova Mono",
        "OpenDyslexic": "OpenDyslexic",
        "ProFontWindows": "ProFont",
        "Roboto Mono": "Roboto Mono",
        "SF Mono": "SF Mono",
        "Source Code Pro": "Source Code Pro",
        "Space Mono": "Space Mono",
        "Sudo Var": "Sudo Var",
        "Ubuntu Mono": "Ubuntu Mono",
        "Victor Mono": "Victor Mono"
      }).setValue(this.plugin.settings.fontFamily).onChange(async (newValue) => {
        this.plugin.settings.fontFamily = newValue;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Editor font-size").addDropdown((dropdown) => {
      dropdown.addOptions({
        "10": "10",
        "11": "11",
        "12": "12",
        "13": "13",
        "14": "14",
        "15": "15",
        "16": "16",
        "17": "17",
        "18": "18",
        "19": "19",
        "20": "20",
        "22": "22",
        "24": "24",
        "26": "26"
      }).setValue(this.plugin.settings.fontSize).onChange(async (newValue) => {
        this.plugin.settings.fontSize = newValue;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Word wrap").setDesc("Enable word wrapping in editor pane").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.wordWrap).onChange(async (newValue) => {
        this.plugin.settings.wordWrap = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian14.Setting(containerEl).setName("Line numbers").setDesc("Enable line numbers in editor pane").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.lineNumbers).onChange(async (newValue) => {
        this.plugin.settings.lineNumbers = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian14.Setting(containerEl).setName("Use tabs").setDesc("Enable tabs instead of spaces").setClass("livecodes-settings-input-usetabs").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useTabs).onChange(async (newValue) => {
        this.plugin.settings.useTabs = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian14.Setting(containerEl).setName("Tab size").addDropdown((dropdown) => {
      dropdown.addOptions({
        "2": "2",
        "4": "4"
      }).setValue(this.plugin.settings.tabSize).onChange(async (newValue) => {
        this.plugin.settings.tabSize = newValue;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Auto close brackets").setDesc("Use auto-complete to close brackets and quotes").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.closeBrackets).onChange(async (newValue) => {
        this.plugin.settings.closeBrackets = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian14.Setting(containerEl).setName("Auto update").setDesc("Enable auto updates of results pane after editor code changes").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.autoUpdate).onChange(async (newValue) => {
        this.plugin.settings.autoUpdate = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian14.Setting(containerEl).setName("Delay").setDesc("Time delay (in milliseconds) follwing code change, after which the result is updated.").addSlider((slider) => slider.setLimits(500, 3e3, 500).setValue(this.plugin.settings.delay).setDynamicTooltip().onChange(async (newValue) => {
      this.plugin.settings.delay = newValue;
      await this.plugin.saveSettings();
    }));
    new import_obsidian14.Setting(containerEl).setName("Semi-colons").setDesc("Enable code formatter to use semi-colons").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.semicolons).onChange(async (newValue) => {
        this.plugin.settings.semicolons = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian14.Setting(containerEl).setName("Single quotes").setDesc("Enable code formatter to use single quotes instead of double quotes").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.singleQuote).onChange(async (newValue) => {
        this.plugin.settings.singleQuote = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian14.Setting(containerEl).setName("Trailing commas").setDesc("Enable code formatter to use trailing commas").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.trailingComma).onChange(async (newValue) => {
        this.plugin.settings.trailingComma = newValue;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian14.Setting(containerEl).setHeading().setName("Quick playground").setClass("livecodes-quick-playground-heading").addExtraButton((component) => {
      let isExpanded = false;
      component.setIcon("chevron-right").setTooltip("Show processors", { "placement": "left" }).onClick(() => {
        let toggles = activeDocument.querySelectorAll('[class$="-quick-select"]');
        if (!isExpanded) {
          component.setIcon("chevron-down").setTooltip("Hide processors", { "placement": "left" });
          isExpanded = true;
          toggles.forEach((toggle) => {
            toggle.setAttribute("style", "display:flex;");
          });
        } else {
          component.setIcon("chevron-right").setTooltip("Show processors", { "placement": "left" });
          isExpanded = false;
          toggles.forEach((toggle) => {
            toggle.setAttribute("style", "display:none;");
          });
        }
      });
    }).then((c) => {
      let bttn = activeDocument.querySelector(".livecodes-quick-playground-heading .clickable-icon");
      if (bttn !== null) {
        bttn.setAttribute("tabindex", "0");
        bttn.addEventListener("keydown", (evt) => {
          const keyDown = evt.key;
          if (keyDown === "Enter" || ["Spacebar", " "].indexOf(keyDown) >= 0) {
            evt.preventDefault();
            bttn.click();
          }
        });
      }
    });
    new import_obsidian14.Setting(containerEl).setName("Markup").setDesc('Default markup language when using the "Quick playground" command').setClass("dropdown-markup-quick-select").addDropdown((dropdown) => {
      codeLanguages().markup.forEach(({ name, title }) => {
        dropdown.addOption(name, title);
      });
      dropdown.setValue(this.plugin.settings.quickPlaygroundMarkup).onChange(async (newValue) => {
        this.plugin.settings.quickPlaygroundMarkup = newValue;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Style").setDesc('Default style language when using the "Quick playground" command').setClass("dropdown-style-quick-select").addDropdown((dropdown) => {
      codeLanguages().style.forEach(({ name, title, processor }) => {
        if (!processor) {
          dropdown.addOption(name, title);
        }
      });
      dropdown.setValue(this.plugin.settings.quickPlaygroundStyle).onChange(async (newValue) => {
        this.plugin.settings.quickPlaygroundStyle = newValue;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setName("Script").setDesc('Default script language when using the "Quick playground" command').setClass("dropdown-script-quick-select").addDropdown((dropdown) => {
      codeLanguages().script.forEach(({ name, title }) => {
        dropdown.addOption(name, title);
      });
      dropdown.setValue(this.plugin.settings.quickPlaygroundScript).onChange(async (newValue) => {
        this.plugin.settings.quickPlaygroundScript = newValue;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian14.Setting(containerEl).setHeading().setName("Markdown templates").setClass("livecodes-templates-heading").addExtraButton((component) => {
      let isExpanded = false;
      component.setIcon("chevron-right").setTooltip("Show processors", { "placement": "left" }).onClick(() => {
        let toggles = activeDocument.querySelectorAll('[class$="-template-setting"]');
        if (!isExpanded) {
          component.setIcon("chevron-down").setTooltip("Hide processors", { "placement": "left" });
          isExpanded = true;
          toggles.forEach((toggle) => {
            toggle.setAttribute("style", "display:flex;");
          });
        } else {
          component.setIcon("chevron-right").setTooltip("Show processors", { "placement": "left" });
          isExpanded = false;
          toggles.forEach((toggle) => {
            toggle.setAttribute("style", "display:none;");
          });
        }
      });
    }).then(() => {
      let bttn = activeDocument.querySelector(".livecodes-templates-heading .clickable-icon");
      if (bttn !== null) {
        bttn.setAttribute("tabindex", "0");
        bttn.addEventListener("keydown", (evt) => {
          const keyDown = evt.key;
          if (keyDown === "Enter" || ["Spacebar", " "].indexOf(keyDown) >= 0) {
            evt.preventDefault();
            bttn.click();
          }
        });
      }
    });
    new import_obsidian14.Setting(containerEl).setName("Note").setClass("livecodes-note-template-setting").setDesc("Markdown template for creating notes in your vault").addExtraButton((component) => {
      component.setIcon("help-circle").setTooltip("Help", { "placement": "left" }).onClick(() => {
        new HelpModal(this.app, helpModals.noteTemplate.title, helpModals.noteTemplate.description, "", true).open();
      });
    }).addExtraButton((component) => {
      component.setIcon("rotate-ccw").setTooltip("Restore default note template", { "placement": "left" }).onClick(async () => {
        if (await confirm("Restore this template?", this.plugin.app)) {
          try {
            this.plugin.settings.noteMarkdownTemplate = NOTE_MD_TEMPLATE;
            await this.plugin.saveSettings();
            let textArea = activeDocument.querySelector(".livecodes-note-template-setting .setting-item-control textarea");
            textArea.value = NOTE_MD_TEMPLATE;
            showNotice("Default note template restored", 3e3, "success");
          } catch (error) {
            console.error(error);
          }
        }
      });
    }).addTextArea(
      (text4) => {
        text4.setValue(this.plugin.settings.noteMarkdownTemplate).onChange(async (value) => {
          this.plugin.settings.noteMarkdownTemplate = value;
          await this.plugin.saveSettings();
        });
      }
    );
    new import_obsidian14.Setting(containerEl).setName("Gist").setClass("livecodes-gist-template-setting").setDesc("Markdown template for saving Github gists").addExtraButton((component) => {
      component.setIcon("help-circle").setTooltip("Help", { "placement": "left" }).onClick(() => {
        new HelpModal(this.app, helpModals.noteTemplate.title, helpModals.noteTemplate.description, "", true).open();
      });
    }).addExtraButton((component) => {
      component.setIcon("rotate-ccw").setTooltip("Restore default gist template", { "placement": "left" }).onClick(async () => {
        if (await confirm("Restore this template?", this.plugin.app)) {
          try {
            this.plugin.settings.gistMarkdownTemplate = GIST_MD_TEMPLATE;
            await this.plugin.saveSettings();
            let textArea = activeDocument.querySelector(".livecodes-gist-template-setting .setting-item-control textarea");
            textArea.value = GIST_MD_TEMPLATE;
            showNotice("Default gist template restored", 3e3, "success");
          } catch (error) {
            console.error(error);
          }
        }
      });
    }).addTextArea(
      (text4) => {
        text4.setValue(this.plugin.settings.gistMarkdownTemplate).onChange(async (value) => {
          this.plugin.settings.gistMarkdownTemplate = value;
          await this.plugin.saveSettings();
        });
      }
    );
    new import_obsidian14.Setting(containerEl).setName("Support the developers").setHeading().setClass("livecodes-sponsorship-heading").addExtraButton((component) => {
      let isExpanded = false;
      component.setIcon("chevron-right").setTooltip(helpModals.sponsorship.title, { "placement": "left" }).onClick(() => {
        let toggles = activeDocument.querySelectorAll(".livecodes-sponsorship");
        if (!isExpanded) {
          component.setIcon("chevron-down").setTooltip("Hide", { "placement": "left" });
          isExpanded = true;
          activeDocument.querySelector(".livecodes-sponsorship-heading").setAttribute("style", "border-bottom: 1px solid var(--background-modifier-border);");
          toggles.forEach((toggle) => {
            toggle.setAttribute("style", "display:block;");
          });
        } else {
          component.setIcon("chevron-right").setTooltip("Show", { "placement": "left" });
          isExpanded = false;
          activeDocument.querySelector(".livecodes-sponsorship-heading").setAttribute("style", "border-bottom: 1px solid transparent;");
          toggles.forEach((toggle) => {
            toggle.setAttribute("style", "display:none;");
          });
        }
      });
    }).then(() => {
      let bttn = activeDocument.querySelector(".livecodes-sponsorship-heading .clickable-icon");
      if (bttn !== null) {
        bttn.setAttribute("tabindex", "0");
        bttn.addEventListener("keydown", (evt) => {
          const keyDown = evt.key;
          if (keyDown === "Enter" || ["Spacebar", " "].indexOf(keyDown) >= 0) {
            evt.preventDefault();
            bttn.click();
          }
        });
      }
    });
    const sponsorEl = containerEl.createEl("div", {
      cls: "livecodes-sponsorship"
    });
    const descEl = sponsorEl.createEl("div");
    const mssgEl = descEl.createDiv({
      cls: "sponsorship-message",
      text: helpModals.sponsorship.description
    });
    const textEl = descEl.createSpan({
      text: "Support the developers"
    });
    const iconEl = descEl.createSpan({
      cls: "heart-icon"
    });
    (0, import_obsidian14.setIcon)(iconEl, "heart");
    descEl.appendChild(iconEl);
    descEl.appendChild(textEl);
    sponsorEl.appendChild(descEl);
    sponsorEl.appendChild(mssgEl);
    const parser = new DOMParser();
    sponsorEl.appendChild(
      createDonateButton(
        "https://livecodes.io/docs/sponsor",
        parser.parseFromString(liveCodesLogo, "text/xml").documentElement
      )
    );
    sponsorEl.appendChild(
      createDonateButton(
        "https://www.buymeacoffee.com/gapmiss",
        parser.parseFromString(buyMeACoffee, "text/xml").documentElement
      )
    );
    const toggleChoices = async (choice) => {
      var _a3, _b, _c, _d, _e4, _f;
      switch (choice) {
        case "monaco":
          let monacodd = [dropdownCodejarDark, dropdownCodejarLight, dropdownCodemirrorDark, dropdownCodemirrorLight];
          monacodd.forEach((dd) => {
            dd.setClass("choiceHidden");
          });
          (_a3 = activeDocument.querySelector(".dropdownMonacoDark")) == null ? void 0 : _a3.removeClass("choiceHidden");
          (_b = activeDocument.querySelector(".dropdownMonacoLight")) == null ? void 0 : _b.removeClass("choiceHidden");
          break;
        case "codemirror":
          let cmdd = [dropdownCodejarDark, dropdownCodejarLight, dropdownMonacoDark, dropdownMonacoLight];
          cmdd.forEach((dd) => {
            dd.setClass("choiceHidden");
          });
          (_c = activeDocument.querySelector(".dropdownCodemirrorDark")) == null ? void 0 : _c.removeClass("choiceHidden");
          (_d = activeDocument.querySelector(".dropdownCodemirrorLight")) == null ? void 0 : _d.removeClass("choiceHidden");
          break;
        case "codejar":
          let cjdd = [dropdownCodemirrorDark, dropdownCodemirrorLight, dropdownMonacoDark, dropdownMonacoLight];
          cjdd.forEach((dd) => {
            dd.setClass("choiceHidden");
          });
          (_e4 = activeDocument.querySelector(".dropdownCodejarDark")) == null ? void 0 : _e4.removeClass("choiceHidden");
          (_f = activeDocument.querySelector(".dropdownCodejarLight")) == null ? void 0 : _f.removeClass("choiceHidden");
          break;
        default:
          break;
      }
      let allThemes = [
        this.plugin.settings.monacoDarkTheme,
        this.plugin.settings.monacoLightTheme,
        this.plugin.settings.codemirrorDarkTheme,
        this.plugin.settings.codemirrorLightTheme,
        this.plugin.settings.codejarDarkTheme,
        this.plugin.settings.codejarLightTheme
      ];
      this.plugin.settings.editorTheme = allThemes.filter((n) => n).join(",");
      await this.plugin.saveSettings();
    };
    toggleChoices(this.plugin.settings.editor);
  }
};
var createDonateButton = (link, img) => {
  const a = document.createElement("a");
  a.setAttribute("href", link);
  a.setAttribute("tabindex", "0");
  a.setAttribute("aria-label", link);
  a.setAttribute("data-tooltip-position", "top");
  a.addClass("livecodes-sponsorship-button");
  a.appendChild(img);
  return a;
};
var buyMeACoffee = `
<svg width="150" height="42" viewBox="0 0 260 73" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 11.68C0 5.22932 5.22931 0 11.68 0H248.2C254.651 0 259.88 5.22931 259.88 11.68V61.32C259.88 67.7707 254.651 73 248.2 73H11.68C5.22931 73 0 67.7707 0 61.32V11.68Z" fill="#FFDD00"/>
<path d="M52.2566 24.0078L52.2246 23.9889L52.1504 23.9663C52.1802 23.9915 52.2176 24.0061 52.2566 24.0078Z" fill="#0D0C22"/>
<path d="M52.7248 27.3457L52.6895 27.3556L52.7248 27.3457Z" fill="#0D0C22"/>
<path d="M52.2701 24.0024C52.266 24.0019 52.2619 24.0009 52.258 23.9995C52.2578 24.0022 52.2578 24.0049 52.258 24.0076C52.2624 24.007 52.2666 24.0052 52.2701 24.0024Z" fill="#0D0C22"/>
<path d="M52.2578 24.0094H52.2643V24.0054L52.2578 24.0094Z" fill="#0D0C22"/>
<path d="M52.6973 27.3394L52.7513 27.3086L52.7714 27.2973L52.7897 27.2778C52.7554 27.2926 52.7241 27.3135 52.6973 27.3394Z" fill="#0D0C22"/>
<path d="M52.3484 24.0812L52.2956 24.031L52.2598 24.0115C52.279 24.0454 52.3108 24.0705 52.3484 24.0812Z" fill="#0D0C22"/>
<path d="M39.0684 56.469C39.0262 56.4872 38.9893 56.5158 38.9609 56.552L38.9943 56.5306C39.0169 56.5098 39.0489 56.4853 39.0684 56.469Z" fill="#0D0C22"/>
<path d="M46.7802 54.9518C46.7802 54.9041 46.7569 54.9129 46.7626 55.0826C46.7626 55.0687 46.7683 55.0549 46.7708 55.0417C46.7739 55.0115 46.7764 54.982 46.7802 54.9518Z" fill="#0D0C22"/>
<path d="M45.9844 56.469C45.9422 56.4872 45.9053 56.5158 45.877 56.552L45.9103 56.5306C45.9329 56.5098 45.9649 56.4853 45.9844 56.469Z" fill="#0D0C22"/>
<path d="M33.6307 56.8301C33.5987 56.8023 33.5595 56.784 33.5176 56.7773C33.5515 56.7937 33.5855 56.81 33.6081 56.8226L33.6307 56.8301Z" fill="#0D0C22"/>
<path d="M32.4118 55.6598C32.4068 55.6103 32.3916 55.5624 32.3672 55.519C32.3845 55.5642 32.399 55.6104 32.4106 55.6573L32.4118 55.6598Z" fill="#0D0C22"/>
<path d="M40.623 34.7221C38.9449 35.4405 37.0404 36.2551 34.5722 36.2551C33.5397 36.2531 32.5122 36.1114 31.5176 35.834L33.2247 53.3605C33.2851 54.093 33.6188 54.7761 34.1595 55.2739C34.7003 55.7718 35.4085 56.0482 36.1435 56.048C36.1435 56.048 38.564 56.1737 39.3716 56.1737C40.2409 56.1737 42.8474 56.048 42.8474 56.048C43.5823 56.048 44.2904 55.7716 44.831 55.2737C45.3716 54.7759 45.7052 54.0929 45.7656 53.3605L47.594 33.993C46.7769 33.714 45.9523 33.5286 45.0227 33.5286C43.415 33.5279 42.1196 34.0817 40.623 34.7221Z" fill="white"/>
<path d="M26.2344 27.2449L26.2633 27.2719L26.2821 27.2832C26.2676 27.2688 26.2516 27.2559 26.2344 27.2449Z" fill="#0D0C22"/>
<path d="M55.4906 25.6274L55.2336 24.3307C55.0029 23.1673 54.4793 22.068 53.2851 21.6475C52.9024 21.513 52.468 21.4552 52.1745 21.1768C51.881 20.8983 51.7943 20.4659 51.7264 20.0649C51.6007 19.3289 51.4825 18.5923 51.3537 17.8575C51.2424 17.2259 51.1544 16.5163 50.8647 15.9368C50.4876 15.1586 49.705 14.7036 48.9269 14.4025C48.5282 14.2537 48.1213 14.1278 47.7082 14.0254C45.7642 13.5125 43.7202 13.324 41.7202 13.2165C39.3197 13.084 36.9128 13.1239 34.518 13.3359C32.7355 13.4981 30.8581 13.6942 29.1642 14.3108C28.5451 14.5364 27.9071 14.8073 27.4364 15.2856C26.8587 15.8733 26.6702 16.7821 27.0919 17.515C27.3917 18.0354 27.8996 18.4031 28.4382 18.6463C29.1398 18.9597 29.8726 19.1982 30.6242 19.3578C32.7172 19.8204 34.885 20.0021 37.0233 20.0794C39.3932 20.175 41.767 20.0975 44.1256 19.8474C44.7089 19.7833 45.2911 19.7064 45.8723 19.6168C46.5568 19.5118 46.9961 18.6168 46.7943 17.9933C46.553 17.2479 45.9044 16.9587 45.1709 17.0712C45.0628 17.0882 44.9553 17.1039 44.8472 17.1196L44.7692 17.131C44.5208 17.1624 44.2723 17.1917 44.0238 17.219C43.5105 17.2743 42.9959 17.3195 42.4801 17.3547C41.3249 17.4352 40.1665 17.4722 39.0088 17.4741C37.8712 17.4741 36.7329 17.4421 35.5978 17.3673C35.0799 17.3333 34.5632 17.2902 34.0478 17.2378C33.8134 17.2133 33.5796 17.1875 33.3458 17.1586L33.1233 17.1303L33.0749 17.1234L32.8442 17.0901C32.3728 17.0191 31.9014 16.9374 31.435 16.8387C31.388 16.8283 31.3459 16.8021 31.3157 16.7645C31.2856 16.7269 31.2691 16.6801 31.2691 16.6319C31.2691 16.5837 31.2856 16.5369 31.3157 16.4993C31.3459 16.4617 31.388 16.4356 31.435 16.4251H31.4438C31.848 16.339 32.2553 16.2655 32.6638 16.2014C32.8 16.18 32.9366 16.159 33.0736 16.1385H33.0774C33.3332 16.1215 33.5903 16.0757 33.8448 16.0455C36.0595 15.8151 38.2874 15.7366 40.5128 15.8104C41.5933 15.8419 42.6731 15.9053 43.7485 16.0147C43.9798 16.0386 44.2098 16.0637 44.4399 16.092C44.5279 16.1027 44.6165 16.1153 44.7051 16.1259L44.8836 16.1517C45.404 16.2292 45.9217 16.3233 46.4367 16.4339C47.1997 16.5999 48.1796 16.6539 48.519 17.4898C48.6271 17.7551 48.6761 18.0499 48.7359 18.3283L48.8119 18.6834C48.8139 18.6898 48.8154 18.6963 48.8163 18.7029C48.9961 19.5409 49.176 20.379 49.3562 21.217C49.3694 21.2789 49.3697 21.3429 49.3571 21.4049C49.3445 21.4669 49.3193 21.5257 49.2829 21.5776C49.2466 21.6294 49.2 21.6732 49.146 21.7062C49.092 21.7392 49.0317 21.7608 48.969 21.7695H48.964L48.854 21.7846L48.7453 21.799C48.4009 21.8439 48.056 21.8858 47.7107 21.9247C47.0307 22.0022 46.3496 22.0693 45.6674 22.1259C44.3119 22.2386 42.9536 22.3125 41.5927 22.3477C40.8992 22.3662 40.2059 22.3748 39.5129 22.3735C36.7543 22.3713 33.9981 22.211 31.2578 21.8933C30.9611 21.8581 30.6645 21.8204 30.3678 21.7821C30.5978 21.8116 30.2006 21.7594 30.1202 21.7481C29.9316 21.7217 29.7431 21.6943 29.5545 21.6658C28.9216 21.5709 28.2924 21.454 27.6607 21.3515C26.8971 21.2258 26.1667 21.2887 25.476 21.6658C24.909 21.976 24.4501 22.4518 24.1605 23.0297C23.8626 23.6456 23.7739 24.3163 23.6407 24.9781C23.5074 25.6399 23.3 26.3521 23.3786 27.0315C23.5477 28.4979 24.5728 29.6895 26.0473 29.956C27.4345 30.2074 28.8292 30.4111 30.2276 30.5846C35.7212 31.2574 41.2711 31.3379 46.7818 30.8247C47.2305 30.7828 47.6787 30.7371 48.1262 30.6876C48.266 30.6723 48.4074 30.6884 48.5401 30.7348C48.6729 30.7812 48.7936 30.8566 48.8934 30.9557C48.9932 31.0548 49.0695 31.1749 49.1169 31.3073C49.1642 31.4397 49.1814 31.5811 49.167 31.7209L49.0275 33.0773C48.7463 35.8181 48.4652 38.5587 48.184 41.299C47.8907 44.1769 47.5955 47.0545 47.2984 49.9319C47.2146 50.7422 47.1308 51.5524 47.047 52.3624C46.9666 53.16 46.9552 53.9827 46.8038 54.7709C46.5649 56.0103 45.7258 56.7715 44.5015 57.0499C43.3798 57.3052 42.2339 57.4392 41.0836 57.4497C39.8083 57.4566 38.5336 57.4 37.2583 57.4069C35.897 57.4145 34.2295 57.2887 33.1786 56.2756C32.2553 55.3856 32.1277 53.9921 32.002 52.7872C31.8344 51.192 31.6682 49.5971 31.5036 48.0023L30.5796 39.1344L29.9819 33.3966C29.9718 33.3017 29.9618 33.208 29.9524 33.1125C29.8807 32.428 29.3961 31.758 28.6324 31.7926C27.9788 31.8215 27.2359 32.3771 27.3125 33.1125L27.7557 37.3664L28.672 46.1657C28.9331 48.6652 29.1935 51.165 29.4533 53.6653C29.5036 54.1442 29.5507 54.6244 29.6035 55.1034C29.8908 57.7205 31.8895 59.131 34.3646 59.5282C35.8102 59.7607 37.291 59.8085 38.758 59.8324C40.6386 59.8626 42.538 59.9348 44.3877 59.5942C47.1287 59.0914 49.1853 57.2611 49.4788 54.422C49.5626 53.6024 49.6464 52.7826 49.7302 51.9626C50.0088 49.2507 50.2871 46.5386 50.5649 43.8263L51.4737 34.9641L51.8904 30.9026C51.9112 30.7012 51.9962 30.5118 52.133 30.3625C52.2697 30.2132 52.4509 30.1119 52.6497 30.0736C53.4335 29.9208 54.1827 29.66 54.7402 29.0635C55.6277 28.1138 55.8043 26.8756 55.4906 25.6274ZM26.0071 26.5035C26.019 26.4979 25.997 26.6003 25.9876 26.6481C25.9857 26.5758 25.9895 26.5117 26.0071 26.5035ZM26.0831 27.0918C26.0894 27.0874 26.1083 27.1126 26.1278 27.1428C26.0982 27.1151 26.0794 27.0944 26.0825 27.0918H26.0831ZM26.1579 27.1905C26.185 27.2364 26.1994 27.2653 26.1579 27.1905V27.1905ZM26.3082 27.3125H26.3119C26.3119 27.3169 26.3188 27.3213 26.3214 27.3257C26.3172 27.3208 26.3126 27.3164 26.3075 27.3125H26.3082ZM52.6132 27.1302C52.3317 27.3979 51.9074 27.5224 51.4882 27.5846C46.7868 28.2823 42.0169 28.6355 37.264 28.4796C33.8624 28.3633 30.4967 27.9856 27.129 27.5098C26.799 27.4633 26.4414 27.403 26.2145 27.1597C25.7871 26.7009 25.997 25.777 26.1083 25.2226C26.2101 24.7148 26.405 24.0378 27.009 23.9656C27.9518 23.8549 29.0466 24.2528 29.9794 24.3942C31.1023 24.5656 32.2295 24.7028 33.3609 24.8059C38.1892 25.2459 43.0986 25.1774 47.9056 24.5337C48.7817 24.416 49.6548 24.2792 50.5246 24.1233C51.2996 23.9844 52.1588 23.7236 52.6271 24.5262C52.9482 25.073 52.991 25.8046 52.9413 26.4225C52.926 26.6917 52.8084 26.9448 52.6126 27.1302H52.6132Z" fill="#0D0C22"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M81.1302 40.1929C80.8556 40.7169 80.4781 41.1732 79.9978 41.5604C79.5175 41.9479 78.9571 42.2633 78.3166 42.5062C77.6761 42.7497 77.0315 42.9131 76.3835 42.9964C75.7352 43.0799 75.106 43.0727 74.4963 42.9735C73.8863 42.8749 73.3674 42.6737 72.9408 42.3695L73.4214 37.3779C73.8633 37.2261 74.4197 37.0703 75.0909 36.9107C75.7619 36.7513 76.452 36.6371 77.1613 36.5689C77.8705 36.5003 78.5412 36.5084 79.1744 36.5917C79.8068 36.6753 80.3065 36.8765 80.6725 37.1958C80.8707 37.378 81.0387 37.5754 81.176 37.7883C81.313 38.0011 81.3969 38.2214 81.4276 38.4493C81.5037 39.0875 81.4047 39.6687 81.1302 40.1929ZM74.153 29.5602C74.4734 29.3627 74.8585 29.1877 75.3083 29.0356C75.7581 28.8841 76.2195 28.7774 76.6923 28.7167C77.1648 28.6562 77.6262 28.6481 78.0763 28.6938C78.5258 28.7395 78.9228 28.8647 79.2659 29.0697C79.6089 29.2751 79.8643 29.5714 80.032 29.9586C80.1997 30.3464 80.2456 30.8365 80.1693 31.429C80.1083 31.9001 79.9211 32.2991 79.6089 32.6256C79.2963 32.9526 78.9147 33.2259 78.4652 33.4462C78.0154 33.6668 77.5388 33.8415 77.0356 33.9702C76.5321 34.0997 76.0477 34.1949 75.5828 34.2553C75.1176 34.3163 74.7137 34.3545 74.3706 34.3692C74.0273 34.3845 73.8021 34.3921 73.6956 34.3921L74.153 29.5602ZM83.6007 36.9676C83.3566 36.4361 83.0287 35.9689 82.6172 35.5658C82.2054 35.1633 81.717 34.8709 81.1531 34.6885C81.3969 34.491 81.6371 34.1795 81.8737 33.7539C82.1099 33.3288 82.3119 32.865 82.4796 32.3636C82.6474 31.8619 82.762 31.357 82.8229 30.8478C82.8836 30.3389 82.8607 29.902 82.7544 29.537C82.4947 28.6256 82.087 27.9114 81.5303 27.3946C80.9734 26.8782 80.3257 26.5211 79.586 26.3233C78.8462 26.1264 78.0304 26.0842 77.1383 26.1981C76.2462 26.312 75.3347 26.5361 74.4049 26.8704C74.4049 26.7946 74.4124 26.7148 74.4278 26.6312C74.4426 26.548 74.4504 26.4604 74.4504 26.369C74.4504 26.1411 74.3361 25.9439 74.1074 25.7765C73.8787 25.6093 73.6155 25.5107 73.3183 25.4801C73.0209 25.45 72.731 25.5142 72.4489 25.6738C72.1665 25.8334 71.9721 26.1264 71.8656 26.5511C71.7434 27.9189 71.6215 29.3398 71.4996 30.8134C71.3774 32.2875 71.248 33.7767 71.1107 35.2812C70.9735 36.7855 70.8362 38.2784 70.6989 39.7598C70.5616 41.2414 70.4244 42.6659 70.2871 44.0333C70.333 44.4436 70.4473 44.7629 70.6304 44.9907C70.8133 45.2189 71.0268 45.3556 71.2709 45.401C71.5147 45.4467 71.7704 45.4045 72.0371 45.2755C72.3038 45.1469 72.5365 44.9222 72.735 44.6032C73.3447 44.9375 74.0311 45.1541 74.7938 45.253C75.5561 45.3516 76.3298 45.3516 77.1157 45.253C77.9007 45.1541 78.6747 44.9682 79.4374 44.6943C80.1997 44.4211 80.8936 44.079 81.519 43.669C82.1441 43.2586 82.6703 42.7911 83.0975 42.2671C83.5244 41.7426 83.8065 41.1767 83.9437 40.5691C84.081 39.946 84.119 39.3231 84.0581 38.7C83.9971 38.0771 83.8445 37.5 83.6007 36.9676Z" fill="#0D0C23"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M105.915 49.0017C105.832 49.5031 105.713 50.0311 105.561 50.586C105.408 51.1403 105.229 51.6458 105.023 52.1018C104.818 52.5575 104.589 52.9256 104.337 53.207C104.085 53.488 103.815 53.606 103.525 53.5606C103.296 53.5297 103.151 53.3854 103.091 53.1274C103.029 52.8686 103.029 52.5497 103.091 52.17C103.151 51.7901 103.269 51.3607 103.445 50.8821C103.62 50.4035 103.834 49.9284 104.085 49.4577C104.337 48.9864 104.623 48.5347 104.943 48.1015C105.264 47.6686 105.599 47.3075 105.95 47.0189C106.026 47.11 106.06 47.3378 106.053 47.7028C106.045 48.0674 105.999 48.5006 105.915 49.0017ZM113.67 39.1097C113.464 38.8819 113.213 38.7529 112.915 38.7223C112.618 38.6919 112.317 38.859 112.012 39.2237C111.813 39.5883 111.562 39.9379 111.257 40.2722C110.952 40.6067 110.635 40.9103 110.307 41.1839C109.98 41.4572 109.667 41.6931 109.37 41.8903C109.072 42.0881 108.84 42.2324 108.672 42.3235C108.611 41.8374 108.576 41.3132 108.569 40.7507C108.561 40.1886 108.573 39.619 108.603 39.0415C108.649 38.2209 108.744 37.393 108.889 36.557C109.034 35.7213 109.244 34.9007 109.518 34.0951C109.518 33.67 109.419 33.3242 109.221 33.0582C109.022 32.7924 108.782 32.625 108.5 32.5567C108.218 32.4885 107.929 32.5264 107.631 32.6707C107.334 32.8153 107.078 33.0775 106.865 33.4569C106.682 33.9586 106.472 34.5207 106.236 35.1436C105.999 35.7667 105.732 36.4012 105.435 37.0469C105.138 37.6931 104.806 38.3197 104.44 38.9273C104.074 39.5354 103.674 40.075 103.239 40.5457C102.804 41.0168 102.331 41.3854 101.821 41.6512C101.31 41.9172 100.757 42.0349 100.162 42.0045C99.8876 41.9285 99.6893 41.7235 99.5675 41.3889C99.4453 41.0549 99.373 40.6368 99.3504 40.1354C99.3275 39.634 99.3504 39.0831 99.4189 38.4828C99.4877 37.8828 99.5791 37.2863 99.6934 36.6938C99.8078 36.101 99.9337 35.5389 100.071 35.0071C100.208 34.4753 100.337 34.0268 100.46 33.6622C100.643 33.2218 100.643 32.8529 100.46 32.5567C100.277 32.2604 100.025 32.0631 99.705 31.964C99.3846 31.8654 99.0489 31.8694 98.6983 31.9755C98.3474 32.0819 98.0958 32.3173 97.9435 32.682C97.684 33.3054 97.4475 34.004 97.2342 34.779C97.0206 35.5539 96.8491 36.3558 96.7197 37.1836C96.5896 38.0121 96.5171 38.8327 96.502 39.6456C96.5011 39.6985 96.5037 39.7488 96.5034 39.8014C96.1709 40.6848 95.854 41.3525 95.553 41.7992C95.1641 42.377 94.7253 42.6277 94.2375 42.5513C94.0236 42.4603 93.8832 42.2477 93.8147 41.9132C93.7453 41.5792 93.7227 41.1689 93.7453 40.6822C93.7688 40.1964 93.826 39.6456 93.9171 39.0299C94.0091 38.4146 94.1229 37.7764 94.2601 37.1154C94.3977 36.4541 94.5425 35.7899 94.6949 35.121C94.8472 34.4525 94.9845 33.8218 95.107 33.2291C95.0916 32.6973 94.9352 32.291 94.6377 32.0097C94.3405 31.7289 93.9247 31.6187 93.3913 31.6791C93.0253 31.8312 92.7542 32.029 92.579 32.2719C92.4034 32.5148 92.2623 32.8265 92.1558 33.2062C92.0946 33.404 92.0032 33.799 91.8813 34.3918C91.7591 34.984 91.603 35.6644 91.4123 36.4315C91.2217 37.1992 90.9967 38.0005 90.7376 38.8362C90.4781 39.6719 90.1885 40.4283 89.8684 41.1041C89.548 41.7801 89.1972 42.3235 88.8161 42.7338C88.4348 43.1438 88.023 43.3113 87.5807 43.2352C87.3366 43.1895 87.1805 42.9388 87.112 42.4831C87.0432 42.0271 87.0319 41.4653 87.0775 40.7964C87.1233 40.1279 87.2148 39.3946 87.352 38.5971C87.4893 37.7993 87.63 37.0434 87.7752 36.3289C87.92 35.6149 88.0535 34.984 88.1756 34.4372C88.2975 33.8901 88.3814 33.5254 88.4272 33.3433C88.4272 32.9026 88.3277 32.5495 88.1298 32.2832C87.9313 32.0178 87.6913 31.8503 87.4092 31.7818C87.1268 31.7136 86.8372 31.7514 86.54 31.8957C86.2426 32.0403 85.9872 32.3026 85.7736 32.682C85.6973 33.0923 85.598 33.5674 85.4761 34.1067C85.3539 34.6459 85.2361 35.2006 85.1218 35.7705C85.0074 36.3404 84.9003 36.8988 84.8014 37.4459C84.7021 37.993 84.6299 38.4716 84.584 38.8819C84.5536 39.2008 84.519 39.5923 84.4813 40.0556C84.443 40.5194 84.4238 41.0092 84.4238 41.5257C84.4238 42.0427 84.4618 42.5554 84.5385 43.0643C84.6145 43.5735 84.7518 44.0408 84.95 44.4659C85.1482 44.8915 85.4265 45.2408 85.7852 45.5144C86.1433 45.7879 86.5972 45.9397 87.1463 45.9704C87.7101 46.0005 88.202 45.9591 88.6217 45.8449C89.041 45.731 89.4221 45.5523 89.7654 45.3091C90.1084 45.0665 90.421 44.7776 90.7033 44.443C90.9851 44.1091 91.2637 43.7444 91.5383 43.3491C91.7974 43.9269 92.1329 44.3748 92.5447 44.694C92.9565 45.013 93.3913 45.2032 93.8486 45.2637C94.306 45.3241 94.7715 45.2602 95.2442 45.0699C95.7167 44.8803 96.1436 44.5573 96.5252 44.1012C96.7762 43.8216 97.0131 43.5038 97.2354 43.1525C97.3297 43.317 97.4301 43.4758 97.543 43.6224C97.9168 44.1091 98.424 44.443 99.0645 44.6255C99.7506 44.808 100.421 44.8386 101.077 44.7169C101.733 44.5954 102.358 44.3748 102.953 44.0559C103.548 43.7366 104.101 43.3532 104.612 42.9047C105.122 42.4565 105.568 41.9895 105.95 41.5028C105.934 41.8524 105.927 42.1832 105.927 42.4944C105.927 42.8061 105.919 43.1438 105.904 43.5088C105.141 44.0408 104.421 44.679 103.742 45.4233C103.064 46.1676 102.469 46.9616 101.958 47.8051C101.447 48.6483 101.047 49.5031 100.757 50.3691C100.467 51.2357 100.326 52.0445 100.334 52.7969C100.341 53.549 100.521 54.206 100.871 54.7681C101.222 55.3306 101.794 55.7331 102.587 55.9763C103.411 56.2348 104.135 56.242 104.76 55.9991C105.386 55.7559 105.931 55.3531 106.396 54.791C106.861 54.2289 107.242 53.549 107.54 52.7512C107.837 51.9534 108.073 51.1215 108.249 50.2555C108.424 49.3894 108.535 48.5379 108.58 47.7028C108.626 46.8668 108.626 46.1219 108.58 45.4687C109.892 44.9219 110.967 44.2305 111.806 43.3945C112.645 42.5594 113.338 41.6778 113.887 40.7507C114.055 40.5229 114.112 40.2493 114.059 39.9304C114.006 39.6111 113.876 39.3376 113.67 39.1097Z" fill="#0D0C23"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M142.53 37.6515C142.575 37.3022 142.644 36.9335 142.735 36.546C142.827 36.1585 142.941 35.7823 143.079 35.4177C143.216 35.0531 143.376 34.7379 143.559 34.4718C143.742 34.2061 143.937 34.0161 144.142 33.9019C144.348 33.7883 144.558 33.7995 144.771 33.936C145 34.0731 145.141 34.3617 145.195 34.8021C145.248 35.2433 145.195 35.7141 145.034 36.2155C144.874 36.7172 144.588 37.1879 144.177 37.6286C143.765 38.0696 143.208 38.3579 142.507 38.4947C142.476 38.2824 142.484 38.0011 142.53 37.6515ZM150.456 38.5857C150.204 38.5103 149.964 38.5025 149.735 38.5632C149.506 38.6239 149.361 38.7835 149.301 39.042C149.178 39.5281 148.984 40.0258 148.717 40.5347C148.45 41.0439 148.122 41.5262 147.734 41.9822C147.345 42.438 146.906 42.8408 146.418 43.1901C145.93 43.5397 145.419 43.7904 144.886 43.9422C144.351 44.1096 143.91 44.1284 143.559 43.9991C143.208 43.8705 142.93 43.6498 142.724 43.3384C142.518 43.027 142.369 42.6508 142.278 42.2101C142.186 41.7694 142.133 41.3137 142.118 40.8424C142.987 40.9034 143.761 40.7478 144.44 40.3751C145.118 40.0032 145.694 39.509 146.167 38.8937C146.639 38.2784 146.998 37.587 147.242 36.8195C147.485 36.0524 147.623 35.2887 147.653 34.5288C147.669 33.8146 147.562 33.2108 147.333 32.7169C147.105 32.2233 146.796 31.839 146.407 31.5658C146.018 31.2922 145.572 31.1326 145.069 31.0872C144.566 31.0415 144.054 31.11 143.536 31.2922C142.91 31.505 142.381 31.8506 141.946 32.3294C141.512 32.808 141.149 33.3629 140.86 33.9933C140.57 34.6239 140.341 35.3038 140.173 36.033C140.005 36.7626 139.883 37.4806 139.807 38.1873C139.739 38.8214 139.702 39.4278 139.689 40.013C139.657 40.0874 139.625 40.1588 139.59 40.2383C139.354 40.7782 139.079 41.3062 138.766 41.8226C138.454 42.3394 138.107 42.7725 137.726 43.1218C137.344 43.4714 136.948 43.5929 136.536 43.4865C136.292 43.426 136.159 43.1444 136.136 42.6433C136.113 42.1416 136.139 41.5187 136.216 40.7741C136.292 40.0298 136.38 39.2239 136.479 38.3579C136.578 37.4918 136.628 36.664 136.628 35.8737C136.628 35.1898 136.498 34.5329 136.239 33.9019C135.979 33.2718 135.625 32.7473 135.175 32.3294C134.725 31.9113 134.203 31.634 133.608 31.4975C133.013 31.3605 132.373 31.4518 131.687 31.7708C131 32.09 130.455 32.5382 130.051 33.1157C129.647 33.6934 129.277 34.3009 128.942 34.9391C128.819 34.4528 128.641 34.0011 128.404 33.583C128.167 33.1651 127.878 32.8005 127.535 32.4888C127.191 32.1776 126.806 31.9344 126.38 31.7595C125.953 31.5851 125.502 31.4975 125.03 31.4975C124.572 31.4975 124.149 31.5851 123.76 31.7595C123.371 31.9344 123.017 32.1583 122.696 32.4318C122.376 32.7056 122.087 33.013 121.827 33.3551C121.568 33.6969 121.339 34.0352 121.141 34.3692C121.11 33.9742 121.076 33.6286 121.038 33.332C121 33.0359 120.931 32.7852 120.832 32.5801C120.733 32.3748 120.592 32.2193 120.409 32.1129C120.226 32.0067 119.967 31.9532 119.632 31.9532C119.464 31.9532 119.296 31.9874 119.128 32.0556C118.96 32.1241 118.811 32.2193 118.682 32.3407C118.552 32.4627 118.453 32.6105 118.385 32.7852C118.316 32.9598 118.297 33.1614 118.327 33.3892C118.342 33.5566 118.385 33.7576 118.453 33.9933C118.522 34.2289 118.587 34.5369 118.648 34.9163C118.708 35.2962 118.758 35.756 118.796 36.2953C118.834 36.8349 118.846 37.4959 118.831 38.2784C118.815 39.0611 118.758 39.9763 118.659 41.0248C118.56 42.0733 118.403 43.289 118.19 44.6714C118.16 44.9907 118.282 45.2492 118.556 45.4467C118.831 45.6439 119.143 45.7578 119.494 45.7885C119.845 45.8188 120.177 45.7578 120.489 45.6063C120.802 45.4539 120.981 45.1882 121.027 44.8085C121.072 44.0943 121.16 43.3347 121.29 42.529C121.419 41.724 121.579 40.9262 121.77 40.1359C121.961 39.346 122.178 38.5938 122.422 37.8793C122.666 37.1651 122.937 36.5347 123.234 35.9876C123.532 35.4405 123.84 35.0039 124.161 34.6771C124.481 34.3504 124.816 34.187 125.167 34.187C125.594 34.187 125.926 34.3805 126.162 34.7679C126.398 35.1557 126.566 35.6536 126.666 36.2609C126.765 36.869 126.81 37.5341 126.803 38.2555C126.795 38.9773 126.765 39.6724 126.711 40.341C126.658 41.0098 126.597 41.606 126.528 42.1303C126.46 42.6545 126.41 43.0157 126.38 43.2129C126.38 43.5625 126.513 43.8395 126.78 44.0448C127.046 44.2498 127.344 44.3716 127.672 44.4095C128 44.4476 128.309 44.3866 128.598 44.227C128.888 44.0674 129.056 43.7982 129.102 43.4179C129.254 42.324 129.464 41.2264 129.731 40.1247C129.997 39.023 130.303 38.0355 130.646 37.1616C130.989 36.2878 131.37 35.5735 131.79 35.0189C132.209 34.4646 132.655 34.187 133.128 34.187C133.371 34.187 133.559 34.3544 133.688 34.6884C133.818 35.0227 133.883 35.4784 133.883 36.0559C133.883 36.4815 133.848 36.9184 133.78 37.3666C133.711 37.8148 133.631 38.2784 133.54 38.7569C133.448 39.2358 133.368 39.7256 133.299 40.227C133.231 40.7287 133.196 41.2527 133.196 41.7998C133.196 42.1797 133.235 42.6204 133.311 43.1218C133.387 43.6229 133.532 44.0983 133.745 44.5462C133.959 44.9947 134.252 45.3744 134.626 45.6858C135 45.9973 135.476 46.1531 136.056 46.1531C136.925 46.1531 137.695 45.9669 138.366 45.5947C139.037 45.2226 139.613 44.7365 140.093 44.1362C140.118 44.1047 140.141 44.0711 140.165 44.0399C140.202 44.1287 140.235 44.2227 140.276 44.3071C140.604 44.9756 141.05 45.4921 141.615 45.857C142.178 46.2216 142.842 46.4229 143.605 46.4611C144.367 46.4987 145.198 46.3581 146.098 46.0392C146.769 45.796 147.352 45.4921 147.848 45.1275C148.343 44.7628 148.789 44.3184 149.186 43.7941C149.583 43.2699 149.945 42.6658 150.273 41.9822C150.601 41.2981 150.932 40.5159 151.268 39.6342C151.329 39.3916 151.272 39.1751 151.097 38.9848C150.921 38.7951 150.708 38.6621 150.456 38.5857Z" fill="#0D0C23"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M162.887 36.0434C162.81 36.4918 162.707 36.986 162.578 37.525C162.448 38.0646 162.284 38.623 162.086 39.2004C161.888 39.7779 161.644 40.2984 161.354 40.7616C161.064 41.2254 160.733 41.5935 160.359 41.8671C159.985 42.1406 159.555 42.2546 159.066 42.2089C158.822 42.1788 158.635 42.0117 158.506 41.7075C158.376 41.4038 158.308 41.0161 158.3 40.545C158.292 40.0743 158.334 39.5575 158.426 38.9951C158.517 38.4333 158.658 37.8821 158.849 37.3426C159.04 36.8036 159.272 36.3056 159.547 35.8496C159.821 35.3939 160.138 35.0405 160.496 34.7898C160.854 34.5391 161.247 34.4217 161.674 34.4365C162.101 34.4518 162.559 34.6643 163.047 35.0747C163.016 35.2725 162.963 35.5954 162.887 36.0434ZM171.019 37.787C170.782 37.6656 170.538 37.6392 170.287 37.7075C170.035 37.7757 169.856 38.0076 169.749 38.4026C169.688 38.8283 169.551 39.3294 169.338 39.9069C169.124 40.4843 168.861 41.0317 168.548 41.5478C168.236 42.0646 167.877 42.494 167.473 42.8358C167.069 43.1778 166.638 43.3337 166.181 43.3028C165.799 43.2727 165.532 43.079 165.38 42.7218C165.227 42.3647 165.147 41.9168 165.14 41.3769C165.132 40.838 165.186 40.2301 165.3 39.5538C165.414 38.8777 165.552 38.2054 165.712 37.5363C165.872 36.868 166.036 36.2258 166.204 35.6105C166.371 34.9951 166.508 34.4747 166.616 34.0493C166.738 33.6693 166.699 33.3466 166.501 33.0803C166.303 32.8149 166.055 32.6246 165.758 32.5107C165.46 32.3967 165.159 32.3664 164.854 32.4196C164.549 32.4728 164.351 32.6362 164.259 32.9094C163.359 32.1345 162.494 31.7166 161.663 31.6559C160.831 31.5952 160.065 31.7776 159.364 32.203C158.662 32.6284 158.041 33.2437 157.5 34.0493C156.958 34.8549 156.52 35.7322 156.184 36.6818C155.849 37.6314 155.639 38.6004 155.555 39.5879C155.471 40.5757 155.536 41.4761 155.75 42.289C155.963 43.1018 156.34 43.7669 156.882 44.283C157.423 44.7998 158.159 45.0583 159.089 45.0583C159.501 45.0583 159.898 44.9747 160.279 44.8076C160.66 44.6401 161.011 44.4426 161.331 44.2148C161.651 43.9869 161.933 43.7475 162.178 43.4968C162.421 43.2461 162.612 43.0373 162.749 42.8699C162.856 43.417 163.032 43.8808 163.276 44.2605C163.519 44.6401 163.798 44.9521 164.111 45.1948C164.423 45.4376 164.751 45.6164 165.094 45.7306C165.437 45.8445 165.769 45.9015 166.089 45.9015C166.806 45.9015 167.477 45.6583 168.102 45.1719C168.727 44.6861 169.288 44.0893 169.784 43.3829C170.279 42.6762 170.687 41.9319 171.007 41.1491C171.328 40.3666 171.541 39.6715 171.648 39.0634C171.755 38.8355 171.735 38.5964 171.591 38.3457C171.446 38.095 171.255 37.909 171.019 37.787Z" fill="#0D0C23"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M212.194 50.3701C212.064 50.8866 211.862 51.3238 211.587 51.6806C211.313 52.0377 210.97 52.2239 210.558 52.2393C210.299 52.2543 210.101 52.1175 209.963 51.8289C209.826 51.5401 209.731 51.1679 209.678 50.7122C209.624 50.2562 209.601 49.747 209.609 49.1849C209.616 48.6227 209.639 48.0681 209.678 47.521C209.715 46.9742 209.761 46.4647 209.815 45.9939C209.868 45.5226 209.91 45.1586 209.94 44.9C210.459 44.9608 210.89 45.1846 211.233 45.5723C211.576 45.9598 211.839 46.4193 212.022 46.9514C212.205 47.4831 212.312 48.0568 212.343 48.6722C212.373 49.2875 212.323 49.8534 212.194 50.3701ZM203.913 50.3701C203.783 50.8866 203.581 51.3238 203.307 51.6806C203.032 52.0377 202.689 52.2239 202.277 52.2393C202.018 52.2543 201.82 52.1175 201.683 51.8289C201.545 51.5401 201.45 51.1679 201.397 50.7122C201.343 50.2562 201.32 49.747 201.328 49.1849C201.336 48.6227 201.358 48.0681 201.397 47.521C201.434 46.9742 201.48 46.4647 201.534 45.9939C201.587 45.5226 201.629 45.1586 201.66 44.9C202.178 44.9608 202.609 45.1846 202.952 45.5723C203.295 45.9598 203.558 46.4193 203.741 46.9514C203.924 47.4831 204.031 48.0568 204.062 48.6722C204.092 49.2875 204.042 49.8534 203.913 50.3701ZM195.415 37.4241C195.399 37.7884 195.365 38.1114 195.312 38.3925C195.258 38.6741 195.186 38.8522 195.095 38.9283C194.927 38.8369 194.721 38.6018 194.477 38.2216C194.233 37.8419 194.042 37.4122 193.905 36.9336C193.768 36.4551 193.725 35.9843 193.779 35.5205C193.832 35.0573 194.073 34.6967 194.5 34.4379C194.667 34.3468 194.812 34.3809 194.934 34.5405C195.056 34.7001 195.155 34.9318 195.232 35.2357C195.308 35.5399 195.361 35.8892 195.392 36.2842C195.422 36.6795 195.43 37.0591 195.415 37.4241ZM193.39 41.9711C193.154 42.2215 192.89 42.4381 192.601 42.6206C192.311 42.803 192.014 42.9398 191.709 43.0309C191.404 43.1223 191.129 43.1448 190.885 43.0991C190.199 42.9627 189.673 42.666 189.307 42.2103C188.941 41.7545 188.708 41.219 188.609 40.6037C188.51 39.9881 188.521 39.3308 188.644 38.6319C188.765 37.933 188.971 37.2835 189.261 36.6832C189.551 36.0829 189.902 35.5662 190.313 35.1333C190.725 34.7001 191.175 34.4306 191.663 34.3239C191.48 35.0989 191.419 35.9007 191.48 36.7286C191.541 37.5568 191.739 38.3355 192.075 39.0648C192.288 39.506 192.544 39.9082 192.841 40.2729C193.139 40.6378 193.501 40.9492 193.928 41.2075C193.806 41.466 193.626 41.7204 193.39 41.9711ZM218.702 37.6519C218.747 37.3026 218.816 36.9336 218.908 36.5462C218.999 36.159 219.114 35.7828 219.251 35.4181C219.388 35.0532 219.548 34.738 219.731 34.4723C219.914 34.2065 220.108 34.0163 220.314 33.9024C220.52 33.7884 220.73 33.7997 220.943 33.9365C221.172 34.0735 221.313 34.3621 221.367 34.8025C221.42 35.2435 221.367 35.7142 221.207 36.2159C221.046 36.7173 220.761 37.1884 220.349 37.6288C219.937 38.07 219.38 38.3583 218.679 38.4951C218.648 38.2826 218.656 38.0015 218.702 37.6519ZM227.921 37.6519C227.966 37.3026 228.035 36.9336 228.126 36.5462C228.218 36.159 228.332 35.7828 228.47 35.4181C228.607 35.0532 228.767 34.738 228.95 34.4723C229.133 34.2065 229.328 34.0163 229.533 33.9024C229.739 33.7884 229.949 33.7997 230.162 33.9365C230.391 34.0735 230.532 34.3621 230.586 34.8025C230.639 35.2435 230.586 35.7142 230.425 36.2159C230.265 36.7173 229.979 37.1884 229.568 37.6288C229.156 38.07 228.599 38.3583 227.898 38.4951C227.867 38.2826 227.875 38.0015 227.921 37.6519ZM236.488 38.9852C236.312 38.7955 236.099 38.6625 235.847 38.5862C235.595 38.5104 235.355 38.5029 235.126 38.5636C234.897 38.6244 234.752 38.784 234.692 39.0422C234.57 39.5286 234.375 40.0262 234.108 40.5349C233.841 41.0444 233.514 41.5267 233.125 41.9824C232.736 42.4381 232.297 42.8412 231.81 43.1905C231.321 43.5401 230.81 43.7908 230.277 43.9423C229.743 44.1101 229.301 44.1289 228.95 43.9996C228.599 43.8706 228.321 43.6503 228.115 43.3389C227.909 43.0271 227.761 42.6512 227.669 42.2103C227.578 41.7699 227.524 41.3142 227.509 40.8428C228.378 40.9038 229.152 40.7483 229.831 40.3755C230.509 40.0034 231.085 39.5092 231.558 38.8939C232.031 38.2788 232.389 37.5874 232.633 36.82C232.877 36.0526 233.014 35.2892 233.045 34.5293C233.06 33.815 232.953 33.211 232.724 32.7171C232.496 32.2235 232.187 31.8395 231.798 31.5662C231.409 31.2924 230.963 31.133 230.46 31.0874C229.957 31.0417 229.445 31.1105 228.927 31.2924C228.302 31.5055 227.772 31.851 227.338 32.3296C226.903 32.8085 226.54 33.3634 226.251 33.9934C225.961 34.6244 225.732 35.3039 225.564 36.0335C225.396 36.7627 225.274 37.481 225.199 38.1874C225.124 38.873 225.084 39.5292 225.075 40.1572C225.017 40.2824 224.956 40.4082 224.889 40.5349C224.622 41.0444 224.295 41.5267 223.906 41.9824C223.517 42.4381 223.078 42.8412 222.591 43.1905C222.102 43.5401 221.592 43.7908 221.058 43.9423C220.524 44.1101 220.082 44.1289 219.731 43.9996C219.38 43.8706 219.102 43.6503 218.896 43.3389C218.691 43.0271 218.542 42.6512 218.45 42.2103C218.359 41.7699 218.305 41.3142 218.29 40.8428C219.159 40.9038 219.933 40.7483 220.612 40.3755C221.29 40.0034 221.866 39.5092 222.339 38.8939C222.811 38.2788 223.17 37.5874 223.414 36.82C223.658 36.0526 223.795 35.2892 223.826 34.5293C223.841 33.815 223.734 33.211 223.506 32.7171C223.277 32.2235 222.968 31.8395 222.579 31.5662C222.19 31.2924 221.744 31.133 221.241 31.0874C220.738 31.0417 220.227 31.1105 219.708 31.2924C219.083 31.5055 218.553 31.851 218.119 32.3296C217.684 32.8085 217.321 33.3634 217.032 33.9934C216.742 34.6244 216.513 35.3039 216.346 36.0335C216.178 36.7627 216.056 37.481 215.98 38.1874C215.936 38.5859 215.907 38.9722 215.886 39.3516C215.739 39.4765 215.595 39.6023 215.442 39.7258C214.916 40.1514 214.363 40.5349 213.784 40.8769C213.204 41.219 212.601 41.5001 211.977 41.7204C211.351 41.9408 210.71 42.0738 210.055 42.1192L211.473 26.9847C211.565 26.6655 211.519 26.3847 211.336 26.1415C211.153 25.8983 210.916 25.7312 210.627 25.6401C210.337 25.5488 210.028 25.5566 209.7 25.6627C209.372 25.7694 209.102 26.0126 208.888 26.3919C208.781 26.9697 208.671 27.7597 208.557 28.7625C208.442 29.7653 208.328 30.8595 208.213 32.0448C208.099 33.23 207.985 34.4532 207.87 35.7142C207.756 36.9759 207.657 38.1533 207.573 39.2472C207.569 39.2958 207.566 39.3398 207.562 39.3878C207.429 39.5005 207.299 39.6142 207.161 39.7258C206.635 40.1514 206.082 40.5349 205.503 40.8769C204.923 41.219 204.321 41.5001 203.696 41.7204C203.07 41.9408 202.429 42.0738 201.774 42.1192L203.192 26.9847C203.284 26.6655 203.238 26.3847 203.055 26.1415C202.872 25.8983 202.635 25.7312 202.346 25.6401C202.056 25.5488 201.747 25.5566 201.419 25.6627C201.091 25.7694 200.821 26.0126 200.607 26.3919C200.501 26.9697 200.39 27.7597 200.276 28.7625C200.161 29.7653 200.047 30.8595 199.933 32.0448C199.818 33.23 199.704 34.4532 199.589 35.7142C199.475 36.9759 199.376 38.1533 199.292 39.2472C199.29 39.2692 199.289 39.2891 199.287 39.3111C199.048 39.4219 198.786 39.519 198.503 39.6006C198.213 39.6844 197.885 39.7339 197.519 39.7489C197.58 39.4751 197.63 39.1712 197.668 38.8369C197.706 38.5029 197.737 38.1533 197.76 37.7884C197.782 37.4241 197.79 37.0591 197.782 36.6945C197.774 36.3296 197.755 35.9956 197.725 35.6914C197.649 35.0385 197.508 34.4191 197.302 33.8338C197.096 33.2491 196.818 32.7593 196.467 32.3637C196.116 31.9687 195.678 31.7027 195.151 31.5662C194.626 31.4294 194.012 31.4748 193.31 31.7027C192.273 31.5662 191.339 31.6613 190.508 31.9878C189.677 32.3149 188.956 32.7894 188.346 33.4122C187.736 34.0357 187.237 34.7684 186.848 35.6119C186.459 36.4551 186.2 37.3214 186.07 38.21C186.015 38.5868 185.988 38.9618 185.98 39.336C185.744 39.8177 185.486 40.2388 185.201 40.5921C184.797 41.0935 184.377 41.5038 183.943 41.8228C183.508 42.142 183.077 42.3852 182.65 42.5523C182.223 42.7198 181.842 42.8337 181.507 42.8941C181.11 42.9702 180.729 42.978 180.363 42.917C179.997 42.8565 179.661 42.6816 179.357 42.3927C179.112 42.1802 178.925 41.8381 178.796 41.3671C178.666 40.896 178.59 40.3608 178.567 39.7602C178.544 39.1599 178.567 38.533 178.636 37.8798C178.705 37.2266 178.822 36.6072 178.99 36.0222C179.158 35.4372 179.371 34.913 179.631 34.4492C179.89 33.9862 180.195 33.6554 180.546 33.4579C180.744 33.4886 180.866 33.606 180.912 33.811C180.958 34.0163 180.969 34.2595 180.946 34.5405C180.923 34.8219 180.889 35.1105 180.843 35.4066C180.797 35.703 180.775 35.9502 180.775 36.1474C180.851 36.5577 180.999 36.877 181.221 37.1048C181.441 37.3327 181.69 37.466 181.964 37.5036C182.239 37.5417 182.509 37.4773 182.776 37.3098C183.043 37.143 183.26 36.877 183.428 36.512C183.443 36.5274 183.466 36.5349 183.497 36.5349L183.817 33.6404C183.909 33.2451 183.847 32.8958 183.634 32.5919C183.42 32.288 183.138 32.113 182.788 32.0676C182.345 31.4294 181.747 31.0914 180.992 31.0532C180.237 31.0154 179.463 31.2623 178.67 31.7941C178.182 32.144 177.751 32.626 177.378 33.2413C177.004 33.857 176.699 34.5405 176.463 35.2926C176.226 36.0448 176.058 36.8391 175.959 37.6748C175.86 38.5104 175.841 39.3236 175.902 40.1133C175.963 40.9038 176.104 41.6484 176.325 42.347C176.546 43.0462 176.855 43.6312 177.252 44.102C177.587 44.5123 177.968 44.8127 178.395 45.0027C178.822 45.1927 179.268 45.3101 179.734 45.3558C180.199 45.4012 180.66 45.3821 181.118 45.2988C181.575 45.2155 182.01 45.0978 182.421 44.9454C182.955 44.7482 183.505 44.4972 184.069 44.1933C184.633 43.8897 185.174 43.5248 185.693 43.0991C185.966 42.8753 186.228 42.6313 186.482 42.3696C186.598 42.6553 186.727 42.9317 186.882 43.1905C187.294 43.8741 187.85 44.429 188.552 44.8544C189.253 45.2797 190.115 45.4844 191.137 45.4697C192.235 45.4544 193.249 45.1774 194.18 44.6378C195.11 44.0988 195.872 43.3042 196.467 42.256C197.358 42.256 198.234 42.1096 199.096 41.819C199.089 41.911 199.081 42.0079 199.075 42.0966C199.014 42.9019 198.983 43.4487 198.983 43.7376C198.968 44.239 198.934 44.8581 198.88 45.5949C198.827 46.332 198.793 47.1069 198.778 47.9198C198.763 48.7326 198.793 49.5532 198.869 50.3817C198.945 51.2096 199.105 51.962 199.349 52.6383C199.593 53.3141 199.94 53.8878 200.39 54.3591C200.84 54.8299 201.431 55.1112 202.163 55.2023C202.941 55.3084 203.612 55.1717 204.176 54.792C204.74 54.412 205.198 53.8918 205.549 53.2308C205.899 52.5695 206.147 51.8061 206.292 50.9401C206.437 50.074 206.479 49.2039 206.418 48.3301C206.357 47.4562 206.196 46.6321 205.937 45.8575C205.678 45.0822 205.319 44.444 204.862 43.9423C205.137 43.8669 205.465 43.7226 205.846 43.5095C206.227 43.2969 206.62 43.0575 207.024 42.7915C207.123 42.7261 207.221 42.6573 207.32 42.5902C207.283 43.1286 207.264 43.5126 207.264 43.7376C207.249 44.239 207.215 44.8581 207.161 45.5949C207.108 46.332 207.073 47.1069 207.058 47.9198C207.043 48.7326 207.073 49.5532 207.15 50.3817C207.226 51.2096 207.386 51.962 207.63 52.6383C207.874 53.3141 208.221 53.8878 208.671 54.3591C209.121 54.8299 209.712 55.1112 210.444 55.2023C211.221 55.3084 211.892 55.1717 212.457 54.792C213.021 54.412 213.478 53.8918 213.83 53.2308C214.18 52.5695 214.428 51.8061 214.573 50.9401C214.718 50.074 214.759 49.2039 214.699 48.3301C214.637 47.4562 214.477 46.6321 214.218 45.8575C213.959 45.0822 213.601 44.444 213.143 43.9423C213.418 43.8669 213.745 43.7226 214.127 43.5095C214.508 43.2969 214.9 43.0575 215.305 42.7915C215.515 42.6533 215.724 42.5107 215.932 42.3641C216.01 43.1072 216.179 43.759 216.448 44.3073C216.776 44.9761 217.222 45.4925 217.787 45.8575C218.351 46.2218 219.014 46.4234 219.777 46.4612C220.539 46.4988 221.37 46.3586 222.271 46.0393C222.941 45.7965 223.525 45.4925 224.02 45.1279C224.516 44.763 224.962 44.3185 225.358 43.7946C225.381 43.7642 225.403 43.7313 225.425 43.7006C225.496 43.9134 225.574 44.1179 225.667 44.3073C225.995 44.9761 226.441 45.4925 227.006 45.8575C227.569 46.2218 228.233 46.4234 228.996 46.4612C229.758 46.4988 230.589 46.3586 231.489 46.0393C232.16 45.7965 232.744 45.4925 233.239 45.1279C233.735 44.763 234.181 44.3185 234.577 43.7946C234.974 43.27 235.336 42.666 235.664 41.9824C235.992 41.2985 236.323 40.5164 236.659 39.6347C236.72 39.3918 236.663 39.1752 236.488 38.9852Z" fill="#0D0C23"/>
</svg>`;
var liveCodesLogo = `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="body_1" width="66" height="44"><defs><linearGradient transform="matrix(1 0 0 1 0 0)"  id="1" x1="0" y1="0" x2="76.9073" y2="0"><stop stop-color="#D7D7D7" offset="0%"/><stop stop-color="#626262" offset="100%"/></linearGradient><linearGradient transform="matrix(1 0 0 1 0 0)"  id="218" x1="0" y1="0" x2="76.9073" y2="0"><stop stop-color="#D7D7D7" offset="0%"/><stop stop-color="#626262" offset="100%"/></linearGradient><linearGradient transform="matrix(1 0 0 1 0 0)"  id="437" x1="0" y1="0" x2="153.3638" y2="0"><stop stop-color="#D7D7D7" offset="0%"/><stop stop-color="#626262" offset="100%"/></linearGradient></defs><g transform="matrix(0.089552246 0 0 0.09016393 0 0)"><g transform="matrix(1 0 0 1 9.5 4.5)"><path d="M16.7525 286.7298C 6.7066 275.7455 0 253.8097 0 234.5909C 0 215.3848 5.0266 197.5589 17.5891 187.9573L17.5891 187.9573L16.7534 187.9573L214.4292 0L214.4292 127.5964C 192.6508 148.17259 163.3353 171.5021 89.626396 235.9855L89.626396 235.9855L90.4621 237.3407C 129.82939 266.1627 175.0609 310.057 214.4283 348.4704L214.4283 348.4704L214.4283 477.4364L16.7525 286.7298z" stroke="none" fill="#C1C1C1" fill-rule="nonzero" /><g transform="matrix(1 0 0 1 500.5716 0.0017)"><path d="M197.6761 190.6956C 207.7146 201.6806 214.4284 223.6273 214.4284 242.8352C 214.4284 262.0431 209.40161 279.866 196.8322 289.4688L196.8322 289.4688L197.6765 289.4688L0 477.4266L0 349.8297C 21.7793 329.26492 51.094 305.936 124.8034 241.45201L124.8034 241.45201L123.9677 240.09671C 84.607 211.2747 39.3692 167.3799 0.0009 128.9676L0.0009 128.9676L0.0009 0L197.6761 190.6956z" stroke="none" fill="#C1C1C1" fill-rule="nonzero" /></g></g><g transform="matrix(1 0 0 1 219.5 59.5)"><g transform="matrix(1 0 0 1 147.229 92.5951)"><path d="M0 261.9238L143.1698 174.4704L143.1698 0L0 87.2109L0 261.9238z" stroke="none" fill="#FFFFFF" fill-rule="nonzero" /></g><g transform="matrix(1 0 0 1 4.3302 92.7405)"><path d="M0 174.2764L142.9894 261.5845L142.9894 87.1142L0 0L0 174.2764z" stroke="none" fill="#FFFFFF" fill-rule="nonzero" /></g><g transform="matrix(1 0 0 1 5.2325 6.0147)"><path d="M284.1743 86.5805L142.0872 0L0 86.5805L142.0872 173.3062L284.17432 86.5805L284.1743 86.5805z" stroke="none" fill="#FFFFFF" fill-rule="nonzero" /></g><g transform="matrix(1 0 0 1 147.3196 92.5951)"><path d="M0 81.5845L133.8327 0.0967L133.6974 0L0 81.5845z" stroke="none" fill="#FFFFFF" fill-rule="nonzero" /></g><g transform="matrix(1 0 0 1 13.487 92.5951)"><path d="M0.1353 0L0 0.0967L133.8327 81.5845L0.1353 0z" stroke="none" fill="#FFFFFF" fill-rule="nonzero" /></g><g transform="matrix(1 0 0 1 147.3196 174.1792)"><path d="" stroke="none" fill="#FFFFFF" fill-rule="nonzero" /></g><path d="M290.1287 87.017L147.3196 0L4.5106 87.017L0 89.8789L0 269.9271L147.5 360L152.0106 357.2352L295 269.9271L295 89.8303L290.1287 87.017zM285.6177 264.30072L151.8302 346.0793L151.8302 182.6194L285.7981 100.9863zM142.8087 346.0793L8.8407 264.2521L8.8407 100.9863L142.8087 182.6194zM13.6223 92.6919L147.3196 11.155899L281.017 92.6919L147.3196 174.1792L13.487 92.6919z" stroke="none" fill="#444444" fill-rule="nonzero" /><g transform="matrix(1 0 0 1 147.9058 133.4844)"><path d="M0 140.566L76.9073 93.662094L76.9073 0L0 46.8553L0 140.56601L0 140.566z" stroke="none" fill="url(#1)" /></g><g transform="matrix(1 0 0 1 69.8257 133.4844)"><path d="M0 93.6621L76.9073 140.56601L76.9073 46.8553L0 0L0 93.6621z" stroke="none" fill="url(#218)" /></g><g transform="matrix(1 0 0 1 70.6373 85.513)"><path d="M153.3638 46.71L76.6819 0L0 46.71L76.6819 93.5654L153.3638 46.71z" stroke="none" fill="url(#437)" /></g><g transform="matrix(1 0 0 1 147.3196 132.223)"><path d="M0 42.102L68.9685 0.0968L68.8787 0L0 42.0534L0 42.101997L0 42.102z" stroke="none" fill="#96BF3D" fill-rule="nonzero" /></g><g transform="matrix(1 0 0 1 78.3507 132.223)"><path d="M0.0902 0L0 0.0968L68.9685 42.102L68.9685 42.053402L0.0902 0z" stroke="none" fill="#96BF3D" fill-rule="nonzero" /></g><g transform="matrix(1 0 0 1 147.3196 174.2764)"><path d="" stroke="none" fill="#96BF3D" fill-rule="nonzero" /></g><g transform="matrix(1 0 0 1 64.7736 79.159)"><path d="M160.5811 47.4858L82.5456 0L4.5106 47.4858L0 50.2992L0 151.2369L82.5456 201.68149L87.0566 198.91669L165.1819 151.2369L165.1819 50.2992L160.5811 47.4858zM156.0702 145.56201L87.0566 187.76071L87.0566 103.55721L156.1608 61.45521zM78.0351 187.76071L8.9309 145.562L8.9309 61.4552L78.0351 103.557205zM13.6674 53.064L82.54559 11.155998L151.42429 53.1126L82.545586 95.1174L13.577187 53.1608z" stroke="none" fill="#FFFFFF" fill-rule="nonzero" /></g></g></g></svg>`;

// src/modals/PlaygroundSelect.ts
var import_obsidian15 = require("obsidian");
var PlaygroundSelectModal = class extends import_obsidian15.FuzzySuggestModal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
    this.vault = plugin.app.vault;
    this.containerEl.addClass("playground-select-modal");
    this.setPlaceholder("Select a playground or type to search");
  }
  getItems() {
    const playgroundFolder = this.plugin.settings.playgroundFolder;
    const folder = this.vault.getAbstractFileByPath(playgroundFolder);
    if (!folder || !(folder instanceof import_obsidian15.TFolder)) {
      showNotice("Error: " + playgroundFolder + " is not a valid folder in the plugin settings. Click this message to dismiss.", 0, "error");
      this.close();
      return [];
    }
    return this.getPlaygroundsInFolder(folder);
  }
  getItemText(item) {
    let regex = new RegExp(this.plugin.settings.playgroundFolder + "/", "g");
    return item.path.replace(regex, "").replace(".json", "");
  }
  renderSuggestion(match, el2) {
    super.renderSuggestion(match, el2);
  }
  async onChooseItem(f2) {
    if (f2.path) {
      this.plugin.settings.jsonTemplate = f2;
      this.plugin.saveSettings();
      await this.plugin.activatePlaygroundView();
      return Promise.resolve;
    } else {
      console.log(`Invalid file path: ${f2.path}`);
      return Promise.reject;
    }
  }
  getPlaygroundsInFolder(folder) {
    let files = [];
    import_obsidian15.Vault.recurseChildren(folder, (file) => {
      if (file instanceof import_obsidian15.TFile && file.extension === "json") {
        files.push(file);
      }
    });
    return files.sort((a, b2) => {
      return a.name.localeCompare(b2.name);
    });
  }
};

// src/modals/StarterSelect.ts
var import_obsidian16 = require("obsidian");

// src/livecodes/starters.ts
var livecodesStarters = [
  {
    name: "C++",
    markup: {
      language: "html",
      content: `<div class="container">
  <h1>Hello, <span id="name">World</span>!</h1>
  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/cpp.svg" />
  <p>You clicked <span id="counter">0</span> times.</p>
  <button id="counter-button">Click me</button>
</div>

<script>
  // set initial input
  livecodes.cpp.input = "-1";

  addEventListener('load', async () => {
    const button = document.querySelector("#counter-button");

    // wait till loaded
    await livecodes.cpp.loaded;

    // get initial output
    const initialOutput = livecodes.cpp.output;
    update(initialOutput);

    button.onclick = async () => {
      // run with new input
      const {output, error, exitCode} = await livecodes.cpp.run(window.count);
      update(output);
    };

    function update(output) {
      const counter = document.querySelector("#counter");
      const name = document.querySelector("#name");

      const [title, count] = output.split('\\n');

      if (parseInt(count) !== NaN) {
        window.count = count;
        counter.innerText = window.count;
      }
      if (title) {
        name.innerText = title;
      }
    }
  });
<\/script>
`
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "cpp",
      content: '#include <iostream>\nusing namespace std;\n\nint main() {\n    char title[] = "C++";\n    cout << title << endl;\n\n    int count;\n    cin >> count;\n    count += 1;\n    cout << count << endl;\n\n    return 0;\n}\n'
    }
  },
  {
    name: "Lua (wasm)",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/lua.svg" />\n  <p id="counter">You clicked 0 times.</p>\n  <button id="counter-button">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "lua-wasm",
      content: 'document = window.document\ndocument:getElementById("title").innerHTML = "Lua"\n\nCounter = {count = 0}\nfunction Counter:new (o)\n  o = o or {}\n  setmetatable(o, self)\n  self.__index = self\n  return o\nend\nfunction Counter:increment ()\n  self.count = self.count + 1\nend\nfunction Counter:show ()\n  local counter_el = document:getElementById("counter")\n  counter_el.innerHTML = ("You clicked %d times."):format(self.count)\nend\n\ncounter = Counter:new(nil)\nbutton = document:querySelector("#counter-button")\nbutton:addEventListener("click", function()\n  counter:increment()\n  counter:show()\nend)\n\n-- check console\ntime = os.date("*t").hour\nif time < 12 then\n  print ("Good morning")\nelseif time >= 12 and time < 18 then\n  print ("Good afternoon")\nelse\n  print ("Good evening")\nend\n'
    }
  },
  {
    name: "Lua",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/lua.svg" />\n  <p id="counter">You clicked 0 times.</p>\n  <button id="counter-button">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "lua",
      content: 'js = require "js"\nwindow = js.global\ndocument = window.document\n\ndocument:getElementById("title").innerHTML = "Lua"\n\nCounter = {count = 0}\nfunction Counter:new (o)\n  o = o or {}\n  setmetatable(o, self)\n  self.__index = self\n  return o\nend\nfunction Counter:increment ()\n  self.count = self.count + 1\nend\nfunction Counter:show ()\n  local counter_el = document:getElementById("counter")\n  counter_el.innerHTML = ("You clicked %d times."):format(self.count)\nend\n\ncounter = Counter:new(nil)\nbutton = document:querySelector("#counter-button")\nbutton:addEventListener("click", function()\n  counter:increment()\n  counter:show()\nend)\n\n-- check console\ntime = os.date("*t").hour\nif time < 12 then\n  print ("Good morning")\nelseif time >= 12 and time < 18 then\n  print ("Good afternoon")\nelse\n  print ("Good evening")\nend\n'
    }
  },
  {
    name: "Perl",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/perl.svg" />\n  <p>You clicked <span id="counter">0</span> times.</p>\n  <button id="counter-button">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "perl",
      content: `use strict;

my $title = 'Perl';
JS::inline('document.getElementById("title").innerHTML') = $title;

{
package Counter;
  sub new {
    my $class = shift;
    my $self = {count => 0};
    return bless $self, $class;
  }
  sub count {
    my $self = shift;
    return $self->{count};
  }
  sub increment {
    my $self = shift;
    $self->{count}++;
  }
}

my $counter = Counter->new;

sub onClick {
    $counter->increment;
    JS::inline('document.getElementById("counter").innerHTML') =
    $counter->count;
}

JS::inline('document.getElementById("counter-button").onclick') = \\&onClick;

# check console
my ($sec,$min,$hour) = localtime(time);
if ($hour < 12) {
  print "Good morning";
} elsif ($hour >= 12 && $hour < 18) {
  print "Good afternoon";
} else {
  print "Good evening";
}
`
    }
  },
  {
    name: "PHP (wasm)",
    markup: {
      language: "html",
      content: '<p>\n  <h1>Hello, <span id="title">world</span>!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/php.svg" />\n</p>\n'
    },
    style: {
      language: "css",
      content: "body {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "php-wasm",
      content: `<?php
$title = 'PHP';
vrzno_eval('document.getElementById("title").innerText = "' . $title . '"');

$time = date('H');
if ($time < 12) {
  $greeting = 'Good morning!';
} elseif ($time < 17) {
  $greeting = 'Good afternoon!';
} elseif ($time < 20) {
  $greeting = 'Good evening!';
} else {
  $greeting = 'Good night!';
}

$date = date('l jS \\of F, Y');

echo $greeting . '<br>Today is:<br>' . $date;
`
    }
  },
  {
    name: "PHP",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1>Hello, <span id="title">world</span>!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/php.svg" />\n  <p>You clicked <span id="counter">0</span> times.</p>\n  <button id="counter-button">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "php",
      content: `<?php
$title = 'PHP';
$document->getElementById('title')->innerText = $title;

$count = 0;

$document
  ->getElementById('counter-button')
  ->addEventListener('click', function () use (&$count, $document) {
      $count += 1;
      $document->getElementById('counter')->innerText = $count;
      echo "count: $count";
  });
`
    }
  },
  {
    name: "Ruby",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/ruby.svg" />\n  <p id="counter">You clicked 0 times.</p>\n  <button id="counter-button">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "ruby",
      content: 'require "date"\nrequire "native"\n\ntitle = "Ruby"\n$$.document.querySelector("#title").innerHTML = title\n\n$counter = 0\n$counter_element = $$.document.querySelector "#counter"\n\ndef increment\n    $counter += 1\n    $counter_element.innerHTML = "You clicked %d times." % [$counter]\nend\n\nbutton = $$.document.querySelector "button"\nbutton.onclick = -> {increment}\n\n# check console\ncurrent_time = Time.now.hour\nmsg = Date.today.strftime "happy %A!"\nif current_time < 12\n    puts "Good morning, " + msg\nelsif current_time < 18\n    puts "Good afternoon, " + msg\nelse\n    puts "Good evening, " + msg\nend\n'
    }
  },
  {
    name: "Python (wasm)",
    markup: {
      language: "html",
      content: '<h1 id="title">Hello, World!</h1>\n<div id="plot">Loading...</div>\n'
    },
    style: {
      language: "css",
      content: "h1 {\n  text-align: center;\n}\n"
    },
    script: {
      language: "python-wasm",
      content: `from js import document, XMLHttpRequest
import pandas as pd
import matplotlib.pyplot as plt
from io import StringIO

def load_data(url):
  req = XMLHttpRequest.new()
  req.open("GET", url, False)
  req.send()
  res = req.response
  return StringIO(f"""{res}""")


def prepare_data(dataframe):
  def add_species_id(x):
    if x == 'setosa':
        return 0
    elif x == 'versicolor':
        return 1
    return 2

  df = dataframe.copy()
  df['species_id'] = df['species'].apply(add_species_id)
  return df


def showPlot(figure, selector):
  iconStyles = document.createElement('link')
  iconStyles.rel = 'stylesheet'
  iconStyles.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css'
  document.head.appendChild(iconStyles)
  el = document.querySelector(selector)
  el.innerHTML = ''
  document.pyodideMplTarget = el
  figure.canvas.show()


df = pd.read_csv(load_data("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv"))
df = prepare_data(df)

formatter = plt.FuncFormatter(lambda i, *args: df['species'].unique()[int(i)])
fig = plt.figure(figsize=(6, 4))
plt.scatter(df[df.columns[0]], df[df.columns[1]], c=df['species_id'])
plt.colorbar(ticks=[0, 1, 2], format=formatter)
plt.xlabel(df.columns[0])
plt.ylabel(df.columns[1])
plt.title('Iris dataset')
plt.tight_layout()
showPlot(fig, '#plot')

title = document.getElementById('title')
name = 'Python'
title.innerHTML = f"Hello, {name}!"
`
    }
  },
  {
    name: "Python",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1 id="header">Hello, World!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/python.svg" />\n  <p>You clicked <span id="counter">0</span> times.</p>\n  <button id="counter-button">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "python",
      content: `from browser import document
import time

title = 'Python'
document['header'].html = f"Hello, {title}!"

counter = 0

def increment(ev):
    global counter
    counter += 1
    document['counter'].html = str(counter)

document["counter-button"].bind("click", increment)

# check console
current_time = int(time.strftime('%H'))
if current_time < 12 :
      print('Good morning')
elif 12 <= current_time < 18:
      print('Good afternoon')
else:
      print('Good evening')
`
    }
  },
  {
    name: "Markdown",
    markup: {
      language: "markdown",
      content: "# Project Title\n\nOne Paragraph of project description goes here\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.\n\n### Prerequisites\n\nWhat things you need to install the software and how to install them\n\n```\nGive examples\n```\n\n### Installing\n\nA step by step series of examples that tell you how to get a development env running\n\nSay what the step will be\n\n```\nGive the example\n```\n\nAnd repeat\n\n```\nuntil finished\n```\n\nEnd with an example of getting some data out of the system or using it for a little demo\n\n## Running the tests\n\nExplain how to run the automated tests for this system\n\n### Break down into end to end tests\n\nExplain what these tests test and why\n\n```\nGive an example\n```\n\n### And coding style tests\n\nExplain what these tests test and why\n\n```\nGive an example\n```\n\n## Deployment\n\nAdd additional notes about how to deploy this on a live system\n\n## Built With\n\n* [Dropwizard](http://www.dropwizard.io/1.0.2/docs/) - The web framework used\n* [Maven](https://maven.apache.org/) - Dependency Management\n* [ROME](https://rometools.github.io/rome/) - Used to generate RSS Feeds\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](https://gist.github.com/PurpleBooth/b24679402957c63ec426) for details on our code of conduct, and the process for submitting pull requests to us.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/your/project/tags).\n\n## Authors\n\n* **Billie Thompson** - *Initial work* - [PurpleBooth](https://github.com/PurpleBooth)\n\nSee also the list of [contributors](https://github.com/your/project/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n## Acknowledgments\n\n* Hat tip to anyone whose code was used\n* Inspiration\n* etc\n\n\nSource: https://gist.github.com/PurpleBooth/109311bb0361f32d87a2\n"
    },
    style: {
      language: "css",
      content: '@import "github-markdown-css";\n\nbody {\n  border: 1px solid #e1e4e8;\n  border-radius: 6px;\n  padding: 20px;\n  margin: 20px !important;\n}\n'
    },
    script: {
      language: "javascript",
      content: "document.body.classList.add('markdown-body');\n"
    }
  },
  {
    name: "Tailwind CSS",
    markup: {
      language: "html",
      content: '<div class="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">\n  <div class="relative py-3 sm:max-w-xl sm:mx-auto">\n    <div class="back-card"></div>\n    <div class="relative px-4 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">\n      <div class="max-w-md mx-auto">\n        <div>\n          <img src="https://v28.livecodes.io/livecodes/assets/templates/tailwindplay.svg" class="h-7 sm:h-8" />\n        </div>\n        <div class="divide-y divide-gray-200">\n          <div class="py-8 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7">\n            <p class="prose md:prose-xl">A template based on <a href="https://play.tailwindcss.com/" class="text-cyan-600 hover:text-cyan-700" target="_blank">Tailwind CSS playground</a>. Here you can do things like:</p>\n            <ul class="list-disc space-y-2">\n              <li class="flex items-start">\n                <span class="h-6 flex items-center sm:h-7">\n                  <svg class="flex-shrink-0 h-5 w-5 text-cyan-500" viewBox="0 0 20 20" fill="currentColor">\n                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />\n                  </svg>\n                </span>\n                <p class="ml-2">\n                  Customizing configuration in\n                  <code class="text-sm font-bold text-gray-900">menu \u2192 Custom Settings</code>\n                </p>\n              </li>\n              <li class="flex items-start">\n                <span class="h-6 flex items-center sm:h-7">\n                  <svg class="flex-shrink-0 h-5 w-5 text-cyan-500" viewBox="0 0 20 20" fill="currentColor">\n                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />\n                  </svg>\n                </span>\n                <p class="ml-2">\n                  Extracting classes with\n                  <code class="text-sm font-bold text-gray-900">@apply</code>\n                </p>\n              </li>\n              <li class="flex items-start">\n                <span class="h-6 flex items-center sm:h-7">\n                  <svg class="flex-shrink-0 h-5 w-5 text-cyan-500" viewBox="0 0 20 20" fill="currentColor">\n                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />\n                  </svg>\n                </span>\n                <p class="ml-2">Viewing generated CSS code (in <code class="text-sm font-bold text-gray-900">Compiled</code> pane below)</p>\n              </li>\n            </ul>\n            <p>Perfect for learning how the framework works, prototyping a new idea, or creating a demo to share online.</p>\n          </div>\n          <div class="pt-6 text-base leading-6 font-bold sm:text-lg sm:leading-7">\n            <p>Want to dig deeper into Tailwind?</p>\n            <p>\n              <a href="https://tailwindcss.com/docs" class="text-cyan-600 hover:text-cyan-700" target="_blank"> Read the docs &rarr; </a>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'
    },
    style: {
      language: "css",
      content: "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.back-card {\n  @apply absolute inset-0 bg-gradient-to-r from-cyan-400 to-sky-500 shadow-lg transform -skew-y-6 sm:skew-y-0 sm:-rotate-6 sm:rounded-3xl;\n}\n"
    },
    script: {
      language: "javascript",
      content: ""
    },
    processors: [
      "tailwindcss"
    ]
  },
  {
    name: "Bootstrap 5",
    markup: {
      language: "html",
      content: '<nav class="navbar navbar-expand-md navbar-dark bg-dark fixed-top">\n  <div class="container-fluid">\n    <a class="navbar-brand" href="#">Navbar</a>\n    <button\n      class="navbar-toggler"\n      type="button"\n      data-bs-toggle="collapse"\n      data-bs-target="#navbarsExampleDefault"\n      aria-controls="navbarsExampleDefault"\n      aria-expanded="false"\n      aria-label="Toggle navigation"\n    >\n      <span class="navbar-toggler-icon"></span>\n    </button>\n\n    <div class="collapse navbar-collapse" id="navbarsExampleDefault">\n      <ul class="navbar-nav me-auto mb-2 mb-md-0">\n        <li class="nav-item active">\n          <a class="nav-link" aria-current="page" href="#">Home</a>\n        </li>\n        <li class="nav-item">\n          <a class="nav-link" href="#">Link</a>\n        </li>\n        <li class="nav-item">\n          <a\n            class="nav-link disabled"\n            href="#"\n            tabindex="-1"\n            aria-disabled="true"\n            >Disabled</a\n          >\n        </li>\n        <li class="nav-item dropdown">\n          <a\n            class="nav-link dropdown-toggle"\n            href="#"\n            id="dropdown01"\n            data-bs-toggle="dropdown"\n            aria-expanded="false"\n            >Dropdown</a\n          >\n          <ul class="dropdown-menu" aria-labelledby="dropdown01">\n            <li><a class="dropdown-item" href="#">Action</a></li>\n            <li><a class="dropdown-item" href="#">Another action</a></li>\n            <li><a class="dropdown-item" href="#">Something else here</a></li>\n          </ul>\n        </li>\n      </ul>\n      <form class="d-flex">\n        <input\n          class="form-control me-2"\n          type="search"\n          placeholder="Search"\n          aria-label="Search"\n        />\n        <button class="btn btn-outline-success" type="submit">Search</button>\n      </form>\n    </div>\n  </div>\n</nav>\n\n<main class="container">\n  <div class="starter-template text-center py-5 px-3">\n    <h1>Bootstrap starter template</h1>\n    <p class="lead">\n      Use this document as a way to quickly start any new project.<br />\n      All you get is this text and a mostly barebones HTML document.\n    </p>\n  </div>\n</main>\n'
    },
    style: {
      language: "css",
      content: "body {\n  padding-top: 5rem;\n}\n\n.bd-placeholder-img {\n  font-size: 1.125rem;\n  text-anchor: middle;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n}\n\n@media (min-width: 768px) {\n  .bd-placeholder-img-lg {\n    font-size: 3.5rem;\n  }\n}\n"
    },
    script: {
      language: "javascript",
      content: ""
    },
    stylesheets: [
      "https://fastly.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    ],
    scripts: [
      "https://fastly.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
    ]
  },
  {
    name: "jQuery",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/jquery.svg" />\n  <p>You clicked <span id="counter">0</span> times.</p>\n  <button id="counter-button">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 300px;\n}\n"
    },
    script: {
      language: "javascript",
      content: `import $ from "jquery";

$("#title").text('jQuery');

let count = 0;
$("#counter-button").click(() => {
  count += 1;
  $("#counter").text(count);
});
`
    }
  },
  {
    name: "Riot.js",
    markup: {
      language: "html",
      content: `<counter title="Riot.js"></counter>

<script>
  livecodes.templateData = {
    url: 'https://riot.js.org/'
  }
<\/script>
`
    },
    script: {
      language: "riot",
      content: '<counter>\n  <div class="container">\n    <h1>Hello, { props.title }!</h1>\n    <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/riot.svg" />\n    <p>You clicked { state.count } times.</p>\n    <button onclick="{ increment }">Click me</button>\n    <div class="footer">\n      <a href="{ props.url }" target="_blank">Riot.js Website</a>\n    </div>\n  </div>\n\n  <style>\n    .container,\n    .container button {\n      text-align: center;\n      font: 1em sans-serif;\n    }\n    .logo {\n      width: 150px;\n    }\n    .footer {\n      font: 0.8em sans-serif;\n      margin: 1.5em;\n    }\n  </style>\n\n  <script>\n    export default {\n      onBeforeMount(props, state) {\n        this.state = {\n          count: 0,\n        };\n      },\n      increment(e) {\n        e.preventDefault();\n        this.update({\n          count: this.state.count + 1,\n        });\n      },\n    };\n  <\/script>\n</counter>\n'
    },
    style: {
      language: "css",
      content: ""
    }
  },
  {
    name: "Astro",
    markup: {
      language: "astro",
      content: `---
import {format} from 'date-fns';

const title = "Astro";

const builtAt: Date = new Date();
const builtAtFormatted = format(builtAt, 'MMMM dd, yyyy -- H:mm:ss.SSS');
---
<html lang="en">

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width" />
	<title>Welcome to Astro</title>
  <style>
    .container,
    .container button {
      text-align: center;
      font: 1em sans-serif;
    }
    .logo {
      width: 150px;
    }
    .note {
      margin: 1rem;
      padding: 1rem;
      border-radius: 8px;
      background: #E4E5E6;
      border: 1px solid #BBB;
    }
  </style>
</head>

<body>
  <div class="container">
    <h1>Hello, {title}!</h1>
    <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/astro.svg" />
    <p>You clicked <span id="counter">0</span> times.</p>
    <button id="counter-button">Click me</button>
    <p class="note">
      <strong>RENDERED AT:</strong><br/>
      {builtAtFormatted}
    </p>
  </div>
  <script>
    let count = 0
    document
      .querySelector("#counter-button")
      .addEventListener("click", () => {
        count += 1;
        document.querySelector("#counter").innerText = count;
    });
  <\/script>
</body>

</html>
`
    },
    script: {
      language: "javascript",
      content: ""
    },
    style: {
      language: "css",
      content: ""
    }
  },
  {
    name: "MDX",
    activeEditor: "markup",
    markup: {
      language: "mdx",
      content: `import { Greeting, Counter } from './script';

<Greeting name="MDX" />

![MDX Logo](https://v28.livecodes.io/livecodes/assets/templates/mdx.svg)

<Counter />
`
    },
    style: {
      language: "css",
      content: "body,\nbody button {\n  text-align: center;\n  font: 1em sans-serif;\n}\nimg {\n  width: 150px;\n}\n"
    },
    script: {
      language: "jsx",
      content: 'import { useState } from "https://esm.sh/react";\n\nexport const Greeting = (props) => <h1>Hello, {props.name || "World"}!</h1>;\n\nexport function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>You clicked {count} times.</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n'
    }
  },
  {
    name: "Stencil.js",
    markup: {
      language: "html",
      content: '<my-app title="Stencil"></my-app>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 100px;\n}\n"
    },
    script: {
      language: "stencil",
      content: 'import { Component, Prop, h, State } from "@stencil/core";\n\n@Component({\n  tag: "my-app",\n  styles: `\n    my-app,\n    button {\n      text-align: center;\n      font: 1em sans-serif;\n    }\n    .logo {\n      width: 150px;\n    }\n  `,\n})\nexport class App {\n  @Prop() title: string;\n  @State() count = 0;\n\n  increment = () => {\n    this.count += 1;\n  };\n\n  render() {\n    return (\n      <div class="container">\n        <h1>Hello, {this.title}!</h1>\n        <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/stencil.png" />\n        <p>You clicked {this.count} times.</p>\n        <button onClick={this.increment}>Click me</button>\n      </div>\n    );\n  }\n}\n'
    }
  },
  {
    name: "Lit",
    markup: {
      language: "html",
      content: '<!-- src: -->\n\n<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://lit.dev/images/logo.svg" />\n  <custom-counter></custom-counter>\n</div>\n\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 200px;\n}\n"
    },
    script: {
      language: "javascript",
      content: "import { LitElement, html } from 'https://unpkg.com/@polymer/lit-element@0.7.1/lit-element.js?module';\n\nclass Counter extends LitElement {\n  static get properties() {\n    return {\n      count: { type: Number },\n    };\n  }\n\n  constructor() {\n    super();\n    this.count = 0;\n  }\n\n  setCount = count => {\n    this.count = count;\n  };\n\n  render() {\n    const { count } = this;\n    return html`\n      <p>You clicked <span id=\"counter\">${count}</span> times.</p>\n      <button id=\"counter-button\" @click=${() => this.setCount(count + 1)}>Click me</button>\n    `;\n  }\n}\n\ncustomElements.define('custom-counter', Counter);\n"
    }
  },
  {
    name: "Solid.js",
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "solid.tsx",
      content: 'import { createSignal } from "solid-js";\n\nfunction Counter(props: { name: string }) {\n  const [count, setCount] = createSignal(0);\n  const increment = () => setCount(count() + 1);\n  return (\n    <div className="container">\n      <h1>Hello, {props.name}!</h1>\n      <img className="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/solid.svg" />\n      <p>You clicked {count()} times.</p>\n      <button onClick={increment}>Click me</button>\n    </div>\n  );\n}\n\nexport default function App() {\n  return <Counter name="Solid" />;\n}\n'
    },
    markup: {
      language: "html",
      content: ""
    }
  },
  {
    name: "Svelte",
    activeEditor: "script",
    script: {
      language: "svelte",
      content: '<script>\n  let title = "Svelte";\n  let counter = 0;\n  function increment() {\n    counter += 1;\n  }\n<\/script>\n\n<style>\n  .container,\n  .container button {\n    text-align: center;\n    font: 1em sans-serif;\n  }\n  .logo {\n    width: 150px;\n  }\n</style>\n\n<div class="container">\n  <h1>Hello, {title}!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/svelte.svg" />\n  <p>You clicked {counter} times.</p>\n  <button on:click="{increment}">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ""
    },
    markup: {
      language: "html",
      content: ""
    }
  },
  {
    name: "Angular",
    markup: {
      language: "html",
      content: "<app>Loading...</app>\n"
    },
    style: {
      language: "css",
      content: ""
    },
    script: {
      language: "typescript",
      content: 'import {\n  Component,\n  Input,\n  NgModule,\n  enableProdMode,\n} from "@angular/core@12.2.13";\nimport { CommonModule } from "@angular/common@12.2.13";\nimport { BrowserModule } from "@angular/platform-browser@12.2.13";\nimport { platformBrowserDynamic } from "@angular/platform-browser-dynamic@12.2.13";\nimport "zone.js";\n\n// app.component.ts\n@Component({\n  selector: "app",\n  styles: [\n    `\n    .container,\n    .container button {\n      text-align: center;\n      font: 1em sans-serif;\n    }\n    .logo {\n      width: 150px;\n    }\n    `,\n  ],\n  template: `\n    <div class="container">\n      <heading name="{{name}}"></heading>\n      <img\n        class="logo"\n        alt="logo"\n        src="https://livecodes.io/livecodes/assets/templates/angular.svg"\n      />\n      <p>You clicked {{count}} times.</p>\n      <button type="button" (click)="increment()">Click me</button>\n    </div>\n  `,\n})\nclass AppComponent {\n  count = 0;\n  name = "Angular";\n\n  constructor() {}\n\n  increment() {\n    this.count += 1;\n  }\n}\n\n// heading.component.ts\n@Component({\n  selector: "heading",\n  template: "<h1>{{title}}</h1>",\n})\nclass HeadingComponent {\n  @Input() name: string;\n  title: string;\n\n  ngOnInit() {\n    this.title = `Hello, ${this.name}!`;\n  }\n}\n\n// app.module.ts\n@NgModule({\n  imports: [BrowserModule, CommonModule],\n  declarations: [AppComponent, HeadingComponent],\n  bootstrap: [AppComponent],\n  providers: [],\n})\nclass AppModule {}\n\n// main.ts\n// enableProdMode();\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err: Error) => console.error(err));'
    },
    customSettings: {
      typescript: {
        experimentalDecorators: true
      }
    },
    activeEditor: "script"
  },
  {
    name: "Vue 2",
    markup: {
      language: "html",
      content: '<div id="app">\n  <h1>Hello, Vue!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/vue.svg" />\n  <p>You clicked {{ counter }} times.</p>\n  <button @click="increment()">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: "#app,\n#app button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "javascript",
      content: 'new Vue({\n  el: "#app",\n  data: {\n    counter: 0,\n  },\n  methods: {\n    increment() {\n      this.counter += 1;\n    },\n  },\n});\n'
    },
    scripts: [
      "https://fastly.jsdelivr.net/npm/vue@2"
    ]
  },
  {
    name: "Vue 3 SFC",
    script: {
      language: "vue",
      content: `<script setup lang="tsx">
  import { ref } from 'vue';

  const name = 'Vue';
  const count = ref(0);
  const align = 'center';

  // define inline component
  function Greeting(props: {name: string}) {
    return <h1>Hello, { props.name }!</h1>
  }
<\/script>

<template>
  <div class="container">
    <Greeting :name="name" />
    <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/vue.svg" />
    <p>You clicked {{ count }} times.</p>
    <button @click="count++">Click me</button>
  </div>
</template>

<style scoped>
  .container,
  .container button {
    text-align: v-bind("align");
    font: 1em sans-serif;
  }
  .logo {
    width: 150px;
  }
</style>
`
    },
    markup: {
      language: "html",
      content: ""
    },
    style: {
      language: "css",
      content: ""
    }
  },
  {
    name: "React Native",
    script: {
      language: "react-native",
      content: 'import { useState } from "react";\nimport { Button, Image, StyleSheet, Text, View } from "react-native";\n\nconst logoUri = `data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z" /><circle cx="420.9" cy="296.5" r="45.7" /><path d="M520.5 78.1z" /></g></svg>`;\n\nfunction Link(props) {\n  return (\n    <Text\n      {...props}\n      accessibilityRole="link"\n      style={StyleSheet.compose(styles.link, props.style)}\n    />\n  );\n}\n\nfunction Counter(props) {\n  const [count, setCount] = useState(props.initialCount);\n  return (\n    <View>\n      <Text style={styles.text}>You clicked {count} times.</Text>\n      <Button onPress={() => setCount(count + 1)} title="Click me" />\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <View style={styles.app}>\n      <View style={styles.header}>\n        <Image\n          accessibilityLabel="React logo"\n          source={{ uri: logoUri }}\n          resizeMode="contain"\n          style={styles.logo}\n        />\n        <Text style={styles.title}>React Native for Web</Text>\n      </View>\n      <Text style={styles.text}>\n        This is an example app built with{" "}\n        <Link href="https://necolas.github.io/react-native-web/">\n          React Native for Web\n        </Link>\n      </Text>\n      <Counter initialCount={0}></Counter>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  app: {\n    marginHorizontal: "auto",\n    marginVertical: 20,\n    maxWidth: 500,\n  },\n  logo: {\n    height: 150,\n  },\n  header: {\n    padding: 20,\n  },\n  title: {\n    fontWeight: "bold",\n    fontSize: "1.5rem",\n    marginVertical: "0.5em",\n    textAlign: "center",\n  },\n  text: {\n    lineHeight: "1.5em",\n    fontSize: "1.125rem",\n    marginVertical: "0.5em",\n    textAlign: "center",\n  },\n  link: {\n    color: "#1B95E0",\n  },\n});\n'
    },
    markup: {
      language: "html",
      content: ""
    },
    style: {
      language: "css",
      content: ""
    }
  },
  {
    name: "React",
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "jsx",
      content: 'import { useState } from "https://esm.sh/react"\n\nfunction Counter(props) {\n  const [count, setCount] = useState(0);\n  return (\n    <div className="container">\n      <h1>Hello, {props.name}!</h1>\n      <img className="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/react.svg" />\n      <p>You clicked {count} times.</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n}\n\nexport default function App() {\n  return <Counter name="React" />;\n}\n'
    },
    markup: {
      language: "html",
      content: ""
    }
  },
  {
    name: "Typescript",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/typescript.svg" />\n  <p>You clicked <span id="counter">0</span> times.</p>\n  <button id="counter-button">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "typescript",
      content: 'class Counter {\n  private count: number;\n  constructor() {\n    this.count = 0;\n  }\n  increment() {\n    this.count += 1;\n  }\n  getValue() {\n    return this.count;\n  }\n}\n\nconst title = document.querySelector<HTMLElement>("#title");\nconst count = document.querySelector<HTMLElement>("#counter");\nconst button = document.querySelector<HTMLElement>("#counter-button");\n\ntitle.innerText = "TypeScript";\nconst counter = new Counter();\nbutton.addEventListener(\n  "click",\n  () => {\n    counter.increment();\n    count.innerText = String(counter.getValue());\n  },\n  false\n);\n'
    }
  },
  {
    name: "Javascript",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://v28.livecodes.io/livecodes/assets/templates/javascript.svg" />\n  <p>You clicked <span id="counter">0</span> times.</p>\n  <button id="counter-button">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "javascript",
      content: 'const title = document.querySelector("#title");\nconst counter = document.querySelector("#counter");\nconst button = document.querySelector("#counter-button");\n\ntitle.innerText = "JavaScript";\nlet count = 0;\n\nbutton.addEventListener("click", () => {\n  count++;\n  counter.innerText = count;\n});\n'
    }
  },
  {
    name: "_hyperscript",
    markup: {
      language: "html",
      content: '<!-- https://htmx.org/docs/#creating-demos -->\n<script src="https://unpkg.com/hyperscript.org@0.9.11"><\/script>\n\n<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://hyperscript.org/img/transparent_logo.png" />\n  <p>You clicked <span id="result">0</span> times.</p>\n  <button _="on click increment :x then put it into #result">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 200px;\n}\n"
    },
    script: {
      language: "js",
      content: ""
    }
  },
  {
    name: "HTMX",
    markup: {
      language: "html",
      content: '<!-- https://htmx.org/docs/#creating-demos -->\n<script src="https://demo.htmx.org"><\/script>\n\n<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://bigsky.software/img/htmx.png" />\n  <p>You clicked <output id="result">0</output> times.</p>\n  <!-- post to /foo -->\n  <button hx-post="/foo" hx-target="#result">Click me</button>\n</div>\n\n<!-- respond to /foo with some dynamic content in a template tag -->\n<script>\n  globalInt = 1;\n<\/script>\n\n<!-- note the url and delay attributes -->\n<template url="/foo" delay="250">\n  ${globalInt++}\n</template>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 200px;\n}\n"
    },
    script: {
      language: "javascript",
      content: ""
    }
  },
  {
    name: "VanJS",
    activeEditor: "script",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://vanjs.org/logo.svg" />\n  <p>You clicked <span id="counter">0</span> times.</p>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n"
    },
    script: {
      language: "javascript",
      content: '// https://vanjs.org/tutorial#state\n// derived from: https://jsfiddle.net/gh/get/library/pure/vanjs-org/vanjs-org.github.io/tree/master/jsfiddle/tutorial/state\nimport van from "https://cdn.jsdelivr.net/gh/vanjs-org/van/public/van-1.2.8.min.js"\n\nconst {button} = van.tags\n\n// Create a new state object with init value 0\nconst counter = van.state(0)\n\n// Log whenever the value of the state is updated\nvan.derive(() => document.querySelector("#counter").innerText = counter.val)\n\n// Button to increment the value of the state\nconst incrementBtn = button({id: "counter-button", onclick: () => ++counter.val}, "Click me")\n\nvan.add(document.querySelector(".container"), incrementBtn)\n'
    }
  },
  {
    name: "Open-props (CSS)",
    activeEditor: "style",
    markup: {
      language: "html",
      content: '<!-- src: https://codepen.io/argyleink/pen/XWaYyWe -->\n\n<header>\n  <h3>Scheme</h3>\n  <form id="theme-switcher">\n    <div>\n      <input checked type="radio" id="auto" name="theme" value="auto" />\n      <label for="auto">Auto</label>\n    </div>\n    <div>\n      <input type="radio" id="light" name="theme" value="light" />\n      <label for="light">Light</label>\n    </div>\n    <div>\n      <input type="radio" id="dark" name="theme" value="dark" />\n      <label for="dark">Dark</label>\n    </div>\n    <div>\n      <input type="radio" id="dim" name="theme" value="dim" />\n      <label for="dim">Dim</label>\n    </div>\n    <div>\n      <input type="radio" id="grape" name="theme" value="grape" />\n      <label for="grape">Grape</label>\n    </div>\n    <div>\n      <input type="radio" id="choco" name="theme" value="choco" />\n      <label for="choco">Choco</label>\n    </div>\n  </form>\n</header>\n\n<main>\n  <section>\n    <div class="surface-samples">\n      <div class="surface-1 rad-shadow">1</div>\n      <div class="surface-2 rad-shadow">2</div>\n      <div class="surface-3 rad-shadow">3</div>\n      <div class="surface-4 rad-shadow">4</div>\n    </div>\n  </section>\n\n  <section>\n    <div class="text-samples">\n      <h1 class="text-1">\n        <span class="swatch brand rad-shadow"></span>\n        Brand\n      </h1>\n      <h1 class="text-1">\n        <span class="swatch text-1 rad-shadow"></span>\n        Text Color 1\n      </h1>\n      <h1 class="text-2">\n        <span class="swatch text-2 rad-shadow"></span>\n        Text Color 2\n      </h1>\n      <br />\n      <p class="text-1">\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n        tempor incididunt ut labore et dolore magna aliqua.\n      </p>\n      <p class="text-2">\n        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\n        ut aliquip ex ea commodo consequat.\n      </p>\n    </div>\n  </section>\n</main>\n'
    },
    style: {
      language: "css",
      content: '@import "https://unpkg.com/open-props";\n@import "https://unpkg.com/open-props/gray-hsl.min.css";\n@import "https://unpkg.com/open-props/purple-hsl.min.css";\n@import "https://unpkg.com/open-props/choco-hsl.min.css"; \n\nhtml {\n  /* light */\n  --brand-light: var(--orange-6);\n  --text-1-light: var(--gray-8);\n  --text-2-light: var(--gray-7);\n  --surface-1-light: var(--gray-0);\n  --surface-2-light: var(--gray-1);\n  --surface-3-light: var(--gray-2);\n  --surface-4-light: var(--gray-3);\n  --surface-shadow-light: var(--gray-8-hsl);\n  --shadow-strength-light: 2%;\n\n  /* dark */\n  --brand-dark: var(--orange-3);\n  --text-1-dark: var(--gray-3);\n  --text-2-dark: var(--gray-5);\n  --surface-1-dark: var(--gray-12);\n  --surface-2-dark: var(--gray-11);\n  --surface-3-dark: var(--gray-10);\n  --surface-4-dark: var(--gray-9);\n  --surface-shadow-dark: var(--gray-12-hsl);\n  --shadow-strength-dark: 80%;\n\n  /* dim */\n  --brand-dim: var(--orange-4);\n  --text-1-dim: var(--gray-3);\n  --text-2-dim: var(--gray-4);\n  --surface-1-dim: var(--gray-8);\n  --surface-2-dim: var(--gray-7);\n  --surface-3-dim: var(--gray-6);\n  --surface-4-dim: var(--gray-5);\n  --surface-shadow-dim: var(--gray-9-hsl);\n  --shadow-strength-dim: 20%;\n  \n  /* grape */\n  --brand-grape: var(--purple-5);\n  --text-1-grape: var(--purple-9);\n  --text-2-grape: var(--purple-7);\n  --surface-1-grape: var(--purple-0);\n  --surface-2-grape: var(--purple-1);\n  --surface-3-grape: var(--purple-2);\n  --surface-4-grape: var(--purple-3);\n  --surface-shadow-grape: var(--purple-12-hsl);\n  --shadow-strength-grape: 2%;\n  \n  /* choco */\n  --brand-choco: var(--choco-5);\n  --text-1-choco: var(--choco-1);\n  --text-2-choco: var(--choco-2);\n  --surface-1-choco: var(--choco-12);\n  --surface-2-choco: var(--choco-11);\n  --surface-3-choco: var(--choco-10);\n  --surface-4-choco: var(--choco-9);\n  --surface-shadow-choco: 25deg 65% 11%;\n  --shadow-strength-choco: 50%;\n}\n\n:root {\n  color-scheme: light;\n\n  /* set defaults */\n  --brand: var(--brand-light);\n  --text-1: var(--text-1-light);\n  --text-2: var(--text-2-light);\n  --surface-1: var(--surface-1-light);\n  --surface-2: var(--surface-2-light);\n  --surface-3: var(--surface-3-light);\n  --surface-4: var(--surface-4-light);\n  --surface-shadow: var(--surface-shadow-light);\n  --shadow-strength: var(--shadow-strength-light);\n}\n\n@media (color-index: 48) {\n  :root {\n    color-scheme: dark;\n\n    --brand: var(--brand-dark);\n    --text-1: var(--text-1-dark);\n    --text-2: var(--text-2-dark);\n    --surface-1: var(--surface-1-dark);\n    --surface-2: var(--surface-2-dark);\n    --surface-3: var(--surface-3-dark);\n    --surface-4: var(--surface-4-dark);\n    --surface-shadow: var(--surface-shadow-dark);\n    --shadow-strength: var(--shadow-strength-dark);\n  }\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    color-scheme: dark;\n\n    --brand: var(--brand-dark);\n    --text-1: var(--text-1-dark);\n    --text-2: var(--text-2-dark);\n    --surface-1: var(--surface-1-dark);\n    --surface-2: var(--surface-2-dark);\n    --surface-3: var(--surface-3-dark);\n    --surface-4: var(--surface-4-dark);\n    --surface-shadow: var(--surface-shadow-dark);\n    --shadow-strength: var(--shadow-strength-dark);\n  }\n}\n\n[color-scheme="light"] {\n  color-scheme: light;\n\n  --brand: var(--brand-light);\n  --text-1: var(--text-1-light);\n  --text-2: var(--text-2-light);\n  --surface-1: var(--surface-1-light);\n  --surface-2: var(--surface-2-light);\n  --surface-3: var(--surface-3-light);\n  --surface-4: var(--surface-4-light);\n  --surface-shadow: var(--surface-shadow-light);\n  --shadow-strength: var(--shadow-strength-light);\n}\n\n[color-scheme="dark"] {\n  color-scheme: dark;\n  \n  --brand: var(--brand-dark);\n  --text-1: var(--text-1-dark);\n  --text-2: var(--text-2-dark);\n  --surface-1: var(--surface-1-dark);\n  --surface-2: var(--surface-2-dark);\n  --surface-3: var(--surface-3-dark);\n  --surface-4: var(--surface-4-dark);\n  --surface-shadow: var(--surface-shadow-dark);\n  --shadow-strength: var(--shadow-strength-dark);\n}\n\n[color-scheme="dim"] {\n  color-scheme: dark;\n\n  --brand: var(--brand-dim);\n  --text-1: var(--text-1-dim);\n  --text-2: var(--text-2-dim);\n  --surface-1: var(--surface-1-dim);\n  --surface-2: var(--surface-2-dim);\n  --surface-3: var(--surface-3-dim);\n  --surface-4: var(--surface-4-dim);\n  --surface-shadow: var(--surface-shadow-dim);\n  --shadow-strength: var(--shadow-strength-dim);\n}\n\n[color-scheme="grape"] {\n  color-scheme: light;\n\n  --brand: var(--brand-grape);\n  --text-1: var(--text-1-grape);\n  --text-2: var(--text-2-grape);\n  --surface-1: var(--surface-1-grape);\n  --surface-2: var(--surface-2-grape);\n  --surface-3: var(--surface-3-grape);\n  --surface-4: var(--surface-4-grape);\n  --surface-shadow: var(--surface-shadow-grape);\n  --shadow-strength: var(--shadow-strength-grape);\n}\n\n[color-scheme="choco"] {\n  color-scheme: light;\n\n  --brand: var(--brand-choco);\n  --text-1: var(--text-1-choco);\n  --text-2: var(--text-2-choco);\n  --surface-1: var(--surface-1-choco);\n  --surface-2: var(--surface-2-choco);\n  --surface-3: var(--surface-3-choco);\n  --surface-4: var(--surface-4-choco);\n  --surface-shadow: var(--surface-shadow-choco);\n  --shadow-strength: var(--shadow-strength-choco);\n}\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n}\n\nhtml {\n  height: 100%;\n  background-color: var(--gray-0);\n  background-color: var(--surface-1);\n  color: var(--gray-8);\n  color: var(--text-1);\n  accent-color: var(--orange-6);\n  accent-color: var(--brand);\n}\n\nbody {\n  min-height: 100%;\n  font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif;\n  padding: var(--size-6);\n  display: grid;\n  align-content: center;\n  justify-content: center;\n  place-content: center;\n  grid-gap: var(--size-6);\n  gap: var(--size-6);\n}\n\nmain {\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n  grid-gap: var(--size-10);\n  gap: var(--size-10);\n}\n\nsection {\n  display: grid;\n  grid-gap: var(--size-6);\n  gap: var(--size-6);\n}\n\nh1 {\n  font-weight: var(--font-weight-1);\n}\n\np {\n  max-width: var(--size-content-1);\n  font-size: var(--font-size-4);\n  line-height: var(--font-lineheight-3);\n}\n\nheader {\n  display: inline-grid;\n  grid-gap: var(--size-3);\n  gap: var(--size-3);\n}\n\nform {\n  display: flex;\n  grid-gap: var(--size-5);\n  gap: var(--size-5)\n}\n\nform > div {\n    display: inline-flex;\n    align-items: center;\n    grid-gap: var(--size-2);\n    gap: var(--size-2);\n  }\n\n.surface-samples {\n  display: grid;\n  --size: var(--size-content-1);\n  grid-template-columns: var(--size) var(--size);\n  grid-auto-rows: var(--size);\n  grid-gap: var(--size-5);\n  gap: var(--size-5)\n}\n\n@media (max-width: 480px) { .surface-samples {\n    --size: 40vw;\n  }}\n\n.surface-samples > * {\n    border-radius: var(--radius-3);\n    display: grid;\n    align-content: center;\n    justify-content: center;\n    place-content: center;\n    font-size: var(--font-size-8);\n    font-weight: var(--font-weight-2);\n  }\n\n.text-samples {\n  display: grid;\n  grid-gap: var(--size-4);\n  gap: var(--size-4)\n}\n\n.text-samples > h1 {\n    font-size: var(--font-size-6);\n    display: inline-flex;\n    align-items: center;\n    grid-gap: var(--size-3);\n    gap: var(--size-3);\n  }\n\n.brand {\n  color: var(--orange-6);\n  color: var(--brand);\n  background-color: var(--orange-6);\n  background-color: var(--brand);\n}\n\n.surface-1 {\n  background-color: var(--gray-0);\n  background-color: var(--surface-1);\n  color: var(--gray-7);\n  color: var(--text-2);\n}\n\n.surface-2 {\n  background-color: var(--gray-1);\n  background-color: var(--surface-2);\n  color: var(--gray-7);\n  color: var(--text-2);\n}\n\n.surface-3 {\n  background-color: var(--gray-2);\n  background-color: var(--surface-3);\n  color: var(--gray-8);\n  color: var(--text-1);\n}\n\n.surface-4 {\n  background-color: var(--gray-3);\n  background-color: var(--surface-4);\n  color: var(--gray-8);\n  color: var(--text-1);\n}\n\n.text-1 {\n  color: var(--gray-8);\n  color: var(--text-1)\n}\n\np.text-1 {\n    font-weight: var(--font-weight-2)\n}\n\n.text-2 {\n  color: var(--gray-7);\n  color: var(--text-2);\n}\n\n.swatch {\n  display: inline-block;\n  flex-shrink: 0;\n  width: var(--size-8);\n  height: var(--size-8);\n  border-radius: var(--radius-round)\n}\n\n.swatch.text-1 { background-color: var(--gray-8); background-color: var(--text-1); }\n\n.swatch.text-2 { background-color: var(--gray-7); background-color: var(--text-2); }\n\n.rad-shadow {\n  border: 1px solid hsl(var(--brand-hue) 10% 50% / 15%);\n  box-shadow: 0 1rem .5rem -.5rem;\n  box-shadow:\n    0 2.8px 2.2px hsl(var(--gray-8-hsl) / calc(2% + 3%)),\n    0 6.7px 5.3px hsl(var(--gray-8-hsl) / calc(2% + 1%)),\n    0 12.5px 10px hsl(var(--gray-8-hsl) / calc(2% + 2%)),\n    0 22.3px 17.9px hsl(var(--gray-8-hsl) / calc(2% + 2%)),\n    0 41.8px 33.4px hsl(var(--gray-8-hsl) / calc(2% + 3%)),\n    0 100px 80px hsl(var(--gray-8-hsl) / 2%);\n  box-shadow:\n    0 2.8px 2.2px hsl(var(--surface-shadow) / calc(var(--shadow-strength) + 3%)),\n    0 6.7px 5.3px hsl(var(--surface-shadow) / calc(var(--shadow-strength) + 1%)),\n    0 12.5px 10px hsl(var(--surface-shadow) / calc(var(--shadow-strength) + 2%)),\n    0 22.3px 17.9px hsl(var(--surface-shadow) / calc(var(--shadow-strength) + 2%)),\n    0 41.8px 33.4px hsl(var(--surface-shadow) / calc(var(--shadow-strength) + 3%)),\n    0 100px 80px hsl(var(--surface-shadow) / var(--shadow-strength))\n  ;\n}'
    },
    script: {
      language: "javascript",
      content: "const switcher = document.querySelector('#theme-switcher');\nconst doc = document.firstElementChild;\n\nswitcher.addEventListener('input', (e) =>\nsetTheme(e.target.value));\n\nconst setTheme = (theme) =>\ndoc.setAttribute('color-scheme', theme);"
    }
  },
  {
    name: "modulo.js",
    activeEditor: "markup",
    markup: {
      language: "html",
      content: '\n<template Modulo>\n  <Component name="HelloCount">\n    <Template>\n      <div class="container">\n        <h1>Hello, {{ state.title }}!</h1>\n        <img class="logo" alt="logo" src="https://modulojs.org/static/images/modulo_logo.svg" />\n        <p>You clicked <span id="counter">{{ state.num }}</span> times.</p>\n        <button @click:=script.countUp>Click me</button>\n      </div>\n    </Template>\n    <State\n        num:=0\n        title="world"\n    ></State>\n    <Script>\n        function countUp() {\n            state.num++;\n        }\n    <\/Script>\n  </Component>\n</template>\n\n<script src="https://unpkg.com/mdu.js"><\/script>\n\n<x-HelloCount></x-HelloCount>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 125px;\n}\n"
    },
    script: {
      language: "javascript",
      content: ""
    }
  },
  {
    name: "Reef.js",
    activeEditor: "markup",
    markup: {
      language: "html",
      content: '<!-- src: https://github.com/cferdinandi/reef/blob/master/demos/web-components.html -->\n\n<div id="app"></div>\n\n<!-- Get the latest major version -->\n<script src="https://cdn.jsdelivr.net/npm/reefjs@13/dist/reef.min.js"><\/script>\n\n<script>\n  let {signal, component} = reef;\n\n  // Create a signal\n  let data = signal({\n      title: "world"\n  });\n\n  // Create a template\n  function template () {\n  	let {heading, title} = data;\n  	return `<div class="container">\n  		<h1>Hello,  ${title}!</h1>\n        <!-- <img class="logo" alt="logo" src="https://lemonadejs.net/templates/default/img/logo.svg" /> -->\n        <svg xmlns="http://www.w3.org/2000/svg" class="logo" viewBox="0 0 56 83"><title></title><path fill="#73CFFA" fill-rule="nonzero" d="M5.159 46.847c-.87.147-1.676.218-2.394.208a2.716 2.716 0 00-1.938.774A2.71 2.71 0 000 49.749a2.73 2.73 0 002.693 2.764c2.181.031 4.337-.326 6.589-1.09a1.508 1.508 0 011.548.35c2.174 2.126 4.632 3.68 7.012 5.185 5.553 3.517 9.938 6.291 10.286 14.545l-.006 1.038c-.02 2.131-.064 7.063.081 10.11h5.463l-.001-.104a86.437 86.437 0 01-.078-6.825l.004-.03-.004-.098c.076-5.533 4.852-8.295 9.51-10.265 4.494-1.899 8.648-5.25 9.922-7.266.01-.01.014-.02.021-.026 1.252-1.895 2.09-4.082 2.564-6.687a2.69 2.69 0 00-.443-2.041 2.707 2.707 0 00-1.756-1.133 2.713 2.713 0 00-2.043.443 2.715 2.715 0 00-1.131 1.755c-1.127 6.224-4.793 7.889-9.432 10-.787.358-1.678.763-2.561 1.206a1.523 1.523 0 01-1.662-.199 1.519 1.519 0 01-.467-1.605c1.113-3.586 2.5-6.823 3.842-9.953 3.748-8.734 7.623-17.767 6.725-35.157a2.729 2.729 0 00-2.865-2.584c-.729.036-1.4.354-1.887.897a2.716 2.716 0 00-.697 1.969c.254 4.921.121 9.304-.404 13.396a1.523 1.523 0 01-1.133 1.276 1.526 1.526 0 01-1.604-.581c-.695-.96-1.475-1.925-2.523-3.129a2.696 2.696 0 00-1.871-.93 2.705 2.705 0 00-1.98.666 2.735 2.735 0 00-.264 3.851c3.781 4.33 6.949 9.213 4.584 15.549-.014.041-.014.041-.703 1.678l-1.578 3.739a1.519 1.519 0 01-2.85-.135c-1.972-6.355-4.658-11.178-7.256-15.837-1.495-2.683-3.044-5.457-4.408-8.492a1.54 1.54 0 01-.009-1.222c1.072-2.495 2.82-4.696 4.675-7.026 1.79-2.252 3.641-4.58 5.002-7.376l.028-.067a2.724 2.724 0 00-2.443-3.92 2.737 2.737 0 00-2.456 1.548l-.004.011c-.007.014-.012.026-.02.039-1.057 2.187-2.598 4.125-4.382 6.37l-1.267 1.608a1.53 1.53 0 01-1.53.545 1.51 1.51 0 01-1.147-1.139c-.879-3.88-1.424-8.062-1.667-12.781a2.709 2.709 0 00-.9-1.887 2.7 2.7 0 00-1.968-.697A2.7 2.7 0 009.263.9a2.711 2.711 0 00-.697 1.969c.075 1.483.183 2.959.324 4.387a1.519 1.519 0 01-1.587 1.662 13.7 13.7 0 01-3.639-.667A2.737 2.737 0 00.207 9.973a2.735 2.735 0 001.723 3.455c2.095.702 4.284 1.018 6.695.966a1.512 1.512 0 011.515 1.205c1.976 9.423 5.414 15.588 8.736 21.547 2.63 4.721 5.116 9.179 6.958 15.306a1.517 1.517 0 01-2.307 1.689 98.616 98.616 0 00-2.768-1.795c-4.359-2.762-8.127-5.148-9.616-10.262a21.265 21.265 0 01-.582-1.868 2.731 2.731 0 00-3.341-1.933 2.714 2.714 0 00-1.658 1.271 2.7 2.7 0 00-.274 2.07c.352 1.316.674 2.317 1.018 3.15.175.428.147.908-.073 1.313a1.516 1.516 0 01-1.074.76z"></path></svg><span>Reef</span>\n  		<count-up></count-up>\n      </div>`;\n  }\n\n  // Create a reactive component\n  // It automatically renders into the UI\n  component(\'#app\', template);\n<\/script>\n'
    },
    style: {
      language: "css",
      content: 'body {\n  background-color: #20252E;\n  color: white;\n}\n.container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 60px;\n}\n.container span:not(#counter) {\n  font-size: 3.5em;\n  font-family: Georgia, "Times New Roman", Times, serif;\n  color: #73cffa;\n  left: 0.2em;\n  height: fit-content;\n  top: -30px;\n  position: relative;\n}\n'
    },
    script: {
      language: "javascript",
      content: '/**\n * A native web component for counting up\n */\nclass CountUp extends HTMLElement {\n  /**\n   * The class constructor object\n   */\n  constructor() {\n    // Always call super first in constructor\n    super();\n\n    // Define count property\n    this.count = 0;\n\n    // Render HTML\n    this.innerHTML = `<p>You clicked <span id="counter">${this.count}</span> times.</p>\n      <button aria-live="polite">Click me</button>`;\n  }\n\n  /**\n   * Handle click events\n   * @param  {Event} event The event object\n   */\n  clickHandler(event) {\n    // Get the host component\n    let host = event.target.closest("count-up");\n\n    // Get the message element\n    let target = host.querySelector("#counter");\n    if (!target) return;\n\n    // Increase count\n    host.count++;\n    target.textContent = `${host.count}`;\n  }\n\n  /**\n   * Runs each time the element is appended to or moved in the DOM\n   */\n  connectedCallback() {\n    // Attach a click event listener to the button\n    let btn = this.querySelector("button");\n    if (!btn) return;\n    btn.addEventListener("click", this.clickHandler);\n  }\n\n  /**\n   * Runs when the element is removed from the DOM\n   */\n  disconnectedCallback() {\n    // Remove the click event listener from the button\n    let btn = this.querySelector("button");\n    if (!btn) return;\n    btn.removeEventListener("click", this.clickHandler);\n  }\n}\n\n// Define the new web component\nif ("customElements" in window) {\n  customElements.define("count-up", CountUp);\n}\n'
    }
  },
  {
    name: "Arrow.JS",
    activeEditor: "script",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://www.arrow-js.com/assets/logo-1f03ba90.png" />\n  <div id="arrow-app"></div>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 200px;\n}\n"
    },
    script: {
      language: "javascript",
      content: '/**\n * https://www.arrow-js.com/docs/#templates\n */\nimport { reactive, html } from \'https://esm.sh/@arrow-js/core\';\n\nconst appElement = document.getElementById(\'arrow-app\');\n\nconst data = reactive({\n  clicks: 0\n});\n\nconst template = html`\n  <p>You clicked <span id="counter">${() => data.clicks}</span> times.</p>\n  <button id="counter-button" @click="${() => data.clicks++}">Click me</button>\n`;\n\ntemplate(appElement);\n'
    }
  },
  {
    name: "Lemonade.JS",
    activeEditor: "script",
    markup: {
      language: "html",
      content: '<div class="container">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://lemonadejs.net/templates/default/img/logo.svg" />\n  <div id="lemonadejs-app"></div>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 125px;\n}\n"
    },
    script: {
      language: "javascript",
      content: `/**
 * https://lemonadejs.net/docs/getting-started
 */
import lemonade from 'lemonadejs';

const appElement = document.getElementById('lemonadejs-app');

function Counter() {
  let self = this;
  self.count = 0;
  self.add = function() {self.count++;}
  return \`
    <>
      <p>You clicked <span id="counter">{{self.count}}</span> times.</p>
      <button id="counter-button" onclick="self.add()">Click me</button>
    </>
  \`;
}

lemonade.render(Counter, appElement);
`
    }
  },
  {
    name: "Stellar",
    activeEditor: "markup",
    markup: {
      language: "html",
      content: `<!-- src: https://github.com/hawkticehurst/stellar/tree/main/examples/counter -->

<div class="container">
  <h1>Hello, <span id="title">World</span>!</h1>
  <img class="logo" alt="logo" src="https://raw.githubusercontent.com/hawkticehurst/stellar/main/assets/banner.png" />

<counter-button>
  <p>You clicked <span $state="count">0</span> times.</p>
  <button id="counter-button" @click="increment">Click me</button>
</counter-button>

<script type="module">
  import { Stellar } from 'https://www.unpkg.com/stellar-element@0.4.0/build/index.js';
  class CounterButton extends Stellar {
    increment = () => this.count++;
    decrement = () => this.count--;
  }
  customElements.define('counter-button', CounterButton);
<\/script>



<!-- TODO: ADD Obsidian.md "playground" handler for starters -->

`
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 200px;\n}\n"
    },
    script: {
      language: "javascript",
      content: ""
    }
  },
  {
    name: "Alpine.js",
    markup: {
      language: "html",
      content: '<!-- https://dev.to/mohsenkamrani/alpinejs-simple-counter-28li -->\n<script src="https://unpkg.com/alpinejs" defer><\/script>\n\n<div class="container" x-data="{ count: 0 }">\n  <h1>Hello, <span id="title">World</span>!</h1>\n  <img class="logo" alt="logo" src="https://alpinejs.dev/alpine_long.svg" />\n  <p>You clicked <span id="result" x-text="count"></span> times.</p>\n  <button x-on:click="count++">Click me</button>\n</div>\n'
    },
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 200px;\n}\n"
    },
    script: {
      language: "javascript",
      content: ""
    }
  },
  {
    name: "SCSS",
    activeEditor: "style",
    markup: {
      language: "html",
      content: '\n<div class="content">\n  Eu reprehenderit consectetur amet eu enim proident nisi ea reprehenderit ut enim. Ullamco consectetur excepteur labore amet qui amet labore tempor cillum amet do officia. Elit consectetur do cillum ad sit do anim. Do consequat ut sint Lorem elit et ex mollit.\n</div>\n\n\n<div class="footer">\n  Eu reprehenderit consectetur amet eu enim proident nisi ea reprehenderit ut enim. Ullamco consectetur excepteur labore amet qui amet labore tempor cillum amet do officia. Elit consectetur do cillum ad sit do anim. Do consequat ut sint Lorem elit et ex mollit.\n</div>\n\n'
    },
    style: {
      language: "scss",
      content: "$fontFamily: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n$monoFamily: 'Courier New', Courier, monospace;\nbody {\n  background-color:#000;\n  font-family: $fontFamily;\n}\n$color: #fefefe;\n.content {\n  background-color: $color;\n  padding: 1em;\n  margin-block-end: .5em;\n  border-radius: 8px;\n}\n\n$color: #939393;\n.footer {\n  background-color: $color;\n  padding: 1em;\n  border-radius: 8px;\n  font-family: $monoFamily;\n  color: white;\n}"
    },
    script: {
      language: "javascript",
      content: ""
    }
  },
  {
    name: "Bulma (CSS)",
    activeEditor: "style",
    style: {
      language: "css",
      content: '@import "https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css";\n\n.logo {\n  width: 200px;\n  margin-bottom: 2em;\n}'
    },
    markup: {
      language: "html",
      content: '<section class="section">\n  <div class="container">\n    <img src="https://bulma.io/images/bulma-logo.png" class="logo" />\n    <h1 class="title">Hello World</h1>\n    <p class="subtitle">My first website with <strong>Bulma</strong>!</p>\n  </div>\n</section>\n'
    },
    script: {
      language: "javascript",
      content: ""
    }
  },
  {
    name: "Preact",
    activeEditor: "script",
    style: {
      language: "css",
      content: ".container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}"
    },
    markup: {
      language: "html",
      content: '<div id="app"></div>'
    },
    script: {
      language: "jsx",
      content: `/** @jsx h */
import { h, render } from 'preact';
import { useSignal } from "@preact/signals?deps=preact";

function App(props) {
  const count = useSignal(0);
  return (
    <div class="container">
      <h1>Hello, {props.name}!</h1>
      <img className="logo" alt="logo" src="https://livecodes.io/livecodes/assets/templates/preact.svg" />
      <p>You clicked {count} times.</p>
      <button onClick={() => count.value++}>Click me</button>
    </div>
  );
}

render(<App name="Preact" />, document.body);`
    }
  }
];

// src/modals/StarterSelect.ts
var StarterSelectModal = class extends import_obsidian16.FuzzySuggestModal {
  constructor(plugin) {
    super(plugin.app);
    this.createText = async (fileContent) => {
      return fileContent == null ? void 0 : fileContent.trim();
    };
    this.plugin = plugin;
    this.vault = plugin.app.vault;
    this.containerEl.addClass("starter-select-modal");
    this.setPlaceholder("Select a starter or type to search");
  }
  getItems() {
    return livecodesStarters.sort((a, b2) => {
      return a.name.localeCompare(b2.name);
    });
  }
  getItemText(item) {
    return item.name;
  }
  renderSuggestion(match, el2) {
    super.renderSuggestion(match, el2);
  }
  async onChooseItem(starter) {
    await saveAsModal(this.app, "New livecodes playground", "Save as:", "", "e.g. New Playground", false).then(
      async (fName) => {
        if ((fName == null ? void 0 : fName.length) === 0) {
          return;
        }
        let newPlayground = blankPlayground;
        let foundHead = starter.head !== void 0;
        let foundProcessors = starter.processors !== void 0;
        let foundMarkup = starter.markup !== void 0;
        let foundStyle = starter.style !== void 0;
        let foundScript = starter.script !== void 0;
        let foundStylesheets = starter.stylesheets !== void 0;
        let foundScripts = starter.scripts !== void 0;
        let foundCustomSettings = starter.customSettings !== void 0;
        if (foundHead) {
          newPlayground.head = starter.head;
        }
        if (foundProcessors) {
          newPlayground.processors = starter.processors;
        }
        if (foundMarkup) {
          newPlayground.markup.content = starter.markup.content;
          newPlayground.markup.language = starter.markup.language;
        }
        if (foundStyle) {
          newPlayground.style.content = starter.style.content;
          newPlayground.style.language = starter.style.language;
        }
        if (foundScript) {
          newPlayground.script.content = starter.script.content;
          newPlayground.script.language = starter.script.language;
        }
        if (foundStylesheets) {
          newPlayground.stylesheets = starter.stylesheets;
        }
        if (foundScripts) {
          newPlayground.scripts = starter.scripts;
        }
        if (foundCustomSettings) {
          newPlayground.customSettings = starter.customSettings;
        }
        if (starter.activeEditor !== void 0) {
          newPlayground.activeEditor = starter.activeEditor;
        }
        newPlayground.title = fName;
        newPlayground.appUrl = this.plugin.settings.appUrl;
        newPlayground.fontFamily = this.plugin.settings.fontFamily;
        newPlayground.fontSize = this.plugin.settings.fontSize;
        newPlayground.editor = this.plugin.settings.editor;
        newPlayground.editorTheme = this.plugin.settings.editorTheme;
        newPlayground.lineNumbers = this.plugin.settings.lineNumbers;
        newPlayground.theme = this.plugin.settings.darkTheme ? "dark" : "light";
        newPlayground.layout = this.plugin.settings.layout;
        newPlayground.useTabs = this.plugin.settings.useTabs;
        newPlayground.tabSize = this.plugin.settings.tabSize;
        newPlayground.closeBrackets = this.plugin.settings.closeBrackets;
        newPlayground.semicolons = this.plugin.settings.semicolons;
        newPlayground.singleQuote = this.plugin.settings.singleQuote;
        newPlayground.trailingComma = this.plugin.settings.trailingComma;
        newPlayground.wordWrap = this.plugin.settings.wordWrap;
        newPlayground.enableAI = this.plugin.settings.enableAI;
        newPlayground.autoupdate = this.plugin.settings.autoUpdate;
        newPlayground.delay = this.plugin.settings.delay;
        let prettyCfg = JSON.stringify(newPlayground, null, 2);
        try {
          await this.app.vault.create(
            this.plugin.settings.playgroundFolder + "/" + fName + ".json",
            await this.createText(
              prettyCfg
            )
          ).then(
            async (f2) => {
              this.plugin.settings.jsonTemplate = f2;
              await this.plugin.saveSettings();
              await this.plugin.activatePlaygroundView();
            }
          );
          showNotice("New playground saved as: " + this.plugin.settings.playgroundFolder + "/" + fName + ".json", 3e3, "success");
        } catch (error) {
          showNotice(this.plugin.settings.playgroundFolder + "/" + fName + ".json - " + error + " Click this message to dismiss.", 0, "error");
        }
      }
    );
  }
};

// src/modals/LanguageSelect.ts
var import_obsidian17 = require("obsidian");
var LanguageSelectModal = class extends import_obsidian17.Modal {
  constructor(app2, plugin, title, changes, callback) {
    super(app2);
    this.createText = async (fileContent) => {
      return fileContent == null ? void 0 : fileContent.trim();
    };
    this.app = app2;
    this.plugin = plugin;
    this.vault = this.app.vault;
    this.containerEl.addClass("language-select-modal");
    this.title = title;
    this.changes = changes;
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    this.contentEl.addClass("livecodes-language-select-modal");
    contentEl.empty();
    if (this.title)
      this.titleEl.setText(this.title);
    new import_obsidian17.Setting(contentEl).setName("Title").addText(
      (text4) => text4.setPlaceholder("New Playground").setValue(this.changes.title).onChange(async (newValue) => {
        this.changes.title = newValue;
      })
    );
    new import_obsidian17.Setting(contentEl).setName("Markup").setClass("dropdown-markup-select").addDropdown((dropdown) => {
      codeLanguages().markup.forEach(({ name, title }) => {
        dropdown.addOption(name, title);
      });
      dropdown.setValue(this.changes.markup).onChange(async (newValue) => {
        this.changes.markup = newValue;
      });
    });
    new import_obsidian17.Setting(contentEl).setName("Style").setClass("dropdown-style-select").addDropdown((dropdown) => {
      codeLanguages().style.forEach(({ name, title, processor }) => {
        if (!processor) {
          dropdown.addOption(name, title);
        }
      });
      dropdown.setValue(this.changes.style).onChange(async (newValue) => {
        this.changes.style = newValue;
      });
    });
    let isExpanded = false;
    new import_obsidian17.Setting(contentEl).setName("CSS processing").setHeading().addExtraButton((component) => {
      component.setIcon("chevron-right").setTooltip("Show processors", { "placement": "left" }).onClick(() => {
        let toggles = activeDocument.querySelectorAll(".processor-toggle");
        if (!isExpanded) {
          component.setIcon("chevron-down").setTooltip("Hide processors", { "placement": "left" });
          isExpanded = true;
          toggles.forEach((toggle) => {
            toggle.setAttribute("style", "display:flex;");
          });
        } else {
          component.setIcon("chevron-right").setTooltip("Show processors", { "placement": "left" });
          isExpanded = false;
          toggles.forEach((toggle) => {
            toggle.setAttribute("style", "display:none;");
          });
        }
      });
    }).then((c) => {
      c.components.forEach((element2) => {
        element2.extraSettingsEl.setAttribute("tabindex", "0");
        element2.extraSettingsEl.addEventListener("keydown", (evt) => {
          const keyDown = evt.key;
          if (keyDown === "Enter" || ["Spacebar", " "].indexOf(keyDown) >= 0) {
            evt.preventDefault();
            element2.extraSettingsEl.click();
          }
        });
      });
    });
    new import_obsidian17.Setting(contentEl).setName("Tailwind CSS").setClass("processor-toggle").addToggle(
      (toggle) => toggle.setValue(this.changes.twcss).onChange(async (newValue) => {
        this.changes.twcss = newValue;
      })
    );
    new import_obsidian17.Setting(contentEl).setName("Windy CSS").setClass("processor-toggle").addToggle(
      (toggle) => toggle.setValue(this.changes.windicss).onChange(async (newValue) => {
        this.changes.windicss = newValue;
      })
    );
    new import_obsidian17.Setting(contentEl).setName("Uno CSS").setClass("processor-toggle").addToggle(
      (toggle) => toggle.setValue(this.changes.unocss).onChange(async (newValue) => {
        this.changes.unocss = newValue;
      })
    );
    new import_obsidian17.Setting(contentEl).setName("Lightning CSS").setClass("processor-toggle").addToggle(
      (toggle) => toggle.setValue(this.changes.lightningcss).onChange(async (newValue) => {
        this.changes.lightningcss = newValue;
      })
    );
    new import_obsidian17.Setting(contentEl).setName("Script").setClass("dropdown-script-select").addDropdown((dropdown) => {
      codeLanguages().script.forEach(({ name, title }) => {
        dropdown.addOption(name, title);
      });
      dropdown.setValue(this.changes.script).onChange(async (newValue) => {
        this.changes.script = newValue;
      });
    });
    const buttonDiv = contentEl.createDiv({
      cls: "modal-button-container"
    });
    new import_obsidian17.ButtonComponent(buttonDiv).setButtonText("Create").setCta().onClick(() => {
      this.onOK();
    }).setCta();
    new import_obsidian17.ButtonComponent(buttonDiv).setButtonText("Cancel").onClick(() => {
      this.close();
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  onOK() {
    this.callback(this.changes);
    this.close();
  }
};

// src/modals/codepenUrl.ts
var import_obsidian18 = require("obsidian");
var CodepenUrlModal = class extends import_obsidian18.Modal {
  constructor(app2, title, message, messagDefault = "", placeholder = "", multiLine = false, callback) {
    super(app2);
    this.title = title;
    this.message = message;
    this.messagDefault = messagDefault;
    this.placeholder = placeholder;
    this.multiLine = multiLine;
    this.callback = callback;
  }
  onOpen() {
    const { contentEl } = this;
    this.containerEl.addClass("livecodes-prompt-modal");
    contentEl.empty();
    if (this.title)
      this.titleEl.setText(this.title);
    if (this.message)
      contentEl.createEl("p").setText(this.message);
    if (this.multiLine) {
      this.textComponent = new import_obsidian18.TextAreaComponent(contentEl);
    } else {
      this.textComponent = new import_obsidian18.TextComponent(contentEl);
    }
    this.textComponent.setValue(this.messagDefault).setPlaceholder(this.placeholder).then((cb) => {
      cb.inputEl.addClass("prompt-input");
      cb.inputEl.addEventListener("keydown", (event) => {
        if (!event.shiftKey && event.key === "Enter") {
          this.onOK();
          event.preventDefault();
        }
      });
    });
    const buttonDiv = contentEl.createDiv({
      cls: "modal-button-container"
    });
    new import_obsidian18.ButtonComponent(buttonDiv).setButtonText("OK").setCta().onClick(() => {
      this.onOK();
    }).setCta();
    new import_obsidian18.ButtonComponent(buttonDiv).setButtonText("Cancel").onClick(() => {
      this.close();
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
  onOK() {
    this.callback(this.textComponent.getValue());
    this.close();
  }
};
async function codepenUrlModal(app2, title, message, messagDefault = "", placeholder = "", multiLine = false, callback) {
  return await new Promise((resolve, reject) => {
    new CodepenUrlModal(
      app2,
      title,
      message,
      messagDefault,
      placeholder,
      multiLine,
      callback != null ? callback : (text4) => {
        resolve(text4);
      }
    ).open();
  });
}

// node_modules/cheerio/lib/esm/options.js
var defaultOpts = {
  xml: false,
  decodeEntities: true
};
var options_default = defaultOpts;
var xmlModeDefault = {
  _useHtmlParser2: true,
  xmlMode: true
};
function flatten(options) {
  return (options === null || options === void 0 ? void 0 : options.xml) ? typeof options.xml === "boolean" ? xmlModeDefault : { ...xmlModeDefault, ...options.xml } : options !== null && options !== void 0 ? options : void 0;
}

// node_modules/cheerio/lib/esm/static.js
var static_exports = {};
__export(static_exports, {
  contains: () => contains,
  html: () => html,
  merge: () => merge2,
  parseHTML: () => parseHTML,
  root: () => root,
  text: () => text2,
  xml: () => xml
});

// node_modules/domutils/lib/esm/index.js
var esm_exports2 = {};
__export(esm_exports2, {
  DocumentPosition: () => DocumentPosition,
  append: () => append2,
  appendChild: () => appendChild,
  compareDocumentPosition: () => compareDocumentPosition,
  existsOne: () => existsOne,
  filter: () => filter,
  find: () => find,
  findAll: () => findAll,
  findOne: () => findOne,
  findOneChild: () => findOneChild,
  getAttributeValue: () => getAttributeValue,
  getChildren: () => getChildren,
  getElementById: () => getElementById,
  getElements: () => getElements,
  getElementsByTagName: () => getElementsByTagName,
  getElementsByTagType: () => getElementsByTagType,
  getFeed: () => getFeed,
  getInnerHTML: () => getInnerHTML,
  getName: () => getName,
  getOuterHTML: () => getOuterHTML,
  getParent: () => getParent,
  getSiblings: () => getSiblings,
  getText: () => getText,
  hasAttrib: () => hasAttrib,
  hasChildren: () => hasChildren,
  innerText: () => innerText,
  isCDATA: () => isCDATA,
  isComment: () => isComment,
  isDocument: () => isDocument,
  isTag: () => isTag2,
  isText: () => isText,
  nextElementSibling: () => nextElementSibling,
  prepend: () => prepend,
  prependChild: () => prependChild,
  prevElementSibling: () => prevElementSibling,
  removeElement: () => removeElement,
  removeSubsets: () => removeSubsets,
  replaceElement: () => replaceElement,
  testElement: () => testElement,
  textContent: () => textContent,
  uniqueSort: () => uniqueSort
});

// node_modules/domelementtype/lib/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  CDATA: () => CDATA,
  Comment: () => Comment,
  Directive: () => Directive,
  Doctype: () => Doctype,
  ElementType: () => ElementType,
  Root: () => Root,
  Script: () => Script,
  Style: () => Style,
  Tag: () => Tag,
  Text: () => Text,
  isTag: () => isTag
});
var ElementType;
(function(ElementType2) {
  ElementType2["Root"] = "root";
  ElementType2["Text"] = "text";
  ElementType2["Directive"] = "directive";
  ElementType2["Comment"] = "comment";
  ElementType2["Script"] = "script";
  ElementType2["Style"] = "style";
  ElementType2["Tag"] = "tag";
  ElementType2["CDATA"] = "cdata";
  ElementType2["Doctype"] = "doctype";
})(ElementType || (ElementType = {}));
function isTag(elem) {
  return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
}
var Root = ElementType.Root;
var Text = ElementType.Text;
var Directive = ElementType.Directive;
var Comment = ElementType.Comment;
var Script = ElementType.Script;
var Style = ElementType.Style;
var Tag = ElementType.Tag;
var CDATA = ElementType.CDATA;
var Doctype = ElementType.Doctype;

// node_modules/domhandler/lib/esm/node.js
var Node = class {
  constructor() {
    this.parent = null;
    this.prev = null;
    this.next = null;
    this.startIndex = null;
    this.endIndex = null;
  }
  // Read-write aliases for properties
  /**
   * Same as {@link parent}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get parentNode() {
    return this.parent;
  }
  set parentNode(parent2) {
    this.parent = parent2;
  }
  /**
   * Same as {@link prev}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get previousSibling() {
    return this.prev;
  }
  set previousSibling(prev2) {
    this.prev = prev2;
  }
  /**
   * Same as {@link next}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get nextSibling() {
    return this.next;
  }
  set nextSibling(next2) {
    this.next = next2;
  }
  /**
   * Clone this node, and optionally its children.
   *
   * @param recursive Clone child nodes as well.
   * @returns A clone of the node.
   */
  cloneNode(recursive = false) {
    return cloneNode(this, recursive);
  }
};
var DataNode = class extends Node {
  /**
   * @param data The content of the data node
   */
  constructor(data2) {
    super();
    this.data = data2;
  }
  /**
   * Same as {@link data}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get nodeValue() {
    return this.data;
  }
  set nodeValue(data2) {
    this.data = data2;
  }
};
var Text2 = class extends DataNode {
  constructor() {
    super(...arguments);
    this.type = ElementType.Text;
  }
  get nodeType() {
    return 3;
  }
};
var Comment2 = class extends DataNode {
  constructor() {
    super(...arguments);
    this.type = ElementType.Comment;
  }
  get nodeType() {
    return 8;
  }
};
var ProcessingInstruction = class extends DataNode {
  constructor(name, data2) {
    super(data2);
    this.name = name;
    this.type = ElementType.Directive;
  }
  get nodeType() {
    return 1;
  }
};
var NodeWithChildren = class extends Node {
  /**
   * @param children Children of the node. Only certain node types can have children.
   */
  constructor(children3) {
    super();
    this.children = children3;
  }
  // Aliases
  /** First child of the node. */
  get firstChild() {
    var _a3;
    return (_a3 = this.children[0]) !== null && _a3 !== void 0 ? _a3 : null;
  }
  /** Last child of the node. */
  get lastChild() {
    return this.children.length > 0 ? this.children[this.children.length - 1] : null;
  }
  /**
   * Same as {@link children}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get childNodes() {
    return this.children;
  }
  set childNodes(children3) {
    this.children = children3;
  }
};
var CDATA2 = class extends NodeWithChildren {
  constructor() {
    super(...arguments);
    this.type = ElementType.CDATA;
  }
  get nodeType() {
    return 4;
  }
};
var Document = class extends NodeWithChildren {
  constructor() {
    super(...arguments);
    this.type = ElementType.Root;
  }
  get nodeType() {
    return 9;
  }
};
var Element = class extends NodeWithChildren {
  /**
   * @param name Name of the tag, eg. `div`, `span`.
   * @param attribs Object mapping attribute names to attribute values.
   * @param children Children of the node.
   */
  constructor(name, attribs, children3 = [], type = name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag) {
    super(children3);
    this.name = name;
    this.attribs = attribs;
    this.type = type;
  }
  get nodeType() {
    return 1;
  }
  // DOM Level 1 aliases
  /**
   * Same as {@link name}.
   * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
   */
  get tagName() {
    return this.name;
  }
  set tagName(name) {
    this.name = name;
  }
  get attributes() {
    return Object.keys(this.attribs).map((name) => {
      var _a3, _b;
      return {
        name,
        value: this.attribs[name],
        namespace: (_a3 = this["x-attribsNamespace"]) === null || _a3 === void 0 ? void 0 : _a3[name],
        prefix: (_b = this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
      };
    });
  }
};
function isTag2(node) {
  return isTag(node);
}
function isCDATA(node) {
  return node.type === ElementType.CDATA;
}
function isText(node) {
  return node.type === ElementType.Text;
}
function isComment(node) {
  return node.type === ElementType.Comment;
}
function isDirective(node) {
  return node.type === ElementType.Directive;
}
function isDocument(node) {
  return node.type === ElementType.Root;
}
function hasChildren(node) {
  return Object.prototype.hasOwnProperty.call(node, "children");
}
function cloneNode(node, recursive = false) {
  let result;
  if (isText(node)) {
    result = new Text2(node.data);
  } else if (isComment(node)) {
    result = new Comment2(node.data);
  } else if (isTag2(node)) {
    const children3 = recursive ? cloneChildren(node.children) : [];
    const clone2 = new Element(node.name, { ...node.attribs }, children3);
    children3.forEach((child) => child.parent = clone2);
    if (node.namespace != null) {
      clone2.namespace = node.namespace;
    }
    if (node["x-attribsNamespace"]) {
      clone2["x-attribsNamespace"] = { ...node["x-attribsNamespace"] };
    }
    if (node["x-attribsPrefix"]) {
      clone2["x-attribsPrefix"] = { ...node["x-attribsPrefix"] };
    }
    result = clone2;
  } else if (isCDATA(node)) {
    const children3 = recursive ? cloneChildren(node.children) : [];
    const clone2 = new CDATA2(children3);
    children3.forEach((child) => child.parent = clone2);
    result = clone2;
  } else if (isDocument(node)) {
    const children3 = recursive ? cloneChildren(node.children) : [];
    const clone2 = new Document(children3);
    children3.forEach((child) => child.parent = clone2);
    if (node["x-mode"]) {
      clone2["x-mode"] = node["x-mode"];
    }
    result = clone2;
  } else if (isDirective(node)) {
    const instruction = new ProcessingInstruction(node.name, node.data);
    if (node["x-name"] != null) {
      instruction["x-name"] = node["x-name"];
      instruction["x-publicId"] = node["x-publicId"];
      instruction["x-systemId"] = node["x-systemId"];
    }
    result = instruction;
  } else {
    throw new Error(`Not implemented yet: ${node.type}`);
  }
  result.startIndex = node.startIndex;
  result.endIndex = node.endIndex;
  if (node.sourceCodeLocation != null) {
    result.sourceCodeLocation = node.sourceCodeLocation;
  }
  return result;
}
function cloneChildren(childs) {
  const children3 = childs.map((child) => cloneNode(child, true));
  for (let i = 1; i < children3.length; i++) {
    children3[i].prev = children3[i - 1];
    children3[i - 1].next = children3[i];
  }
  return children3;
}

// node_modules/domhandler/lib/esm/index.js
var defaultOpts2 = {
  withStartIndices: false,
  withEndIndices: false,
  xmlMode: false
};
var DomHandler = class {
  /**
   * @param callback Called once parsing has completed.
   * @param options Settings for the handler.
   * @param elementCB Callback whenever a tag is closed.
   */
  constructor(callback, options, elementCB) {
    this.dom = [];
    this.root = new Document(this.dom);
    this.done = false;
    this.tagStack = [this.root];
    this.lastNode = null;
    this.parser = null;
    if (typeof options === "function") {
      elementCB = options;
      options = defaultOpts2;
    }
    if (typeof callback === "object") {
      options = callback;
      callback = void 0;
    }
    this.callback = callback !== null && callback !== void 0 ? callback : null;
    this.options = options !== null && options !== void 0 ? options : defaultOpts2;
    this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
  }
  onparserinit(parser) {
    this.parser = parser;
  }
  // Resets the handler back to starting state
  onreset() {
    this.dom = [];
    this.root = new Document(this.dom);
    this.done = false;
    this.tagStack = [this.root];
    this.lastNode = null;
    this.parser = null;
  }
  // Signals the handler that parsing is done
  onend() {
    if (this.done)
      return;
    this.done = true;
    this.parser = null;
    this.handleCallback(null);
  }
  onerror(error) {
    this.handleCallback(error);
  }
  onclosetag() {
    this.lastNode = null;
    const elem = this.tagStack.pop();
    if (this.options.withEndIndices) {
      elem.endIndex = this.parser.endIndex;
    }
    if (this.elementCB)
      this.elementCB(elem);
  }
  onopentag(name, attribs) {
    const type = this.options.xmlMode ? ElementType.Tag : void 0;
    const element2 = new Element(name, attribs, void 0, type);
    this.addNode(element2);
    this.tagStack.push(element2);
  }
  ontext(data2) {
    const { lastNode } = this;
    if (lastNode && lastNode.type === ElementType.Text) {
      lastNode.data += data2;
      if (this.options.withEndIndices) {
        lastNode.endIndex = this.parser.endIndex;
      }
    } else {
      const node = new Text2(data2);
      this.addNode(node);
      this.lastNode = node;
    }
  }
  oncomment(data2) {
    if (this.lastNode && this.lastNode.type === ElementType.Comment) {
      this.lastNode.data += data2;
      return;
    }
    const node = new Comment2(data2);
    this.addNode(node);
    this.lastNode = node;
  }
  oncommentend() {
    this.lastNode = null;
  }
  oncdatastart() {
    const text4 = new Text2("");
    const node = new CDATA2([text4]);
    this.addNode(node);
    text4.parent = node;
    this.lastNode = text4;
  }
  oncdataend() {
    this.lastNode = null;
  }
  onprocessinginstruction(name, data2) {
    const node = new ProcessingInstruction(name, data2);
    this.addNode(node);
  }
  handleCallback(error) {
    if (typeof this.callback === "function") {
      this.callback(error, this.dom);
    } else if (error) {
      throw error;
    }
  }
  addNode(node) {
    const parent2 = this.tagStack[this.tagStack.length - 1];
    const previousSibling = parent2.children[parent2.children.length - 1];
    if (this.options.withStartIndices) {
      node.startIndex = this.parser.startIndex;
    }
    if (this.options.withEndIndices) {
      node.endIndex = this.parser.endIndex;
    }
    parent2.children.push(node);
    if (previousSibling) {
      node.prev = previousSibling;
      previousSibling.next = node;
    }
    node.parent = parent2;
    this.lastNode = null;
  }
};

// node_modules/entities/lib/esm/generated/decode-data-html.js
var decode_data_html_default = new Uint16Array(
  // prettier-ignore
  '\u1D41<\xD5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7F\x84\x8B\x90\x95\x98\xA6\xB3\xB9\xC8\xCFlig\u803B\xC6\u40C6P\u803B&\u4026cute\u803B\xC1\u40C1reve;\u4102\u0100iyx}rc\u803B\xC2\u40C2;\u4410r;\uC000\u{1D504}rave\u803B\xC0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9D\xA1on;\u4104f;\uC000\u{1D538}plyFunction;\u6061ing\u803B\xC5\u40C5\u0100cs\xBE\xC3r;\uC000\u{1D49C}ign;\u6254ilde\u803B\xC3\u40C3ml\u803B\xC4\u40C4\u0400aceforsu\xE5\xFB\xFE\u0117\u011C\u0122\u0127\u012A\u0100cr\xEA\xF2kslash;\u6216\u0176\xF6\xF8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\u{1D505}pf;\uC000\u{1D539}eve;\u42D8c\xF2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xA9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xC7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xF2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\u{1D49E}p\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\u{1D507}\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\u{1D53B}\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xEC\u0239o\u0274\u0379\0\0\u037B\xBB\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xE5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\u{1D49F}rok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xD0\u40D0cute\u803B\xC9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xCA\u40CA;\u442Dot;\u4116r;\uC000\u{1D508}rave\u803B\xC8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\u{1D53C}silon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xCB\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\u{1D509}lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\u{1D53D}All;\u6200riertrf;\u6131c\xF2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\u{1D50A};\u62D9pf;\uC000\u{1D53E}eater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\u{1D4A2};\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xF2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xF0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xCD\u40CD\u0100iy\u0713\u0718rc\u803B\xCE\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xCC\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xF3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\u{1D540}a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xCF\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\u{1D50D}pf;\uC000\u{1D541}\u01E3\u07C7\0\u07CCr;\uC000\u{1D4A5}rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\u{1D50E}pf;\uC000\u{1D542}cr;\uC000\u{1D4A6}\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xE1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\u{1D50F}\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xE1\u03BFight\xE1\u03CAf;\uC000\u{1D543}er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xF2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\u{1D510}nusPlus;\u6213pf;\uC000\u{1D544}c\xF2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xEB\u0AD9eryThi\xEE\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xF2\u0673essLes\xF3\u0A48Line;\u400Ar;\uC000\u{1D511}\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\u{1D4A9}ilde\u803B\xD1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xD3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xD4\u40D4;\u441Eblac;\u4150r;\uC000\u{1D512}rave\u803B\xD2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\u{1D546}enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\u{1D4AA}ash\u803B\xD8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xD5\u40D5es;\u6A37ml\u803B\xD6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\u{1D513}i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xE5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\u{1D4AB};\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\u{1D514}pf;\u611Acr;\uC000\u{1D4AC}\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xAE\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xBB\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\u{1D516}ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xBB\u041EeftArrow\xBB\u089AightArrow\xBB\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\u{1D54A}\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\u{1D4AE}ar;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xE1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xBB\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xDE\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\u{1D517}\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\u{1D54B}ipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\u{1D4AF}rok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xDA\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xDB\u40DB;\u4423blac;\u4170r;\uC000\u{1D518}rave\u803B\xD9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\u{1D54C}\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xE1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\u{1D4B0}ilde;\u4168ml\u803B\xDC\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\u{1D519}pf;\uC000\u{1D54D}cr;\uC000\u{1D4B1}dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\u{1D51A}pf;\uC000\u{1D54E}cr;\uC000\u{1D4B2}\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\u{1D51B};\u439Epf;\uC000\u{1D54F}cr;\uC000\u{1D4B3}\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xDD\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\u{1D51C}pf;\uC000\u{1D550}cr;\uC000\u{1D4B4}ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xE8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\u{1D4B5}\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xE1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xE2\u40E2te\u80BB\xB4\u0306;\u4430lig\u803B\xE6\u40E6\u0100;r\xB2\u15BA;\uC000\u{1D51E}rave\u803B\xE0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xE8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xBB\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xBB\xB9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\u{1D552}\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xF1\u1683ing\u803B\xE5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\u{1D4B6};\u402Amp\u0100;e\u12C1\u16AF\xF1\u0288ilde\u803B\xE3\u40E3ml\u803B\xE4\u40E4\u0100ci\u16C2\u16C8onin\xF4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xBB\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xE9\u170Cno\xF5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\u{1D51F}g\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xF0\u0760rc;\u65EFp\xBB\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xE5\u1444\xE5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\u{1D553}\u0100;t\u13CB\u1863om\xBB\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xA6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\u{1D4B7}mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xBB\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xEE\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xE7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xB8\u01ADptyv;\u69B2t\u8100\xA2;e\u1A2D\u1A2E\u40A2r\xE4\u01B2r;\uC000\u{1D520}\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xBB\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xBB\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xBB\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xC7\xC6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xEE\u1160e\u0100mx\u1AF1\u1AF6ent\xBB\u1AE9e\xF3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xF4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\u{1D554}o\xE4\u0254\u8100\xA9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\u{1D4B8}\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xE3\u1B73u\xE3\u1B75ee;\u62CEedge;\u62CFen\u803B\xA4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xBB\u1B80ight\xBB\u1BBDe\xE4\u1BDD\u0100ci\u1C01\u1C07onin\xF4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xF2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xF2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xBB\u090A\u016B\u1C61\u1C67arow;\u690Fa\xE3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xB0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\u{1D521}ar\u0100lr\u1CB3\u1CB5\xBB\u08DC\xBB\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xF7;o\u1CE7\u1CF0ntimes;\u62C7n\xF8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\u{1D555}\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xE5\xFAn\u0180adh\u112E\u1D5D\u1D67ownarrow\xF3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xF4\u1CB4igh\xF4\u1CB6\u0162\u1D7F\u1D85karo\xF7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\u{1D4B9};\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xF2\u0429a\xF2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xF4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xE9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xEA\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\u{1D522}\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xE8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xBB\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\u{1D556}\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xBB\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xBB\u1E2E\u0269\u1EF9\0\0\u1EFB\xED\u0548ant\u0100gl\u1F02\u1F06tr\xBB\u1E5Dess\xBB\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xF4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xF0\u40F0\u0100mr\u1F53\u1F57l\u803B\xEB\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xF4\u056E\u0100eo\u1F6C\u1F74ctatio\xEE\u0559nential\xE5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xF1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\u{1D523}lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\u{1D557}\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xBD\u40BD;\u6153\u803B\xBC\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xBE\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\u{1D4BB}\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xF4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\u{1D524}\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xBB\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\u{1D558}\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xF8\u209Er;\u6978q\u0100lq\u063F\u2196les\xF3\u2088i\xED\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xC5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xF2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xF0\u1484f\xBB\u2024il\xF4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xBB\u220Alip;\u6026con;\u62B9r;\uC000\u{1D525}s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\u{1D559}bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\u{1D4BD}as\xE8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xBB\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xED\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xEE\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xA1\u40A1\u0100fr\u039F\u22C9;\uC000\u{1D526}rave\u803B\xEC\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xE5\u078Ear\xF4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xF4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xF3\u1563\xE3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\u{1D55A}a;\u43B9uest\u803B\xBF\u40BF\u0100ci\u238A\u238Fr;\uC000\u{1D4BE}n\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xEF\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\u{1D527}ath;\u4237pf;\uC000\u{1D55B}\u01E3\u23EC\0\u23F1r;\uC000\u{1D4BF}rcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\u{1D528}reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\u{1D55C}cr;\uC000\u{1D4C0}\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xF2\u09C6\xF2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xEE\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xE5\u088E;\u6A85uo\u803B\xAB\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xEB\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xEC\u08B0\xE2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xE9\u24F6arpoon\u0100du\u25AF\u25B4own\xBB\u045Ap\xBB\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xF3\u0F98quigarro\xF7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xF4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xF8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xF4\u0989gt\xF2\u248C\xF4\u099Bi\xED\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\u{1D529}\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xF2\u25C1orne\xF2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xBB\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xBB\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xEB\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xE1\u09F2apsto;\u67FCight\xE1\u09FDparrow\u0100lr\u2725\u2729ef\xF4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\u{1D55D}us;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xE1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xBB\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xF2\u08A8orne\xF2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\u{1D4C1}m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xE5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xC5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xAF\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xBB\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xEE\u048Cef\xF4\u090F\xF0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xBB\u1626r;\uC000\u{1D52A}o;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xB5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xF4\u16A7ir;\u6AF0ot\u80BB\xB7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xF2\u2212\xF0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\u{1D55E}\u0100ct\u28F8\u28FDr;\uC000\u{1D4C2}pos\xBB\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xBB\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xF8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xA0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xF6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xED\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\u{1D52B}\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xF4\u0BE2i\xED\u0BEA\u0100;r\u0BB6\u2A81\xBB\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xF2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xF2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xF7\u2AC1ightarro\xF7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xF4\u0C55\u0100;s\u0C55\u2AF4\xBB\u0C36i\xED\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xE4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\u{1D55F}\u8180\xAC;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xEC\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xE5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xF1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xF2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xBB\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xE5\u0D45;\uC000\u{1D4C3}ort\u026D\u2B05\0\0\u2BD6ar\xE1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xE5\u0CF8\xE5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xF1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xEC\u0BD7lde\u803B\xF1\u40F1\xE7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xF1\u0C26ight\u0100;e\u0CCB\u2C65\xF1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xF3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xF4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\u{1D52C}\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xF2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xF2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xE5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\u{1D560}\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xF2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xBB\u2DFF\u803B\xAA\u40AA\u803B\xBA\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xF2\u2E01ash\u803B\xF8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xF5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xF6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xB6;l\u2E6D\u2E6E\u40B6le\xEC\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\u{1D52D}\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xF4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xBB\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xF6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xB1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\u{1D561}nd\u803B\xA3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xE5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xF8\u2F43urlye\xF1\u0ED9\xF1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xED\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xF0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xEF\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\u{1D4C5};\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\u{1D52E}pf;\uC000\u{1D562}rime;\u6057cr;\uC000\u{1D4C6}\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xF3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xF1\u1F19\xF4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xF2\u10B3\xF2\u03DDail;\u691Car\xF2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xE3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xE5\u0FD1uo\u803B\xBB\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xEB\u225D\xF0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xF3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xF2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xEC\u0FF2\xE2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xE5\u10BBar\xF4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\u{1D52F}\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xBB\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xE9\u30C8arpoon\u0100du\u31BB\u31BFow\xEE\u317Ep\xBB\u1092eft\u0100ah\u31CA\u31D0rrow\xF3\u0FEAarpoon\xF3\u0551ightarrows;\u61C9quigarro\xF7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xF1\u1F32\u0180ahm\u320D\u3210\u3213r\xF2\u0FEAa\xF2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xBB\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xEB\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\u{1D563}us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xF2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\u{1D4C7}\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xE5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xEF\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xE5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xED\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xEB\u2228\u0100;o\u0A36\u0A34t\u803B\xA7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xF0nu\xF3\xF1t;\u6736r\u0100;o\u3376\u2055\uC000\u{1D530}\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xE4\u1464ara\xEC\u2E6F\u803B\xAD\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xF2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xE9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\u{1D564}a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xBB\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xF1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xF1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xBB\u117Car\xF2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\u{1D4C8}tm\xEE\xF1i\xEC\u3415ar\xE6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xEE\u1EE0h\xE9\u2EAFs\xBB\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xF8\u32FAurlye\xF1\u11FE\xF1\u11F3\u0180aes\u3582\u3588\u331Bppro\xF8\u331Aq\xF1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xB9\u40B9\u803B\xB2\u40B2\u803B\xB3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xEB\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xDF\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xEB\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\u{1D531}\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xF8\u12C1im\xBB\u12ACs\xF0\u129E\u0100as\u36BA\u36AE\xF0\u12C1rn\u803B\xFE\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xD7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xE1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\u{1D565}rk;\u6ADA\xE1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xE5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xBB\u1DBBeft\u0100;e\u2800\u373E\xF1\u092E;\u625Cight\u0100;e\u32AA\u374B\xF1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\u{1D4C9};\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xF4\u1777head\u0100lr\u3797\u37A0eftarro\xF7\u084Fightarrow\xBB\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xF2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xFA\u40FA\xF2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xFB\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xF2\u13ADlac;\u4171a\xF2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\u{1D532}rave\u803B\xF9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xBB\u0957\xBB\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xBB\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xA8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\u{1D566}\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xE1\u13B3arpoon\u0100lr\u3888\u388Cef\xF4\u382Digh\xF4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xBB\u13FAon\xBB\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xBB\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\u{1D4CA}\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xBB\u1813\u0100am\u38EF\u38F2r\xF2\u38A8l\u803B\xFC\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xF2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xE8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xE1\u2415othin\xE7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xF4\u2FB5\u0100;h\u13B7\u3962\xEF\u318D\u0100iu\u3969\u396Dgm\xE1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xE1\u369Ciangle\u0100lr\u39AA\u39AFeft\xBB\u0925ight\xBB\u1051y;\u4432ash\xBB\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xF2\u1469r;\uC000\u{1D533}tr\xE9\u39AEsu\u0100bp\u39EF\u39F1\xBB\u0D1C\xBB\u0D59pf;\uC000\u{1D567}ro\xF0\u0EFBtr\xE9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\u{1D4CB}\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xBB\u397En\u0100Ee\u3992\u3A1E\xBB\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\u{1D534}pf;\uC000\u{1D568}\u0100;e\u1479\u3A66at\xE8\u1479cr;\uC000\u{1D4CC}\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xE9\u17D1r;\uC000\u{1D535}\u0100Aa\u3A94\u3A97r\xF2\u03C3r\xF2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xF2\u03B8r\xF2\u09EBa\xF0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\u{1D569}im\xE5\u17B2\u0100Aa\u3AC7\u3ACAr\xF2\u03CEr\xF2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\u{1D4CD}\u0100pt\u17D6\u3ADCr\xE9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xFD\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xA5\u40A5r;\uC000\u{1D536}cy;\u4457pf;\uC000\u{1D56A}cr;\uC000\u{1D4CE}\u0100cm\u3B26\u3B29y;\u444El\u803B\xFF\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xE6\u155Fa;\u43B6r;\uC000\u{1D537}cy;\u4436grarr;\u61DDpf;\uC000\u{1D56B}cr;\uC000\u{1D4CF}\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map((c) => c.charCodeAt(0))
);

// node_modules/entities/lib/esm/generated/decode-data-xml.js
var decode_data_xml_default = new Uint16Array(
  // prettier-ignore
  "\u0200aglq	\x1B\u026D\0\0p;\u4026os;\u4027t;\u403Et;\u403Cuot;\u4022".split("").map((c) => c.charCodeAt(0))
);

// node_modules/entities/lib/esm/decode_codepoint.js
var _a2;
var decodeMap = /* @__PURE__ */ new Map([
  [0, 65533],
  // C1 Unicode control character reference replacements
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]);
var fromCodePoint = (
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
  (_a2 = String.fromCodePoint) !== null && _a2 !== void 0 ? _a2 : function(codePoint) {
    let output = "";
    if (codePoint > 65535) {
      codePoint -= 65536;
      output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    output += String.fromCharCode(codePoint);
    return output;
  }
);
function replaceCodePoint(codePoint) {
  var _a3;
  if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
    return 65533;
  }
  return (_a3 = decodeMap.get(codePoint)) !== null && _a3 !== void 0 ? _a3 : codePoint;
}

// node_modules/entities/lib/esm/decode.js
var CharCodes;
(function(CharCodes3) {
  CharCodes3[CharCodes3["NUM"] = 35] = "NUM";
  CharCodes3[CharCodes3["SEMI"] = 59] = "SEMI";
  CharCodes3[CharCodes3["EQUALS"] = 61] = "EQUALS";
  CharCodes3[CharCodes3["ZERO"] = 48] = "ZERO";
  CharCodes3[CharCodes3["NINE"] = 57] = "NINE";
  CharCodes3[CharCodes3["LOWER_A"] = 97] = "LOWER_A";
  CharCodes3[CharCodes3["LOWER_F"] = 102] = "LOWER_F";
  CharCodes3[CharCodes3["LOWER_X"] = 120] = "LOWER_X";
  CharCodes3[CharCodes3["LOWER_Z"] = 122] = "LOWER_Z";
  CharCodes3[CharCodes3["UPPER_A"] = 65] = "UPPER_A";
  CharCodes3[CharCodes3["UPPER_F"] = 70] = "UPPER_F";
  CharCodes3[CharCodes3["UPPER_Z"] = 90] = "UPPER_Z";
})(CharCodes || (CharCodes = {}));
var TO_LOWER_BIT = 32;
var BinTrieFlags;
(function(BinTrieFlags2) {
  BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
  BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
  BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
})(BinTrieFlags || (BinTrieFlags = {}));
function isNumber(code) {
  return code >= CharCodes.ZERO && code <= CharCodes.NINE;
}
function isHexadecimalCharacter(code) {
  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
}
function isAsciiAlphaNumeric(code) {
  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);
}
function isEntityInAttributeInvalidEnd(code) {
  return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
}
var EntityDecoderState;
(function(EntityDecoderState2) {
  EntityDecoderState2[EntityDecoderState2["EntityStart"] = 0] = "EntityStart";
  EntityDecoderState2[EntityDecoderState2["NumericStart"] = 1] = "NumericStart";
  EntityDecoderState2[EntityDecoderState2["NumericDecimal"] = 2] = "NumericDecimal";
  EntityDecoderState2[EntityDecoderState2["NumericHex"] = 3] = "NumericHex";
  EntityDecoderState2[EntityDecoderState2["NamedEntity"] = 4] = "NamedEntity";
})(EntityDecoderState || (EntityDecoderState = {}));
var DecodingMode;
(function(DecodingMode2) {
  DecodingMode2[DecodingMode2["Legacy"] = 0] = "Legacy";
  DecodingMode2[DecodingMode2["Strict"] = 1] = "Strict";
  DecodingMode2[DecodingMode2["Attribute"] = 2] = "Attribute";
})(DecodingMode || (DecodingMode = {}));
var EntityDecoder = class {
  constructor(decodeTree, emitCodePoint, errors) {
    this.decodeTree = decodeTree;
    this.emitCodePoint = emitCodePoint;
    this.errors = errors;
    this.state = EntityDecoderState.EntityStart;
    this.consumed = 1;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.decodeMode = DecodingMode.Strict;
  }
  /** Resets the instance to make it reusable. */
  startEntity(decodeMode) {
    this.decodeMode = decodeMode;
    this.state = EntityDecoderState.EntityStart;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.consumed = 1;
  }
  /**
   * Write an entity to the decoder. This can be called multiple times with partial entities.
   * If the entity is incomplete, the decoder will return -1.
   *
   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
   * entity is incomplete, and resume when the next string is written.
   *
   * @param string The string containing the entity (or a continuation of the entity).
   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  write(str, offset) {
    switch (this.state) {
      case EntityDecoderState.EntityStart: {
        if (str.charCodeAt(offset) === CharCodes.NUM) {
          this.state = EntityDecoderState.NumericStart;
          this.consumed += 1;
          return this.stateNumericStart(str, offset + 1);
        }
        this.state = EntityDecoderState.NamedEntity;
        return this.stateNamedEntity(str, offset);
      }
      case EntityDecoderState.NumericStart: {
        return this.stateNumericStart(str, offset);
      }
      case EntityDecoderState.NumericDecimal: {
        return this.stateNumericDecimal(str, offset);
      }
      case EntityDecoderState.NumericHex: {
        return this.stateNumericHex(str, offset);
      }
      case EntityDecoderState.NamedEntity: {
        return this.stateNamedEntity(str, offset);
      }
    }
  }
  /**
   * Switches between the numeric decimal and hexadecimal states.
   *
   * Equivalent to the `Numeric character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericStart(str, offset) {
    if (offset >= str.length) {
      return -1;
    }
    if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
      this.state = EntityDecoderState.NumericHex;
      this.consumed += 1;
      return this.stateNumericHex(str, offset + 1);
    }
    this.state = EntityDecoderState.NumericDecimal;
    return this.stateNumericDecimal(str, offset);
  }
  addToNumericResult(str, start, end2, base) {
    if (start !== end2) {
      const digitCount = end2 - start;
      this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
      this.consumed += digitCount;
    }
  }
  /**
   * Parses a hexadecimal numeric entity.
   *
   * Equivalent to the `Hexademical character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericHex(str, offset) {
    const startIdx = offset;
    while (offset < str.length) {
      const char = str.charCodeAt(offset);
      if (isNumber(char) || isHexadecimalCharacter(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset, 16);
        return this.emitNumericEntity(char, 3);
      }
    }
    this.addToNumericResult(str, startIdx, offset, 16);
    return -1;
  }
  /**
   * Parses a decimal numeric entity.
   *
   * Equivalent to the `Decimal character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericDecimal(str, offset) {
    const startIdx = offset;
    while (offset < str.length) {
      const char = str.charCodeAt(offset);
      if (isNumber(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset, 10);
        return this.emitNumericEntity(char, 2);
      }
    }
    this.addToNumericResult(str, startIdx, offset, 10);
    return -1;
  }
  /**
   * Validate and emit a numeric entity.
   *
   * Implements the logic from the `Hexademical character reference start
   * state` and `Numeric character reference end state` in the HTML spec.
   *
   * @param lastCp The last code point of the entity. Used to see if the
   *               entity was terminated with a semicolon.
   * @param expectedLength The minimum number of characters that should be
   *                       consumed. Used to validate that at least one digit
   *                       was consumed.
   * @returns The number of characters that were consumed.
   */
  emitNumericEntity(lastCp, expectedLength) {
    var _a3;
    if (this.consumed <= expectedLength) {
      (_a3 = this.errors) === null || _a3 === void 0 ? void 0 : _a3.absenceOfDigitsInNumericCharacterReference(this.consumed);
      return 0;
    }
    if (lastCp === CharCodes.SEMI) {
      this.consumed += 1;
    } else if (this.decodeMode === DecodingMode.Strict) {
      return 0;
    }
    this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
    if (this.errors) {
      if (lastCp !== CharCodes.SEMI) {
        this.errors.missingSemicolonAfterCharacterReference();
      }
      this.errors.validateNumericCharacterReference(this.result);
    }
    return this.consumed;
  }
  /**
   * Parses a named entity.
   *
   * Equivalent to the `Named character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNamedEntity(str, offset) {
    const { decodeTree } = this;
    let current = decodeTree[this.treeIndex];
    let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
    for (; offset < str.length; offset++, this.excess++) {
      const char = str.charCodeAt(offset);
      this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
      if (this.treeIndex < 0) {
        return this.result === 0 || // If we are parsing an attribute
        this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
        (valueLength === 0 || // And there should be no invalid characters.
        isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
      }
      current = decodeTree[this.treeIndex];
      valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
      if (valueLength !== 0) {
        if (char === CharCodes.SEMI) {
          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
        }
        if (this.decodeMode !== DecodingMode.Strict) {
          this.result = this.treeIndex;
          this.consumed += this.excess;
          this.excess = 0;
        }
      }
    }
    return -1;
  }
  /**
   * Emit a named entity that was not terminated with a semicolon.
   *
   * @returns The number of characters consumed.
   */
  emitNotTerminatedNamedEntity() {
    var _a3;
    const { result, decodeTree } = this;
    const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
    this.emitNamedEntityData(result, valueLength, this.consumed);
    (_a3 = this.errors) === null || _a3 === void 0 ? void 0 : _a3.missingSemicolonAfterCharacterReference();
    return this.consumed;
  }
  /**
   * Emit a named entity.
   *
   * @param result The index of the entity in the decode tree.
   * @param valueLength The number of bytes in the entity.
   * @param consumed The number of characters consumed.
   *
   * @returns The number of characters consumed.
   */
  emitNamedEntityData(result, valueLength, consumed) {
    const { decodeTree } = this;
    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
    if (valueLength === 3) {
      this.emitCodePoint(decodeTree[result + 2], consumed);
    }
    return consumed;
  }
  /**
   * Signal to the parser that the end of the input was reached.
   *
   * Remaining data will be emitted and relevant errors will be produced.
   *
   * @returns The number of characters consumed.
   */
  end() {
    var _a3;
    switch (this.state) {
      case EntityDecoderState.NamedEntity: {
        return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
      }
      case EntityDecoderState.NumericDecimal: {
        return this.emitNumericEntity(0, 2);
      }
      case EntityDecoderState.NumericHex: {
        return this.emitNumericEntity(0, 3);
      }
      case EntityDecoderState.NumericStart: {
        (_a3 = this.errors) === null || _a3 === void 0 ? void 0 : _a3.absenceOfDigitsInNumericCharacterReference(this.consumed);
        return 0;
      }
      case EntityDecoderState.EntityStart: {
        return 0;
      }
    }
  }
};
function getDecoder(decodeTree) {
  let ret = "";
  const decoder = new EntityDecoder(decodeTree, (str) => ret += fromCodePoint(str));
  return function decodeWithTrie(str, decodeMode) {
    let lastIndex = 0;
    let offset = 0;
    while ((offset = str.indexOf("&", offset)) >= 0) {
      ret += str.slice(lastIndex, offset);
      decoder.startEntity(decodeMode);
      const len = decoder.write(
        str,
        // Skip the "&"
        offset + 1
      );
      if (len < 0) {
        lastIndex = offset + decoder.end();
        break;
      }
      lastIndex = offset + len;
      offset = len === 0 ? lastIndex + 1 : lastIndex;
    }
    const result = ret + str.slice(lastIndex);
    ret = "";
    return result;
  };
}
function determineBranch(decodeTree, current, nodeIdx, char) {
  const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
  const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
  if (branchCount === 0) {
    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
  }
  if (jumpOffset) {
    const value = char - jumpOffset;
    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
  }
  let lo3 = nodeIdx;
  let hi3 = lo3 + branchCount - 1;
  while (lo3 <= hi3) {
    const mid = lo3 + hi3 >>> 1;
    const midVal = decodeTree[mid];
    if (midVal < char) {
      lo3 = mid + 1;
    } else if (midVal > char) {
      hi3 = mid - 1;
    } else {
      return decodeTree[mid + branchCount];
    }
  }
  return -1;
}
var htmlDecoder = getDecoder(decode_data_html_default);
var xmlDecoder = getDecoder(decode_data_xml_default);

// node_modules/entities/lib/esm/generated/encode-html.js
function restoreDiff(arr) {
  for (let i = 1; i < arr.length; i++) {
    arr[i][0] += arr[i - 1][0] + 1;
  }
  return arr;
}
var encode_html_default = new Map(/* @__PURE__ */ restoreDiff([[9, "&Tab;"], [0, "&NewLine;"], [22, "&excl;"], [0, "&quot;"], [0, "&num;"], [0, "&dollar;"], [0, "&percnt;"], [0, "&amp;"], [0, "&apos;"], [0, "&lpar;"], [0, "&rpar;"], [0, "&ast;"], [0, "&plus;"], [0, "&comma;"], [1, "&period;"], [0, "&sol;"], [10, "&colon;"], [0, "&semi;"], [0, { v: "&lt;", n: 8402, o: "&nvlt;" }], [0, { v: "&equals;", n: 8421, o: "&bne;" }], [0, { v: "&gt;", n: 8402, o: "&nvgt;" }], [0, "&quest;"], [0, "&commat;"], [26, "&lbrack;"], [0, "&bsol;"], [0, "&rbrack;"], [0, "&Hat;"], [0, "&lowbar;"], [0, "&DiacriticalGrave;"], [5, { n: 106, o: "&fjlig;" }], [20, "&lbrace;"], [0, "&verbar;"], [0, "&rbrace;"], [34, "&nbsp;"], [0, "&iexcl;"], [0, "&cent;"], [0, "&pound;"], [0, "&curren;"], [0, "&yen;"], [0, "&brvbar;"], [0, "&sect;"], [0, "&die;"], [0, "&copy;"], [0, "&ordf;"], [0, "&laquo;"], [0, "&not;"], [0, "&shy;"], [0, "&circledR;"], [0, "&macr;"], [0, "&deg;"], [0, "&PlusMinus;"], [0, "&sup2;"], [0, "&sup3;"], [0, "&acute;"], [0, "&micro;"], [0, "&para;"], [0, "&centerdot;"], [0, "&cedil;"], [0, "&sup1;"], [0, "&ordm;"], [0, "&raquo;"], [0, "&frac14;"], [0, "&frac12;"], [0, "&frac34;"], [0, "&iquest;"], [0, "&Agrave;"], [0, "&Aacute;"], [0, "&Acirc;"], [0, "&Atilde;"], [0, "&Auml;"], [0, "&angst;"], [0, "&AElig;"], [0, "&Ccedil;"], [0, "&Egrave;"], [0, "&Eacute;"], [0, "&Ecirc;"], [0, "&Euml;"], [0, "&Igrave;"], [0, "&Iacute;"], [0, "&Icirc;"], [0, "&Iuml;"], [0, "&ETH;"], [0, "&Ntilde;"], [0, "&Ograve;"], [0, "&Oacute;"], [0, "&Ocirc;"], [0, "&Otilde;"], [0, "&Ouml;"], [0, "&times;"], [0, "&Oslash;"], [0, "&Ugrave;"], [0, "&Uacute;"], [0, "&Ucirc;"], [0, "&Uuml;"], [0, "&Yacute;"], [0, "&THORN;"], [0, "&szlig;"], [0, "&agrave;"], [0, "&aacute;"], [0, "&acirc;"], [0, "&atilde;"], [0, "&auml;"], [0, "&aring;"], [0, "&aelig;"], [0, "&ccedil;"], [0, "&egrave;"], [0, "&eacute;"], [0, "&ecirc;"], [0, "&euml;"], [0, "&igrave;"], [0, "&iacute;"], [0, "&icirc;"], [0, "&iuml;"], [0, "&eth;"], [0, "&ntilde;"], [0, "&ograve;"], [0, "&oacute;"], [0, "&ocirc;"], [0, "&otilde;"], [0, "&ouml;"], [0, "&div;"], [0, "&oslash;"], [0, "&ugrave;"], [0, "&uacute;"], [0, "&ucirc;"], [0, "&uuml;"], [0, "&yacute;"], [0, "&thorn;"], [0, "&yuml;"], [0, "&Amacr;"], [0, "&amacr;"], [0, "&Abreve;"], [0, "&abreve;"], [0, "&Aogon;"], [0, "&aogon;"], [0, "&Cacute;"], [0, "&cacute;"], [0, "&Ccirc;"], [0, "&ccirc;"], [0, "&Cdot;"], [0, "&cdot;"], [0, "&Ccaron;"], [0, "&ccaron;"], [0, "&Dcaron;"], [0, "&dcaron;"], [0, "&Dstrok;"], [0, "&dstrok;"], [0, "&Emacr;"], [0, "&emacr;"], [2, "&Edot;"], [0, "&edot;"], [0, "&Eogon;"], [0, "&eogon;"], [0, "&Ecaron;"], [0, "&ecaron;"], [0, "&Gcirc;"], [0, "&gcirc;"], [0, "&Gbreve;"], [0, "&gbreve;"], [0, "&Gdot;"], [0, "&gdot;"], [0, "&Gcedil;"], [1, "&Hcirc;"], [0, "&hcirc;"], [0, "&Hstrok;"], [0, "&hstrok;"], [0, "&Itilde;"], [0, "&itilde;"], [0, "&Imacr;"], [0, "&imacr;"], [2, "&Iogon;"], [0, "&iogon;"], [0, "&Idot;"], [0, "&imath;"], [0, "&IJlig;"], [0, "&ijlig;"], [0, "&Jcirc;"], [0, "&jcirc;"], [0, "&Kcedil;"], [0, "&kcedil;"], [0, "&kgreen;"], [0, "&Lacute;"], [0, "&lacute;"], [0, "&Lcedil;"], [0, "&lcedil;"], [0, "&Lcaron;"], [0, "&lcaron;"], [0, "&Lmidot;"], [0, "&lmidot;"], [0, "&Lstrok;"], [0, "&lstrok;"], [0, "&Nacute;"], [0, "&nacute;"], [0, "&Ncedil;"], [0, "&ncedil;"], [0, "&Ncaron;"], [0, "&ncaron;"], [0, "&napos;"], [0, "&ENG;"], [0, "&eng;"], [0, "&Omacr;"], [0, "&omacr;"], [2, "&Odblac;"], [0, "&odblac;"], [0, "&OElig;"], [0, "&oelig;"], [0, "&Racute;"], [0, "&racute;"], [0, "&Rcedil;"], [0, "&rcedil;"], [0, "&Rcaron;"], [0, "&rcaron;"], [0, "&Sacute;"], [0, "&sacute;"], [0, "&Scirc;"], [0, "&scirc;"], [0, "&Scedil;"], [0, "&scedil;"], [0, "&Scaron;"], [0, "&scaron;"], [0, "&Tcedil;"], [0, "&tcedil;"], [0, "&Tcaron;"], [0, "&tcaron;"], [0, "&Tstrok;"], [0, "&tstrok;"], [0, "&Utilde;"], [0, "&utilde;"], [0, "&Umacr;"], [0, "&umacr;"], [0, "&Ubreve;"], [0, "&ubreve;"], [0, "&Uring;"], [0, "&uring;"], [0, "&Udblac;"], [0, "&udblac;"], [0, "&Uogon;"], [0, "&uogon;"], [0, "&Wcirc;"], [0, "&wcirc;"], [0, "&Ycirc;"], [0, "&ycirc;"], [0, "&Yuml;"], [0, "&Zacute;"], [0, "&zacute;"], [0, "&Zdot;"], [0, "&zdot;"], [0, "&Zcaron;"], [0, "&zcaron;"], [19, "&fnof;"], [34, "&imped;"], [63, "&gacute;"], [65, "&jmath;"], [142, "&circ;"], [0, "&caron;"], [16, "&breve;"], [0, "&DiacriticalDot;"], [0, "&ring;"], [0, "&ogon;"], [0, "&DiacriticalTilde;"], [0, "&dblac;"], [51, "&DownBreve;"], [127, "&Alpha;"], [0, "&Beta;"], [0, "&Gamma;"], [0, "&Delta;"], [0, "&Epsilon;"], [0, "&Zeta;"], [0, "&Eta;"], [0, "&Theta;"], [0, "&Iota;"], [0, "&Kappa;"], [0, "&Lambda;"], [0, "&Mu;"], [0, "&Nu;"], [0, "&Xi;"], [0, "&Omicron;"], [0, "&Pi;"], [0, "&Rho;"], [1, "&Sigma;"], [0, "&Tau;"], [0, "&Upsilon;"], [0, "&Phi;"], [0, "&Chi;"], [0, "&Psi;"], [0, "&ohm;"], [7, "&alpha;"], [0, "&beta;"], [0, "&gamma;"], [0, "&delta;"], [0, "&epsi;"], [0, "&zeta;"], [0, "&eta;"], [0, "&theta;"], [0, "&iota;"], [0, "&kappa;"], [0, "&lambda;"], [0, "&mu;"], [0, "&nu;"], [0, "&xi;"], [0, "&omicron;"], [0, "&pi;"], [0, "&rho;"], [0, "&sigmaf;"], [0, "&sigma;"], [0, "&tau;"], [0, "&upsi;"], [0, "&phi;"], [0, "&chi;"], [0, "&psi;"], [0, "&omega;"], [7, "&thetasym;"], [0, "&Upsi;"], [2, "&phiv;"], [0, "&piv;"], [5, "&Gammad;"], [0, "&digamma;"], [18, "&kappav;"], [0, "&rhov;"], [3, "&epsiv;"], [0, "&backepsilon;"], [10, "&IOcy;"], [0, "&DJcy;"], [0, "&GJcy;"], [0, "&Jukcy;"], [0, "&DScy;"], [0, "&Iukcy;"], [0, "&YIcy;"], [0, "&Jsercy;"], [0, "&LJcy;"], [0, "&NJcy;"], [0, "&TSHcy;"], [0, "&KJcy;"], [1, "&Ubrcy;"], [0, "&DZcy;"], [0, "&Acy;"], [0, "&Bcy;"], [0, "&Vcy;"], [0, "&Gcy;"], [0, "&Dcy;"], [0, "&IEcy;"], [0, "&ZHcy;"], [0, "&Zcy;"], [0, "&Icy;"], [0, "&Jcy;"], [0, "&Kcy;"], [0, "&Lcy;"], [0, "&Mcy;"], [0, "&Ncy;"], [0, "&Ocy;"], [0, "&Pcy;"], [0, "&Rcy;"], [0, "&Scy;"], [0, "&Tcy;"], [0, "&Ucy;"], [0, "&Fcy;"], [0, "&KHcy;"], [0, "&TScy;"], [0, "&CHcy;"], [0, "&SHcy;"], [0, "&SHCHcy;"], [0, "&HARDcy;"], [0, "&Ycy;"], [0, "&SOFTcy;"], [0, "&Ecy;"], [0, "&YUcy;"], [0, "&YAcy;"], [0, "&acy;"], [0, "&bcy;"], [0, "&vcy;"], [0, "&gcy;"], [0, "&dcy;"], [0, "&iecy;"], [0, "&zhcy;"], [0, "&zcy;"], [0, "&icy;"], [0, "&jcy;"], [0, "&kcy;"], [0, "&lcy;"], [0, "&mcy;"], [0, "&ncy;"], [0, "&ocy;"], [0, "&pcy;"], [0, "&rcy;"], [0, "&scy;"], [0, "&tcy;"], [0, "&ucy;"], [0, "&fcy;"], [0, "&khcy;"], [0, "&tscy;"], [0, "&chcy;"], [0, "&shcy;"], [0, "&shchcy;"], [0, "&hardcy;"], [0, "&ycy;"], [0, "&softcy;"], [0, "&ecy;"], [0, "&yucy;"], [0, "&yacy;"], [1, "&iocy;"], [0, "&djcy;"], [0, "&gjcy;"], [0, "&jukcy;"], [0, "&dscy;"], [0, "&iukcy;"], [0, "&yicy;"], [0, "&jsercy;"], [0, "&ljcy;"], [0, "&njcy;"], [0, "&tshcy;"], [0, "&kjcy;"], [1, "&ubrcy;"], [0, "&dzcy;"], [7074, "&ensp;"], [0, "&emsp;"], [0, "&emsp13;"], [0, "&emsp14;"], [1, "&numsp;"], [0, "&puncsp;"], [0, "&ThinSpace;"], [0, "&hairsp;"], [0, "&NegativeMediumSpace;"], [0, "&zwnj;"], [0, "&zwj;"], [0, "&lrm;"], [0, "&rlm;"], [0, "&dash;"], [2, "&ndash;"], [0, "&mdash;"], [0, "&horbar;"], [0, "&Verbar;"], [1, "&lsquo;"], [0, "&CloseCurlyQuote;"], [0, "&lsquor;"], [1, "&ldquo;"], [0, "&CloseCurlyDoubleQuote;"], [0, "&bdquo;"], [1, "&dagger;"], [0, "&Dagger;"], [0, "&bull;"], [2, "&nldr;"], [0, "&hellip;"], [9, "&permil;"], [0, "&pertenk;"], [0, "&prime;"], [0, "&Prime;"], [0, "&tprime;"], [0, "&backprime;"], [3, "&lsaquo;"], [0, "&rsaquo;"], [3, "&oline;"], [2, "&caret;"], [1, "&hybull;"], [0, "&frasl;"], [10, "&bsemi;"], [7, "&qprime;"], [7, { v: "&MediumSpace;", n: 8202, o: "&ThickSpace;" }], [0, "&NoBreak;"], [0, "&af;"], [0, "&InvisibleTimes;"], [0, "&ic;"], [72, "&euro;"], [46, "&tdot;"], [0, "&DotDot;"], [37, "&complexes;"], [2, "&incare;"], [4, "&gscr;"], [0, "&hamilt;"], [0, "&Hfr;"], [0, "&Hopf;"], [0, "&planckh;"], [0, "&hbar;"], [0, "&imagline;"], [0, "&Ifr;"], [0, "&lagran;"], [0, "&ell;"], [1, "&naturals;"], [0, "&numero;"], [0, "&copysr;"], [0, "&weierp;"], [0, "&Popf;"], [0, "&Qopf;"], [0, "&realine;"], [0, "&real;"], [0, "&reals;"], [0, "&rx;"], [3, "&trade;"], [1, "&integers;"], [2, "&mho;"], [0, "&zeetrf;"], [0, "&iiota;"], [2, "&bernou;"], [0, "&Cayleys;"], [1, "&escr;"], [0, "&Escr;"], [0, "&Fouriertrf;"], [1, "&Mellintrf;"], [0, "&order;"], [0, "&alefsym;"], [0, "&beth;"], [0, "&gimel;"], [0, "&daleth;"], [12, "&CapitalDifferentialD;"], [0, "&dd;"], [0, "&ee;"], [0, "&ii;"], [10, "&frac13;"], [0, "&frac23;"], [0, "&frac15;"], [0, "&frac25;"], [0, "&frac35;"], [0, "&frac45;"], [0, "&frac16;"], [0, "&frac56;"], [0, "&frac18;"], [0, "&frac38;"], [0, "&frac58;"], [0, "&frac78;"], [49, "&larr;"], [0, "&ShortUpArrow;"], [0, "&rarr;"], [0, "&darr;"], [0, "&harr;"], [0, "&updownarrow;"], [0, "&nwarr;"], [0, "&nearr;"], [0, "&LowerRightArrow;"], [0, "&LowerLeftArrow;"], [0, "&nlarr;"], [0, "&nrarr;"], [1, { v: "&rarrw;", n: 824, o: "&nrarrw;" }], [0, "&Larr;"], [0, "&Uarr;"], [0, "&Rarr;"], [0, "&Darr;"], [0, "&larrtl;"], [0, "&rarrtl;"], [0, "&LeftTeeArrow;"], [0, "&mapstoup;"], [0, "&map;"], [0, "&DownTeeArrow;"], [1, "&hookleftarrow;"], [0, "&hookrightarrow;"], [0, "&larrlp;"], [0, "&looparrowright;"], [0, "&harrw;"], [0, "&nharr;"], [1, "&lsh;"], [0, "&rsh;"], [0, "&ldsh;"], [0, "&rdsh;"], [1, "&crarr;"], [0, "&cularr;"], [0, "&curarr;"], [2, "&circlearrowleft;"], [0, "&circlearrowright;"], [0, "&leftharpoonup;"], [0, "&DownLeftVector;"], [0, "&RightUpVector;"], [0, "&LeftUpVector;"], [0, "&rharu;"], [0, "&DownRightVector;"], [0, "&dharr;"], [0, "&dharl;"], [0, "&RightArrowLeftArrow;"], [0, "&udarr;"], [0, "&LeftArrowRightArrow;"], [0, "&leftleftarrows;"], [0, "&upuparrows;"], [0, "&rightrightarrows;"], [0, "&ddarr;"], [0, "&leftrightharpoons;"], [0, "&Equilibrium;"], [0, "&nlArr;"], [0, "&nhArr;"], [0, "&nrArr;"], [0, "&DoubleLeftArrow;"], [0, "&DoubleUpArrow;"], [0, "&DoubleRightArrow;"], [0, "&dArr;"], [0, "&DoubleLeftRightArrow;"], [0, "&DoubleUpDownArrow;"], [0, "&nwArr;"], [0, "&neArr;"], [0, "&seArr;"], [0, "&swArr;"], [0, "&lAarr;"], [0, "&rAarr;"], [1, "&zigrarr;"], [6, "&larrb;"], [0, "&rarrb;"], [15, "&DownArrowUpArrow;"], [7, "&loarr;"], [0, "&roarr;"], [0, "&hoarr;"], [0, "&forall;"], [0, "&comp;"], [0, { v: "&part;", n: 824, o: "&npart;" }], [0, "&exist;"], [0, "&nexist;"], [0, "&empty;"], [1, "&Del;"], [0, "&Element;"], [0, "&NotElement;"], [1, "&ni;"], [0, "&notni;"], [2, "&prod;"], [0, "&coprod;"], [0, "&sum;"], [0, "&minus;"], [0, "&MinusPlus;"], [0, "&dotplus;"], [1, "&Backslash;"], [0, "&lowast;"], [0, "&compfn;"], [1, "&radic;"], [2, "&prop;"], [0, "&infin;"], [0, "&angrt;"], [0, { v: "&ang;", n: 8402, o: "&nang;" }], [0, "&angmsd;"], [0, "&angsph;"], [0, "&mid;"], [0, "&nmid;"], [0, "&DoubleVerticalBar;"], [0, "&NotDoubleVerticalBar;"], [0, "&and;"], [0, "&or;"], [0, { v: "&cap;", n: 65024, o: "&caps;" }], [0, { v: "&cup;", n: 65024, o: "&cups;" }], [0, "&int;"], [0, "&Int;"], [0, "&iiint;"], [0, "&conint;"], [0, "&Conint;"], [0, "&Cconint;"], [0, "&cwint;"], [0, "&ClockwiseContourIntegral;"], [0, "&awconint;"], [0, "&there4;"], [0, "&becaus;"], [0, "&ratio;"], [0, "&Colon;"], [0, "&dotminus;"], [1, "&mDDot;"], [0, "&homtht;"], [0, { v: "&sim;", n: 8402, o: "&nvsim;" }], [0, { v: "&backsim;", n: 817, o: "&race;" }], [0, { v: "&ac;", n: 819, o: "&acE;" }], [0, "&acd;"], [0, "&VerticalTilde;"], [0, "&NotTilde;"], [0, { v: "&eqsim;", n: 824, o: "&nesim;" }], [0, "&sime;"], [0, "&NotTildeEqual;"], [0, "&cong;"], [0, "&simne;"], [0, "&ncong;"], [0, "&ap;"], [0, "&nap;"], [0, "&ape;"], [0, { v: "&apid;", n: 824, o: "&napid;" }], [0, "&backcong;"], [0, { v: "&asympeq;", n: 8402, o: "&nvap;" }], [0, { v: "&bump;", n: 824, o: "&nbump;" }], [0, { v: "&bumpe;", n: 824, o: "&nbumpe;" }], [0, { v: "&doteq;", n: 824, o: "&nedot;" }], [0, "&doteqdot;"], [0, "&efDot;"], [0, "&erDot;"], [0, "&Assign;"], [0, "&ecolon;"], [0, "&ecir;"], [0, "&circeq;"], [1, "&wedgeq;"], [0, "&veeeq;"], [1, "&triangleq;"], [2, "&equest;"], [0, "&ne;"], [0, { v: "&Congruent;", n: 8421, o: "&bnequiv;" }], [0, "&nequiv;"], [1, { v: "&le;", n: 8402, o: "&nvle;" }], [0, { v: "&ge;", n: 8402, o: "&nvge;" }], [0, { v: "&lE;", n: 824, o: "&nlE;" }], [0, { v: "&gE;", n: 824, o: "&ngE;" }], [0, { v: "&lnE;", n: 65024, o: "&lvertneqq;" }], [0, { v: "&gnE;", n: 65024, o: "&gvertneqq;" }], [0, { v: "&ll;", n: new Map(/* @__PURE__ */ restoreDiff([[824, "&nLtv;"], [7577, "&nLt;"]])) }], [0, { v: "&gg;", n: new Map(/* @__PURE__ */ restoreDiff([[824, "&nGtv;"], [7577, "&nGt;"]])) }], [0, "&between;"], [0, "&NotCupCap;"], [0, "&nless;"], [0, "&ngt;"], [0, "&nle;"], [0, "&nge;"], [0, "&lesssim;"], [0, "&GreaterTilde;"], [0, "&nlsim;"], [0, "&ngsim;"], [0, "&LessGreater;"], [0, "&gl;"], [0, "&NotLessGreater;"], [0, "&NotGreaterLess;"], [0, "&pr;"], [0, "&sc;"], [0, "&prcue;"], [0, "&sccue;"], [0, "&PrecedesTilde;"], [0, { v: "&scsim;", n: 824, o: "&NotSucceedsTilde;" }], [0, "&NotPrecedes;"], [0, "&NotSucceeds;"], [0, { v: "&sub;", n: 8402, o: "&NotSubset;" }], [0, { v: "&sup;", n: 8402, o: "&NotSuperset;" }], [0, "&nsub;"], [0, "&nsup;"], [0, "&sube;"], [0, "&supe;"], [0, "&NotSubsetEqual;"], [0, "&NotSupersetEqual;"], [0, { v: "&subne;", n: 65024, o: "&varsubsetneq;" }], [0, { v: "&supne;", n: 65024, o: "&varsupsetneq;" }], [1, "&cupdot;"], [0, "&UnionPlus;"], [0, { v: "&sqsub;", n: 824, o: "&NotSquareSubset;" }], [0, { v: "&sqsup;", n: 824, o: "&NotSquareSuperset;" }], [0, "&sqsube;"], [0, "&sqsupe;"], [0, { v: "&sqcap;", n: 65024, o: "&sqcaps;" }], [0, { v: "&sqcup;", n: 65024, o: "&sqcups;" }], [0, "&CirclePlus;"], [0, "&CircleMinus;"], [0, "&CircleTimes;"], [0, "&osol;"], [0, "&CircleDot;"], [0, "&circledcirc;"], [0, "&circledast;"], [1, "&circleddash;"], [0, "&boxplus;"], [0, "&boxminus;"], [0, "&boxtimes;"], [0, "&dotsquare;"], [0, "&RightTee;"], [0, "&dashv;"], [0, "&DownTee;"], [0, "&bot;"], [1, "&models;"], [0, "&DoubleRightTee;"], [0, "&Vdash;"], [0, "&Vvdash;"], [0, "&VDash;"], [0, "&nvdash;"], [0, "&nvDash;"], [0, "&nVdash;"], [0, "&nVDash;"], [0, "&prurel;"], [1, "&LeftTriangle;"], [0, "&RightTriangle;"], [0, { v: "&LeftTriangleEqual;", n: 8402, o: "&nvltrie;" }], [0, { v: "&RightTriangleEqual;", n: 8402, o: "&nvrtrie;" }], [0, "&origof;"], [0, "&imof;"], [0, "&multimap;"], [0, "&hercon;"], [0, "&intcal;"], [0, "&veebar;"], [1, "&barvee;"], [0, "&angrtvb;"], [0, "&lrtri;"], [0, "&bigwedge;"], [0, "&bigvee;"], [0, "&bigcap;"], [0, "&bigcup;"], [0, "&diam;"], [0, "&sdot;"], [0, "&sstarf;"], [0, "&divideontimes;"], [0, "&bowtie;"], [0, "&ltimes;"], [0, "&rtimes;"], [0, "&leftthreetimes;"], [0, "&rightthreetimes;"], [0, "&backsimeq;"], [0, "&curlyvee;"], [0, "&curlywedge;"], [0, "&Sub;"], [0, "&Sup;"], [0, "&Cap;"], [0, "&Cup;"], [0, "&fork;"], [0, "&epar;"], [0, "&lessdot;"], [0, "&gtdot;"], [0, { v: "&Ll;", n: 824, o: "&nLl;" }], [0, { v: "&Gg;", n: 824, o: "&nGg;" }], [0, { v: "&leg;", n: 65024, o: "&lesg;" }], [0, { v: "&gel;", n: 65024, o: "&gesl;" }], [2, "&cuepr;"], [0, "&cuesc;"], [0, "&NotPrecedesSlantEqual;"], [0, "&NotSucceedsSlantEqual;"], [0, "&NotSquareSubsetEqual;"], [0, "&NotSquareSupersetEqual;"], [2, "&lnsim;"], [0, "&gnsim;"], [0, "&precnsim;"], [0, "&scnsim;"], [0, "&nltri;"], [0, "&NotRightTriangle;"], [0, "&nltrie;"], [0, "&NotRightTriangleEqual;"], [0, "&vellip;"], [0, "&ctdot;"], [0, "&utdot;"], [0, "&dtdot;"], [0, "&disin;"], [0, "&isinsv;"], [0, "&isins;"], [0, { v: "&isindot;", n: 824, o: "&notindot;" }], [0, "&notinvc;"], [0, "&notinvb;"], [1, { v: "&isinE;", n: 824, o: "&notinE;" }], [0, "&nisd;"], [0, "&xnis;"], [0, "&nis;"], [0, "&notnivc;"], [0, "&notnivb;"], [6, "&barwed;"], [0, "&Barwed;"], [1, "&lceil;"], [0, "&rceil;"], [0, "&LeftFloor;"], [0, "&rfloor;"], [0, "&drcrop;"], [0, "&dlcrop;"], [0, "&urcrop;"], [0, "&ulcrop;"], [0, "&bnot;"], [1, "&profline;"], [0, "&profsurf;"], [1, "&telrec;"], [0, "&target;"], [5, "&ulcorn;"], [0, "&urcorn;"], [0, "&dlcorn;"], [0, "&drcorn;"], [2, "&frown;"], [0, "&smile;"], [9, "&cylcty;"], [0, "&profalar;"], [7, "&topbot;"], [6, "&ovbar;"], [1, "&solbar;"], [60, "&angzarr;"], [51, "&lmoustache;"], [0, "&rmoustache;"], [2, "&OverBracket;"], [0, "&bbrk;"], [0, "&bbrktbrk;"], [37, "&OverParenthesis;"], [0, "&UnderParenthesis;"], [0, "&OverBrace;"], [0, "&UnderBrace;"], [2, "&trpezium;"], [4, "&elinters;"], [59, "&blank;"], [164, "&circledS;"], [55, "&boxh;"], [1, "&boxv;"], [9, "&boxdr;"], [3, "&boxdl;"], [3, "&boxur;"], [3, "&boxul;"], [3, "&boxvr;"], [7, "&boxvl;"], [7, "&boxhd;"], [7, "&boxhu;"], [7, "&boxvh;"], [19, "&boxH;"], [0, "&boxV;"], [0, "&boxdR;"], [0, "&boxDr;"], [0, "&boxDR;"], [0, "&boxdL;"], [0, "&boxDl;"], [0, "&boxDL;"], [0, "&boxuR;"], [0, "&boxUr;"], [0, "&boxUR;"], [0, "&boxuL;"], [0, "&boxUl;"], [0, "&boxUL;"], [0, "&boxvR;"], [0, "&boxVr;"], [0, "&boxVR;"], [0, "&boxvL;"], [0, "&boxVl;"], [0, "&boxVL;"], [0, "&boxHd;"], [0, "&boxhD;"], [0, "&boxHD;"], [0, "&boxHu;"], [0, "&boxhU;"], [0, "&boxHU;"], [0, "&boxvH;"], [0, "&boxVh;"], [0, "&boxVH;"], [19, "&uhblk;"], [3, "&lhblk;"], [3, "&block;"], [8, "&blk14;"], [0, "&blk12;"], [0, "&blk34;"], [13, "&square;"], [8, "&blacksquare;"], [0, "&EmptyVerySmallSquare;"], [1, "&rect;"], [0, "&marker;"], [2, "&fltns;"], [1, "&bigtriangleup;"], [0, "&blacktriangle;"], [0, "&triangle;"], [2, "&blacktriangleright;"], [0, "&rtri;"], [3, "&bigtriangledown;"], [0, "&blacktriangledown;"], [0, "&dtri;"], [2, "&blacktriangleleft;"], [0, "&ltri;"], [6, "&loz;"], [0, "&cir;"], [32, "&tridot;"], [2, "&bigcirc;"], [8, "&ultri;"], [0, "&urtri;"], [0, "&lltri;"], [0, "&EmptySmallSquare;"], [0, "&FilledSmallSquare;"], [8, "&bigstar;"], [0, "&star;"], [7, "&phone;"], [49, "&female;"], [1, "&male;"], [29, "&spades;"], [2, "&clubs;"], [1, "&hearts;"], [0, "&diamondsuit;"], [3, "&sung;"], [2, "&flat;"], [0, "&natural;"], [0, "&sharp;"], [163, "&check;"], [3, "&cross;"], [8, "&malt;"], [21, "&sext;"], [33, "&VerticalSeparator;"], [25, "&lbbrk;"], [0, "&rbbrk;"], [84, "&bsolhsub;"], [0, "&suphsol;"], [28, "&LeftDoubleBracket;"], [0, "&RightDoubleBracket;"], [0, "&lang;"], [0, "&rang;"], [0, "&Lang;"], [0, "&Rang;"], [0, "&loang;"], [0, "&roang;"], [7, "&longleftarrow;"], [0, "&longrightarrow;"], [0, "&longleftrightarrow;"], [0, "&DoubleLongLeftArrow;"], [0, "&DoubleLongRightArrow;"], [0, "&DoubleLongLeftRightArrow;"], [1, "&longmapsto;"], [2, "&dzigrarr;"], [258, "&nvlArr;"], [0, "&nvrArr;"], [0, "&nvHarr;"], [0, "&Map;"], [6, "&lbarr;"], [0, "&bkarow;"], [0, "&lBarr;"], [0, "&dbkarow;"], [0, "&drbkarow;"], [0, "&DDotrahd;"], [0, "&UpArrowBar;"], [0, "&DownArrowBar;"], [2, "&Rarrtl;"], [2, "&latail;"], [0, "&ratail;"], [0, "&lAtail;"], [0, "&rAtail;"], [0, "&larrfs;"], [0, "&rarrfs;"], [0, "&larrbfs;"], [0, "&rarrbfs;"], [2, "&nwarhk;"], [0, "&nearhk;"], [0, "&hksearow;"], [0, "&hkswarow;"], [0, "&nwnear;"], [0, "&nesear;"], [0, "&seswar;"], [0, "&swnwar;"], [8, { v: "&rarrc;", n: 824, o: "&nrarrc;" }], [1, "&cudarrr;"], [0, "&ldca;"], [0, "&rdca;"], [0, "&cudarrl;"], [0, "&larrpl;"], [2, "&curarrm;"], [0, "&cularrp;"], [7, "&rarrpl;"], [2, "&harrcir;"], [0, "&Uarrocir;"], [0, "&lurdshar;"], [0, "&ldrushar;"], [2, "&LeftRightVector;"], [0, "&RightUpDownVector;"], [0, "&DownLeftRightVector;"], [0, "&LeftUpDownVector;"], [0, "&LeftVectorBar;"], [0, "&RightVectorBar;"], [0, "&RightUpVectorBar;"], [0, "&RightDownVectorBar;"], [0, "&DownLeftVectorBar;"], [0, "&DownRightVectorBar;"], [0, "&LeftUpVectorBar;"], [0, "&LeftDownVectorBar;"], [0, "&LeftTeeVector;"], [0, "&RightTeeVector;"], [0, "&RightUpTeeVector;"], [0, "&RightDownTeeVector;"], [0, "&DownLeftTeeVector;"], [0, "&DownRightTeeVector;"], [0, "&LeftUpTeeVector;"], [0, "&LeftDownTeeVector;"], [0, "&lHar;"], [0, "&uHar;"], [0, "&rHar;"], [0, "&dHar;"], [0, "&luruhar;"], [0, "&ldrdhar;"], [0, "&ruluhar;"], [0, "&rdldhar;"], [0, "&lharul;"], [0, "&llhard;"], [0, "&rharul;"], [0, "&lrhard;"], [0, "&udhar;"], [0, "&duhar;"], [0, "&RoundImplies;"], [0, "&erarr;"], [0, "&simrarr;"], [0, "&larrsim;"], [0, "&rarrsim;"], [0, "&rarrap;"], [0, "&ltlarr;"], [1, "&gtrarr;"], [0, "&subrarr;"], [1, "&suplarr;"], [0, "&lfisht;"], [0, "&rfisht;"], [0, "&ufisht;"], [0, "&dfisht;"], [5, "&lopar;"], [0, "&ropar;"], [4, "&lbrke;"], [0, "&rbrke;"], [0, "&lbrkslu;"], [0, "&rbrksld;"], [0, "&lbrksld;"], [0, "&rbrkslu;"], [0, "&langd;"], [0, "&rangd;"], [0, "&lparlt;"], [0, "&rpargt;"], [0, "&gtlPar;"], [0, "&ltrPar;"], [3, "&vzigzag;"], [1, "&vangrt;"], [0, "&angrtvbd;"], [6, "&ange;"], [0, "&range;"], [0, "&dwangle;"], [0, "&uwangle;"], [0, "&angmsdaa;"], [0, "&angmsdab;"], [0, "&angmsdac;"], [0, "&angmsdad;"], [0, "&angmsdae;"], [0, "&angmsdaf;"], [0, "&angmsdag;"], [0, "&angmsdah;"], [0, "&bemptyv;"], [0, "&demptyv;"], [0, "&cemptyv;"], [0, "&raemptyv;"], [0, "&laemptyv;"], [0, "&ohbar;"], [0, "&omid;"], [0, "&opar;"], [1, "&operp;"], [1, "&olcross;"], [0, "&odsold;"], [1, "&olcir;"], [0, "&ofcir;"], [0, "&olt;"], [0, "&ogt;"], [0, "&cirscir;"], [0, "&cirE;"], [0, "&solb;"], [0, "&bsolb;"], [3, "&boxbox;"], [3, "&trisb;"], [0, "&rtriltri;"], [0, { v: "&LeftTriangleBar;", n: 824, o: "&NotLeftTriangleBar;" }], [0, { v: "&RightTriangleBar;", n: 824, o: "&NotRightTriangleBar;" }], [11, "&iinfin;"], [0, "&infintie;"], [0, "&nvinfin;"], [4, "&eparsl;"], [0, "&smeparsl;"], [0, "&eqvparsl;"], [5, "&blacklozenge;"], [8, "&RuleDelayed;"], [1, "&dsol;"], [9, "&bigodot;"], [0, "&bigoplus;"], [0, "&bigotimes;"], [1, "&biguplus;"], [1, "&bigsqcup;"], [5, "&iiiint;"], [0, "&fpartint;"], [2, "&cirfnint;"], [0, "&awint;"], [0, "&rppolint;"], [0, "&scpolint;"], [0, "&npolint;"], [0, "&pointint;"], [0, "&quatint;"], [0, "&intlarhk;"], [10, "&pluscir;"], [0, "&plusacir;"], [0, "&simplus;"], [0, "&plusdu;"], [0, "&plussim;"], [0, "&plustwo;"], [1, "&mcomma;"], [0, "&minusdu;"], [2, "&loplus;"], [0, "&roplus;"], [0, "&Cross;"], [0, "&timesd;"], [0, "&timesbar;"], [1, "&smashp;"], [0, "&lotimes;"], [0, "&rotimes;"], [0, "&otimesas;"], [0, "&Otimes;"], [0, "&odiv;"], [0, "&triplus;"], [0, "&triminus;"], [0, "&tritime;"], [0, "&intprod;"], [2, "&amalg;"], [0, "&capdot;"], [1, "&ncup;"], [0, "&ncap;"], [0, "&capand;"], [0, "&cupor;"], [0, "&cupcap;"], [0, "&capcup;"], [0, "&cupbrcap;"], [0, "&capbrcup;"], [0, "&cupcup;"], [0, "&capcap;"], [0, "&ccups;"], [0, "&ccaps;"], [2, "&ccupssm;"], [2, "&And;"], [0, "&Or;"], [0, "&andand;"], [0, "&oror;"], [0, "&orslope;"], [0, "&andslope;"], [1, "&andv;"], [0, "&orv;"], [0, "&andd;"], [0, "&ord;"], [1, "&wedbar;"], [6, "&sdote;"], [3, "&simdot;"], [2, { v: "&congdot;", n: 824, o: "&ncongdot;" }], [0, "&easter;"], [0, "&apacir;"], [0, { v: "&apE;", n: 824, o: "&napE;" }], [0, "&eplus;"], [0, "&pluse;"], [0, "&Esim;"], [0, "&Colone;"], [0, "&Equal;"], [1, "&ddotseq;"], [0, "&equivDD;"], [0, "&ltcir;"], [0, "&gtcir;"], [0, "&ltquest;"], [0, "&gtquest;"], [0, { v: "&leqslant;", n: 824, o: "&nleqslant;" }], [0, { v: "&geqslant;", n: 824, o: "&ngeqslant;" }], [0, "&lesdot;"], [0, "&gesdot;"], [0, "&lesdoto;"], [0, "&gesdoto;"], [0, "&lesdotor;"], [0, "&gesdotol;"], [0, "&lap;"], [0, "&gap;"], [0, "&lne;"], [0, "&gne;"], [0, "&lnap;"], [0, "&gnap;"], [0, "&lEg;"], [0, "&gEl;"], [0, "&lsime;"], [0, "&gsime;"], [0, "&lsimg;"], [0, "&gsiml;"], [0, "&lgE;"], [0, "&glE;"], [0, "&lesges;"], [0, "&gesles;"], [0, "&els;"], [0, "&egs;"], [0, "&elsdot;"], [0, "&egsdot;"], [0, "&el;"], [0, "&eg;"], [2, "&siml;"], [0, "&simg;"], [0, "&simlE;"], [0, "&simgE;"], [0, { v: "&LessLess;", n: 824, o: "&NotNestedLessLess;" }], [0, { v: "&GreaterGreater;", n: 824, o: "&NotNestedGreaterGreater;" }], [1, "&glj;"], [0, "&gla;"], [0, "&ltcc;"], [0, "&gtcc;"], [0, "&lescc;"], [0, "&gescc;"], [0, "&smt;"], [0, "&lat;"], [0, { v: "&smte;", n: 65024, o: "&smtes;" }], [0, { v: "&late;", n: 65024, o: "&lates;" }], [0, "&bumpE;"], [0, { v: "&PrecedesEqual;", n: 824, o: "&NotPrecedesEqual;" }], [0, { v: "&sce;", n: 824, o: "&NotSucceedsEqual;" }], [2, "&prE;"], [0, "&scE;"], [0, "&precneqq;"], [0, "&scnE;"], [0, "&prap;"], [0, "&scap;"], [0, "&precnapprox;"], [0, "&scnap;"], [0, "&Pr;"], [0, "&Sc;"], [0, "&subdot;"], [0, "&supdot;"], [0, "&subplus;"], [0, "&supplus;"], [0, "&submult;"], [0, "&supmult;"], [0, "&subedot;"], [0, "&supedot;"], [0, { v: "&subE;", n: 824, o: "&nsubE;" }], [0, { v: "&supE;", n: 824, o: "&nsupE;" }], [0, "&subsim;"], [0, "&supsim;"], [2, { v: "&subnE;", n: 65024, o: "&varsubsetneqq;" }], [0, { v: "&supnE;", n: 65024, o: "&varsupsetneqq;" }], [2, "&csub;"], [0, "&csup;"], [0, "&csube;"], [0, "&csupe;"], [0, "&subsup;"], [0, "&supsub;"], [0, "&subsub;"], [0, "&supsup;"], [0, "&suphsub;"], [0, "&supdsub;"], [0, "&forkv;"], [0, "&topfork;"], [0, "&mlcp;"], [8, "&Dashv;"], [1, "&Vdashl;"], [0, "&Barv;"], [0, "&vBar;"], [0, "&vBarv;"], [1, "&Vbar;"], [0, "&Not;"], [0, "&bNot;"], [0, "&rnmid;"], [0, "&cirmid;"], [0, "&midcir;"], [0, "&topcir;"], [0, "&nhpar;"], [0, "&parsim;"], [9, { v: "&parsl;", n: 8421, o: "&nparsl;" }], [44343, { n: new Map(/* @__PURE__ */ restoreDiff([[56476, "&Ascr;"], [1, "&Cscr;"], [0, "&Dscr;"], [2, "&Gscr;"], [2, "&Jscr;"], [0, "&Kscr;"], [2, "&Nscr;"], [0, "&Oscr;"], [0, "&Pscr;"], [0, "&Qscr;"], [1, "&Sscr;"], [0, "&Tscr;"], [0, "&Uscr;"], [0, "&Vscr;"], [0, "&Wscr;"], [0, "&Xscr;"], [0, "&Yscr;"], [0, "&Zscr;"], [0, "&ascr;"], [0, "&bscr;"], [0, "&cscr;"], [0, "&dscr;"], [1, "&fscr;"], [1, "&hscr;"], [0, "&iscr;"], [0, "&jscr;"], [0, "&kscr;"], [0, "&lscr;"], [0, "&mscr;"], [0, "&nscr;"], [1, "&pscr;"], [0, "&qscr;"], [0, "&rscr;"], [0, "&sscr;"], [0, "&tscr;"], [0, "&uscr;"], [0, "&vscr;"], [0, "&wscr;"], [0, "&xscr;"], [0, "&yscr;"], [0, "&zscr;"], [52, "&Afr;"], [0, "&Bfr;"], [1, "&Dfr;"], [0, "&Efr;"], [0, "&Ffr;"], [0, "&Gfr;"], [2, "&Jfr;"], [0, "&Kfr;"], [0, "&Lfr;"], [0, "&Mfr;"], [0, "&Nfr;"], [0, "&Ofr;"], [0, "&Pfr;"], [0, "&Qfr;"], [1, "&Sfr;"], [0, "&Tfr;"], [0, "&Ufr;"], [0, "&Vfr;"], [0, "&Wfr;"], [0, "&Xfr;"], [0, "&Yfr;"], [1, "&afr;"], [0, "&bfr;"], [0, "&cfr;"], [0, "&dfr;"], [0, "&efr;"], [0, "&ffr;"], [0, "&gfr;"], [0, "&hfr;"], [0, "&ifr;"], [0, "&jfr;"], [0, "&kfr;"], [0, "&lfr;"], [0, "&mfr;"], [0, "&nfr;"], [0, "&ofr;"], [0, "&pfr;"], [0, "&qfr;"], [0, "&rfr;"], [0, "&sfr;"], [0, "&tfr;"], [0, "&ufr;"], [0, "&vfr;"], [0, "&wfr;"], [0, "&xfr;"], [0, "&yfr;"], [0, "&zfr;"], [0, "&Aopf;"], [0, "&Bopf;"], [1, "&Dopf;"], [0, "&Eopf;"], [0, "&Fopf;"], [0, "&Gopf;"], [1, "&Iopf;"], [0, "&Jopf;"], [0, "&Kopf;"], [0, "&Lopf;"], [0, "&Mopf;"], [1, "&Oopf;"], [3, "&Sopf;"], [0, "&Topf;"], [0, "&Uopf;"], [0, "&Vopf;"], [0, "&Wopf;"], [0, "&Xopf;"], [0, "&Yopf;"], [1, "&aopf;"], [0, "&bopf;"], [0, "&copf;"], [0, "&dopf;"], [0, "&eopf;"], [0, "&fopf;"], [0, "&gopf;"], [0, "&hopf;"], [0, "&iopf;"], [0, "&jopf;"], [0, "&kopf;"], [0, "&lopf;"], [0, "&mopf;"], [0, "&nopf;"], [0, "&oopf;"], [0, "&popf;"], [0, "&qopf;"], [0, "&ropf;"], [0, "&sopf;"], [0, "&topf;"], [0, "&uopf;"], [0, "&vopf;"], [0, "&wopf;"], [0, "&xopf;"], [0, "&yopf;"], [0, "&zopf;"]])) }], [8906, "&fflig;"], [0, "&filig;"], [0, "&fllig;"], [0, "&ffilig;"], [0, "&ffllig;"]]));

// node_modules/entities/lib/esm/escape.js
var xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
var xmlCodeMap = /* @__PURE__ */ new Map([
  [34, "&quot;"],
  [38, "&amp;"],
  [39, "&apos;"],
  [60, "&lt;"],
  [62, "&gt;"]
]);
var getCodePoint = (
  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  String.prototype.codePointAt != null ? (str, index2) => str.codePointAt(index2) : (
    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
    (c, index2) => (c.charCodeAt(index2) & 64512) === 55296 ? (c.charCodeAt(index2) - 55296) * 1024 + c.charCodeAt(index2 + 1) - 56320 + 65536 : c.charCodeAt(index2)
  )
);
function encodeXML(str) {
  let ret = "";
  let lastIdx = 0;
  let match;
  while ((match = xmlReplacer.exec(str)) !== null) {
    const i = match.index;
    const char = str.charCodeAt(i);
    const next2 = xmlCodeMap.get(char);
    if (next2 !== void 0) {
      ret += str.substring(lastIdx, i) + next2;
      lastIdx = i + 1;
    } else {
      ret += `${str.substring(lastIdx, i)}&#x${getCodePoint(str, i).toString(16)};`;
      lastIdx = xmlReplacer.lastIndex += Number((char & 64512) === 55296);
    }
  }
  return ret + str.substr(lastIdx);
}
function getEscaper(regex, map2) {
  return function escape2(data2) {
    let match;
    let lastIdx = 0;
    let result = "";
    while (match = regex.exec(data2)) {
      if (lastIdx !== match.index) {
        result += data2.substring(lastIdx, match.index);
      }
      result += map2.get(match[0].charCodeAt(0));
      lastIdx = match.index + 1;
    }
    return result + data2.substring(lastIdx);
  };
}
var escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
var escapeAttribute = getEscaper(/["&\u00A0]/g, /* @__PURE__ */ new Map([
  [34, "&quot;"],
  [38, "&amp;"],
  [160, "&nbsp;"]
]));
var escapeText = getEscaper(/[&<>\u00A0]/g, /* @__PURE__ */ new Map([
  [38, "&amp;"],
  [60, "&lt;"],
  [62, "&gt;"],
  [160, "&nbsp;"]
]));

// node_modules/entities/lib/esm/index.js
var EntityLevel;
(function(EntityLevel2) {
  EntityLevel2[EntityLevel2["XML"] = 0] = "XML";
  EntityLevel2[EntityLevel2["HTML"] = 1] = "HTML";
})(EntityLevel || (EntityLevel = {}));
var EncodingMode;
(function(EncodingMode2) {
  EncodingMode2[EncodingMode2["UTF8"] = 0] = "UTF8";
  EncodingMode2[EncodingMode2["ASCII"] = 1] = "ASCII";
  EncodingMode2[EncodingMode2["Extensive"] = 2] = "Extensive";
  EncodingMode2[EncodingMode2["Attribute"] = 3] = "Attribute";
  EncodingMode2[EncodingMode2["Text"] = 4] = "Text";
})(EncodingMode || (EncodingMode = {}));

// node_modules/dom-serializer/lib/esm/foreignNames.js
var elementNames = new Map([
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "textPath"
].map((val2) => [val2.toLowerCase(), val2]));
var attributeNames = new Map([
  "definitionURL",
  "attributeName",
  "attributeType",
  "baseFrequency",
  "baseProfile",
  "calcMode",
  "clipPathUnits",
  "diffuseConstant",
  "edgeMode",
  "filterUnits",
  "glyphRef",
  "gradientTransform",
  "gradientUnits",
  "kernelMatrix",
  "kernelUnitLength",
  "keyPoints",
  "keySplines",
  "keyTimes",
  "lengthAdjust",
  "limitingConeAngle",
  "markerHeight",
  "markerUnits",
  "markerWidth",
  "maskContentUnits",
  "maskUnits",
  "numOctaves",
  "pathLength",
  "patternContentUnits",
  "patternTransform",
  "patternUnits",
  "pointsAtX",
  "pointsAtY",
  "pointsAtZ",
  "preserveAlpha",
  "preserveAspectRatio",
  "primitiveUnits",
  "refX",
  "refY",
  "repeatCount",
  "repeatDur",
  "requiredExtensions",
  "requiredFeatures",
  "specularConstant",
  "specularExponent",
  "spreadMethod",
  "startOffset",
  "stdDeviation",
  "stitchTiles",
  "surfaceScale",
  "systemLanguage",
  "tableValues",
  "targetX",
  "targetY",
  "textLength",
  "viewBox",
  "viewTarget",
  "xChannelSelector",
  "yChannelSelector",
  "zoomAndPan"
].map((val2) => [val2.toLowerCase(), val2]));

// node_modules/dom-serializer/lib/esm/index.js
var unencodedElements = /* @__PURE__ */ new Set([
  "style",
  "script",
  "xmp",
  "iframe",
  "noembed",
  "noframes",
  "plaintext",
  "noscript"
]);
function replaceQuotes(value) {
  return value.replace(/"/g, "&quot;");
}
function formatAttributes(attributes2, opts) {
  var _a3;
  if (!attributes2)
    return;
  const encode = ((_a3 = opts.encodeEntities) !== null && _a3 !== void 0 ? _a3 : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== "utf8" ? encodeXML : escapeAttribute;
  return Object.keys(attributes2).map((key) => {
    var _a4, _b;
    const value = (_a4 = attributes2[key]) !== null && _a4 !== void 0 ? _a4 : "";
    if (opts.xmlMode === "foreign") {
      key = (_b = attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
    }
    if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
      return key;
    }
    return `${key}="${encode(value)}"`;
  }).join(" ");
}
var singleTag = /* @__PURE__ */ new Set([
  "area",
  "base",
  "basefont",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
function render(node, options = {}) {
  const nodes = "length" in node ? node : [node];
  let output = "";
  for (let i = 0; i < nodes.length; i++) {
    output += renderNode(nodes[i], options);
  }
  return output;
}
var esm_default = render;
function renderNode(node, options) {
  switch (node.type) {
    case Root:
      return render(node.children, options);
    case Doctype:
    case Directive:
      return renderDirective(node);
    case Comment:
      return renderComment(node);
    case CDATA:
      return renderCdata(node);
    case Script:
    case Style:
    case Tag:
      return renderTag(node, options);
    case Text:
      return renderText(node, options);
  }
}
var foreignModeIntegrationPoints = /* @__PURE__ */ new Set([
  "mi",
  "mo",
  "mn",
  "ms",
  "mtext",
  "annotation-xml",
  "foreignObject",
  "desc",
  "title"
]);
var foreignElements = /* @__PURE__ */ new Set(["svg", "math"]);
function renderTag(elem, opts) {
  var _a3;
  if (opts.xmlMode === "foreign") {
    elem.name = (_a3 = elementNames.get(elem.name)) !== null && _a3 !== void 0 ? _a3 : elem.name;
    if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
      opts = { ...opts, xmlMode: false };
    }
  }
  if (!opts.xmlMode && foreignElements.has(elem.name)) {
    opts = { ...opts, xmlMode: "foreign" };
  }
  let tag = `<${elem.name}`;
  const attribs = formatAttributes(elem.attribs, opts);
  if (attribs) {
    tag += ` ${attribs}`;
  }
  if (elem.children.length === 0 && (opts.xmlMode ? (
    // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
    opts.selfClosingTags !== false
  ) : (
    // User explicitly asked for self-closing tags, even in HTML mode
    opts.selfClosingTags && singleTag.has(elem.name)
  ))) {
    if (!opts.xmlMode)
      tag += " ";
    tag += "/>";
  } else {
    tag += ">";
    if (elem.children.length > 0) {
      tag += render(elem.children, opts);
    }
    if (opts.xmlMode || !singleTag.has(elem.name)) {
      tag += `</${elem.name}>`;
    }
  }
  return tag;
}
function renderDirective(elem) {
  return `<${elem.data}>`;
}
function renderText(elem, opts) {
  var _a3;
  let data2 = elem.data || "";
  if (((_a3 = opts.encodeEntities) !== null && _a3 !== void 0 ? _a3 : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {
    data2 = opts.xmlMode || opts.encodeEntities !== "utf8" ? encodeXML(data2) : escapeText(data2);
  }
  return data2;
}
function renderCdata(elem) {
  return `<![CDATA[${elem.children[0].data}]]>`;
}
function renderComment(elem) {
  return `<!--${elem.data}-->`;
}

// node_modules/domutils/lib/esm/stringify.js
function getOuterHTML(node, options) {
  return esm_default(node, options);
}
function getInnerHTML(node, options) {
  return hasChildren(node) ? node.children.map((node2) => getOuterHTML(node2, options)).join("") : "";
}
function getText(node) {
  if (Array.isArray(node))
    return node.map(getText).join("");
  if (isTag2(node))
    return node.name === "br" ? "\n" : getText(node.children);
  if (isCDATA(node))
    return getText(node.children);
  if (isText(node))
    return node.data;
  return "";
}
function textContent(node) {
  if (Array.isArray(node))
    return node.map(textContent).join("");
  if (hasChildren(node) && !isComment(node)) {
    return textContent(node.children);
  }
  if (isText(node))
    return node.data;
  return "";
}
function innerText(node) {
  if (Array.isArray(node))
    return node.map(innerText).join("");
  if (hasChildren(node) && (node.type === ElementType.Tag || isCDATA(node))) {
    return innerText(node.children);
  }
  if (isText(node))
    return node.data;
  return "";
}

// node_modules/domutils/lib/esm/traversal.js
function getChildren(elem) {
  return hasChildren(elem) ? elem.children : [];
}
function getParent(elem) {
  return elem.parent || null;
}
function getSiblings(elem) {
  const parent2 = getParent(elem);
  if (parent2 != null)
    return getChildren(parent2);
  const siblings2 = [elem];
  let { prev: prev2, next: next2 } = elem;
  while (prev2 != null) {
    siblings2.unshift(prev2);
    ({ prev: prev2 } = prev2);
  }
  while (next2 != null) {
    siblings2.push(next2);
    ({ next: next2 } = next2);
  }
  return siblings2;
}
function getAttributeValue(elem, name) {
  var _a3;
  return (_a3 = elem.attribs) === null || _a3 === void 0 ? void 0 : _a3[name];
}
function hasAttrib(elem, name) {
  return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
}
function getName(elem) {
  return elem.name;
}
function nextElementSibling(elem) {
  let { next: next2 } = elem;
  while (next2 !== null && !isTag2(next2))
    ({ next: next2 } = next2);
  return next2;
}
function prevElementSibling(elem) {
  let { prev: prev2 } = elem;
  while (prev2 !== null && !isTag2(prev2))
    ({ prev: prev2 } = prev2);
  return prev2;
}

// node_modules/domutils/lib/esm/manipulation.js
function removeElement(elem) {
  if (elem.prev)
    elem.prev.next = elem.next;
  if (elem.next)
    elem.next.prev = elem.prev;
  if (elem.parent) {
    const childs = elem.parent.children;
    const childsIndex = childs.lastIndexOf(elem);
    if (childsIndex >= 0) {
      childs.splice(childsIndex, 1);
    }
  }
  elem.next = null;
  elem.prev = null;
  elem.parent = null;
}
function replaceElement(elem, replacement) {
  const prev2 = replacement.prev = elem.prev;
  if (prev2) {
    prev2.next = replacement;
  }
  const next2 = replacement.next = elem.next;
  if (next2) {
    next2.prev = replacement;
  }
  const parent2 = replacement.parent = elem.parent;
  if (parent2) {
    const childs = parent2.children;
    childs[childs.lastIndexOf(elem)] = replacement;
    elem.parent = null;
  }
}
function appendChild(parent2, child) {
  removeElement(child);
  child.next = null;
  child.parent = parent2;
  if (parent2.children.push(child) > 1) {
    const sibling = parent2.children[parent2.children.length - 2];
    sibling.next = child;
    child.prev = sibling;
  } else {
    child.prev = null;
  }
}
function append2(elem, next2) {
  removeElement(next2);
  const { parent: parent2 } = elem;
  const currNext = elem.next;
  next2.next = currNext;
  next2.prev = elem;
  elem.next = next2;
  next2.parent = parent2;
  if (currNext) {
    currNext.prev = next2;
    if (parent2) {
      const childs = parent2.children;
      childs.splice(childs.lastIndexOf(currNext), 0, next2);
    }
  } else if (parent2) {
    parent2.children.push(next2);
  }
}
function prependChild(parent2, child) {
  removeElement(child);
  child.parent = parent2;
  child.prev = null;
  if (parent2.children.unshift(child) !== 1) {
    const sibling = parent2.children[1];
    sibling.prev = child;
    child.next = sibling;
  } else {
    child.next = null;
  }
}
function prepend(elem, prev2) {
  removeElement(prev2);
  const { parent: parent2 } = elem;
  if (parent2) {
    const childs = parent2.children;
    childs.splice(childs.indexOf(elem), 0, prev2);
  }
  if (elem.prev) {
    elem.prev.next = prev2;
  }
  prev2.parent = parent2;
  prev2.prev = elem.prev;
  prev2.next = elem;
  elem.prev = prev2;
}

// node_modules/domutils/lib/esm/querying.js
function filter(test, node, recurse = true, limit = Infinity) {
  return find(test, Array.isArray(node) ? node : [node], recurse, limit);
}
function find(test, nodes, recurse, limit) {
  const result = [];
  const nodeStack = [nodes];
  const indexStack = [0];
  for (; ; ) {
    if (indexStack[0] >= nodeStack[0].length) {
      if (indexStack.length === 1) {
        return result;
      }
      nodeStack.shift();
      indexStack.shift();
      continue;
    }
    const elem = nodeStack[0][indexStack[0]++];
    if (test(elem)) {
      result.push(elem);
      if (--limit <= 0)
        return result;
    }
    if (recurse && hasChildren(elem) && elem.children.length > 0) {
      indexStack.unshift(0);
      nodeStack.unshift(elem.children);
    }
  }
}
function findOneChild(test, nodes) {
  return nodes.find(test);
}
function findOne(test, nodes, recurse = true) {
  let elem = null;
  for (let i = 0; i < nodes.length && !elem; i++) {
    const node = nodes[i];
    if (!isTag2(node)) {
      continue;
    } else if (test(node)) {
      elem = node;
    } else if (recurse && node.children.length > 0) {
      elem = findOne(test, node.children, true);
    }
  }
  return elem;
}
function existsOne(test, nodes) {
  return nodes.some((checked) => isTag2(checked) && (test(checked) || existsOne(test, checked.children)));
}
function findAll(test, nodes) {
  const result = [];
  const nodeStack = [nodes];
  const indexStack = [0];
  for (; ; ) {
    if (indexStack[0] >= nodeStack[0].length) {
      if (nodeStack.length === 1) {
        return result;
      }
      nodeStack.shift();
      indexStack.shift();
      continue;
    }
    const elem = nodeStack[0][indexStack[0]++];
    if (!isTag2(elem))
      continue;
    if (test(elem))
      result.push(elem);
    if (elem.children.length > 0) {
      indexStack.unshift(0);
      nodeStack.unshift(elem.children);
    }
  }
}

// node_modules/domutils/lib/esm/legacy.js
var Checks = {
  tag_name(name) {
    if (typeof name === "function") {
      return (elem) => isTag2(elem) && name(elem.name);
    } else if (name === "*") {
      return isTag2;
    }
    return (elem) => isTag2(elem) && elem.name === name;
  },
  tag_type(type) {
    if (typeof type === "function") {
      return (elem) => type(elem.type);
    }
    return (elem) => elem.type === type;
  },
  tag_contains(data2) {
    if (typeof data2 === "function") {
      return (elem) => isText(elem) && data2(elem.data);
    }
    return (elem) => isText(elem) && elem.data === data2;
  }
};
function getAttribCheck(attrib, value) {
  if (typeof value === "function") {
    return (elem) => isTag2(elem) && value(elem.attribs[attrib]);
  }
  return (elem) => isTag2(elem) && elem.attribs[attrib] === value;
}
function combineFuncs(a, b2) {
  return (elem) => a(elem) || b2(elem);
}
function compileTest(options) {
  const funcs = Object.keys(options).map((key) => {
    const value = options[key];
    return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);
  });
  return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
function testElement(options, node) {
  const test = compileTest(options);
  return test ? test(node) : true;
}
function getElements(options, nodes, recurse, limit = Infinity) {
  const test = compileTest(options);
  return test ? filter(test, nodes, recurse, limit) : [];
}
function getElementById(id, nodes, recurse = true) {
  if (!Array.isArray(nodes))
    nodes = [nodes];
  return findOne(getAttribCheck("id", id), nodes, recurse);
}
function getElementsByTagName(tagName, nodes, recurse = true, limit = Infinity) {
  return filter(Checks["tag_name"](tagName), nodes, recurse, limit);
}
function getElementsByTagType(type, nodes, recurse = true, limit = Infinity) {
  return filter(Checks["tag_type"](type), nodes, recurse, limit);
}

// node_modules/domutils/lib/esm/helpers.js
function removeSubsets(nodes) {
  let idx = nodes.length;
  while (--idx >= 0) {
    const node = nodes[idx];
    if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
      nodes.splice(idx, 1);
      continue;
    }
    for (let ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
      if (nodes.includes(ancestor)) {
        nodes.splice(idx, 1);
        break;
      }
    }
  }
  return nodes;
}
var DocumentPosition;
(function(DocumentPosition2) {
  DocumentPosition2[DocumentPosition2["DISCONNECTED"] = 1] = "DISCONNECTED";
  DocumentPosition2[DocumentPosition2["PRECEDING"] = 2] = "PRECEDING";
  DocumentPosition2[DocumentPosition2["FOLLOWING"] = 4] = "FOLLOWING";
  DocumentPosition2[DocumentPosition2["CONTAINS"] = 8] = "CONTAINS";
  DocumentPosition2[DocumentPosition2["CONTAINED_BY"] = 16] = "CONTAINED_BY";
})(DocumentPosition || (DocumentPosition = {}));
function compareDocumentPosition(nodeA, nodeB) {
  const aParents = [];
  const bParents = [];
  if (nodeA === nodeB) {
    return 0;
  }
  let current = hasChildren(nodeA) ? nodeA : nodeA.parent;
  while (current) {
    aParents.unshift(current);
    current = current.parent;
  }
  current = hasChildren(nodeB) ? nodeB : nodeB.parent;
  while (current) {
    bParents.unshift(current);
    current = current.parent;
  }
  const maxIdx = Math.min(aParents.length, bParents.length);
  let idx = 0;
  while (idx < maxIdx && aParents[idx] === bParents[idx]) {
    idx++;
  }
  if (idx === 0) {
    return DocumentPosition.DISCONNECTED;
  }
  const sharedParent = aParents[idx - 1];
  const siblings2 = sharedParent.children;
  const aSibling = aParents[idx];
  const bSibling = bParents[idx];
  if (siblings2.indexOf(aSibling) > siblings2.indexOf(bSibling)) {
    if (sharedParent === nodeB) {
      return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;
    }
    return DocumentPosition.FOLLOWING;
  }
  if (sharedParent === nodeA) {
    return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;
  }
  return DocumentPosition.PRECEDING;
}
function uniqueSort(nodes) {
  nodes = nodes.filter((node, i, arr) => !arr.includes(node, i + 1));
  nodes.sort((a, b2) => {
    const relative = compareDocumentPosition(a, b2);
    if (relative & DocumentPosition.PRECEDING) {
      return -1;
    } else if (relative & DocumentPosition.FOLLOWING) {
      return 1;
    }
    return 0;
  });
  return nodes;
}

// node_modules/domutils/lib/esm/feeds.js
function getFeed(doc) {
  const feedRoot = getOneElement(isValidFeed, doc);
  return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
}
function getAtomFeed(feedRoot) {
  var _a3;
  const childs = feedRoot.children;
  const feed = {
    type: "atom",
    items: getElementsByTagName("entry", childs).map((item) => {
      var _a4;
      const { children: children3 } = item;
      const entry = { media: getMediaElements(children3) };
      addConditionally(entry, "id", "id", children3);
      addConditionally(entry, "title", "title", children3);
      const href2 = (_a4 = getOneElement("link", children3)) === null || _a4 === void 0 ? void 0 : _a4.attribs["href"];
      if (href2) {
        entry.link = href2;
      }
      const description = fetch("summary", children3) || fetch("content", children3);
      if (description) {
        entry.description = description;
      }
      const pubDate = fetch("updated", children3);
      if (pubDate) {
        entry.pubDate = new Date(pubDate);
      }
      return entry;
    })
  };
  addConditionally(feed, "id", "id", childs);
  addConditionally(feed, "title", "title", childs);
  const href = (_a3 = getOneElement("link", childs)) === null || _a3 === void 0 ? void 0 : _a3.attribs["href"];
  if (href) {
    feed.link = href;
  }
  addConditionally(feed, "description", "subtitle", childs);
  const updated = fetch("updated", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally(feed, "author", "email", childs, true);
  return feed;
}
function getRssFeed(feedRoot) {
  var _a3, _b;
  const childs = (_b = (_a3 = getOneElement("channel", feedRoot.children)) === null || _a3 === void 0 ? void 0 : _a3.children) !== null && _b !== void 0 ? _b : [];
  const feed = {
    type: feedRoot.name.substr(0, 3),
    id: "",
    items: getElementsByTagName("item", feedRoot.children).map((item) => {
      const { children: children3 } = item;
      const entry = { media: getMediaElements(children3) };
      addConditionally(entry, "id", "guid", children3);
      addConditionally(entry, "title", "title", children3);
      addConditionally(entry, "link", "link", children3);
      addConditionally(entry, "description", "description", children3);
      const pubDate = fetch("pubDate", children3) || fetch("dc:date", children3);
      if (pubDate)
        entry.pubDate = new Date(pubDate);
      return entry;
    })
  };
  addConditionally(feed, "title", "title", childs);
  addConditionally(feed, "link", "link", childs);
  addConditionally(feed, "description", "description", childs);
  const updated = fetch("lastBuildDate", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally(feed, "author", "managingEditor", childs, true);
  return feed;
}
var MEDIA_KEYS_STRING = ["url", "type", "lang"];
var MEDIA_KEYS_INT = [
  "fileSize",
  "bitrate",
  "framerate",
  "samplingrate",
  "channels",
  "duration",
  "height",
  "width"
];
function getMediaElements(where) {
  return getElementsByTagName("media:content", where).map((elem) => {
    const { attribs } = elem;
    const media = {
      medium: attribs["medium"],
      isDefault: !!attribs["isDefault"]
    };
    for (const attrib of MEDIA_KEYS_STRING) {
      if (attribs[attrib]) {
        media[attrib] = attribs[attrib];
      }
    }
    for (const attrib of MEDIA_KEYS_INT) {
      if (attribs[attrib]) {
        media[attrib] = parseInt(attribs[attrib], 10);
      }
    }
    if (attribs["expression"]) {
      media.expression = attribs["expression"];
    }
    return media;
  });
}
function getOneElement(tagName, node) {
  return getElementsByTagName(tagName, node, true, 1)[0];
}
function fetch(tagName, where, recurse = false) {
  return textContent(getElementsByTagName(tagName, where, recurse, 1)).trim();
}
function addConditionally(obj, prop2, tagName, where, recurse = false) {
  const val2 = fetch(tagName, where, recurse);
  if (val2)
    obj[prop2] = val2;
}
function isValidFeed(value) {
  return value === "rss" || value === "feed" || value === "rdf:RDF";
}

// node_modules/cheerio/lib/esm/static.js
function render2(that, dom, options) {
  if (!that)
    return "";
  return that(dom !== null && dom !== void 0 ? dom : that._root.children, null, void 0, options).toString();
}
function isOptions(dom, options) {
  return !options && typeof dom === "object" && dom != null && !("length" in dom) && !("type" in dom);
}
function html(dom, options) {
  const toRender = isOptions(dom) ? (options = dom, void 0) : dom;
  const opts = {
    ...options_default,
    ...this === null || this === void 0 ? void 0 : this._options,
    ...flatten(options !== null && options !== void 0 ? options : {})
  };
  return render2(this, toRender, opts);
}
function xml(dom) {
  const options = { ...this._options, xmlMode: true };
  return render2(this, dom, options);
}
function text2(elements) {
  const elems = elements ? elements : this ? this.root() : [];
  let ret = "";
  for (let i = 0; i < elems.length; i++) {
    ret += textContent(elems[i]);
  }
  return ret;
}
function parseHTML(data2, context, keepScripts = typeof context === "boolean" ? context : false) {
  if (!data2 || typeof data2 !== "string") {
    return null;
  }
  if (typeof context === "boolean") {
    keepScripts = context;
  }
  const parsed = this.load(data2, options_default, false);
  if (!keepScripts) {
    parsed("script").remove();
  }
  return parsed.root()[0].children.slice();
}
function root() {
  return this(this._root);
}
function contains(container, contained) {
  if (contained === container) {
    return false;
  }
  let next2 = contained;
  while (next2 && next2 !== next2.parent) {
    next2 = next2.parent;
    if (next2 === container) {
      return true;
    }
  }
  return false;
}
function merge2(arr1, arr2) {
  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {
    return;
  }
  let newLength = arr1.length;
  const len = +arr2.length;
  for (let i = 0; i < len; i++) {
    arr1[newLength++] = arr2[i];
  }
  arr1.length = newLength;
  return arr1;
}
function isArrayLike(item) {
  if (Array.isArray(item)) {
    return true;
  }
  if (typeof item !== "object" || !Object.prototype.hasOwnProperty.call(item, "length") || typeof item.length !== "number" || item.length < 0) {
    return false;
  }
  for (let i = 0; i < item.length; i++) {
    if (!(i in item)) {
      return false;
    }
  }
  return true;
}

// node_modules/cheerio/lib/esm/api/attributes.js
var attributes_exports = {};
__export(attributes_exports, {
  addClass: () => addClass,
  attr: () => attr2,
  data: () => data,
  hasClass: () => hasClass,
  prop: () => prop,
  removeAttr: () => removeAttr,
  removeClass: () => removeClass,
  toggleClass: () => toggleClass,
  val: () => val
});

// node_modules/cheerio/lib/esm/utils.js
function isCheerio(maybeCheerio) {
  return maybeCheerio.cheerio != null;
}
function camelCase(str) {
  return str.replace(/[_.-](\w|$)/g, (_2, x3) => x3.toUpperCase());
}
function cssCase(str) {
  return str.replace(/[A-Z]/g, "-$&").toLowerCase();
}
function domEach(array, fn3) {
  const len = array.length;
  for (let i = 0; i < len; i++)
    fn3(array[i], i);
  return array;
}
function cloneDom(dom) {
  const clone2 = "length" in dom ? Array.prototype.map.call(dom, (el2) => cloneNode(el2, true)) : [cloneNode(dom, true)];
  const root3 = new Document(clone2);
  clone2.forEach((node) => {
    node.parent = root3;
  });
  return clone2;
}
var CharacterCodes;
(function(CharacterCodes2) {
  CharacterCodes2[CharacterCodes2["LowerA"] = 97] = "LowerA";
  CharacterCodes2[CharacterCodes2["LowerZ"] = 122] = "LowerZ";
  CharacterCodes2[CharacterCodes2["UpperA"] = 65] = "UpperA";
  CharacterCodes2[CharacterCodes2["UpperZ"] = 90] = "UpperZ";
  CharacterCodes2[CharacterCodes2["Exclamation"] = 33] = "Exclamation";
})(CharacterCodes || (CharacterCodes = {}));
function isHtml(str) {
  const tagStart = str.indexOf("<");
  if (tagStart < 0 || tagStart > str.length - 3)
    return false;
  const tagChar = str.charCodeAt(tagStart + 1);
  return (tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ || tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ || tagChar === CharacterCodes.Exclamation) && str.includes(">", tagStart + 2);
}

// node_modules/cheerio/lib/esm/api/attributes.js
var hasOwn = Object.prototype.hasOwnProperty;
var rspace = /\s+/;
var dataAttrPrefix = "data-";
var primitives = {
  null: null,
  true: true,
  false: false
};
var rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;
var rbrace = /^{[^]*}$|^\[[^]*]$/;
function getAttr(elem, name, xmlMode) {
  var _a3;
  if (!elem || !isTag2(elem))
    return void 0;
  (_a3 = elem.attribs) !== null && _a3 !== void 0 ? _a3 : elem.attribs = {};
  if (!name) {
    return elem.attribs;
  }
  if (hasOwn.call(elem.attribs, name)) {
    return !xmlMode && rboolean.test(name) ? name : elem.attribs[name];
  }
  if (elem.name === "option" && name === "value") {
    return text2(elem.children);
  }
  if (elem.name === "input" && (elem.attribs["type"] === "radio" || elem.attribs["type"] === "checkbox") && name === "value") {
    return "on";
  }
  return void 0;
}
function setAttr(el2, name, value) {
  if (value === null) {
    removeAttribute(el2, name);
  } else {
    el2.attribs[name] = `${value}`;
  }
}
function attr2(name, value) {
  if (typeof name === "object" || value !== void 0) {
    if (typeof value === "function") {
      if (typeof name !== "string") {
        {
          throw new Error("Bad combination of arguments.");
        }
      }
      return domEach(this, (el2, i) => {
        if (isTag2(el2))
          setAttr(el2, name, value.call(el2, i, el2.attribs[name]));
      });
    }
    return domEach(this, (el2) => {
      if (!isTag2(el2))
        return;
      if (typeof name === "object") {
        Object.keys(name).forEach((objName) => {
          const objValue = name[objName];
          setAttr(el2, objName, objValue);
        });
      } else {
        setAttr(el2, name, value);
      }
    });
  }
  return arguments.length > 1 ? this : getAttr(this[0], name, this.options.xmlMode);
}
function getProp(el2, name, xmlMode) {
  return name in el2 ? (
    // @ts-expect-error TS doesn't like us accessing the value directly here.
    el2[name]
  ) : !xmlMode && rboolean.test(name) ? getAttr(el2, name, false) !== void 0 : getAttr(el2, name, xmlMode);
}
function setProp(el2, name, value, xmlMode) {
  if (name in el2) {
    el2[name] = value;
  } else {
    setAttr(el2, name, !xmlMode && rboolean.test(name) ? value ? "" : null : `${value}`);
  }
}
function prop(name, value) {
  var _a3;
  if (typeof name === "string" && value === void 0) {
    const el2 = this[0];
    if (!el2 || !isTag2(el2))
      return void 0;
    switch (name) {
      case "style": {
        const property = this.css();
        const keys = Object.keys(property);
        keys.forEach((p, i) => {
          property[i] = p;
        });
        property.length = keys.length;
        return property;
      }
      case "tagName":
      case "nodeName": {
        return el2.name.toUpperCase();
      }
      case "href":
      case "src": {
        const prop2 = (_a3 = el2.attribs) === null || _a3 === void 0 ? void 0 : _a3[name];
        if (typeof URL !== "undefined" && (name === "href" && (el2.tagName === "a" || el2.name === "link") || name === "src" && (el2.tagName === "img" || el2.tagName === "iframe" || el2.tagName === "audio" || el2.tagName === "video" || el2.tagName === "source")) && prop2 !== void 0 && this.options.baseURI) {
          return new URL(prop2, this.options.baseURI).href;
        }
        return prop2;
      }
      case "innerText": {
        return innerText(el2);
      }
      case "textContent": {
        return textContent(el2);
      }
      case "outerHTML":
        return this.clone().wrap("<container />").parent().html();
      case "innerHTML":
        return this.html();
      default:
        return getProp(el2, name, this.options.xmlMode);
    }
  }
  if (typeof name === "object" || value !== void 0) {
    if (typeof value === "function") {
      if (typeof name === "object") {
        throw new Error("Bad combination of arguments.");
      }
      return domEach(this, (el2, i) => {
        if (isTag2(el2)) {
          setProp(el2, name, value.call(el2, i, getProp(el2, name, this.options.xmlMode)), this.options.xmlMode);
        }
      });
    }
    return domEach(this, (el2) => {
      if (!isTag2(el2))
        return;
      if (typeof name === "object") {
        Object.keys(name).forEach((key) => {
          const val2 = name[key];
          setProp(el2, key, val2, this.options.xmlMode);
        });
      } else {
        setProp(el2, name, value, this.options.xmlMode);
      }
    });
  }
  return void 0;
}
function setData(el2, name, value) {
  var _a3;
  const elem = el2;
  (_a3 = elem.data) !== null && _a3 !== void 0 ? _a3 : elem.data = {};
  if (typeof name === "object")
    Object.assign(elem.data, name);
  else if (typeof name === "string" && value !== void 0) {
    elem.data[name] = value;
  }
}
function readData(el2, name) {
  let domNames;
  let jsNames;
  let value;
  if (name == null) {
    domNames = Object.keys(el2.attribs).filter((attrName) => attrName.startsWith(dataAttrPrefix));
    jsNames = domNames.map((domName) => camelCase(domName.slice(dataAttrPrefix.length)));
  } else {
    domNames = [dataAttrPrefix + cssCase(name)];
    jsNames = [name];
  }
  for (let idx = 0; idx < domNames.length; ++idx) {
    const domName = domNames[idx];
    const jsName = jsNames[idx];
    if (hasOwn.call(el2.attribs, domName) && !hasOwn.call(el2.data, jsName)) {
      value = el2.attribs[domName];
      if (hasOwn.call(primitives, value)) {
        value = primitives[value];
      } else if (value === String(Number(value))) {
        value = Number(value);
      } else if (rbrace.test(value)) {
        try {
          value = JSON.parse(value);
        } catch (e) {
        }
      }
      el2.data[jsName] = value;
    }
  }
  return name == null ? el2.data : value;
}
function data(name, value) {
  var _a3;
  const elem = this[0];
  if (!elem || !isTag2(elem))
    return;
  const dataEl = elem;
  (_a3 = dataEl.data) !== null && _a3 !== void 0 ? _a3 : dataEl.data = {};
  if (!name) {
    return readData(dataEl);
  }
  if (typeof name === "object" || value !== void 0) {
    domEach(this, (el2) => {
      if (isTag2(el2)) {
        if (typeof name === "object")
          setData(el2, name);
        else
          setData(el2, name, value);
      }
    });
    return this;
  }
  if (hasOwn.call(dataEl.data, name)) {
    return dataEl.data[name];
  }
  return readData(dataEl, name);
}
function val(value) {
  const querying = arguments.length === 0;
  const element2 = this[0];
  if (!element2 || !isTag2(element2))
    return querying ? void 0 : this;
  switch (element2.name) {
    case "textarea":
      return this.text(value);
    case "select": {
      const option = this.find("option:selected");
      if (!querying) {
        if (this.attr("multiple") == null && typeof value === "object") {
          return this;
        }
        this.find("option").removeAttr("selected");
        const values = typeof value !== "object" ? [value] : value;
        for (let i = 0; i < values.length; i++) {
          this.find(`option[value="${values[i]}"]`).attr("selected", "");
        }
        return this;
      }
      return this.attr("multiple") ? option.toArray().map((el2) => text2(el2.children)) : option.attr("value");
    }
    case "input":
    case "option":
      return querying ? this.attr("value") : this.attr("value", value);
  }
  return void 0;
}
function removeAttribute(elem, name) {
  if (!elem.attribs || !hasOwn.call(elem.attribs, name))
    return;
  delete elem.attribs[name];
}
function splitNames(names) {
  return names ? names.trim().split(rspace) : [];
}
function removeAttr(name) {
  const attrNames = splitNames(name);
  for (let i = 0; i < attrNames.length; i++) {
    domEach(this, (elem) => {
      if (isTag2(elem))
        removeAttribute(elem, attrNames[i]);
    });
  }
  return this;
}
function hasClass(className) {
  return this.toArray().some((elem) => {
    const clazz = isTag2(elem) && elem.attribs["class"];
    let idx = -1;
    if (clazz && className.length) {
      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {
        const end2 = idx + className.length;
        if ((idx === 0 || rspace.test(clazz[idx - 1])) && (end2 === clazz.length || rspace.test(clazz[end2]))) {
          return true;
        }
      }
    }
    return false;
  });
}
function addClass(value) {
  if (typeof value === "function") {
    return domEach(this, (el2, i) => {
      if (isTag2(el2)) {
        const className = el2.attribs["class"] || "";
        addClass.call([el2], value.call(el2, i, className));
      }
    });
  }
  if (!value || typeof value !== "string")
    return this;
  const classNames = value.split(rspace);
  const numElements = this.length;
  for (let i = 0; i < numElements; i++) {
    const el2 = this[i];
    if (!isTag2(el2))
      continue;
    const className = getAttr(el2, "class", false);
    if (!className) {
      setAttr(el2, "class", classNames.join(" ").trim());
    } else {
      let setClass = ` ${className} `;
      for (let j4 = 0; j4 < classNames.length; j4++) {
        const appendClass = `${classNames[j4]} `;
        if (!setClass.includes(` ${appendClass}`))
          setClass += appendClass;
      }
      setAttr(el2, "class", setClass.trim());
    }
  }
  return this;
}
function removeClass(name) {
  if (typeof name === "function") {
    return domEach(this, (el2, i) => {
      if (isTag2(el2)) {
        removeClass.call([el2], name.call(el2, i, el2.attribs["class"] || ""));
      }
    });
  }
  const classes = splitNames(name);
  const numClasses = classes.length;
  const removeAll = arguments.length === 0;
  return domEach(this, (el2) => {
    if (!isTag2(el2))
      return;
    if (removeAll) {
      el2.attribs["class"] = "";
    } else {
      const elClasses = splitNames(el2.attribs["class"]);
      let changed = false;
      for (let j4 = 0; j4 < numClasses; j4++) {
        const index2 = elClasses.indexOf(classes[j4]);
        if (index2 >= 0) {
          elClasses.splice(index2, 1);
          changed = true;
          j4--;
        }
      }
      if (changed) {
        el2.attribs["class"] = elClasses.join(" ");
      }
    }
  });
}
function toggleClass(value, stateVal) {
  if (typeof value === "function") {
    return domEach(this, (el2, i) => {
      if (isTag2(el2)) {
        toggleClass.call([el2], value.call(el2, i, el2.attribs["class"] || "", stateVal), stateVal);
      }
    });
  }
  if (!value || typeof value !== "string")
    return this;
  const classNames = value.split(rspace);
  const numClasses = classNames.length;
  const state = typeof stateVal === "boolean" ? stateVal ? 1 : -1 : 0;
  const numElements = this.length;
  for (let i = 0; i < numElements; i++) {
    const el2 = this[i];
    if (!isTag2(el2))
      continue;
    const elementClasses = splitNames(el2.attribs["class"]);
    for (let j4 = 0; j4 < numClasses; j4++) {
      const index2 = elementClasses.indexOf(classNames[j4]);
      if (state >= 0 && index2 < 0) {
        elementClasses.push(classNames[j4]);
      } else if (state <= 0 && index2 >= 0) {
        elementClasses.splice(index2, 1);
      }
    }
    el2.attribs["class"] = elementClasses.join(" ");
  }
  return this;
}

// node_modules/cheerio/lib/esm/api/traversing.js
var traversing_exports = {};
__export(traversing_exports, {
  add: () => add,
  addBack: () => addBack,
  children: () => children2,
  closest: () => closest,
  contents: () => contents,
  each: () => each,
  end: () => end,
  eq: () => eq,
  filter: () => filter3,
  filterArray: () => filterArray,
  find: () => find3,
  first: () => first,
  get: () => get,
  has: () => has,
  index: () => index,
  is: () => is4,
  last: () => last,
  map: () => map,
  next: () => next,
  nextAll: () => nextAll,
  nextUntil: () => nextUntil,
  not: () => not,
  parent: () => parent,
  parents: () => parents,
  parentsUntil: () => parentsUntil,
  prev: () => prev,
  prevAll: () => prevAll,
  prevUntil: () => prevUntil,
  siblings: () => siblings,
  slice: () => slice,
  toArray: () => toArray
});

// node_modules/css-what/lib/es/types.js
var SelectorType;
(function(SelectorType2) {
  SelectorType2["Attribute"] = "attribute";
  SelectorType2["Pseudo"] = "pseudo";
  SelectorType2["PseudoElement"] = "pseudo-element";
  SelectorType2["Tag"] = "tag";
  SelectorType2["Universal"] = "universal";
  SelectorType2["Adjacent"] = "adjacent";
  SelectorType2["Child"] = "child";
  SelectorType2["Descendant"] = "descendant";
  SelectorType2["Parent"] = "parent";
  SelectorType2["Sibling"] = "sibling";
  SelectorType2["ColumnCombinator"] = "column-combinator";
})(SelectorType || (SelectorType = {}));
var AttributeAction;
(function(AttributeAction2) {
  AttributeAction2["Any"] = "any";
  AttributeAction2["Element"] = "element";
  AttributeAction2["End"] = "end";
  AttributeAction2["Equals"] = "equals";
  AttributeAction2["Exists"] = "exists";
  AttributeAction2["Hyphen"] = "hyphen";
  AttributeAction2["Not"] = "not";
  AttributeAction2["Start"] = "start";
})(AttributeAction || (AttributeAction = {}));

// node_modules/css-what/lib/es/parse.js
var reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
var reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
var actionTypes = /* @__PURE__ */ new Map([
  [126, AttributeAction.Element],
  [94, AttributeAction.Start],
  [36, AttributeAction.End],
  [42, AttributeAction.Any],
  [33, AttributeAction.Not],
  [124, AttributeAction.Hyphen]
]);
var unpackPseudos = /* @__PURE__ */ new Set([
  "has",
  "not",
  "matches",
  "is",
  "where",
  "host",
  "host-context"
]);
function isTraversal(selector) {
  switch (selector.type) {
    case SelectorType.Adjacent:
    case SelectorType.Child:
    case SelectorType.Descendant:
    case SelectorType.Parent:
    case SelectorType.Sibling:
    case SelectorType.ColumnCombinator:
      return true;
    default:
      return false;
  }
}
var stripQuotesFromPseudos = /* @__PURE__ */ new Set(["contains", "icontains"]);
function funescape(_2, escaped, escapedWhitespace) {
  const high = parseInt(escaped, 16) - 65536;
  return high !== high || escapedWhitespace ? escaped : high < 0 ? (
    // BMP codepoint
    String.fromCharCode(high + 65536)
  ) : (
    // Supplemental Plane codepoint (surrogate pair)
    String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
  );
}
function unescapeCSS(str) {
  return str.replace(reEscape, funescape);
}
function isQuote(c) {
  return c === 39 || c === 34;
}
function isWhitespace(c) {
  return c === 32 || c === 9 || c === 10 || c === 12 || c === 13;
}
function parse2(selector) {
  const subselects2 = [];
  const endIndex = parseSelector(subselects2, `${selector}`, 0);
  if (endIndex < selector.length) {
    throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);
  }
  return subselects2;
}
function parseSelector(subselects2, selector, selectorIndex) {
  let tokens = [];
  function getName2(offset) {
    const match = selector.slice(selectorIndex + offset).match(reName);
    if (!match) {
      throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);
    }
    const [name] = match;
    selectorIndex += offset + name.length;
    return unescapeCSS(name);
  }
  function stripWhitespace(offset) {
    selectorIndex += offset;
    while (selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))) {
      selectorIndex++;
    }
  }
  function readValueWithParenthesis() {
    selectorIndex += 1;
    const start = selectorIndex;
    let counter = 1;
    for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {
      if (selector.charCodeAt(selectorIndex) === 40 && !isEscaped(selectorIndex)) {
        counter++;
      } else if (selector.charCodeAt(selectorIndex) === 41 && !isEscaped(selectorIndex)) {
        counter--;
      }
    }
    if (counter) {
      throw new Error("Parenthesis not matched");
    }
    return unescapeCSS(selector.slice(start, selectorIndex - 1));
  }
  function isEscaped(pos) {
    let slashCount = 0;
    while (selector.charCodeAt(--pos) === 92)
      slashCount++;
    return (slashCount & 1) === 1;
  }
  function ensureNotTraversal() {
    if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {
      throw new Error("Did not expect successive traversals.");
    }
  }
  function addTraversal(type) {
    if (tokens.length > 0 && tokens[tokens.length - 1].type === SelectorType.Descendant) {
      tokens[tokens.length - 1].type = type;
      return;
    }
    ensureNotTraversal();
    tokens.push({ type });
  }
  function addSpecialAttribute(name, action) {
    tokens.push({
      type: SelectorType.Attribute,
      name,
      action,
      value: getName2(1),
      namespace: null,
      ignoreCase: "quirks"
    });
  }
  function finalizeSubselector() {
    if (tokens.length && tokens[tokens.length - 1].type === SelectorType.Descendant) {
      tokens.pop();
    }
    if (tokens.length === 0) {
      throw new Error("Empty sub-selector");
    }
    subselects2.push(tokens);
  }
  stripWhitespace(0);
  if (selector.length === selectorIndex) {
    return selectorIndex;
  }
  loop:
    while (selectorIndex < selector.length) {
      const firstChar = selector.charCodeAt(selectorIndex);
      switch (firstChar) {
        case 32:
        case 9:
        case 10:
        case 12:
        case 13: {
          if (tokens.length === 0 || tokens[0].type !== SelectorType.Descendant) {
            ensureNotTraversal();
            tokens.push({ type: SelectorType.Descendant });
          }
          stripWhitespace(1);
          break;
        }
        case 62: {
          addTraversal(SelectorType.Child);
          stripWhitespace(1);
          break;
        }
        case 60: {
          addTraversal(SelectorType.Parent);
          stripWhitespace(1);
          break;
        }
        case 126: {
          addTraversal(SelectorType.Sibling);
          stripWhitespace(1);
          break;
        }
        case 43: {
          addTraversal(SelectorType.Adjacent);
          stripWhitespace(1);
          break;
        }
        case 46: {
          addSpecialAttribute("class", AttributeAction.Element);
          break;
        }
        case 35: {
          addSpecialAttribute("id", AttributeAction.Equals);
          break;
        }
        case 91: {
          stripWhitespace(1);
          let name;
          let namespace = null;
          if (selector.charCodeAt(selectorIndex) === 124) {
            name = getName2(1);
          } else if (selector.startsWith("*|", selectorIndex)) {
            namespace = "*";
            name = getName2(2);
          } else {
            name = getName2(0);
            if (selector.charCodeAt(selectorIndex) === 124 && selector.charCodeAt(selectorIndex + 1) !== 61) {
              namespace = name;
              name = getName2(1);
            }
          }
          stripWhitespace(0);
          let action = AttributeAction.Exists;
          const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));
          if (possibleAction) {
            action = possibleAction;
            if (selector.charCodeAt(selectorIndex + 1) !== 61) {
              throw new Error("Expected `=`");
            }
            stripWhitespace(2);
          } else if (selector.charCodeAt(selectorIndex) === 61) {
            action = AttributeAction.Equals;
            stripWhitespace(1);
          }
          let value = "";
          let ignoreCase = null;
          if (action !== "exists") {
            if (isQuote(selector.charCodeAt(selectorIndex))) {
              const quote = selector.charCodeAt(selectorIndex);
              let sectionEnd = selectorIndex + 1;
              while (sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))) {
                sectionEnd += 1;
              }
              if (selector.charCodeAt(sectionEnd) !== quote) {
                throw new Error("Attribute value didn't end");
              }
              value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));
              selectorIndex = sectionEnd + 1;
            } else {
              const valueStart = selectorIndex;
              while (selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93 || isEscaped(selectorIndex))) {
                selectorIndex += 1;
              }
              value = unescapeCSS(selector.slice(valueStart, selectorIndex));
            }
            stripWhitespace(0);
            const forceIgnore = selector.charCodeAt(selectorIndex) | 32;
            if (forceIgnore === 115) {
              ignoreCase = false;
              stripWhitespace(1);
            } else if (forceIgnore === 105) {
              ignoreCase = true;
              stripWhitespace(1);
            }
          }
          if (selector.charCodeAt(selectorIndex) !== 93) {
            throw new Error("Attribute selector didn't terminate");
          }
          selectorIndex += 1;
          const attributeSelector = {
            type: SelectorType.Attribute,
            name,
            action,
            value,
            namespace,
            ignoreCase
          };
          tokens.push(attributeSelector);
          break;
        }
        case 58: {
          if (selector.charCodeAt(selectorIndex + 1) === 58) {
            tokens.push({
              type: SelectorType.PseudoElement,
              name: getName2(2).toLowerCase(),
              data: selector.charCodeAt(selectorIndex) === 40 ? readValueWithParenthesis() : null
            });
            continue;
          }
          const name = getName2(1).toLowerCase();
          let data2 = null;
          if (selector.charCodeAt(selectorIndex) === 40) {
            if (unpackPseudos.has(name)) {
              if (isQuote(selector.charCodeAt(selectorIndex + 1))) {
                throw new Error(`Pseudo-selector ${name} cannot be quoted`);
              }
              data2 = [];
              selectorIndex = parseSelector(data2, selector, selectorIndex + 1);
              if (selector.charCodeAt(selectorIndex) !== 41) {
                throw new Error(`Missing closing parenthesis in :${name} (${selector})`);
              }
              selectorIndex += 1;
            } else {
              data2 = readValueWithParenthesis();
              if (stripQuotesFromPseudos.has(name)) {
                const quot = data2.charCodeAt(0);
                if (quot === data2.charCodeAt(data2.length - 1) && isQuote(quot)) {
                  data2 = data2.slice(1, -1);
                }
              }
              data2 = unescapeCSS(data2);
            }
          }
          tokens.push({ type: SelectorType.Pseudo, name, data: data2 });
          break;
        }
        case 44: {
          finalizeSubselector();
          tokens = [];
          stripWhitespace(1);
          break;
        }
        default: {
          if (selector.startsWith("/*", selectorIndex)) {
            const endIndex = selector.indexOf("*/", selectorIndex + 2);
            if (endIndex < 0) {
              throw new Error("Comment was not terminated");
            }
            selectorIndex = endIndex + 2;
            if (tokens.length === 0) {
              stripWhitespace(0);
            }
            break;
          }
          let namespace = null;
          let name;
          if (firstChar === 42) {
            selectorIndex += 1;
            name = "*";
          } else if (firstChar === 124) {
            name = "";
            if (selector.charCodeAt(selectorIndex + 1) === 124) {
              addTraversal(SelectorType.ColumnCombinator);
              stripWhitespace(2);
              break;
            }
          } else if (reName.test(selector.slice(selectorIndex))) {
            name = getName2(0);
          } else {
            break loop;
          }
          if (selector.charCodeAt(selectorIndex) === 124 && selector.charCodeAt(selectorIndex + 1) !== 124) {
            namespace = name;
            if (selector.charCodeAt(selectorIndex + 1) === 42) {
              name = "*";
              selectorIndex += 2;
            } else {
              name = getName2(1);
            }
          }
          tokens.push(name === "*" ? { type: SelectorType.Universal, namespace } : { type: SelectorType.Tag, name, namespace });
        }
      }
    }
  finalizeSubselector();
  return selectorIndex;
}

// node_modules/css-select/lib/esm/index.js
var import_boolbase6 = __toESM(require_boolbase(), 1);

// node_modules/css-select/lib/esm/compile.js
var import_boolbase5 = __toESM(require_boolbase(), 1);

// node_modules/css-select/lib/esm/sort.js
var procedure = /* @__PURE__ */ new Map([
  [SelectorType.Universal, 50],
  [SelectorType.Tag, 30],
  [SelectorType.Attribute, 1],
  [SelectorType.Pseudo, 0]
]);
function isTraversal2(token) {
  return !procedure.has(token.type);
}
var attributes = /* @__PURE__ */ new Map([
  [AttributeAction.Exists, 10],
  [AttributeAction.Equals, 8],
  [AttributeAction.Not, 7],
  [AttributeAction.Start, 6],
  [AttributeAction.End, 6],
  [AttributeAction.Any, 5]
]);
function sortByProcedure(arr) {
  const procs = arr.map(getProcedure);
  for (let i = 1; i < arr.length; i++) {
    const procNew = procs[i];
    if (procNew < 0)
      continue;
    for (let j4 = i - 1; j4 >= 0 && procNew < procs[j4]; j4--) {
      const token = arr[j4 + 1];
      arr[j4 + 1] = arr[j4];
      arr[j4] = token;
      procs[j4 + 1] = procs[j4];
      procs[j4] = procNew;
    }
  }
}
function getProcedure(token) {
  var _a3, _b;
  let proc = (_a3 = procedure.get(token.type)) !== null && _a3 !== void 0 ? _a3 : -1;
  if (token.type === SelectorType.Attribute) {
    proc = (_b = attributes.get(token.action)) !== null && _b !== void 0 ? _b : 4;
    if (token.action === AttributeAction.Equals && token.name === "id") {
      proc = 9;
    }
    if (token.ignoreCase) {
      proc >>= 1;
    }
  } else if (token.type === SelectorType.Pseudo) {
    if (!token.data) {
      proc = 3;
    } else if (token.name === "has" || token.name === "contains") {
      proc = 0;
    } else if (Array.isArray(token.data)) {
      proc = Math.min(...token.data.map((d) => Math.min(...d.map(getProcedure))));
      if (proc < 0) {
        proc = 0;
      }
    } else {
      proc = 2;
    }
  }
  return proc;
}

// node_modules/css-select/lib/esm/attributes.js
var import_boolbase = __toESM(require_boolbase(), 1);
var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
function escapeRegex(value) {
  return value.replace(reChars, "\\$&");
}
var caseInsensitiveAttributes = /* @__PURE__ */ new Set([
  "accept",
  "accept-charset",
  "align",
  "alink",
  "axis",
  "bgcolor",
  "charset",
  "checked",
  "clear",
  "codetype",
  "color",
  "compact",
  "declare",
  "defer",
  "dir",
  "direction",
  "disabled",
  "enctype",
  "face",
  "frame",
  "hreflang",
  "http-equiv",
  "lang",
  "language",
  "link",
  "media",
  "method",
  "multiple",
  "nohref",
  "noresize",
  "noshade",
  "nowrap",
  "readonly",
  "rel",
  "rev",
  "rules",
  "scope",
  "scrolling",
  "selected",
  "shape",
  "target",
  "text",
  "type",
  "valign",
  "valuetype",
  "vlink"
]);
function shouldIgnoreCase(selector, options) {
  return typeof selector.ignoreCase === "boolean" ? selector.ignoreCase : selector.ignoreCase === "quirks" ? !!options.quirksMode : !options.xmlMode && caseInsensitiveAttributes.has(selector.name);
}
var attributeRules = {
  equals(next2, data2, options) {
    const { adapter: adapter2 } = options;
    const { name } = data2;
    let { value } = data2;
    if (shouldIgnoreCase(data2, options)) {
      value = value.toLowerCase();
      return (elem) => {
        const attr3 = adapter2.getAttributeValue(elem, name);
        return attr3 != null && attr3.length === value.length && attr3.toLowerCase() === value && next2(elem);
      };
    }
    return (elem) => adapter2.getAttributeValue(elem, name) === value && next2(elem);
  },
  hyphen(next2, data2, options) {
    const { adapter: adapter2 } = options;
    const { name } = data2;
    let { value } = data2;
    const len = value.length;
    if (shouldIgnoreCase(data2, options)) {
      value = value.toLowerCase();
      return function hyphenIC(elem) {
        const attr3 = adapter2.getAttributeValue(elem, name);
        return attr3 != null && (attr3.length === len || attr3.charAt(len) === "-") && attr3.substr(0, len).toLowerCase() === value && next2(elem);
      };
    }
    return function hyphen(elem) {
      const attr3 = adapter2.getAttributeValue(elem, name);
      return attr3 != null && (attr3.length === len || attr3.charAt(len) === "-") && attr3.substr(0, len) === value && next2(elem);
    };
  },
  element(next2, data2, options) {
    const { adapter: adapter2 } = options;
    const { name, value } = data2;
    if (/\s/.test(value)) {
      return import_boolbase.default.falseFunc;
    }
    const regex = new RegExp(`(?:^|\\s)${escapeRegex(value)}(?:$|\\s)`, shouldIgnoreCase(data2, options) ? "i" : "");
    return function element2(elem) {
      const attr3 = adapter2.getAttributeValue(elem, name);
      return attr3 != null && attr3.length >= value.length && regex.test(attr3) && next2(elem);
    };
  },
  exists(next2, { name }, { adapter: adapter2 }) {
    return (elem) => adapter2.hasAttrib(elem, name) && next2(elem);
  },
  start(next2, data2, options) {
    const { adapter: adapter2 } = options;
    const { name } = data2;
    let { value } = data2;
    const len = value.length;
    if (len === 0) {
      return import_boolbase.default.falseFunc;
    }
    if (shouldIgnoreCase(data2, options)) {
      value = value.toLowerCase();
      return (elem) => {
        const attr3 = adapter2.getAttributeValue(elem, name);
        return attr3 != null && attr3.length >= len && attr3.substr(0, len).toLowerCase() === value && next2(elem);
      };
    }
    return (elem) => {
      var _a3;
      return !!((_a3 = adapter2.getAttributeValue(elem, name)) === null || _a3 === void 0 ? void 0 : _a3.startsWith(value)) && next2(elem);
    };
  },
  end(next2, data2, options) {
    const { adapter: adapter2 } = options;
    const { name } = data2;
    let { value } = data2;
    const len = -value.length;
    if (len === 0) {
      return import_boolbase.default.falseFunc;
    }
    if (shouldIgnoreCase(data2, options)) {
      value = value.toLowerCase();
      return (elem) => {
        var _a3;
        return ((_a3 = adapter2.getAttributeValue(elem, name)) === null || _a3 === void 0 ? void 0 : _a3.substr(len).toLowerCase()) === value && next2(elem);
      };
    }
    return (elem) => {
      var _a3;
      return !!((_a3 = adapter2.getAttributeValue(elem, name)) === null || _a3 === void 0 ? void 0 : _a3.endsWith(value)) && next2(elem);
    };
  },
  any(next2, data2, options) {
    const { adapter: adapter2 } = options;
    const { name, value } = data2;
    if (value === "") {
      return import_boolbase.default.falseFunc;
    }
    if (shouldIgnoreCase(data2, options)) {
      const regex = new RegExp(escapeRegex(value), "i");
      return function anyIC(elem) {
        const attr3 = adapter2.getAttributeValue(elem, name);
        return attr3 != null && attr3.length >= value.length && regex.test(attr3) && next2(elem);
      };
    }
    return (elem) => {
      var _a3;
      return !!((_a3 = adapter2.getAttributeValue(elem, name)) === null || _a3 === void 0 ? void 0 : _a3.includes(value)) && next2(elem);
    };
  },
  not(next2, data2, options) {
    const { adapter: adapter2 } = options;
    const { name } = data2;
    let { value } = data2;
    if (value === "") {
      return (elem) => !!adapter2.getAttributeValue(elem, name) && next2(elem);
    } else if (shouldIgnoreCase(data2, options)) {
      value = value.toLowerCase();
      return (elem) => {
        const attr3 = adapter2.getAttributeValue(elem, name);
        return (attr3 == null || attr3.length !== value.length || attr3.toLowerCase() !== value) && next2(elem);
      };
    }
    return (elem) => adapter2.getAttributeValue(elem, name) !== value && next2(elem);
  }
};

// node_modules/nth-check/lib/esm/parse.js
var whitespace = /* @__PURE__ */ new Set([9, 10, 12, 13, 32]);
var ZERO = "0".charCodeAt(0);
var NINE = "9".charCodeAt(0);
function parse3(formula) {
  formula = formula.trim().toLowerCase();
  if (formula === "even") {
    return [2, 0];
  } else if (formula === "odd") {
    return [2, 1];
  }
  let idx = 0;
  let a = 0;
  let sign = readSign();
  let number = readNumber();
  if (idx < formula.length && formula.charAt(idx) === "n") {
    idx++;
    a = sign * (number !== null && number !== void 0 ? number : 1);
    skipWhitespace();
    if (idx < formula.length) {
      sign = readSign();
      skipWhitespace();
      number = readNumber();
    } else {
      sign = number = 0;
    }
  }
  if (number === null || idx < formula.length) {
    throw new Error(`n-th rule couldn't be parsed ('${formula}')`);
  }
  return [a, sign * number];
  function readSign() {
    if (formula.charAt(idx) === "-") {
      idx++;
      return -1;
    }
    if (formula.charAt(idx) === "+") {
      idx++;
    }
    return 1;
  }
  function readNumber() {
    const start = idx;
    let value = 0;
    while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {
      value = value * 10 + (formula.charCodeAt(idx) - ZERO);
      idx++;
    }
    return idx === start ? null : value;
  }
  function skipWhitespace() {
    while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {
      idx++;
    }
  }
}

// node_modules/nth-check/lib/esm/compile.js
var import_boolbase2 = __toESM(require_boolbase(), 1);
function compile(parsed) {
  const a = parsed[0];
  const b2 = parsed[1] - 1;
  if (b2 < 0 && a <= 0)
    return import_boolbase2.default.falseFunc;
  if (a === -1)
    return (index2) => index2 <= b2;
  if (a === 0)
    return (index2) => index2 === b2;
  if (a === 1)
    return b2 < 0 ? import_boolbase2.default.trueFunc : (index2) => index2 >= b2;
  const absA = Math.abs(a);
  const bMod = (b2 % absA + absA) % absA;
  return a > 1 ? (index2) => index2 >= b2 && index2 % absA === bMod : (index2) => index2 <= b2 && index2 % absA === bMod;
}

// node_modules/nth-check/lib/esm/index.js
function nthCheck(formula) {
  return compile(parse3(formula));
}

// node_modules/css-select/lib/esm/pseudo-selectors/filters.js
var import_boolbase3 = __toESM(require_boolbase(), 1);
function getChildFunc(next2, adapter2) {
  return (elem) => {
    const parent2 = adapter2.getParent(elem);
    return parent2 != null && adapter2.isTag(parent2) && next2(elem);
  };
}
var filters = {
  contains(next2, text4, { adapter: adapter2 }) {
    return function contains3(elem) {
      return next2(elem) && adapter2.getText(elem).includes(text4);
    };
  },
  icontains(next2, text4, { adapter: adapter2 }) {
    const itext = text4.toLowerCase();
    return function icontains(elem) {
      return next2(elem) && adapter2.getText(elem).toLowerCase().includes(itext);
    };
  },
  // Location specific methods
  "nth-child"(next2, rule, { adapter: adapter2, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next2, adapter2);
    return function nthChild(elem) {
      const siblings2 = adapter2.getSiblings(elem);
      let pos = 0;
      for (let i = 0; i < siblings2.length; i++) {
        if (equals(elem, siblings2[i]))
          break;
        if (adapter2.isTag(siblings2[i])) {
          pos++;
        }
      }
      return func(pos) && next2(elem);
    };
  },
  "nth-last-child"(next2, rule, { adapter: adapter2, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next2, adapter2);
    return function nthLastChild(elem) {
      const siblings2 = adapter2.getSiblings(elem);
      let pos = 0;
      for (let i = siblings2.length - 1; i >= 0; i--) {
        if (equals(elem, siblings2[i]))
          break;
        if (adapter2.isTag(siblings2[i])) {
          pos++;
        }
      }
      return func(pos) && next2(elem);
    };
  },
  "nth-of-type"(next2, rule, { adapter: adapter2, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next2, adapter2);
    return function nthOfType(elem) {
      const siblings2 = adapter2.getSiblings(elem);
      let pos = 0;
      for (let i = 0; i < siblings2.length; i++) {
        const currentSibling = siblings2[i];
        if (equals(elem, currentSibling))
          break;
        if (adapter2.isTag(currentSibling) && adapter2.getName(currentSibling) === adapter2.getName(elem)) {
          pos++;
        }
      }
      return func(pos) && next2(elem);
    };
  },
  "nth-last-of-type"(next2, rule, { adapter: adapter2, equals }) {
    const func = nthCheck(rule);
    if (func === import_boolbase3.default.falseFunc)
      return import_boolbase3.default.falseFunc;
    if (func === import_boolbase3.default.trueFunc)
      return getChildFunc(next2, adapter2);
    return function nthLastOfType(elem) {
      const siblings2 = adapter2.getSiblings(elem);
      let pos = 0;
      for (let i = siblings2.length - 1; i >= 0; i--) {
        const currentSibling = siblings2[i];
        if (equals(elem, currentSibling))
          break;
        if (adapter2.isTag(currentSibling) && adapter2.getName(currentSibling) === adapter2.getName(elem)) {
          pos++;
        }
      }
      return func(pos) && next2(elem);
    };
  },
  // TODO determine the actual root element
  root(next2, _rule, { adapter: adapter2 }) {
    return (elem) => {
      const parent2 = adapter2.getParent(elem);
      return (parent2 == null || !adapter2.isTag(parent2)) && next2(elem);
    };
  },
  scope(next2, rule, options, context) {
    const { equals } = options;
    if (!context || context.length === 0) {
      return filters["root"](next2, rule, options);
    }
    if (context.length === 1) {
      return (elem) => equals(context[0], elem) && next2(elem);
    }
    return (elem) => context.includes(elem) && next2(elem);
  },
  hover: dynamicStatePseudo("isHovered"),
  visited: dynamicStatePseudo("isVisited"),
  active: dynamicStatePseudo("isActive")
};
function dynamicStatePseudo(name) {
  return function dynamicPseudo(next2, _rule, { adapter: adapter2 }) {
    const func = adapter2[name];
    if (typeof func !== "function") {
      return import_boolbase3.default.falseFunc;
    }
    return function active2(elem) {
      return func(elem) && next2(elem);
    };
  };
}

// node_modules/css-select/lib/esm/pseudo-selectors/pseudos.js
var pseudos = {
  empty(elem, { adapter: adapter2 }) {
    return !adapter2.getChildren(elem).some((elem2) => (
      // FIXME: `getText` call is potentially expensive.
      adapter2.isTag(elem2) || adapter2.getText(elem2) !== ""
    ));
  },
  "first-child"(elem, { adapter: adapter2, equals }) {
    if (adapter2.prevElementSibling) {
      return adapter2.prevElementSibling(elem) == null;
    }
    const firstChild = adapter2.getSiblings(elem).find((elem2) => adapter2.isTag(elem2));
    return firstChild != null && equals(elem, firstChild);
  },
  "last-child"(elem, { adapter: adapter2, equals }) {
    const siblings2 = adapter2.getSiblings(elem);
    for (let i = siblings2.length - 1; i >= 0; i--) {
      if (equals(elem, siblings2[i]))
        return true;
      if (adapter2.isTag(siblings2[i]))
        break;
    }
    return false;
  },
  "first-of-type"(elem, { adapter: adapter2, equals }) {
    const siblings2 = adapter2.getSiblings(elem);
    const elemName = adapter2.getName(elem);
    for (let i = 0; i < siblings2.length; i++) {
      const currentSibling = siblings2[i];
      if (equals(elem, currentSibling))
        return true;
      if (adapter2.isTag(currentSibling) && adapter2.getName(currentSibling) === elemName) {
        break;
      }
    }
    return false;
  },
  "last-of-type"(elem, { adapter: adapter2, equals }) {
    const siblings2 = adapter2.getSiblings(elem);
    const elemName = adapter2.getName(elem);
    for (let i = siblings2.length - 1; i >= 0; i--) {
      const currentSibling = siblings2[i];
      if (equals(elem, currentSibling))
        return true;
      if (adapter2.isTag(currentSibling) && adapter2.getName(currentSibling) === elemName) {
        break;
      }
    }
    return false;
  },
  "only-of-type"(elem, { adapter: adapter2, equals }) {
    const elemName = adapter2.getName(elem);
    return adapter2.getSiblings(elem).every((sibling) => equals(elem, sibling) || !adapter2.isTag(sibling) || adapter2.getName(sibling) !== elemName);
  },
  "only-child"(elem, { adapter: adapter2, equals }) {
    return adapter2.getSiblings(elem).every((sibling) => equals(elem, sibling) || !adapter2.isTag(sibling));
  }
};
function verifyPseudoArgs(func, name, subselect, argIndex) {
  if (subselect === null) {
    if (func.length > argIndex) {
      throw new Error(`Pseudo-class :${name} requires an argument`);
    }
  } else if (func.length === argIndex) {
    throw new Error(`Pseudo-class :${name} doesn't have any arguments`);
  }
}

// node_modules/css-select/lib/esm/pseudo-selectors/aliases.js
var aliases = {
  // Links
  "any-link": ":is(a, area, link)[href]",
  link: ":any-link:not(:visited)",
  // Forms
  // https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
  disabled: `:is(
        :is(button, input, select, textarea, optgroup, option)[disabled],
        optgroup[disabled] > option,
        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)
    )`,
  enabled: ":not(:disabled)",
  checked: ":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",
  required: ":is(input, select, textarea)[required]",
  optional: ":is(input, select, textarea):not([required])",
  // JQuery extensions
  // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-selectedness
  selected: "option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",
  checkbox: "[type=checkbox]",
  file: "[type=file]",
  password: "[type=password]",
  radio: "[type=radio]",
  reset: "[type=reset]",
  image: "[type=image]",
  submit: "[type=submit]",
  parent: ":not(:empty)",
  header: ":is(h1, h2, h3, h4, h5, h6)",
  button: ":is(button, input[type=button])",
  input: ":is(input, textarea, select, button)",
  text: "input:is(:not([type!='']), [type=text])"
};

// node_modules/css-select/lib/esm/pseudo-selectors/subselects.js
var import_boolbase4 = __toESM(require_boolbase(), 1);
var PLACEHOLDER_ELEMENT = {};
function ensureIsTag(next2, adapter2) {
  if (next2 === import_boolbase4.default.falseFunc)
    return import_boolbase4.default.falseFunc;
  return (elem) => adapter2.isTag(elem) && next2(elem);
}
function getNextSiblings(elem, adapter2) {
  const siblings2 = adapter2.getSiblings(elem);
  if (siblings2.length <= 1)
    return [];
  const elemIndex = siblings2.indexOf(elem);
  if (elemIndex < 0 || elemIndex === siblings2.length - 1)
    return [];
  return siblings2.slice(elemIndex + 1).filter(adapter2.isTag);
}
function copyOptions(options) {
  return {
    xmlMode: !!options.xmlMode,
    lowerCaseAttributeNames: !!options.lowerCaseAttributeNames,
    lowerCaseTags: !!options.lowerCaseTags,
    quirksMode: !!options.quirksMode,
    cacheResults: !!options.cacheResults,
    pseudos: options.pseudos,
    adapter: options.adapter,
    equals: options.equals
  };
}
var is2 = (next2, token, options, context, compileToken2) => {
  const func = compileToken2(token, copyOptions(options), context);
  return func === import_boolbase4.default.trueFunc ? next2 : func === import_boolbase4.default.falseFunc ? import_boolbase4.default.falseFunc : (elem) => func(elem) && next2(elem);
};
var subselects = {
  is: is2,
  /**
   * `:matches` and `:where` are aliases for `:is`.
   */
  matches: is2,
  where: is2,
  not(next2, token, options, context, compileToken2) {
    const func = compileToken2(token, copyOptions(options), context);
    return func === import_boolbase4.default.falseFunc ? next2 : func === import_boolbase4.default.trueFunc ? import_boolbase4.default.falseFunc : (elem) => !func(elem) && next2(elem);
  },
  has(next2, subselect, options, _context, compileToken2) {
    const { adapter: adapter2 } = options;
    const opts = copyOptions(options);
    opts.relativeSelector = true;
    const context = subselect.some((s) => s.some(isTraversal2)) ? (
      // Used as a placeholder. Will be replaced with the actual element.
      [PLACEHOLDER_ELEMENT]
    ) : void 0;
    const compiled = compileToken2(subselect, opts, context);
    if (compiled === import_boolbase4.default.falseFunc)
      return import_boolbase4.default.falseFunc;
    const hasElement = ensureIsTag(compiled, adapter2);
    if (context && compiled !== import_boolbase4.default.trueFunc) {
      const { shouldTestNextSiblings = false } = compiled;
      return (elem) => {
        if (!next2(elem))
          return false;
        context[0] = elem;
        const childs = adapter2.getChildren(elem);
        const nextElements = shouldTestNextSiblings ? [...childs, ...getNextSiblings(elem, adapter2)] : childs;
        return adapter2.existsOne(hasElement, nextElements);
      };
    }
    return (elem) => next2(elem) && adapter2.existsOne(hasElement, adapter2.getChildren(elem));
  }
};

// node_modules/css-select/lib/esm/pseudo-selectors/index.js
function compilePseudoSelector(next2, selector, options, context, compileToken2) {
  var _a3;
  const { name, data: data2 } = selector;
  if (Array.isArray(data2)) {
    if (!(name in subselects)) {
      throw new Error(`Unknown pseudo-class :${name}(${data2})`);
    }
    return subselects[name](next2, data2, options, context, compileToken2);
  }
  const userPseudo = (_a3 = options.pseudos) === null || _a3 === void 0 ? void 0 : _a3[name];
  const stringPseudo = typeof userPseudo === "string" ? userPseudo : aliases[name];
  if (typeof stringPseudo === "string") {
    if (data2 != null) {
      throw new Error(`Pseudo ${name} doesn't have any arguments`);
    }
    const alias = parse2(stringPseudo);
    return subselects["is"](next2, alias, options, context, compileToken2);
  }
  if (typeof userPseudo === "function") {
    verifyPseudoArgs(userPseudo, name, data2, 1);
    return (elem) => userPseudo(elem, data2) && next2(elem);
  }
  if (name in filters) {
    return filters[name](next2, data2, options, context);
  }
  if (name in pseudos) {
    const pseudo = pseudos[name];
    verifyPseudoArgs(pseudo, name, data2, 2);
    return (elem) => pseudo(elem, options, data2) && next2(elem);
  }
  throw new Error(`Unknown pseudo-class :${name}`);
}

// node_modules/css-select/lib/esm/general.js
function getElementParent(node, adapter2) {
  const parent2 = adapter2.getParent(node);
  if (parent2 && adapter2.isTag(parent2)) {
    return parent2;
  }
  return null;
}
function compileGeneralSelector(next2, selector, options, context, compileToken2) {
  const { adapter: adapter2, equals } = options;
  switch (selector.type) {
    case SelectorType.PseudoElement: {
      throw new Error("Pseudo-elements are not supported by css-select");
    }
    case SelectorType.ColumnCombinator: {
      throw new Error("Column combinators are not yet supported by css-select");
    }
    case SelectorType.Attribute: {
      if (selector.namespace != null) {
        throw new Error("Namespaced attributes are not yet supported by css-select");
      }
      if (!options.xmlMode || options.lowerCaseAttributeNames) {
        selector.name = selector.name.toLowerCase();
      }
      return attributeRules[selector.action](next2, selector, options);
    }
    case SelectorType.Pseudo: {
      return compilePseudoSelector(next2, selector, options, context, compileToken2);
    }
    case SelectorType.Tag: {
      if (selector.namespace != null) {
        throw new Error("Namespaced tag names are not yet supported by css-select");
      }
      let { name } = selector;
      if (!options.xmlMode || options.lowerCaseTags) {
        name = name.toLowerCase();
      }
      return function tag(elem) {
        return adapter2.getName(elem) === name && next2(elem);
      };
    }
    case SelectorType.Descendant: {
      if (options.cacheResults === false || typeof WeakSet === "undefined") {
        return function descendant(elem) {
          let current = elem;
          while (current = getElementParent(current, adapter2)) {
            if (next2(current)) {
              return true;
            }
          }
          return false;
        };
      }
      const isFalseCache = /* @__PURE__ */ new WeakSet();
      return function cachedDescendant(elem) {
        let current = elem;
        while (current = getElementParent(current, adapter2)) {
          if (!isFalseCache.has(current)) {
            if (adapter2.isTag(current) && next2(current)) {
              return true;
            }
            isFalseCache.add(current);
          }
        }
        return false;
      };
    }
    case "_flexibleDescendant": {
      return function flexibleDescendant(elem) {
        let current = elem;
        do {
          if (next2(current))
            return true;
        } while (current = getElementParent(current, adapter2));
        return false;
      };
    }
    case SelectorType.Parent: {
      return function parent2(elem) {
        return adapter2.getChildren(elem).some((elem2) => adapter2.isTag(elem2) && next2(elem2));
      };
    }
    case SelectorType.Child: {
      return function child(elem) {
        const parent2 = adapter2.getParent(elem);
        return parent2 != null && adapter2.isTag(parent2) && next2(parent2);
      };
    }
    case SelectorType.Sibling: {
      return function sibling(elem) {
        const siblings2 = adapter2.getSiblings(elem);
        for (let i = 0; i < siblings2.length; i++) {
          const currentSibling = siblings2[i];
          if (equals(elem, currentSibling))
            break;
          if (adapter2.isTag(currentSibling) && next2(currentSibling)) {
            return true;
          }
        }
        return false;
      };
    }
    case SelectorType.Adjacent: {
      if (adapter2.prevElementSibling) {
        return function adjacent(elem) {
          const previous = adapter2.prevElementSibling(elem);
          return previous != null && next2(previous);
        };
      }
      return function adjacent(elem) {
        const siblings2 = adapter2.getSiblings(elem);
        let lastElement;
        for (let i = 0; i < siblings2.length; i++) {
          const currentSibling = siblings2[i];
          if (equals(elem, currentSibling))
            break;
          if (adapter2.isTag(currentSibling)) {
            lastElement = currentSibling;
          }
        }
        return !!lastElement && next2(lastElement);
      };
    }
    case SelectorType.Universal: {
      if (selector.namespace != null && selector.namespace !== "*") {
        throw new Error("Namespaced universal selectors are not yet supported by css-select");
      }
      return next2;
    }
  }
}

// node_modules/css-select/lib/esm/compile.js
function compile2(selector, options, context) {
  const next2 = compileUnsafe(selector, options, context);
  return ensureIsTag(next2, options.adapter);
}
function compileUnsafe(selector, options, context) {
  const token = typeof selector === "string" ? parse2(selector) : selector;
  return compileToken(token, options, context);
}
function includesScopePseudo(t8) {
  return t8.type === SelectorType.Pseudo && (t8.name === "scope" || Array.isArray(t8.data) && t8.data.some((data2) => data2.some(includesScopePseudo)));
}
var DESCENDANT_TOKEN = { type: SelectorType.Descendant };
var FLEXIBLE_DESCENDANT_TOKEN = {
  type: "_flexibleDescendant"
};
var SCOPE_TOKEN = {
  type: SelectorType.Pseudo,
  name: "scope",
  data: null
};
function absolutize(token, { adapter: adapter2 }, context) {
  const hasContext2 = !!(context === null || context === void 0 ? void 0 : context.every((e) => {
    const parent2 = adapter2.isTag(e) && adapter2.getParent(e);
    return e === PLACEHOLDER_ELEMENT || parent2 && adapter2.isTag(parent2);
  }));
  for (const t8 of token) {
    if (t8.length > 0 && isTraversal2(t8[0]) && t8[0].type !== SelectorType.Descendant) {
    } else if (hasContext2 && !t8.some(includesScopePseudo)) {
      t8.unshift(DESCENDANT_TOKEN);
    } else {
      continue;
    }
    t8.unshift(SCOPE_TOKEN);
  }
}
function compileToken(token, options, context) {
  var _a3;
  token.forEach(sortByProcedure);
  context = (_a3 = options.context) !== null && _a3 !== void 0 ? _a3 : context;
  const isArrayContext = Array.isArray(context);
  const finalContext = context && (Array.isArray(context) ? context : [context]);
  if (options.relativeSelector !== false) {
    absolutize(token, options, finalContext);
  } else if (token.some((t8) => t8.length > 0 && isTraversal2(t8[0]))) {
    throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");
  }
  let shouldTestNextSiblings = false;
  const query = token.map((rules) => {
    if (rules.length >= 2) {
      const [first2, second] = rules;
      if (first2.type !== SelectorType.Pseudo || first2.name !== "scope") {
      } else if (isArrayContext && second.type === SelectorType.Descendant) {
        rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
      } else if (second.type === SelectorType.Adjacent || second.type === SelectorType.Sibling) {
        shouldTestNextSiblings = true;
      }
    }
    return compileRules(rules, options, finalContext);
  }).reduce(reduceRules, import_boolbase5.default.falseFunc);
  query.shouldTestNextSiblings = shouldTestNextSiblings;
  return query;
}
function compileRules(rules, options, context) {
  var _a3;
  return rules.reduce((previous, rule) => previous === import_boolbase5.default.falseFunc ? import_boolbase5.default.falseFunc : compileGeneralSelector(previous, rule, options, context, compileToken), (_a3 = options.rootFunc) !== null && _a3 !== void 0 ? _a3 : import_boolbase5.default.trueFunc);
}
function reduceRules(a, b2) {
  if (b2 === import_boolbase5.default.falseFunc || a === import_boolbase5.default.trueFunc) {
    return a;
  }
  if (a === import_boolbase5.default.falseFunc || b2 === import_boolbase5.default.trueFunc) {
    return b2;
  }
  return function combine(elem) {
    return a(elem) || b2(elem);
  };
}

// node_modules/css-select/lib/esm/index.js
var defaultEquals = (a, b2) => a === b2;
var defaultOptions = {
  adapter: esm_exports2,
  equals: defaultEquals
};
function convertOptionFormats(options) {
  var _a3, _b, _c, _d;
  const opts = options !== null && options !== void 0 ? options : defaultOptions;
  (_a3 = opts.adapter) !== null && _a3 !== void 0 ? _a3 : opts.adapter = esm_exports2;
  (_b = opts.equals) !== null && _b !== void 0 ? _b : opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals;
  return opts;
}
function wrapCompile(func) {
  return function addAdapter(selector, options, context) {
    const opts = convertOptionFormats(options);
    return func(selector, opts, context);
  };
}
var compile3 = wrapCompile(compile2);
var _compileUnsafe = wrapCompile(compileUnsafe);
var _compileToken = wrapCompile(compileToken);
function getSelectorFunc(searchFunc) {
  return function select2(query, elements, options) {
    const opts = convertOptionFormats(options);
    if (typeof query !== "function") {
      query = compileUnsafe(query, opts, elements);
    }
    const filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);
    return searchFunc(query, filteredElements, opts);
  };
}
function prepareContext(elems, adapter2, shouldTestNextSiblings = false) {
  if (shouldTestNextSiblings) {
    elems = appendNextSiblings(elems, adapter2);
  }
  return Array.isArray(elems) ? adapter2.removeSubsets(elems) : adapter2.getChildren(elems);
}
function appendNextSiblings(elem, adapter2) {
  const elems = Array.isArray(elem) ? elem.slice(0) : [elem];
  const elemsLength = elems.length;
  for (let i = 0; i < elemsLength; i++) {
    const nextSiblings = getNextSiblings(elems[i], adapter2);
    elems.push(...nextSiblings);
  }
  return elems;
}
var selectAll = getSelectorFunc((query, elems, options) => query === import_boolbase6.default.falseFunc || !elems || elems.length === 0 ? [] : options.adapter.findAll(query, elems));
var selectOne = getSelectorFunc((query, elems, options) => query === import_boolbase6.default.falseFunc || !elems || elems.length === 0 ? null : options.adapter.findOne(query, elems));

// node_modules/cheerio-select/lib/esm/index.js
var boolbase7 = __toESM(require_boolbase(), 1);

// node_modules/cheerio-select/lib/esm/positionals.js
var filterNames = /* @__PURE__ */ new Set([
  "first",
  "last",
  "eq",
  "gt",
  "nth",
  "lt",
  "even",
  "odd"
]);
function isFilter(s) {
  if (s.type !== "pseudo")
    return false;
  if (filterNames.has(s.name))
    return true;
  if (s.name === "not" && Array.isArray(s.data)) {
    return s.data.some((s2) => s2.some(isFilter));
  }
  return false;
}
function getLimit(filter4, data2, partLimit) {
  const num = data2 != null ? parseInt(data2, 10) : NaN;
  switch (filter4) {
    case "first":
      return 1;
    case "nth":
    case "eq":
      return isFinite(num) ? num >= 0 ? num + 1 : Infinity : 0;
    case "lt":
      return isFinite(num) ? num >= 0 ? Math.min(num, partLimit) : Infinity : 0;
    case "gt":
      return isFinite(num) ? Infinity : 0;
    case "odd":
      return 2 * partLimit;
    case "even":
      return 2 * partLimit - 1;
    case "last":
    case "not":
      return Infinity;
  }
}

// node_modules/cheerio-select/lib/esm/helpers.js
function getDocumentRoot(node) {
  while (node.parent)
    node = node.parent;
  return node;
}
function groupSelectors(selectors) {
  const filteredSelectors = [];
  const plainSelectors = [];
  for (const selector of selectors) {
    if (selector.some(isFilter)) {
      filteredSelectors.push(selector);
    } else {
      plainSelectors.push(selector);
    }
  }
  return [plainSelectors, filteredSelectors];
}

// node_modules/cheerio-select/lib/esm/index.js
var UNIVERSAL_SELECTOR = {
  type: SelectorType.Universal,
  namespace: null
};
var SCOPE_PSEUDO = {
  type: SelectorType.Pseudo,
  name: "scope",
  data: null
};
function is3(element2, selector, options = {}) {
  return some([element2], selector, options);
}
function some(elements, selector, options = {}) {
  if (typeof selector === "function")
    return elements.some(selector);
  const [plain, filtered] = groupSelectors(parse2(selector));
  return plain.length > 0 && elements.some(_compileToken(plain, options)) || filtered.some((sel) => filterBySelector(sel, elements, options).length > 0);
}
function filterByPosition(filter4, elems, data2, options) {
  const num = typeof data2 === "string" ? parseInt(data2, 10) : NaN;
  switch (filter4) {
    case "first":
    case "lt":
      return elems;
    case "last":
      return elems.length > 0 ? [elems[elems.length - 1]] : elems;
    case "nth":
    case "eq":
      return isFinite(num) && Math.abs(num) < elems.length ? [num < 0 ? elems[elems.length + num] : elems[num]] : [];
    case "gt":
      return isFinite(num) ? elems.slice(num + 1) : [];
    case "even":
      return elems.filter((_2, i) => i % 2 === 0);
    case "odd":
      return elems.filter((_2, i) => i % 2 === 1);
    case "not": {
      const filtered = new Set(filterParsed(data2, elems, options));
      return elems.filter((e) => !filtered.has(e));
    }
  }
}
function filter2(selector, elements, options = {}) {
  return filterParsed(parse2(selector), elements, options);
}
function filterParsed(selector, elements, options) {
  if (elements.length === 0)
    return [];
  const [plainSelectors, filteredSelectors] = groupSelectors(selector);
  let found;
  if (plainSelectors.length) {
    const filtered = filterElements(elements, plainSelectors, options);
    if (filteredSelectors.length === 0) {
      return filtered;
    }
    if (filtered.length) {
      found = new Set(filtered);
    }
  }
  for (let i = 0; i < filteredSelectors.length && (found === null || found === void 0 ? void 0 : found.size) !== elements.length; i++) {
    const filteredSelector = filteredSelectors[i];
    const missing = found ? elements.filter((e) => isTag2(e) && !found.has(e)) : elements;
    if (missing.length === 0)
      break;
    const filtered = filterBySelector(filteredSelector, elements, options);
    if (filtered.length) {
      if (!found) {
        if (i === filteredSelectors.length - 1) {
          return filtered;
        }
        found = new Set(filtered);
      } else {
        filtered.forEach((el2) => found.add(el2));
      }
    }
  }
  return typeof found !== "undefined" ? found.size === elements.length ? elements : (
    // Filter elements to preserve order
    elements.filter((el2) => found.has(el2))
  ) : [];
}
function filterBySelector(selector, elements, options) {
  var _a3;
  if (selector.some(isTraversal)) {
    const root3 = (_a3 = options.root) !== null && _a3 !== void 0 ? _a3 : getDocumentRoot(elements[0]);
    const opts = { ...options, context: elements, relativeSelector: false };
    selector.push(SCOPE_PSEUDO);
    return findFilterElements(root3, selector, opts, true, elements.length);
  }
  return findFilterElements(elements, selector, options, false, elements.length);
}
function select(selector, root3, options = {}, limit = Infinity) {
  if (typeof selector === "function") {
    return find2(root3, selector);
  }
  const [plain, filtered] = groupSelectors(parse2(selector));
  const results = filtered.map((sel) => findFilterElements(root3, sel, options, true, limit));
  if (plain.length) {
    results.push(findElements(root3, plain, options, limit));
  }
  if (results.length === 0) {
    return [];
  }
  if (results.length === 1) {
    return results[0];
  }
  return uniqueSort(results.reduce((a, b2) => [...a, ...b2]));
}
function findFilterElements(root3, selector, options, queryForSelector, totalLimit) {
  const filterIndex = selector.findIndex(isFilter);
  const sub = selector.slice(0, filterIndex);
  const filter4 = selector[filterIndex];
  const partLimit = selector.length - 1 === filterIndex ? totalLimit : Infinity;
  const limit = getLimit(filter4.name, filter4.data, partLimit);
  if (limit === 0)
    return [];
  const elemsNoLimit = sub.length === 0 && !Array.isArray(root3) ? getChildren(root3).filter(isTag2) : sub.length === 0 ? (Array.isArray(root3) ? root3 : [root3]).filter(isTag2) : queryForSelector || sub.some(isTraversal) ? findElements(root3, [sub], options, limit) : filterElements(root3, [sub], options);
  const elems = elemsNoLimit.slice(0, limit);
  let result = filterByPosition(filter4.name, elems, filter4.data, options);
  if (result.length === 0 || selector.length === filterIndex + 1) {
    return result;
  }
  const remainingSelector = selector.slice(filterIndex + 1);
  const remainingHasTraversal = remainingSelector.some(isTraversal);
  if (remainingHasTraversal) {
    if (isTraversal(remainingSelector[0])) {
      const { type } = remainingSelector[0];
      if (type === SelectorType.Sibling || type === SelectorType.Adjacent) {
        result = prepareContext(result, esm_exports2, true);
      }
      remainingSelector.unshift(UNIVERSAL_SELECTOR);
    }
    options = {
      ...options,
      // Avoid absolutizing the selector
      relativeSelector: false,
      /*
       * Add a custom root func, to make sure traversals don't match elements
       * that aren't a part of the considered tree.
       */
      rootFunc: (el2) => result.includes(el2)
    };
  } else if (options.rootFunc && options.rootFunc !== boolbase7.trueFunc) {
    options = { ...options, rootFunc: boolbase7.trueFunc };
  }
  return remainingSelector.some(isFilter) ? findFilterElements(result, remainingSelector, options, false, totalLimit) : remainingHasTraversal ? (
    // Query existing elements to resolve traversal.
    findElements(result, [remainingSelector], options, totalLimit)
  ) : (
    // If we don't have any more traversals, simply filter elements.
    filterElements(result, [remainingSelector], options)
  );
}
function findElements(root3, sel, options, limit) {
  const query = _compileToken(sel, options, root3);
  return find2(root3, query, limit);
}
function find2(root3, query, limit = Infinity) {
  const elems = prepareContext(root3, esm_exports2, query.shouldTestNextSiblings);
  return find((node) => isTag2(node) && query(node), elems, true, limit);
}
function filterElements(elements, sel, options) {
  const els = (Array.isArray(elements) ? elements : [elements]).filter(isTag2);
  if (els.length === 0)
    return els;
  const query = _compileToken(sel, options);
  return query === boolbase7.trueFunc ? els : els.filter(query);
}

// node_modules/cheerio/lib/esm/api/traversing.js
var reSiblingSelector = /^\s*[~+]/;
function find3(selectorOrHaystack) {
  var _a3;
  if (!selectorOrHaystack) {
    return this._make([]);
  }
  const context = this.toArray();
  if (typeof selectorOrHaystack !== "string") {
    const haystack = isCheerio(selectorOrHaystack) ? selectorOrHaystack.toArray() : [selectorOrHaystack];
    return this._make(haystack.filter((elem) => context.some((node) => contains(node, elem))));
  }
  const elems = reSiblingSelector.test(selectorOrHaystack) ? context : this.children().toArray();
  const options = {
    context,
    root: (_a3 = this._root) === null || _a3 === void 0 ? void 0 : _a3[0],
    // Pass options that are recognized by `cheerio-select`
    xmlMode: this.options.xmlMode,
    lowerCaseTags: this.options.lowerCaseTags,
    lowerCaseAttributeNames: this.options.lowerCaseAttributeNames,
    pseudos: this.options.pseudos,
    quirksMode: this.options.quirksMode
  };
  return this._make(select(selectorOrHaystack, elems, options));
}
function _getMatcher(matchMap) {
  return function(fn3, ...postFns) {
    return function(selector) {
      var _a3;
      let matched = matchMap(fn3, this);
      if (selector) {
        matched = filterArray(matched, selector, this.options.xmlMode, (_a3 = this._root) === null || _a3 === void 0 ? void 0 : _a3[0]);
      }
      return this._make(
        // Post processing is only necessary if there is more than one element.
        this.length > 1 && matched.length > 1 ? postFns.reduce((elems, fn4) => fn4(elems), matched) : matched
      );
    };
  };
}
var _matcher = _getMatcher((fn3, elems) => {
  const ret = [];
  for (let i = 0; i < elems.length; i++) {
    const value = fn3(elems[i]);
    ret.push(value);
  }
  return new Array().concat(...ret);
});
var _singleMatcher = _getMatcher((fn3, elems) => {
  const ret = [];
  for (let i = 0; i < elems.length; i++) {
    const value = fn3(elems[i]);
    if (value !== null) {
      ret.push(value);
    }
  }
  return ret;
});
function _matchUntil(nextElem, ...postFns) {
  let matches = null;
  const innerMatcher = _getMatcher((nextElem2, elems) => {
    const matched = [];
    domEach(elems, (elem) => {
      for (let next2; next2 = nextElem2(elem); elem = next2) {
        if (matches === null || matches === void 0 ? void 0 : matches(next2, matched.length))
          break;
        matched.push(next2);
      }
    });
    return matched;
  })(nextElem, ...postFns);
  return function(selector, filterSelector) {
    matches = typeof selector === "string" ? (elem) => is3(elem, selector, this.options) : selector ? getFilterFn(selector) : null;
    const ret = innerMatcher.call(this, filterSelector);
    matches = null;
    return ret;
  };
}
function _removeDuplicates(elems) {
  return Array.from(new Set(elems));
}
var parent = _singleMatcher(({ parent: parent2 }) => parent2 && !isDocument(parent2) ? parent2 : null, _removeDuplicates);
var parents = _matcher((elem) => {
  const matched = [];
  while (elem.parent && !isDocument(elem.parent)) {
    matched.push(elem.parent);
    elem = elem.parent;
  }
  return matched;
}, uniqueSort, (elems) => elems.reverse());
var parentsUntil = _matchUntil(({ parent: parent2 }) => parent2 && !isDocument(parent2) ? parent2 : null, uniqueSort, (elems) => elems.reverse());
function closest(selector) {
  var _a3;
  const set = [];
  if (!selector) {
    return this._make(set);
  }
  const selectOpts = {
    xmlMode: this.options.xmlMode,
    root: (_a3 = this._root) === null || _a3 === void 0 ? void 0 : _a3[0]
  };
  const selectFn = typeof selector === "string" ? (elem) => is3(elem, selector, selectOpts) : getFilterFn(selector);
  domEach(this, (elem) => {
    while (elem && isTag2(elem)) {
      if (selectFn(elem, 0)) {
        if (!set.includes(elem)) {
          set.push(elem);
        }
        break;
      }
      elem = elem.parent;
    }
  });
  return this._make(set);
}
var next = _singleMatcher((elem) => nextElementSibling(elem));
var nextAll = _matcher((elem) => {
  const matched = [];
  while (elem.next) {
    elem = elem.next;
    if (isTag2(elem))
      matched.push(elem);
  }
  return matched;
}, _removeDuplicates);
var nextUntil = _matchUntil((el2) => nextElementSibling(el2), _removeDuplicates);
var prev = _singleMatcher((elem) => prevElementSibling(elem));
var prevAll = _matcher((elem) => {
  const matched = [];
  while (elem.prev) {
    elem = elem.prev;
    if (isTag2(elem))
      matched.push(elem);
  }
  return matched;
}, _removeDuplicates);
var prevUntil = _matchUntil((el2) => prevElementSibling(el2), _removeDuplicates);
var siblings = _matcher((elem) => getSiblings(elem).filter((el2) => isTag2(el2) && el2 !== elem), uniqueSort);
var children2 = _matcher((elem) => getChildren(elem).filter(isTag2), _removeDuplicates);
function contents() {
  const elems = this.toArray().reduce((newElems, elem) => hasChildren(elem) ? newElems.concat(elem.children) : newElems, []);
  return this._make(elems);
}
function each(fn3) {
  let i = 0;
  const len = this.length;
  while (i < len && fn3.call(this[i], i, this[i]) !== false)
    ++i;
  return this;
}
function map(fn3) {
  let elems = [];
  for (let i = 0; i < this.length; i++) {
    const el2 = this[i];
    const val2 = fn3.call(el2, i, el2);
    if (val2 != null) {
      elems = elems.concat(val2);
    }
  }
  return this._make(elems);
}
function getFilterFn(match) {
  if (typeof match === "function") {
    return (el2, i) => match.call(el2, i, el2);
  }
  if (isCheerio(match)) {
    return (el2) => Array.prototype.includes.call(match, el2);
  }
  return function(el2) {
    return match === el2;
  };
}
function filter3(match) {
  var _a3;
  return this._make(filterArray(this.toArray(), match, this.options.xmlMode, (_a3 = this._root) === null || _a3 === void 0 ? void 0 : _a3[0]));
}
function filterArray(nodes, match, xmlMode, root3) {
  return typeof match === "string" ? filter2(match, nodes, { xmlMode, root: root3 }) : nodes.filter(getFilterFn(match));
}
function is4(selector) {
  const nodes = this.toArray();
  return typeof selector === "string" ? some(nodes.filter(isTag2), selector, this.options) : selector ? nodes.some(getFilterFn(selector)) : false;
}
function not(match) {
  let nodes = this.toArray();
  if (typeof match === "string") {
    const matches = new Set(filter2(match, nodes, this.options));
    nodes = nodes.filter((el2) => !matches.has(el2));
  } else {
    const filterFn = getFilterFn(match);
    nodes = nodes.filter((el2, i) => !filterFn(el2, i));
  }
  return this._make(nodes);
}
function has(selectorOrHaystack) {
  return this.filter(typeof selectorOrHaystack === "string" ? (
    // Using the `:has` selector here short-circuits searches.
    `:has(${selectorOrHaystack})`
  ) : (_2, el2) => this._make(el2).find(selectorOrHaystack).length > 0);
}
function first() {
  return this.length > 1 ? this._make(this[0]) : this;
}
function last() {
  return this.length > 0 ? this._make(this[this.length - 1]) : this;
}
function eq(i) {
  var _a3;
  i = +i;
  if (i === 0 && this.length <= 1)
    return this;
  if (i < 0)
    i = this.length + i;
  return this._make((_a3 = this[i]) !== null && _a3 !== void 0 ? _a3 : []);
}
function get(i) {
  if (i == null) {
    return this.toArray();
  }
  return this[i < 0 ? this.length + i : i];
}
function toArray() {
  return Array.prototype.slice.call(this);
}
function index(selectorOrNeedle) {
  let $haystack;
  let needle;
  if (selectorOrNeedle == null) {
    $haystack = this.parent().children();
    needle = this[0];
  } else if (typeof selectorOrNeedle === "string") {
    $haystack = this._make(selectorOrNeedle);
    needle = this[0];
  } else {
    $haystack = this;
    needle = isCheerio(selectorOrNeedle) ? selectorOrNeedle[0] : selectorOrNeedle;
  }
  return Array.prototype.indexOf.call($haystack, needle);
}
function slice(start, end2) {
  return this._make(Array.prototype.slice.call(this, start, end2));
}
function end() {
  var _a3;
  return (_a3 = this.prevObject) !== null && _a3 !== void 0 ? _a3 : this._make([]);
}
function add(other, context) {
  const selection = this._make(other, context);
  const contents2 = uniqueSort([...this.get(), ...selection.get()]);
  return this._make(contents2);
}
function addBack(selector) {
  return this.prevObject ? this.add(selector ? this.prevObject.filter(selector) : this.prevObject) : this;
}

// node_modules/cheerio/lib/esm/api/manipulation.js
var manipulation_exports = {};
__export(manipulation_exports, {
  _makeDomArray: () => _makeDomArray,
  after: () => after,
  append: () => append3,
  appendTo: () => appendTo,
  before: () => before,
  clone: () => clone,
  empty: () => empty,
  html: () => html2,
  insertAfter: () => insertAfter,
  insertBefore: () => insertBefore,
  prepend: () => prepend2,
  prependTo: () => prependTo,
  remove: () => remove,
  replaceWith: () => replaceWith,
  text: () => text3,
  toString: () => toString,
  unwrap: () => unwrap,
  wrap: () => wrap,
  wrapAll: () => wrapAll,
  wrapInner: () => wrapInner
});

// node_modules/cheerio/lib/esm/parse.js
function getParse(parser) {
  return function parse7(content, options, isDocument2, context) {
    if (typeof Buffer !== "undefined" && Buffer.isBuffer(content)) {
      content = content.toString();
    }
    if (typeof content === "string") {
      return parser(content, options, isDocument2, context);
    }
    const doc = content;
    if (!Array.isArray(doc) && isDocument(doc)) {
      return doc;
    }
    const root3 = new Document([]);
    update2(doc, root3);
    return root3;
  };
}
function update2(newChilds, parent2) {
  const arr = Array.isArray(newChilds) ? newChilds : [newChilds];
  if (parent2) {
    parent2.children = arr;
  } else {
    parent2 = null;
  }
  for (let i = 0; i < arr.length; i++) {
    const node = arr[i];
    if (node.parent && node.parent.children !== arr) {
      removeElement(node);
    }
    if (parent2) {
      node.prev = arr[i - 1] || null;
      node.next = arr[i + 1] || null;
    } else {
      node.prev = node.next = null;
    }
    node.parent = parent2;
  }
  return parent2;
}

// node_modules/cheerio/lib/esm/api/manipulation.js
function _makeDomArray(elem, clone2) {
  if (elem == null) {
    return [];
  }
  if (isCheerio(elem)) {
    return clone2 ? cloneDom(elem.get()) : elem.get();
  }
  if (Array.isArray(elem)) {
    return elem.reduce((newElems, el2) => newElems.concat(this._makeDomArray(el2, clone2)), []);
  }
  if (typeof elem === "string") {
    return this._parse(elem, this.options, false, null).children;
  }
  return clone2 ? cloneDom([elem]) : [elem];
}
function _insert(concatenator) {
  return function(...elems) {
    const lastIdx = this.length - 1;
    return domEach(this, (el2, i) => {
      if (!hasChildren(el2))
        return;
      const domSrc = typeof elems[0] === "function" ? elems[0].call(el2, i, this._render(el2.children)) : elems;
      const dom = this._makeDomArray(domSrc, i < lastIdx);
      concatenator(dom, el2.children, el2);
    });
  };
}
function uniqueSplice(array, spliceIdx, spliceCount, newElems, parent2) {
  var _a3, _b;
  const spliceArgs = [
    spliceIdx,
    spliceCount,
    ...newElems
  ];
  const prev2 = spliceIdx === 0 ? null : array[spliceIdx - 1];
  const next2 = spliceIdx + spliceCount >= array.length ? null : array[spliceIdx + spliceCount];
  for (let idx = 0; idx < newElems.length; ++idx) {
    const node = newElems[idx];
    const oldParent = node.parent;
    if (oldParent) {
      const oldSiblings = oldParent.children;
      const prevIdx = oldSiblings.indexOf(node);
      if (prevIdx > -1) {
        oldParent.children.splice(prevIdx, 1);
        if (parent2 === oldParent && spliceIdx > prevIdx) {
          spliceArgs[0]--;
        }
      }
    }
    node.parent = parent2;
    if (node.prev) {
      node.prev.next = (_a3 = node.next) !== null && _a3 !== void 0 ? _a3 : null;
    }
    if (node.next) {
      node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;
    }
    node.prev = idx === 0 ? prev2 : newElems[idx - 1];
    node.next = idx === newElems.length - 1 ? next2 : newElems[idx + 1];
  }
  if (prev2) {
    prev2.next = newElems[0];
  }
  if (next2) {
    next2.prev = newElems[newElems.length - 1];
  }
  return array.splice(...spliceArgs);
}
function appendTo(target) {
  const appendTarget = isCheerio(target) ? target : this._make(target);
  appendTarget.append(this);
  return this;
}
function prependTo(target) {
  const prependTarget = isCheerio(target) ? target : this._make(target);
  prependTarget.prepend(this);
  return this;
}
var append3 = _insert((dom, children3, parent2) => {
  uniqueSplice(children3, children3.length, 0, dom, parent2);
});
var prepend2 = _insert((dom, children3, parent2) => {
  uniqueSplice(children3, 0, 0, dom, parent2);
});
function _wrap(insert2) {
  return function(wrapper) {
    const lastIdx = this.length - 1;
    const lastParent = this.parents().last();
    for (let i = 0; i < this.length; i++) {
      const el2 = this[i];
      const wrap2 = typeof wrapper === "function" ? wrapper.call(el2, i, el2) : typeof wrapper === "string" && !isHtml(wrapper) ? lastParent.find(wrapper).clone() : wrapper;
      const [wrapperDom] = this._makeDomArray(wrap2, i < lastIdx);
      if (!wrapperDom || !hasChildren(wrapperDom))
        continue;
      let elInsertLocation = wrapperDom;
      let j4 = 0;
      while (j4 < elInsertLocation.children.length) {
        const child = elInsertLocation.children[j4];
        if (isTag2(child)) {
          elInsertLocation = child;
          j4 = 0;
        } else {
          j4++;
        }
      }
      insert2(el2, elInsertLocation, [wrapperDom]);
    }
    return this;
  };
}
var wrap = _wrap((el2, elInsertLocation, wrapperDom) => {
  const { parent: parent2 } = el2;
  if (!parent2)
    return;
  const siblings2 = parent2.children;
  const index2 = siblings2.indexOf(el2);
  update2([el2], elInsertLocation);
  uniqueSplice(siblings2, index2, 0, wrapperDom, parent2);
});
var wrapInner = _wrap((el2, elInsertLocation, wrapperDom) => {
  if (!hasChildren(el2))
    return;
  update2(el2.children, elInsertLocation);
  update2(wrapperDom, el2);
});
function unwrap(selector) {
  this.parent(selector).not("body").each((_2, el2) => {
    this._make(el2).replaceWith(el2.children);
  });
  return this;
}
function wrapAll(wrapper) {
  const el2 = this[0];
  if (el2) {
    const wrap2 = this._make(typeof wrapper === "function" ? wrapper.call(el2, 0, el2) : wrapper).insertBefore(el2);
    let elInsertLocation;
    for (let i = 0; i < wrap2.length; i++) {
      if (wrap2[i].type === "tag")
        elInsertLocation = wrap2[i];
    }
    let j4 = 0;
    while (elInsertLocation && j4 < elInsertLocation.children.length) {
      const child = elInsertLocation.children[j4];
      if (child.type === "tag") {
        elInsertLocation = child;
        j4 = 0;
      } else {
        j4++;
      }
    }
    if (elInsertLocation)
      this._make(elInsertLocation).append(this);
  }
  return this;
}
function after(...elems) {
  const lastIdx = this.length - 1;
  return domEach(this, (el2, i) => {
    const { parent: parent2 } = el2;
    if (!hasChildren(el2) || !parent2) {
      return;
    }
    const siblings2 = parent2.children;
    const index2 = siblings2.indexOf(el2);
    if (index2 < 0)
      return;
    const domSrc = typeof elems[0] === "function" ? elems[0].call(el2, i, this._render(el2.children)) : elems;
    const dom = this._makeDomArray(domSrc, i < lastIdx);
    uniqueSplice(siblings2, index2 + 1, 0, dom, parent2);
  });
}
function insertAfter(target) {
  if (typeof target === "string") {
    target = this._make(target);
  }
  this.remove();
  const clones = [];
  this._makeDomArray(target).forEach((el2) => {
    const clonedSelf = this.clone().toArray();
    const { parent: parent2 } = el2;
    if (!parent2) {
      return;
    }
    const siblings2 = parent2.children;
    const index2 = siblings2.indexOf(el2);
    if (index2 < 0)
      return;
    uniqueSplice(siblings2, index2 + 1, 0, clonedSelf, parent2);
    clones.push(...clonedSelf);
  });
  return this._make(clones);
}
function before(...elems) {
  const lastIdx = this.length - 1;
  return domEach(this, (el2, i) => {
    const { parent: parent2 } = el2;
    if (!hasChildren(el2) || !parent2) {
      return;
    }
    const siblings2 = parent2.children;
    const index2 = siblings2.indexOf(el2);
    if (index2 < 0)
      return;
    const domSrc = typeof elems[0] === "function" ? elems[0].call(el2, i, this._render(el2.children)) : elems;
    const dom = this._makeDomArray(domSrc, i < lastIdx);
    uniqueSplice(siblings2, index2, 0, dom, parent2);
  });
}
function insertBefore(target) {
  const targetArr = this._make(target);
  this.remove();
  const clones = [];
  domEach(targetArr, (el2) => {
    const clonedSelf = this.clone().toArray();
    const { parent: parent2 } = el2;
    if (!parent2) {
      return;
    }
    const siblings2 = parent2.children;
    const index2 = siblings2.indexOf(el2);
    if (index2 < 0)
      return;
    uniqueSplice(siblings2, index2, 0, clonedSelf, parent2);
    clones.push(...clonedSelf);
  });
  return this._make(clones);
}
function remove(selector) {
  const elems = selector ? this.filter(selector) : this;
  domEach(elems, (el2) => {
    removeElement(el2);
    el2.prev = el2.next = el2.parent = null;
  });
  return this;
}
function replaceWith(content) {
  return domEach(this, (el2, i) => {
    const { parent: parent2 } = el2;
    if (!parent2) {
      return;
    }
    const siblings2 = parent2.children;
    const cont = typeof content === "function" ? content.call(el2, i, el2) : content;
    const dom = this._makeDomArray(cont);
    update2(dom, null);
    const index2 = siblings2.indexOf(el2);
    uniqueSplice(siblings2, index2, 1, dom, parent2);
    if (!dom.includes(el2)) {
      el2.parent = el2.prev = el2.next = null;
    }
  });
}
function empty() {
  return domEach(this, (el2) => {
    if (!hasChildren(el2))
      return;
    el2.children.forEach((child) => {
      child.next = child.prev = child.parent = null;
    });
    el2.children.length = 0;
  });
}
function html2(str) {
  if (str === void 0) {
    const el2 = this[0];
    if (!el2 || !hasChildren(el2))
      return null;
    return this._render(el2.children);
  }
  return domEach(this, (el2) => {
    if (!hasChildren(el2))
      return;
    el2.children.forEach((child) => {
      child.next = child.prev = child.parent = null;
    });
    const content = isCheerio(str) ? str.toArray() : this._parse(`${str}`, this.options, false, el2).children;
    update2(content, el2);
  });
}
function toString() {
  return this._render(this);
}
function text3(str) {
  if (str === void 0) {
    return text2(this);
  }
  if (typeof str === "function") {
    return domEach(this, (el2, i) => this._make(el2).text(str.call(el2, i, text2([el2]))));
  }
  return domEach(this, (el2) => {
    if (!hasChildren(el2))
      return;
    el2.children.forEach((child) => {
      child.next = child.prev = child.parent = null;
    });
    const textNode = new Text2(`${str}`);
    update2(textNode, el2);
  });
}
function clone() {
  return this._make(cloneDom(this.get()));
}

// node_modules/cheerio/lib/esm/api/css.js
var css_exports = {};
__export(css_exports, {
  css: () => css
});
function css(prop2, val2) {
  if (prop2 != null && val2 != null || // When `prop` is a "plain" object
  typeof prop2 === "object" && !Array.isArray(prop2)) {
    return domEach(this, (el2, i) => {
      if (isTag2(el2)) {
        setCss(el2, prop2, val2, i);
      }
    });
  }
  if (this.length === 0) {
    return void 0;
  }
  return getCss(this[0], prop2);
}
function setCss(el2, prop2, value, idx) {
  if (typeof prop2 === "string") {
    const styles = getCss(el2);
    const val2 = typeof value === "function" ? value.call(el2, idx, styles[prop2]) : value;
    if (val2 === "") {
      delete styles[prop2];
    } else if (val2 != null) {
      styles[prop2] = val2;
    }
    el2.attribs["style"] = stringify(styles);
  } else if (typeof prop2 === "object") {
    Object.keys(prop2).forEach((k3, i) => {
      setCss(el2, k3, prop2[k3], i);
    });
  }
}
function getCss(el2, prop2) {
  if (!el2 || !isTag2(el2))
    return;
  const styles = parse4(el2.attribs["style"]);
  if (typeof prop2 === "string") {
    return styles[prop2];
  }
  if (Array.isArray(prop2)) {
    const newStyles = {};
    prop2.forEach((item) => {
      if (styles[item] != null) {
        newStyles[item] = styles[item];
      }
    });
    return newStyles;
  }
  return styles;
}
function stringify(obj) {
  return Object.keys(obj).reduce((str, prop2) => `${str}${str ? " " : ""}${prop2}: ${obj[prop2]};`, "");
}
function parse4(styles) {
  styles = (styles || "").trim();
  if (!styles)
    return {};
  const obj = {};
  let key;
  for (const str of styles.split(";")) {
    const n = str.indexOf(":");
    if (n < 1 || n === str.length - 1) {
      const trimmed = str.trimEnd();
      if (trimmed.length > 0 && key !== void 0) {
        obj[key] += `;${trimmed}`;
      }
    } else {
      key = str.slice(0, n).trim();
      obj[key] = str.slice(n + 1).trim();
    }
  }
  return obj;
}

// node_modules/cheerio/lib/esm/api/forms.js
var forms_exports = {};
__export(forms_exports, {
  serialize: () => serialize,
  serializeArray: () => serializeArray
});
var submittableSelector = "input,select,textarea,keygen";
var r20 = /%20/g;
var rCRLF = /\r?\n/g;
function serialize() {
  const arr = this.serializeArray();
  const retArr = arr.map((data2) => `${encodeURIComponent(data2.name)}=${encodeURIComponent(data2.value)}`);
  return retArr.join("&").replace(r20, "+");
}
function serializeArray() {
  return this.map((_2, elem) => {
    const $elem = this._make(elem);
    if (isTag2(elem) && elem.name === "form") {
      return $elem.find(submittableSelector).toArray();
    }
    return $elem.filter(submittableSelector).toArray();
  }).filter(
    // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)
    '[name!=""]:enabled:not(:submit, :button, :image, :reset, :file):matches([checked], :not(:checkbox, :radio))'
    // Convert each of the elements to its value(s)
  ).map((_2, elem) => {
    var _a3;
    const $elem = this._make(elem);
    const name = $elem.attr("name");
    const value = (_a3 = $elem.val()) !== null && _a3 !== void 0 ? _a3 : "";
    if (Array.isArray(value)) {
      return value.map((val2) => (
        /*
         * We trim replace any line endings (e.g. `\r` or `\r\n` with `\r\n`) to guarantee consistency across platforms
         * These can occur inside of `<textarea>'s`
         */
        { name, value: val2.replace(rCRLF, "\r\n") }
      ));
    }
    return { name, value: value.replace(rCRLF, "\r\n") };
  }).toArray();
}

// node_modules/cheerio/lib/esm/cheerio.js
var Cheerio = class {
  /**
   * Instance of cheerio. Methods are specified in the modules. Usage of this
   * constructor is not recommended. Please use `$.load` instead.
   *
   * @private
   * @param elements - The new selection.
   * @param root - Sets the root node.
   * @param options - Options for the instance.
   */
  constructor(elements, root3, options) {
    this.length = 0;
    this.options = options;
    this._root = root3;
    if (elements) {
      for (let idx = 0; idx < elements.length; idx++) {
        this[idx] = elements[idx];
      }
      this.length = elements.length;
    }
  }
};
Cheerio.prototype.cheerio = "[cheerio object]";
Cheerio.prototype.splice = Array.prototype.splice;
Cheerio.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];
Object.assign(Cheerio.prototype, attributes_exports, traversing_exports, manipulation_exports, css_exports, forms_exports);

// node_modules/cheerio/lib/esm/load.js
function getLoad(parse7, render3) {
  return function load2(content, options, isDocument2 = true) {
    if (content == null) {
      throw new Error("cheerio.load() expects a string");
    }
    const internalOpts = { ...options_default, ...flatten(options) };
    const initialRoot = parse7(content, internalOpts, isDocument2, null);
    class LoadedCheerio extends Cheerio {
      _make(selector, context) {
        const cheerio = initialize(selector, context);
        cheerio.prevObject = this;
        return cheerio;
      }
      _parse(content2, options2, isDocument3, context) {
        return parse7(content2, options2, isDocument3, context);
      }
      _render(dom) {
        return render3(dom, this.options);
      }
    }
    function initialize(selector, context, root3 = initialRoot, opts) {
      if (selector && isCheerio(selector))
        return selector;
      const options2 = {
        ...internalOpts,
        ...flatten(opts)
      };
      const r = typeof root3 === "string" ? [parse7(root3, options2, false, null)] : "length" in root3 ? root3 : [root3];
      const rootInstance = isCheerio(r) ? r : new LoadedCheerio(r, null, options2);
      rootInstance._root = rootInstance;
      if (!selector) {
        return new LoadedCheerio(void 0, rootInstance, options2);
      }
      const elements = typeof selector === "string" && isHtml(selector) ? (
        // $(<html>)
        parse7(selector, options2, false, null).children
      ) : isNode(selector) ? (
        // $(dom)
        [selector]
      ) : Array.isArray(selector) ? (
        // $([dom])
        selector
      ) : void 0;
      const instance4 = new LoadedCheerio(elements, rootInstance, options2);
      if (elements) {
        return instance4;
      }
      if (typeof selector !== "string") {
        throw new Error("Unexpected type of selector");
      }
      let search = selector;
      const searchContext = !context ? (
        // If we don't have a context, maybe we have a root, from loading
        rootInstance
      ) : typeof context === "string" ? isHtml(context) ? (
        // $('li', '<ul>...</ul>')
        new LoadedCheerio([parse7(context, options2, false, null)], rootInstance, options2)
      ) : (
        // $('li', 'ul')
        (search = `${context} ${search}`, rootInstance)
      ) : isCheerio(context) ? (
        // $('li', $)
        context
      ) : (
        // $('li', node), $('li', [nodes])
        new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options2)
      );
      if (!searchContext)
        return instance4;
      return searchContext.find(search);
    }
    Object.assign(initialize, static_exports, {
      load: load2,
      // `_root` and `_options` are used in static methods.
      _root: initialRoot,
      _options: internalOpts,
      // Add `fn` for plugins
      fn: LoadedCheerio.prototype,
      // Add the prototype here to maintain `instanceof` behavior.
      prototype: LoadedCheerio.prototype
    });
    return initialize;
  };
}
function isNode(obj) {
  return !!obj.name || obj.type === "root" || obj.type === "text" || obj.type === "comment";
}

// node_modules/parse5/dist/common/unicode.js
var UNDEFINED_CODE_POINTS = /* @__PURE__ */ new Set([
  65534,
  65535,
  131070,
  131071,
  196606,
  196607,
  262142,
  262143,
  327678,
  327679,
  393214,
  393215,
  458750,
  458751,
  524286,
  524287,
  589822,
  589823,
  655358,
  655359,
  720894,
  720895,
  786430,
  786431,
  851966,
  851967,
  917502,
  917503,
  983038,
  983039,
  1048574,
  1048575,
  1114110,
  1114111
]);
var REPLACEMENT_CHARACTER = "\uFFFD";
var CODE_POINTS;
(function(CODE_POINTS2) {
  CODE_POINTS2[CODE_POINTS2["EOF"] = -1] = "EOF";
  CODE_POINTS2[CODE_POINTS2["NULL"] = 0] = "NULL";
  CODE_POINTS2[CODE_POINTS2["TABULATION"] = 9] = "TABULATION";
  CODE_POINTS2[CODE_POINTS2["CARRIAGE_RETURN"] = 13] = "CARRIAGE_RETURN";
  CODE_POINTS2[CODE_POINTS2["LINE_FEED"] = 10] = "LINE_FEED";
  CODE_POINTS2[CODE_POINTS2["FORM_FEED"] = 12] = "FORM_FEED";
  CODE_POINTS2[CODE_POINTS2["SPACE"] = 32] = "SPACE";
  CODE_POINTS2[CODE_POINTS2["EXCLAMATION_MARK"] = 33] = "EXCLAMATION_MARK";
  CODE_POINTS2[CODE_POINTS2["QUOTATION_MARK"] = 34] = "QUOTATION_MARK";
  CODE_POINTS2[CODE_POINTS2["NUMBER_SIGN"] = 35] = "NUMBER_SIGN";
  CODE_POINTS2[CODE_POINTS2["AMPERSAND"] = 38] = "AMPERSAND";
  CODE_POINTS2[CODE_POINTS2["APOSTROPHE"] = 39] = "APOSTROPHE";
  CODE_POINTS2[CODE_POINTS2["HYPHEN_MINUS"] = 45] = "HYPHEN_MINUS";
  CODE_POINTS2[CODE_POINTS2["SOLIDUS"] = 47] = "SOLIDUS";
  CODE_POINTS2[CODE_POINTS2["DIGIT_0"] = 48] = "DIGIT_0";
  CODE_POINTS2[CODE_POINTS2["DIGIT_9"] = 57] = "DIGIT_9";
  CODE_POINTS2[CODE_POINTS2["SEMICOLON"] = 59] = "SEMICOLON";
  CODE_POINTS2[CODE_POINTS2["LESS_THAN_SIGN"] = 60] = "LESS_THAN_SIGN";
  CODE_POINTS2[CODE_POINTS2["EQUALS_SIGN"] = 61] = "EQUALS_SIGN";
  CODE_POINTS2[CODE_POINTS2["GREATER_THAN_SIGN"] = 62] = "GREATER_THAN_SIGN";
  CODE_POINTS2[CODE_POINTS2["QUESTION_MARK"] = 63] = "QUESTION_MARK";
  CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_A"] = 65] = "LATIN_CAPITAL_A";
  CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_F"] = 70] = "LATIN_CAPITAL_F";
  CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_X"] = 88] = "LATIN_CAPITAL_X";
  CODE_POINTS2[CODE_POINTS2["LATIN_CAPITAL_Z"] = 90] = "LATIN_CAPITAL_Z";
  CODE_POINTS2[CODE_POINTS2["RIGHT_SQUARE_BRACKET"] = 93] = "RIGHT_SQUARE_BRACKET";
  CODE_POINTS2[CODE_POINTS2["GRAVE_ACCENT"] = 96] = "GRAVE_ACCENT";
  CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_A"] = 97] = "LATIN_SMALL_A";
  CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_F"] = 102] = "LATIN_SMALL_F";
  CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_X"] = 120] = "LATIN_SMALL_X";
  CODE_POINTS2[CODE_POINTS2["LATIN_SMALL_Z"] = 122] = "LATIN_SMALL_Z";
  CODE_POINTS2[CODE_POINTS2["REPLACEMENT_CHARACTER"] = 65533] = "REPLACEMENT_CHARACTER";
})(CODE_POINTS = CODE_POINTS || (CODE_POINTS = {}));
var SEQUENCES = {
  DASH_DASH: "--",
  CDATA_START: "[CDATA[",
  DOCTYPE: "doctype",
  SCRIPT: "script",
  PUBLIC: "public",
  SYSTEM: "system"
};
function isSurrogate(cp) {
  return cp >= 55296 && cp <= 57343;
}
function isSurrogatePair(cp) {
  return cp >= 56320 && cp <= 57343;
}
function getSurrogatePairCodePoint(cp1, cp2) {
  return (cp1 - 55296) * 1024 + 9216 + cp2;
}
function isControlCodePoint(cp) {
  return cp !== 32 && cp !== 10 && cp !== 13 && cp !== 9 && cp !== 12 && cp >= 1 && cp <= 31 || cp >= 127 && cp <= 159;
}
function isUndefinedCodePoint(cp) {
  return cp >= 64976 && cp <= 65007 || UNDEFINED_CODE_POINTS.has(cp);
}

// node_modules/parse5/dist/common/error-codes.js
var ERR;
(function(ERR2) {
  ERR2["controlCharacterInInputStream"] = "control-character-in-input-stream";
  ERR2["noncharacterInInputStream"] = "noncharacter-in-input-stream";
  ERR2["surrogateInInputStream"] = "surrogate-in-input-stream";
  ERR2["nonVoidHtmlElementStartTagWithTrailingSolidus"] = "non-void-html-element-start-tag-with-trailing-solidus";
  ERR2["endTagWithAttributes"] = "end-tag-with-attributes";
  ERR2["endTagWithTrailingSolidus"] = "end-tag-with-trailing-solidus";
  ERR2["unexpectedSolidusInTag"] = "unexpected-solidus-in-tag";
  ERR2["unexpectedNullCharacter"] = "unexpected-null-character";
  ERR2["unexpectedQuestionMarkInsteadOfTagName"] = "unexpected-question-mark-instead-of-tag-name";
  ERR2["invalidFirstCharacterOfTagName"] = "invalid-first-character-of-tag-name";
  ERR2["unexpectedEqualsSignBeforeAttributeName"] = "unexpected-equals-sign-before-attribute-name";
  ERR2["missingEndTagName"] = "missing-end-tag-name";
  ERR2["unexpectedCharacterInAttributeName"] = "unexpected-character-in-attribute-name";
  ERR2["unknownNamedCharacterReference"] = "unknown-named-character-reference";
  ERR2["missingSemicolonAfterCharacterReference"] = "missing-semicolon-after-character-reference";
  ERR2["unexpectedCharacterAfterDoctypeSystemIdentifier"] = "unexpected-character-after-doctype-system-identifier";
  ERR2["unexpectedCharacterInUnquotedAttributeValue"] = "unexpected-character-in-unquoted-attribute-value";
  ERR2["eofBeforeTagName"] = "eof-before-tag-name";
  ERR2["eofInTag"] = "eof-in-tag";
  ERR2["missingAttributeValue"] = "missing-attribute-value";
  ERR2["missingWhitespaceBetweenAttributes"] = "missing-whitespace-between-attributes";
  ERR2["missingWhitespaceAfterDoctypePublicKeyword"] = "missing-whitespace-after-doctype-public-keyword";
  ERR2["missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers"] = "missing-whitespace-between-doctype-public-and-system-identifiers";
  ERR2["missingWhitespaceAfterDoctypeSystemKeyword"] = "missing-whitespace-after-doctype-system-keyword";
  ERR2["missingQuoteBeforeDoctypePublicIdentifier"] = "missing-quote-before-doctype-public-identifier";
  ERR2["missingQuoteBeforeDoctypeSystemIdentifier"] = "missing-quote-before-doctype-system-identifier";
  ERR2["missingDoctypePublicIdentifier"] = "missing-doctype-public-identifier";
  ERR2["missingDoctypeSystemIdentifier"] = "missing-doctype-system-identifier";
  ERR2["abruptDoctypePublicIdentifier"] = "abrupt-doctype-public-identifier";
  ERR2["abruptDoctypeSystemIdentifier"] = "abrupt-doctype-system-identifier";
  ERR2["cdataInHtmlContent"] = "cdata-in-html-content";
  ERR2["incorrectlyOpenedComment"] = "incorrectly-opened-comment";
  ERR2["eofInScriptHtmlCommentLikeText"] = "eof-in-script-html-comment-like-text";
  ERR2["eofInDoctype"] = "eof-in-doctype";
  ERR2["nestedComment"] = "nested-comment";
  ERR2["abruptClosingOfEmptyComment"] = "abrupt-closing-of-empty-comment";
  ERR2["eofInComment"] = "eof-in-comment";
  ERR2["incorrectlyClosedComment"] = "incorrectly-closed-comment";
  ERR2["eofInCdata"] = "eof-in-cdata";
  ERR2["absenceOfDigitsInNumericCharacterReference"] = "absence-of-digits-in-numeric-character-reference";
  ERR2["nullCharacterReference"] = "null-character-reference";
  ERR2["surrogateCharacterReference"] = "surrogate-character-reference";
  ERR2["characterReferenceOutsideUnicodeRange"] = "character-reference-outside-unicode-range";
  ERR2["controlCharacterReference"] = "control-character-reference";
  ERR2["noncharacterCharacterReference"] = "noncharacter-character-reference";
  ERR2["missingWhitespaceBeforeDoctypeName"] = "missing-whitespace-before-doctype-name";
  ERR2["missingDoctypeName"] = "missing-doctype-name";
  ERR2["invalidCharacterSequenceAfterDoctypeName"] = "invalid-character-sequence-after-doctype-name";
  ERR2["duplicateAttribute"] = "duplicate-attribute";
  ERR2["nonConformingDoctype"] = "non-conforming-doctype";
  ERR2["missingDoctype"] = "missing-doctype";
  ERR2["misplacedDoctype"] = "misplaced-doctype";
  ERR2["endTagWithoutMatchingOpenElement"] = "end-tag-without-matching-open-element";
  ERR2["closingOfElementWithOpenChildElements"] = "closing-of-element-with-open-child-elements";
  ERR2["disallowedContentInNoscriptInHead"] = "disallowed-content-in-noscript-in-head";
  ERR2["openElementsLeftAfterEof"] = "open-elements-left-after-eof";
  ERR2["abandonedHeadElementChild"] = "abandoned-head-element-child";
  ERR2["misplacedStartTagForHeadElement"] = "misplaced-start-tag-for-head-element";
  ERR2["nestedNoscriptInHead"] = "nested-noscript-in-head";
  ERR2["eofInElementThatCanContainOnlyText"] = "eof-in-element-that-can-contain-only-text";
})(ERR = ERR || (ERR = {}));

// node_modules/parse5/dist/tokenizer/preprocessor.js
var DEFAULT_BUFFER_WATERLINE = 1 << 16;
var Preprocessor = class {
  constructor(handler2) {
    this.handler = handler2;
    this.html = "";
    this.pos = -1;
    this.lastGapPos = -2;
    this.gapStack = [];
    this.skipNextNewLine = false;
    this.lastChunkWritten = false;
    this.endOfChunkHit = false;
    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
    this.isEol = false;
    this.lineStartPos = 0;
    this.droppedBufferSize = 0;
    this.line = 1;
    this.lastErrOffset = -1;
  }
  /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */
  get col() {
    return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);
  }
  get offset() {
    return this.droppedBufferSize + this.pos;
  }
  getError(code) {
    const { line, col, offset } = this;
    return {
      code,
      startLine: line,
      endLine: line,
      startCol: col,
      endCol: col,
      startOffset: offset,
      endOffset: offset
    };
  }
  _err(code) {
    if (this.handler.onParseError && this.lastErrOffset !== this.offset) {
      this.lastErrOffset = this.offset;
      this.handler.onParseError(this.getError(code));
    }
  }
  _addGap() {
    this.gapStack.push(this.lastGapPos);
    this.lastGapPos = this.pos;
  }
  _processSurrogate(cp) {
    if (this.pos !== this.html.length - 1) {
      const nextCp = this.html.charCodeAt(this.pos + 1);
      if (isSurrogatePair(nextCp)) {
        this.pos++;
        this._addGap();
        return getSurrogatePairCodePoint(cp, nextCp);
      }
    } else if (!this.lastChunkWritten) {
      this.endOfChunkHit = true;
      return CODE_POINTS.EOF;
    }
    this._err(ERR.surrogateInInputStream);
    return cp;
  }
  willDropParsedChunk() {
    return this.pos > this.bufferWaterline;
  }
  dropParsedChunk() {
    if (this.willDropParsedChunk()) {
      this.html = this.html.substring(this.pos);
      this.lineStartPos -= this.pos;
      this.droppedBufferSize += this.pos;
      this.pos = 0;
      this.lastGapPos = -2;
      this.gapStack.length = 0;
    }
  }
  write(chunk, isLastChunk) {
    if (this.html.length > 0) {
      this.html += chunk;
    } else {
      this.html = chunk;
    }
    this.endOfChunkHit = false;
    this.lastChunkWritten = isLastChunk;
  }
  insertHtmlAtCurrentPos(chunk) {
    this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);
    this.endOfChunkHit = false;
  }
  startsWith(pattern, caseSensitive) {
    if (this.pos + pattern.length > this.html.length) {
      this.endOfChunkHit = !this.lastChunkWritten;
      return false;
    }
    if (caseSensitive) {
      return this.html.startsWith(pattern, this.pos);
    }
    for (let i = 0; i < pattern.length; i++) {
      const cp = this.html.charCodeAt(this.pos + i) | 32;
      if (cp !== pattern.charCodeAt(i)) {
        return false;
      }
    }
    return true;
  }
  peek(offset) {
    const pos = this.pos + offset;
    if (pos >= this.html.length) {
      this.endOfChunkHit = !this.lastChunkWritten;
      return CODE_POINTS.EOF;
    }
    const code = this.html.charCodeAt(pos);
    return code === CODE_POINTS.CARRIAGE_RETURN ? CODE_POINTS.LINE_FEED : code;
  }
  advance() {
    this.pos++;
    if (this.isEol) {
      this.isEol = false;
      this.line++;
      this.lineStartPos = this.pos;
    }
    if (this.pos >= this.html.length) {
      this.endOfChunkHit = !this.lastChunkWritten;
      return CODE_POINTS.EOF;
    }
    let cp = this.html.charCodeAt(this.pos);
    if (cp === CODE_POINTS.CARRIAGE_RETURN) {
      this.isEol = true;
      this.skipNextNewLine = true;
      return CODE_POINTS.LINE_FEED;
    }
    if (cp === CODE_POINTS.LINE_FEED) {
      this.isEol = true;
      if (this.skipNextNewLine) {
        this.line--;
        this.skipNextNewLine = false;
        this._addGap();
        return this.advance();
      }
    }
    this.skipNextNewLine = false;
    if (isSurrogate(cp)) {
      cp = this._processSurrogate(cp);
    }
    const isCommonValidRange = this.handler.onParseError === null || cp > 31 && cp < 127 || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.CARRIAGE_RETURN || cp > 159 && cp < 64976;
    if (!isCommonValidRange) {
      this._checkForProblematicCharacters(cp);
    }
    return cp;
  }
  _checkForProblematicCharacters(cp) {
    if (isControlCodePoint(cp)) {
      this._err(ERR.controlCharacterInInputStream);
    } else if (isUndefinedCodePoint(cp)) {
      this._err(ERR.noncharacterInInputStream);
    }
  }
  retreat(count) {
    this.pos -= count;
    while (this.pos < this.lastGapPos) {
      this.lastGapPos = this.gapStack.pop();
      this.pos--;
    }
    this.isEol = false;
  }
};

// node_modules/parse5/dist/common/token.js
var token_exports = {};
__export(token_exports, {
  TokenType: () => TokenType,
  getTokenAttr: () => getTokenAttr
});
var TokenType;
(function(TokenType2) {
  TokenType2[TokenType2["CHARACTER"] = 0] = "CHARACTER";
  TokenType2[TokenType2["NULL_CHARACTER"] = 1] = "NULL_CHARACTER";
  TokenType2[TokenType2["WHITESPACE_CHARACTER"] = 2] = "WHITESPACE_CHARACTER";
  TokenType2[TokenType2["START_TAG"] = 3] = "START_TAG";
  TokenType2[TokenType2["END_TAG"] = 4] = "END_TAG";
  TokenType2[TokenType2["COMMENT"] = 5] = "COMMENT";
  TokenType2[TokenType2["DOCTYPE"] = 6] = "DOCTYPE";
  TokenType2[TokenType2["EOF"] = 7] = "EOF";
  TokenType2[TokenType2["HIBERNATION"] = 8] = "HIBERNATION";
})(TokenType = TokenType || (TokenType = {}));
function getTokenAttr(token, attrName) {
  for (let i = token.attrs.length - 1; i >= 0; i--) {
    if (token.attrs[i].name === attrName) {
      return token.attrs[i].value;
    }
  }
  return null;
}

// node_modules/parse5/dist/common/html.js
var html_exports2 = {};
__export(html_exports2, {
  ATTRS: () => ATTRS,
  DOCUMENT_MODE: () => DOCUMENT_MODE,
  NS: () => NS,
  SPECIAL_ELEMENTS: () => SPECIAL_ELEMENTS,
  TAG_ID: () => TAG_ID,
  TAG_NAMES: () => TAG_NAMES,
  getTagID: () => getTagID,
  hasUnescapedText: () => hasUnescapedText,
  isNumberedHeader: () => isNumberedHeader
});
var NS;
(function(NS2) {
  NS2["HTML"] = "http://www.w3.org/1999/xhtml";
  NS2["MATHML"] = "http://www.w3.org/1998/Math/MathML";
  NS2["SVG"] = "http://www.w3.org/2000/svg";
  NS2["XLINK"] = "http://www.w3.org/1999/xlink";
  NS2["XML"] = "http://www.w3.org/XML/1998/namespace";
  NS2["XMLNS"] = "http://www.w3.org/2000/xmlns/";
})(NS = NS || (NS = {}));
var ATTRS;
(function(ATTRS2) {
  ATTRS2["TYPE"] = "type";
  ATTRS2["ACTION"] = "action";
  ATTRS2["ENCODING"] = "encoding";
  ATTRS2["PROMPT"] = "prompt";
  ATTRS2["NAME"] = "name";
  ATTRS2["COLOR"] = "color";
  ATTRS2["FACE"] = "face";
  ATTRS2["SIZE"] = "size";
})(ATTRS = ATTRS || (ATTRS = {}));
var DOCUMENT_MODE;
(function(DOCUMENT_MODE2) {
  DOCUMENT_MODE2["NO_QUIRKS"] = "no-quirks";
  DOCUMENT_MODE2["QUIRKS"] = "quirks";
  DOCUMENT_MODE2["LIMITED_QUIRKS"] = "limited-quirks";
})(DOCUMENT_MODE = DOCUMENT_MODE || (DOCUMENT_MODE = {}));
var TAG_NAMES;
(function(TAG_NAMES2) {
  TAG_NAMES2["A"] = "a";
  TAG_NAMES2["ADDRESS"] = "address";
  TAG_NAMES2["ANNOTATION_XML"] = "annotation-xml";
  TAG_NAMES2["APPLET"] = "applet";
  TAG_NAMES2["AREA"] = "area";
  TAG_NAMES2["ARTICLE"] = "article";
  TAG_NAMES2["ASIDE"] = "aside";
  TAG_NAMES2["B"] = "b";
  TAG_NAMES2["BASE"] = "base";
  TAG_NAMES2["BASEFONT"] = "basefont";
  TAG_NAMES2["BGSOUND"] = "bgsound";
  TAG_NAMES2["BIG"] = "big";
  TAG_NAMES2["BLOCKQUOTE"] = "blockquote";
  TAG_NAMES2["BODY"] = "body";
  TAG_NAMES2["BR"] = "br";
  TAG_NAMES2["BUTTON"] = "button";
  TAG_NAMES2["CAPTION"] = "caption";
  TAG_NAMES2["CENTER"] = "center";
  TAG_NAMES2["CODE"] = "code";
  TAG_NAMES2["COL"] = "col";
  TAG_NAMES2["COLGROUP"] = "colgroup";
  TAG_NAMES2["DD"] = "dd";
  TAG_NAMES2["DESC"] = "desc";
  TAG_NAMES2["DETAILS"] = "details";
  TAG_NAMES2["DIALOG"] = "dialog";
  TAG_NAMES2["DIR"] = "dir";
  TAG_NAMES2["DIV"] = "div";
  TAG_NAMES2["DL"] = "dl";
  TAG_NAMES2["DT"] = "dt";
  TAG_NAMES2["EM"] = "em";
  TAG_NAMES2["EMBED"] = "embed";
  TAG_NAMES2["FIELDSET"] = "fieldset";
  TAG_NAMES2["FIGCAPTION"] = "figcaption";
  TAG_NAMES2["FIGURE"] = "figure";
  TAG_NAMES2["FONT"] = "font";
  TAG_NAMES2["FOOTER"] = "footer";
  TAG_NAMES2["FOREIGN_OBJECT"] = "foreignObject";
  TAG_NAMES2["FORM"] = "form";
  TAG_NAMES2["FRAME"] = "frame";
  TAG_NAMES2["FRAMESET"] = "frameset";
  TAG_NAMES2["H1"] = "h1";
  TAG_NAMES2["H2"] = "h2";
  TAG_NAMES2["H3"] = "h3";
  TAG_NAMES2["H4"] = "h4";
  TAG_NAMES2["H5"] = "h5";
  TAG_NAMES2["H6"] = "h6";
  TAG_NAMES2["HEAD"] = "head";
  TAG_NAMES2["HEADER"] = "header";
  TAG_NAMES2["HGROUP"] = "hgroup";
  TAG_NAMES2["HR"] = "hr";
  TAG_NAMES2["HTML"] = "html";
  TAG_NAMES2["I"] = "i";
  TAG_NAMES2["IMG"] = "img";
  TAG_NAMES2["IMAGE"] = "image";
  TAG_NAMES2["INPUT"] = "input";
  TAG_NAMES2["IFRAME"] = "iframe";
  TAG_NAMES2["KEYGEN"] = "keygen";
  TAG_NAMES2["LABEL"] = "label";
  TAG_NAMES2["LI"] = "li";
  TAG_NAMES2["LINK"] = "link";
  TAG_NAMES2["LISTING"] = "listing";
  TAG_NAMES2["MAIN"] = "main";
  TAG_NAMES2["MALIGNMARK"] = "malignmark";
  TAG_NAMES2["MARQUEE"] = "marquee";
  TAG_NAMES2["MATH"] = "math";
  TAG_NAMES2["MENU"] = "menu";
  TAG_NAMES2["META"] = "meta";
  TAG_NAMES2["MGLYPH"] = "mglyph";
  TAG_NAMES2["MI"] = "mi";
  TAG_NAMES2["MO"] = "mo";
  TAG_NAMES2["MN"] = "mn";
  TAG_NAMES2["MS"] = "ms";
  TAG_NAMES2["MTEXT"] = "mtext";
  TAG_NAMES2["NAV"] = "nav";
  TAG_NAMES2["NOBR"] = "nobr";
  TAG_NAMES2["NOFRAMES"] = "noframes";
  TAG_NAMES2["NOEMBED"] = "noembed";
  TAG_NAMES2["NOSCRIPT"] = "noscript";
  TAG_NAMES2["OBJECT"] = "object";
  TAG_NAMES2["OL"] = "ol";
  TAG_NAMES2["OPTGROUP"] = "optgroup";
  TAG_NAMES2["OPTION"] = "option";
  TAG_NAMES2["P"] = "p";
  TAG_NAMES2["PARAM"] = "param";
  TAG_NAMES2["PLAINTEXT"] = "plaintext";
  TAG_NAMES2["PRE"] = "pre";
  TAG_NAMES2["RB"] = "rb";
  TAG_NAMES2["RP"] = "rp";
  TAG_NAMES2["RT"] = "rt";
  TAG_NAMES2["RTC"] = "rtc";
  TAG_NAMES2["RUBY"] = "ruby";
  TAG_NAMES2["S"] = "s";
  TAG_NAMES2["SCRIPT"] = "script";
  TAG_NAMES2["SECTION"] = "section";
  TAG_NAMES2["SELECT"] = "select";
  TAG_NAMES2["SOURCE"] = "source";
  TAG_NAMES2["SMALL"] = "small";
  TAG_NAMES2["SPAN"] = "span";
  TAG_NAMES2["STRIKE"] = "strike";
  TAG_NAMES2["STRONG"] = "strong";
  TAG_NAMES2["STYLE"] = "style";
  TAG_NAMES2["SUB"] = "sub";
  TAG_NAMES2["SUMMARY"] = "summary";
  TAG_NAMES2["SUP"] = "sup";
  TAG_NAMES2["TABLE"] = "table";
  TAG_NAMES2["TBODY"] = "tbody";
  TAG_NAMES2["TEMPLATE"] = "template";
  TAG_NAMES2["TEXTAREA"] = "textarea";
  TAG_NAMES2["TFOOT"] = "tfoot";
  TAG_NAMES2["TD"] = "td";
  TAG_NAMES2["TH"] = "th";
  TAG_NAMES2["THEAD"] = "thead";
  TAG_NAMES2["TITLE"] = "title";
  TAG_NAMES2["TR"] = "tr";
  TAG_NAMES2["TRACK"] = "track";
  TAG_NAMES2["TT"] = "tt";
  TAG_NAMES2["U"] = "u";
  TAG_NAMES2["UL"] = "ul";
  TAG_NAMES2["SVG"] = "svg";
  TAG_NAMES2["VAR"] = "var";
  TAG_NAMES2["WBR"] = "wbr";
  TAG_NAMES2["XMP"] = "xmp";
})(TAG_NAMES = TAG_NAMES || (TAG_NAMES = {}));
var TAG_ID;
(function(TAG_ID2) {
  TAG_ID2[TAG_ID2["UNKNOWN"] = 0] = "UNKNOWN";
  TAG_ID2[TAG_ID2["A"] = 1] = "A";
  TAG_ID2[TAG_ID2["ADDRESS"] = 2] = "ADDRESS";
  TAG_ID2[TAG_ID2["ANNOTATION_XML"] = 3] = "ANNOTATION_XML";
  TAG_ID2[TAG_ID2["APPLET"] = 4] = "APPLET";
  TAG_ID2[TAG_ID2["AREA"] = 5] = "AREA";
  TAG_ID2[TAG_ID2["ARTICLE"] = 6] = "ARTICLE";
  TAG_ID2[TAG_ID2["ASIDE"] = 7] = "ASIDE";
  TAG_ID2[TAG_ID2["B"] = 8] = "B";
  TAG_ID2[TAG_ID2["BASE"] = 9] = "BASE";
  TAG_ID2[TAG_ID2["BASEFONT"] = 10] = "BASEFONT";
  TAG_ID2[TAG_ID2["BGSOUND"] = 11] = "BGSOUND";
  TAG_ID2[TAG_ID2["BIG"] = 12] = "BIG";
  TAG_ID2[TAG_ID2["BLOCKQUOTE"] = 13] = "BLOCKQUOTE";
  TAG_ID2[TAG_ID2["BODY"] = 14] = "BODY";
  TAG_ID2[TAG_ID2["BR"] = 15] = "BR";
  TAG_ID2[TAG_ID2["BUTTON"] = 16] = "BUTTON";
  TAG_ID2[TAG_ID2["CAPTION"] = 17] = "CAPTION";
  TAG_ID2[TAG_ID2["CENTER"] = 18] = "CENTER";
  TAG_ID2[TAG_ID2["CODE"] = 19] = "CODE";
  TAG_ID2[TAG_ID2["COL"] = 20] = "COL";
  TAG_ID2[TAG_ID2["COLGROUP"] = 21] = "COLGROUP";
  TAG_ID2[TAG_ID2["DD"] = 22] = "DD";
  TAG_ID2[TAG_ID2["DESC"] = 23] = "DESC";
  TAG_ID2[TAG_ID2["DETAILS"] = 24] = "DETAILS";
  TAG_ID2[TAG_ID2["DIALOG"] = 25] = "DIALOG";
  TAG_ID2[TAG_ID2["DIR"] = 26] = "DIR";
  TAG_ID2[TAG_ID2["DIV"] = 27] = "DIV";
  TAG_ID2[TAG_ID2["DL"] = 28] = "DL";
  TAG_ID2[TAG_ID2["DT"] = 29] = "DT";
  TAG_ID2[TAG_ID2["EM"] = 30] = "EM";
  TAG_ID2[TAG_ID2["EMBED"] = 31] = "EMBED";
  TAG_ID2[TAG_ID2["FIELDSET"] = 32] = "FIELDSET";
  TAG_ID2[TAG_ID2["FIGCAPTION"] = 33] = "FIGCAPTION";
  TAG_ID2[TAG_ID2["FIGURE"] = 34] = "FIGURE";
  TAG_ID2[TAG_ID2["FONT"] = 35] = "FONT";
  TAG_ID2[TAG_ID2["FOOTER"] = 36] = "FOOTER";
  TAG_ID2[TAG_ID2["FOREIGN_OBJECT"] = 37] = "FOREIGN_OBJECT";
  TAG_ID2[TAG_ID2["FORM"] = 38] = "FORM";
  TAG_ID2[TAG_ID2["FRAME"] = 39] = "FRAME";
  TAG_ID2[TAG_ID2["FRAMESET"] = 40] = "FRAMESET";
  TAG_ID2[TAG_ID2["H1"] = 41] = "H1";
  TAG_ID2[TAG_ID2["H2"] = 42] = "H2";
  TAG_ID2[TAG_ID2["H3"] = 43] = "H3";
  TAG_ID2[TAG_ID2["H4"] = 44] = "H4";
  TAG_ID2[TAG_ID2["H5"] = 45] = "H5";
  TAG_ID2[TAG_ID2["H6"] = 46] = "H6";
  TAG_ID2[TAG_ID2["HEAD"] = 47] = "HEAD";
  TAG_ID2[TAG_ID2["HEADER"] = 48] = "HEADER";
  TAG_ID2[TAG_ID2["HGROUP"] = 49] = "HGROUP";
  TAG_ID2[TAG_ID2["HR"] = 50] = "HR";
  TAG_ID2[TAG_ID2["HTML"] = 51] = "HTML";
  TAG_ID2[TAG_ID2["I"] = 52] = "I";
  TAG_ID2[TAG_ID2["IMG"] = 53] = "IMG";
  TAG_ID2[TAG_ID2["IMAGE"] = 54] = "IMAGE";
  TAG_ID2[TAG_ID2["INPUT"] = 55] = "INPUT";
  TAG_ID2[TAG_ID2["IFRAME"] = 56] = "IFRAME";
  TAG_ID2[TAG_ID2["KEYGEN"] = 57] = "KEYGEN";
  TAG_ID2[TAG_ID2["LABEL"] = 58] = "LABEL";
  TAG_ID2[TAG_ID2["LI"] = 59] = "LI";
  TAG_ID2[TAG_ID2["LINK"] = 60] = "LINK";
  TAG_ID2[TAG_ID2["LISTING"] = 61] = "LISTING";
  TAG_ID2[TAG_ID2["MAIN"] = 62] = "MAIN";
  TAG_ID2[TAG_ID2["MALIGNMARK"] = 63] = "MALIGNMARK";
  TAG_ID2[TAG_ID2["MARQUEE"] = 64] = "MARQUEE";
  TAG_ID2[TAG_ID2["MATH"] = 65] = "MATH";
  TAG_ID2[TAG_ID2["MENU"] = 66] = "MENU";
  TAG_ID2[TAG_ID2["META"] = 67] = "META";
  TAG_ID2[TAG_ID2["MGLYPH"] = 68] = "MGLYPH";
  TAG_ID2[TAG_ID2["MI"] = 69] = "MI";
  TAG_ID2[TAG_ID2["MO"] = 70] = "MO";
  TAG_ID2[TAG_ID2["MN"] = 71] = "MN";
  TAG_ID2[TAG_ID2["MS"] = 72] = "MS";
  TAG_ID2[TAG_ID2["MTEXT"] = 73] = "MTEXT";
  TAG_ID2[TAG_ID2["NAV"] = 74] = "NAV";
  TAG_ID2[TAG_ID2["NOBR"] = 75] = "NOBR";
  TAG_ID2[TAG_ID2["NOFRAMES"] = 76] = "NOFRAMES";
  TAG_ID2[TAG_ID2["NOEMBED"] = 77] = "NOEMBED";
  TAG_ID2[TAG_ID2["NOSCRIPT"] = 78] = "NOSCRIPT";
  TAG_ID2[TAG_ID2["OBJECT"] = 79] = "OBJECT";
  TAG_ID2[TAG_ID2["OL"] = 80] = "OL";
  TAG_ID2[TAG_ID2["OPTGROUP"] = 81] = "OPTGROUP";
  TAG_ID2[TAG_ID2["OPTION"] = 82] = "OPTION";
  TAG_ID2[TAG_ID2["P"] = 83] = "P";
  TAG_ID2[TAG_ID2["PARAM"] = 84] = "PARAM";
  TAG_ID2[TAG_ID2["PLAINTEXT"] = 85] = "PLAINTEXT";
  TAG_ID2[TAG_ID2["PRE"] = 86] = "PRE";
  TAG_ID2[TAG_ID2["RB"] = 87] = "RB";
  TAG_ID2[TAG_ID2["RP"] = 88] = "RP";
  TAG_ID2[TAG_ID2["RT"] = 89] = "RT";
  TAG_ID2[TAG_ID2["RTC"] = 90] = "RTC";
  TAG_ID2[TAG_ID2["RUBY"] = 91] = "RUBY";
  TAG_ID2[TAG_ID2["S"] = 92] = "S";
  TAG_ID2[TAG_ID2["SCRIPT"] = 93] = "SCRIPT";
  TAG_ID2[TAG_ID2["SECTION"] = 94] = "SECTION";
  TAG_ID2[TAG_ID2["SELECT"] = 95] = "SELECT";
  TAG_ID2[TAG_ID2["SOURCE"] = 96] = "SOURCE";
  TAG_ID2[TAG_ID2["SMALL"] = 97] = "SMALL";
  TAG_ID2[TAG_ID2["SPAN"] = 98] = "SPAN";
  TAG_ID2[TAG_ID2["STRIKE"] = 99] = "STRIKE";
  TAG_ID2[TAG_ID2["STRONG"] = 100] = "STRONG";
  TAG_ID2[TAG_ID2["STYLE"] = 101] = "STYLE";
  TAG_ID2[TAG_ID2["SUB"] = 102] = "SUB";
  TAG_ID2[TAG_ID2["SUMMARY"] = 103] = "SUMMARY";
  TAG_ID2[TAG_ID2["SUP"] = 104] = "SUP";
  TAG_ID2[TAG_ID2["TABLE"] = 105] = "TABLE";
  TAG_ID2[TAG_ID2["TBODY"] = 106] = "TBODY";
  TAG_ID2[TAG_ID2["TEMPLATE"] = 107] = "TEMPLATE";
  TAG_ID2[TAG_ID2["TEXTAREA"] = 108] = "TEXTAREA";
  TAG_ID2[TAG_ID2["TFOOT"] = 109] = "TFOOT";
  TAG_ID2[TAG_ID2["TD"] = 110] = "TD";
  TAG_ID2[TAG_ID2["TH"] = 111] = "TH";
  TAG_ID2[TAG_ID2["THEAD"] = 112] = "THEAD";
  TAG_ID2[TAG_ID2["TITLE"] = 113] = "TITLE";
  TAG_ID2[TAG_ID2["TR"] = 114] = "TR";
  TAG_ID2[TAG_ID2["TRACK"] = 115] = "TRACK";
  TAG_ID2[TAG_ID2["TT"] = 116] = "TT";
  TAG_ID2[TAG_ID2["U"] = 117] = "U";
  TAG_ID2[TAG_ID2["UL"] = 118] = "UL";
  TAG_ID2[TAG_ID2["SVG"] = 119] = "SVG";
  TAG_ID2[TAG_ID2["VAR"] = 120] = "VAR";
  TAG_ID2[TAG_ID2["WBR"] = 121] = "WBR";
  TAG_ID2[TAG_ID2["XMP"] = 122] = "XMP";
})(TAG_ID = TAG_ID || (TAG_ID = {}));
var TAG_NAME_TO_ID = /* @__PURE__ */ new Map([
  [TAG_NAMES.A, TAG_ID.A],
  [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],
  [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],
  [TAG_NAMES.APPLET, TAG_ID.APPLET],
  [TAG_NAMES.AREA, TAG_ID.AREA],
  [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],
  [TAG_NAMES.ASIDE, TAG_ID.ASIDE],
  [TAG_NAMES.B, TAG_ID.B],
  [TAG_NAMES.BASE, TAG_ID.BASE],
  [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],
  [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],
  [TAG_NAMES.BIG, TAG_ID.BIG],
  [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],
  [TAG_NAMES.BODY, TAG_ID.BODY],
  [TAG_NAMES.BR, TAG_ID.BR],
  [TAG_NAMES.BUTTON, TAG_ID.BUTTON],
  [TAG_NAMES.CAPTION, TAG_ID.CAPTION],
  [TAG_NAMES.CENTER, TAG_ID.CENTER],
  [TAG_NAMES.CODE, TAG_ID.CODE],
  [TAG_NAMES.COL, TAG_ID.COL],
  [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],
  [TAG_NAMES.DD, TAG_ID.DD],
  [TAG_NAMES.DESC, TAG_ID.DESC],
  [TAG_NAMES.DETAILS, TAG_ID.DETAILS],
  [TAG_NAMES.DIALOG, TAG_ID.DIALOG],
  [TAG_NAMES.DIR, TAG_ID.DIR],
  [TAG_NAMES.DIV, TAG_ID.DIV],
  [TAG_NAMES.DL, TAG_ID.DL],
  [TAG_NAMES.DT, TAG_ID.DT],
  [TAG_NAMES.EM, TAG_ID.EM],
  [TAG_NAMES.EMBED, TAG_ID.EMBED],
  [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],
  [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],
  [TAG_NAMES.FIGURE, TAG_ID.FIGURE],
  [TAG_NAMES.FONT, TAG_ID.FONT],
  [TAG_NAMES.FOOTER, TAG_ID.FOOTER],
  [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],
  [TAG_NAMES.FORM, TAG_ID.FORM],
  [TAG_NAMES.FRAME, TAG_ID.FRAME],
  [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],
  [TAG_NAMES.H1, TAG_ID.H1],
  [TAG_NAMES.H2, TAG_ID.H2],
  [TAG_NAMES.H3, TAG_ID.H3],
  [TAG_NAMES.H4, TAG_ID.H4],
  [TAG_NAMES.H5, TAG_ID.H5],
  [TAG_NAMES.H6, TAG_ID.H6],
  [TAG_NAMES.HEAD, TAG_ID.HEAD],
  [TAG_NAMES.HEADER, TAG_ID.HEADER],
  [TAG_NAMES.HGROUP, TAG_ID.HGROUP],
  [TAG_NAMES.HR, TAG_ID.HR],
  [TAG_NAMES.HTML, TAG_ID.HTML],
  [TAG_NAMES.I, TAG_ID.I],
  [TAG_NAMES.IMG, TAG_ID.IMG],
  [TAG_NAMES.IMAGE, TAG_ID.IMAGE],
  [TAG_NAMES.INPUT, TAG_ID.INPUT],
  [TAG_NAMES.IFRAME, TAG_ID.IFRAME],
  [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],
  [TAG_NAMES.LABEL, TAG_ID.LABEL],
  [TAG_NAMES.LI, TAG_ID.LI],
  [TAG_NAMES.LINK, TAG_ID.LINK],
  [TAG_NAMES.LISTING, TAG_ID.LISTING],
  [TAG_NAMES.MAIN, TAG_ID.MAIN],
  [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],
  [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],
  [TAG_NAMES.MATH, TAG_ID.MATH],
  [TAG_NAMES.MENU, TAG_ID.MENU],
  [TAG_NAMES.META, TAG_ID.META],
  [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],
  [TAG_NAMES.MI, TAG_ID.MI],
  [TAG_NAMES.MO, TAG_ID.MO],
  [TAG_NAMES.MN, TAG_ID.MN],
  [TAG_NAMES.MS, TAG_ID.MS],
  [TAG_NAMES.MTEXT, TAG_ID.MTEXT],
  [TAG_NAMES.NAV, TAG_ID.NAV],
  [TAG_NAMES.NOBR, TAG_ID.NOBR],
  [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],
  [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],
  [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],
  [TAG_NAMES.OBJECT, TAG_ID.OBJECT],
  [TAG_NAMES.OL, TAG_ID.OL],
  [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],
  [TAG_NAMES.OPTION, TAG_ID.OPTION],
  [TAG_NAMES.P, TAG_ID.P],
  [TAG_NAMES.PARAM, TAG_ID.PARAM],
  [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],
  [TAG_NAMES.PRE, TAG_ID.PRE],
  [TAG_NAMES.RB, TAG_ID.RB],
  [TAG_NAMES.RP, TAG_ID.RP],
  [TAG_NAMES.RT, TAG_ID.RT],
  [TAG_NAMES.RTC, TAG_ID.RTC],
  [TAG_NAMES.RUBY, TAG_ID.RUBY],
  [TAG_NAMES.S, TAG_ID.S],
  [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],
  [TAG_NAMES.SECTION, TAG_ID.SECTION],
  [TAG_NAMES.SELECT, TAG_ID.SELECT],
  [TAG_NAMES.SOURCE, TAG_ID.SOURCE],
  [TAG_NAMES.SMALL, TAG_ID.SMALL],
  [TAG_NAMES.SPAN, TAG_ID.SPAN],
  [TAG_NAMES.STRIKE, TAG_ID.STRIKE],
  [TAG_NAMES.STRONG, TAG_ID.STRONG],
  [TAG_NAMES.STYLE, TAG_ID.STYLE],
  [TAG_NAMES.SUB, TAG_ID.SUB],
  [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],
  [TAG_NAMES.SUP, TAG_ID.SUP],
  [TAG_NAMES.TABLE, TAG_ID.TABLE],
  [TAG_NAMES.TBODY, TAG_ID.TBODY],
  [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],
  [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],
  [TAG_NAMES.TFOOT, TAG_ID.TFOOT],
  [TAG_NAMES.TD, TAG_ID.TD],
  [TAG_NAMES.TH, TAG_ID.TH],
  [TAG_NAMES.THEAD, TAG_ID.THEAD],
  [TAG_NAMES.TITLE, TAG_ID.TITLE],
  [TAG_NAMES.TR, TAG_ID.TR],
  [TAG_NAMES.TRACK, TAG_ID.TRACK],
  [TAG_NAMES.TT, TAG_ID.TT],
  [TAG_NAMES.U, TAG_ID.U],
  [TAG_NAMES.UL, TAG_ID.UL],
  [TAG_NAMES.SVG, TAG_ID.SVG],
  [TAG_NAMES.VAR, TAG_ID.VAR],
  [TAG_NAMES.WBR, TAG_ID.WBR],
  [TAG_NAMES.XMP, TAG_ID.XMP]
]);
function getTagID(tagName) {
  var _a3;
  return (_a3 = TAG_NAME_TO_ID.get(tagName)) !== null && _a3 !== void 0 ? _a3 : TAG_ID.UNKNOWN;
}
var $3 = TAG_ID;
var SPECIAL_ELEMENTS = {
  [NS.HTML]: /* @__PURE__ */ new Set([
    $3.ADDRESS,
    $3.APPLET,
    $3.AREA,
    $3.ARTICLE,
    $3.ASIDE,
    $3.BASE,
    $3.BASEFONT,
    $3.BGSOUND,
    $3.BLOCKQUOTE,
    $3.BODY,
    $3.BR,
    $3.BUTTON,
    $3.CAPTION,
    $3.CENTER,
    $3.COL,
    $3.COLGROUP,
    $3.DD,
    $3.DETAILS,
    $3.DIR,
    $3.DIV,
    $3.DL,
    $3.DT,
    $3.EMBED,
    $3.FIELDSET,
    $3.FIGCAPTION,
    $3.FIGURE,
    $3.FOOTER,
    $3.FORM,
    $3.FRAME,
    $3.FRAMESET,
    $3.H1,
    $3.H2,
    $3.H3,
    $3.H4,
    $3.H5,
    $3.H6,
    $3.HEAD,
    $3.HEADER,
    $3.HGROUP,
    $3.HR,
    $3.HTML,
    $3.IFRAME,
    $3.IMG,
    $3.INPUT,
    $3.LI,
    $3.LINK,
    $3.LISTING,
    $3.MAIN,
    $3.MARQUEE,
    $3.MENU,
    $3.META,
    $3.NAV,
    $3.NOEMBED,
    $3.NOFRAMES,
    $3.NOSCRIPT,
    $3.OBJECT,
    $3.OL,
    $3.P,
    $3.PARAM,
    $3.PLAINTEXT,
    $3.PRE,
    $3.SCRIPT,
    $3.SECTION,
    $3.SELECT,
    $3.SOURCE,
    $3.STYLE,
    $3.SUMMARY,
    $3.TABLE,
    $3.TBODY,
    $3.TD,
    $3.TEMPLATE,
    $3.TEXTAREA,
    $3.TFOOT,
    $3.TH,
    $3.THEAD,
    $3.TITLE,
    $3.TR,
    $3.TRACK,
    $3.UL,
    $3.WBR,
    $3.XMP
  ]),
  [NS.MATHML]: /* @__PURE__ */ new Set([$3.MI, $3.MO, $3.MN, $3.MS, $3.MTEXT, $3.ANNOTATION_XML]),
  [NS.SVG]: /* @__PURE__ */ new Set([$3.TITLE, $3.FOREIGN_OBJECT, $3.DESC]),
  [NS.XLINK]: /* @__PURE__ */ new Set(),
  [NS.XML]: /* @__PURE__ */ new Set(),
  [NS.XMLNS]: /* @__PURE__ */ new Set()
};
function isNumberedHeader(tn3) {
  return tn3 === $3.H1 || tn3 === $3.H2 || tn3 === $3.H3 || tn3 === $3.H4 || tn3 === $3.H5 || tn3 === $3.H6;
}
var UNESCAPED_TEXT = /* @__PURE__ */ new Set([
  TAG_NAMES.STYLE,
  TAG_NAMES.SCRIPT,
  TAG_NAMES.XMP,
  TAG_NAMES.IFRAME,
  TAG_NAMES.NOEMBED,
  TAG_NAMES.NOFRAMES,
  TAG_NAMES.PLAINTEXT
]);
function hasUnescapedText(tn3, scriptingEnabled) {
  return UNESCAPED_TEXT.has(tn3) || scriptingEnabled && tn3 === TAG_NAMES.NOSCRIPT;
}

// node_modules/parse5/dist/tokenizer/index.js
var C1_CONTROLS_REFERENCE_REPLACEMENTS = /* @__PURE__ */ new Map([
  [128, 8364],
  [130, 8218],
  [131, 402],
  [132, 8222],
  [133, 8230],
  [134, 8224],
  [135, 8225],
  [136, 710],
  [137, 8240],
  [138, 352],
  [139, 8249],
  [140, 338],
  [142, 381],
  [145, 8216],
  [146, 8217],
  [147, 8220],
  [148, 8221],
  [149, 8226],
  [150, 8211],
  [151, 8212],
  [152, 732],
  [153, 8482],
  [154, 353],
  [155, 8250],
  [156, 339],
  [158, 382],
  [159, 376]
]);
var State;
(function(State3) {
  State3[State3["DATA"] = 0] = "DATA";
  State3[State3["RCDATA"] = 1] = "RCDATA";
  State3[State3["RAWTEXT"] = 2] = "RAWTEXT";
  State3[State3["SCRIPT_DATA"] = 3] = "SCRIPT_DATA";
  State3[State3["PLAINTEXT"] = 4] = "PLAINTEXT";
  State3[State3["TAG_OPEN"] = 5] = "TAG_OPEN";
  State3[State3["END_TAG_OPEN"] = 6] = "END_TAG_OPEN";
  State3[State3["TAG_NAME"] = 7] = "TAG_NAME";
  State3[State3["RCDATA_LESS_THAN_SIGN"] = 8] = "RCDATA_LESS_THAN_SIGN";
  State3[State3["RCDATA_END_TAG_OPEN"] = 9] = "RCDATA_END_TAG_OPEN";
  State3[State3["RCDATA_END_TAG_NAME"] = 10] = "RCDATA_END_TAG_NAME";
  State3[State3["RAWTEXT_LESS_THAN_SIGN"] = 11] = "RAWTEXT_LESS_THAN_SIGN";
  State3[State3["RAWTEXT_END_TAG_OPEN"] = 12] = "RAWTEXT_END_TAG_OPEN";
  State3[State3["RAWTEXT_END_TAG_NAME"] = 13] = "RAWTEXT_END_TAG_NAME";
  State3[State3["SCRIPT_DATA_LESS_THAN_SIGN"] = 14] = "SCRIPT_DATA_LESS_THAN_SIGN";
  State3[State3["SCRIPT_DATA_END_TAG_OPEN"] = 15] = "SCRIPT_DATA_END_TAG_OPEN";
  State3[State3["SCRIPT_DATA_END_TAG_NAME"] = 16] = "SCRIPT_DATA_END_TAG_NAME";
  State3[State3["SCRIPT_DATA_ESCAPE_START"] = 17] = "SCRIPT_DATA_ESCAPE_START";
  State3[State3["SCRIPT_DATA_ESCAPE_START_DASH"] = 18] = "SCRIPT_DATA_ESCAPE_START_DASH";
  State3[State3["SCRIPT_DATA_ESCAPED"] = 19] = "SCRIPT_DATA_ESCAPED";
  State3[State3["SCRIPT_DATA_ESCAPED_DASH"] = 20] = "SCRIPT_DATA_ESCAPED_DASH";
  State3[State3["SCRIPT_DATA_ESCAPED_DASH_DASH"] = 21] = "SCRIPT_DATA_ESCAPED_DASH_DASH";
  State3[State3["SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN"] = 22] = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN";
  State3[State3["SCRIPT_DATA_ESCAPED_END_TAG_OPEN"] = 23] = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN";
  State3[State3["SCRIPT_DATA_ESCAPED_END_TAG_NAME"] = 24] = "SCRIPT_DATA_ESCAPED_END_TAG_NAME";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPE_START"] = 25] = "SCRIPT_DATA_DOUBLE_ESCAPE_START";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED"] = 26] = "SCRIPT_DATA_DOUBLE_ESCAPED";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED_DASH"] = 27] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH"] = 28] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN"] = 29] = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN";
  State3[State3["SCRIPT_DATA_DOUBLE_ESCAPE_END"] = 30] = "SCRIPT_DATA_DOUBLE_ESCAPE_END";
  State3[State3["BEFORE_ATTRIBUTE_NAME"] = 31] = "BEFORE_ATTRIBUTE_NAME";
  State3[State3["ATTRIBUTE_NAME"] = 32] = "ATTRIBUTE_NAME";
  State3[State3["AFTER_ATTRIBUTE_NAME"] = 33] = "AFTER_ATTRIBUTE_NAME";
  State3[State3["BEFORE_ATTRIBUTE_VALUE"] = 34] = "BEFORE_ATTRIBUTE_VALUE";
  State3[State3["ATTRIBUTE_VALUE_DOUBLE_QUOTED"] = 35] = "ATTRIBUTE_VALUE_DOUBLE_QUOTED";
  State3[State3["ATTRIBUTE_VALUE_SINGLE_QUOTED"] = 36] = "ATTRIBUTE_VALUE_SINGLE_QUOTED";
  State3[State3["ATTRIBUTE_VALUE_UNQUOTED"] = 37] = "ATTRIBUTE_VALUE_UNQUOTED";
  State3[State3["AFTER_ATTRIBUTE_VALUE_QUOTED"] = 38] = "AFTER_ATTRIBUTE_VALUE_QUOTED";
  State3[State3["SELF_CLOSING_START_TAG"] = 39] = "SELF_CLOSING_START_TAG";
  State3[State3["BOGUS_COMMENT"] = 40] = "BOGUS_COMMENT";
  State3[State3["MARKUP_DECLARATION_OPEN"] = 41] = "MARKUP_DECLARATION_OPEN";
  State3[State3["COMMENT_START"] = 42] = "COMMENT_START";
  State3[State3["COMMENT_START_DASH"] = 43] = "COMMENT_START_DASH";
  State3[State3["COMMENT"] = 44] = "COMMENT";
  State3[State3["COMMENT_LESS_THAN_SIGN"] = 45] = "COMMENT_LESS_THAN_SIGN";
  State3[State3["COMMENT_LESS_THAN_SIGN_BANG"] = 46] = "COMMENT_LESS_THAN_SIGN_BANG";
  State3[State3["COMMENT_LESS_THAN_SIGN_BANG_DASH"] = 47] = "COMMENT_LESS_THAN_SIGN_BANG_DASH";
  State3[State3["COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH"] = 48] = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH";
  State3[State3["COMMENT_END_DASH"] = 49] = "COMMENT_END_DASH";
  State3[State3["COMMENT_END"] = 50] = "COMMENT_END";
  State3[State3["COMMENT_END_BANG"] = 51] = "COMMENT_END_BANG";
  State3[State3["DOCTYPE"] = 52] = "DOCTYPE";
  State3[State3["BEFORE_DOCTYPE_NAME"] = 53] = "BEFORE_DOCTYPE_NAME";
  State3[State3["DOCTYPE_NAME"] = 54] = "DOCTYPE_NAME";
  State3[State3["AFTER_DOCTYPE_NAME"] = 55] = "AFTER_DOCTYPE_NAME";
  State3[State3["AFTER_DOCTYPE_PUBLIC_KEYWORD"] = 56] = "AFTER_DOCTYPE_PUBLIC_KEYWORD";
  State3[State3["BEFORE_DOCTYPE_PUBLIC_IDENTIFIER"] = 57] = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER";
  State3[State3["DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED"] = 58] = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED";
  State3[State3["DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED"] = 59] = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED";
  State3[State3["AFTER_DOCTYPE_PUBLIC_IDENTIFIER"] = 60] = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER";
  State3[State3["BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS"] = 61] = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS";
  State3[State3["AFTER_DOCTYPE_SYSTEM_KEYWORD"] = 62] = "AFTER_DOCTYPE_SYSTEM_KEYWORD";
  State3[State3["BEFORE_DOCTYPE_SYSTEM_IDENTIFIER"] = 63] = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER";
  State3[State3["DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED"] = 64] = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED";
  State3[State3["DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED"] = 65] = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED";
  State3[State3["AFTER_DOCTYPE_SYSTEM_IDENTIFIER"] = 66] = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER";
  State3[State3["BOGUS_DOCTYPE"] = 67] = "BOGUS_DOCTYPE";
  State3[State3["CDATA_SECTION"] = 68] = "CDATA_SECTION";
  State3[State3["CDATA_SECTION_BRACKET"] = 69] = "CDATA_SECTION_BRACKET";
  State3[State3["CDATA_SECTION_END"] = 70] = "CDATA_SECTION_END";
  State3[State3["CHARACTER_REFERENCE"] = 71] = "CHARACTER_REFERENCE";
  State3[State3["NAMED_CHARACTER_REFERENCE"] = 72] = "NAMED_CHARACTER_REFERENCE";
  State3[State3["AMBIGUOUS_AMPERSAND"] = 73] = "AMBIGUOUS_AMPERSAND";
  State3[State3["NUMERIC_CHARACTER_REFERENCE"] = 74] = "NUMERIC_CHARACTER_REFERENCE";
  State3[State3["HEXADEMICAL_CHARACTER_REFERENCE_START"] = 75] = "HEXADEMICAL_CHARACTER_REFERENCE_START";
  State3[State3["HEXADEMICAL_CHARACTER_REFERENCE"] = 76] = "HEXADEMICAL_CHARACTER_REFERENCE";
  State3[State3["DECIMAL_CHARACTER_REFERENCE"] = 77] = "DECIMAL_CHARACTER_REFERENCE";
  State3[State3["NUMERIC_CHARACTER_REFERENCE_END"] = 78] = "NUMERIC_CHARACTER_REFERENCE_END";
})(State || (State = {}));
var TokenizerMode = {
  DATA: State.DATA,
  RCDATA: State.RCDATA,
  RAWTEXT: State.RAWTEXT,
  SCRIPT_DATA: State.SCRIPT_DATA,
  PLAINTEXT: State.PLAINTEXT,
  CDATA_SECTION: State.CDATA_SECTION
};
function isAsciiDigit(cp) {
  return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;
}
function isAsciiUpper(cp) {
  return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;
}
function isAsciiLower(cp) {
  return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;
}
function isAsciiLetter(cp) {
  return isAsciiLower(cp) || isAsciiUpper(cp);
}
function isAsciiAlphaNumeric2(cp) {
  return isAsciiLetter(cp) || isAsciiDigit(cp);
}
function isAsciiUpperHexDigit(cp) {
  return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;
}
function isAsciiLowerHexDigit(cp) {
  return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;
}
function isAsciiHexDigit(cp) {
  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
}
function toAsciiLower(cp) {
  return cp + 32;
}
function isWhitespace2(cp) {
  return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;
}
function isEntityInAttributeInvalidEnd2(nextCp) {
  return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric2(nextCp);
}
function isScriptDataDoubleEscapeSequenceEnd(cp) {
  return isWhitespace2(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;
}
var Tokenizer = class {
  constructor(options, handler2) {
    this.options = options;
    this.handler = handler2;
    this.paused = false;
    this.inLoop = false;
    this.inForeignNode = false;
    this.lastStartTagName = "";
    this.active = false;
    this.state = State.DATA;
    this.returnState = State.DATA;
    this.charRefCode = -1;
    this.consumedAfterSnapshot = -1;
    this.currentCharacterToken = null;
    this.currentToken = null;
    this.currentAttr = { name: "", value: "" };
    this.preprocessor = new Preprocessor(handler2);
    this.currentLocation = this.getCurrentLocation(-1);
  }
  //Errors
  _err(code) {
    var _a3, _b;
    (_b = (_a3 = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a3, this.preprocessor.getError(code));
  }
  // NOTE: `offset` may never run across line boundaries.
  getCurrentLocation(offset) {
    if (!this.options.sourceCodeLocationInfo) {
      return null;
    }
    return {
      startLine: this.preprocessor.line,
      startCol: this.preprocessor.col - offset,
      startOffset: this.preprocessor.offset - offset,
      endLine: -1,
      endCol: -1,
      endOffset: -1
    };
  }
  _runParsingLoop() {
    if (this.inLoop)
      return;
    this.inLoop = true;
    while (this.active && !this.paused) {
      this.consumedAfterSnapshot = 0;
      const cp = this._consume();
      if (!this._ensureHibernation()) {
        this._callState(cp);
      }
    }
    this.inLoop = false;
  }
  //API
  pause() {
    this.paused = true;
  }
  resume(writeCallback) {
    if (!this.paused) {
      throw new Error("Parser was already resumed");
    }
    this.paused = false;
    if (this.inLoop)
      return;
    this._runParsingLoop();
    if (!this.paused) {
      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
    }
  }
  write(chunk, isLastChunk, writeCallback) {
    this.active = true;
    this.preprocessor.write(chunk, isLastChunk);
    this._runParsingLoop();
    if (!this.paused) {
      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
    }
  }
  insertHtmlAtCurrentPos(chunk) {
    this.active = true;
    this.preprocessor.insertHtmlAtCurrentPos(chunk);
    this._runParsingLoop();
  }
  //Hibernation
  _ensureHibernation() {
    if (this.preprocessor.endOfChunkHit) {
      this._unconsume(this.consumedAfterSnapshot);
      this.active = false;
      return true;
    }
    return false;
  }
  //Consumption
  _consume() {
    this.consumedAfterSnapshot++;
    return this.preprocessor.advance();
  }
  _unconsume(count) {
    this.consumedAfterSnapshot -= count;
    this.preprocessor.retreat(count);
  }
  _reconsumeInState(state, cp) {
    this.state = state;
    this._callState(cp);
  }
  _advanceBy(count) {
    this.consumedAfterSnapshot += count;
    for (let i = 0; i < count; i++) {
      this.preprocessor.advance();
    }
  }
  _consumeSequenceIfMatch(pattern, caseSensitive) {
    if (this.preprocessor.startsWith(pattern, caseSensitive)) {
      this._advanceBy(pattern.length - 1);
      return true;
    }
    return false;
  }
  //Token creation
  _createStartTagToken() {
    this.currentToken = {
      type: TokenType.START_TAG,
      tagName: "",
      tagID: TAG_ID.UNKNOWN,
      selfClosing: false,
      ackSelfClosing: false,
      attrs: [],
      location: this.getCurrentLocation(1)
    };
  }
  _createEndTagToken() {
    this.currentToken = {
      type: TokenType.END_TAG,
      tagName: "",
      tagID: TAG_ID.UNKNOWN,
      selfClosing: false,
      ackSelfClosing: false,
      attrs: [],
      location: this.getCurrentLocation(2)
    };
  }
  _createCommentToken(offset) {
    this.currentToken = {
      type: TokenType.COMMENT,
      data: "",
      location: this.getCurrentLocation(offset)
    };
  }
  _createDoctypeToken(initialName) {
    this.currentToken = {
      type: TokenType.DOCTYPE,
      name: initialName,
      forceQuirks: false,
      publicId: null,
      systemId: null,
      location: this.currentLocation
    };
  }
  _createCharacterToken(type, chars) {
    this.currentCharacterToken = {
      type,
      chars,
      location: this.currentLocation
    };
  }
  //Tag attributes
  _createAttr(attrNameFirstCh) {
    this.currentAttr = {
      name: attrNameFirstCh,
      value: ""
    };
    this.currentLocation = this.getCurrentLocation(0);
  }
  _leaveAttrName() {
    var _a3;
    var _b;
    const token = this.currentToken;
    if (getTokenAttr(token, this.currentAttr.name) === null) {
      token.attrs.push(this.currentAttr);
      if (token.location && this.currentLocation) {
        const attrLocations = (_a3 = (_b = token.location).attrs) !== null && _a3 !== void 0 ? _a3 : _b.attrs = /* @__PURE__ */ Object.create(null);
        attrLocations[this.currentAttr.name] = this.currentLocation;
        this._leaveAttrValue();
      }
    } else {
      this._err(ERR.duplicateAttribute);
    }
  }
  _leaveAttrValue() {
    if (this.currentLocation) {
      this.currentLocation.endLine = this.preprocessor.line;
      this.currentLocation.endCol = this.preprocessor.col;
      this.currentLocation.endOffset = this.preprocessor.offset;
    }
  }
  //Token emission
  prepareToken(ct2) {
    this._emitCurrentCharacterToken(ct2.location);
    this.currentToken = null;
    if (ct2.location) {
      ct2.location.endLine = this.preprocessor.line;
      ct2.location.endCol = this.preprocessor.col + 1;
      ct2.location.endOffset = this.preprocessor.offset + 1;
    }
    this.currentLocation = this.getCurrentLocation(-1);
  }
  emitCurrentTagToken() {
    const ct2 = this.currentToken;
    this.prepareToken(ct2);
    ct2.tagID = getTagID(ct2.tagName);
    if (ct2.type === TokenType.START_TAG) {
      this.lastStartTagName = ct2.tagName;
      this.handler.onStartTag(ct2);
    } else {
      if (ct2.attrs.length > 0) {
        this._err(ERR.endTagWithAttributes);
      }
      if (ct2.selfClosing) {
        this._err(ERR.endTagWithTrailingSolidus);
      }
      this.handler.onEndTag(ct2);
    }
    this.preprocessor.dropParsedChunk();
  }
  emitCurrentComment(ct2) {
    this.prepareToken(ct2);
    this.handler.onComment(ct2);
    this.preprocessor.dropParsedChunk();
  }
  emitCurrentDoctype(ct2) {
    this.prepareToken(ct2);
    this.handler.onDoctype(ct2);
    this.preprocessor.dropParsedChunk();
  }
  _emitCurrentCharacterToken(nextLocation) {
    if (this.currentCharacterToken) {
      if (nextLocation && this.currentCharacterToken.location) {
        this.currentCharacterToken.location.endLine = nextLocation.startLine;
        this.currentCharacterToken.location.endCol = nextLocation.startCol;
        this.currentCharacterToken.location.endOffset = nextLocation.startOffset;
      }
      switch (this.currentCharacterToken.type) {
        case TokenType.CHARACTER: {
          this.handler.onCharacter(this.currentCharacterToken);
          break;
        }
        case TokenType.NULL_CHARACTER: {
          this.handler.onNullCharacter(this.currentCharacterToken);
          break;
        }
        case TokenType.WHITESPACE_CHARACTER: {
          this.handler.onWhitespaceCharacter(this.currentCharacterToken);
          break;
        }
      }
      this.currentCharacterToken = null;
    }
  }
  _emitEOFToken() {
    const location = this.getCurrentLocation(0);
    if (location) {
      location.endLine = location.startLine;
      location.endCol = location.startCol;
      location.endOffset = location.startOffset;
    }
    this._emitCurrentCharacterToken(location);
    this.handler.onEof({ type: TokenType.EOF, location });
    this.active = false;
  }
  //Characters emission
  //OPTIMIZATION: specification uses only one type of character tokens (one token per character).
  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
  //If we have a sequence of characters that belong to the same group, the parser can process it
  //as a single solid character token.
  //So, there are 3 types of character tokens in parse5:
  //1)TokenType.NULL_CHARACTER - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
  //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
  //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
  _appendCharToCurrentCharacterToken(type, ch) {
    if (this.currentCharacterToken) {
      if (this.currentCharacterToken.type !== type) {
        this.currentLocation = this.getCurrentLocation(0);
        this._emitCurrentCharacterToken(this.currentLocation);
        this.preprocessor.dropParsedChunk();
      } else {
        this.currentCharacterToken.chars += ch;
        return;
      }
    }
    this._createCharacterToken(type, ch);
  }
  _emitCodePoint(cp) {
    const type = isWhitespace2(cp) ? TokenType.WHITESPACE_CHARACTER : cp === CODE_POINTS.NULL ? TokenType.NULL_CHARACTER : TokenType.CHARACTER;
    this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));
  }
  //NOTE: used when we emit characters explicitly.
  //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.
  _emitChars(ch) {
    this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);
  }
  // Character reference helpers
  _matchNamedCharacterReference(cp) {
    let result = null;
    let excess = 0;
    let withoutSemicolon = false;
    for (let i = 0, current = decode_data_html_default[0]; i >= 0; cp = this._consume()) {
      i = determineBranch(decode_data_html_default, current, i + 1, cp);
      if (i < 0)
        break;
      excess += 1;
      current = decode_data_html_default[i];
      const masked = current & BinTrieFlags.VALUE_LENGTH;
      if (masked) {
        const valueLength = (masked >> 14) - 1;
        if (cp !== CODE_POINTS.SEMICOLON && this._isCharacterReferenceInAttribute() && isEntityInAttributeInvalidEnd2(this.preprocessor.peek(1))) {
          result = [CODE_POINTS.AMPERSAND];
          i += valueLength;
        } else {
          result = valueLength === 0 ? [decode_data_html_default[i] & ~BinTrieFlags.VALUE_LENGTH] : valueLength === 1 ? [decode_data_html_default[++i]] : [decode_data_html_default[++i], decode_data_html_default[++i]];
          excess = 0;
          withoutSemicolon = cp !== CODE_POINTS.SEMICOLON;
        }
        if (valueLength === 0) {
          this._consume();
          break;
        }
      }
    }
    this._unconsume(excess);
    if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {
      this._err(ERR.missingSemicolonAfterCharacterReference);
    }
    this._unconsume(1);
    return result;
  }
  _isCharacterReferenceInAttribute() {
    return this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED;
  }
  _flushCodePointConsumedAsCharacterReference(cp) {
    if (this._isCharacterReferenceInAttribute()) {
      this.currentAttr.value += String.fromCodePoint(cp);
    } else {
      this._emitCodePoint(cp);
    }
  }
  // Calling states this way turns out to be much faster than any other approach.
  _callState(cp) {
    switch (this.state) {
      case State.DATA: {
        this._stateData(cp);
        break;
      }
      case State.RCDATA: {
        this._stateRcdata(cp);
        break;
      }
      case State.RAWTEXT: {
        this._stateRawtext(cp);
        break;
      }
      case State.SCRIPT_DATA: {
        this._stateScriptData(cp);
        break;
      }
      case State.PLAINTEXT: {
        this._statePlaintext(cp);
        break;
      }
      case State.TAG_OPEN: {
        this._stateTagOpen(cp);
        break;
      }
      case State.END_TAG_OPEN: {
        this._stateEndTagOpen(cp);
        break;
      }
      case State.TAG_NAME: {
        this._stateTagName(cp);
        break;
      }
      case State.RCDATA_LESS_THAN_SIGN: {
        this._stateRcdataLessThanSign(cp);
        break;
      }
      case State.RCDATA_END_TAG_OPEN: {
        this._stateRcdataEndTagOpen(cp);
        break;
      }
      case State.RCDATA_END_TAG_NAME: {
        this._stateRcdataEndTagName(cp);
        break;
      }
      case State.RAWTEXT_LESS_THAN_SIGN: {
        this._stateRawtextLessThanSign(cp);
        break;
      }
      case State.RAWTEXT_END_TAG_OPEN: {
        this._stateRawtextEndTagOpen(cp);
        break;
      }
      case State.RAWTEXT_END_TAG_NAME: {
        this._stateRawtextEndTagName(cp);
        break;
      }
      case State.SCRIPT_DATA_LESS_THAN_SIGN: {
        this._stateScriptDataLessThanSign(cp);
        break;
      }
      case State.SCRIPT_DATA_END_TAG_OPEN: {
        this._stateScriptDataEndTagOpen(cp);
        break;
      }
      case State.SCRIPT_DATA_END_TAG_NAME: {
        this._stateScriptDataEndTagName(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPE_START: {
        this._stateScriptDataEscapeStart(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPE_START_DASH: {
        this._stateScriptDataEscapeStartDash(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED: {
        this._stateScriptDataEscaped(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED_DASH: {
        this._stateScriptDataEscapedDash(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {
        this._stateScriptDataEscapedDashDash(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {
        this._stateScriptDataEscapedLessThanSign(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {
        this._stateScriptDataEscapedEndTagOpen(cp);
        break;
      }
      case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {
        this._stateScriptDataEscapedEndTagName(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {
        this._stateScriptDataDoubleEscapeStart(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPED: {
        this._stateScriptDataDoubleEscaped(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {
        this._stateScriptDataDoubleEscapedDash(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {
        this._stateScriptDataDoubleEscapedDashDash(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {
        this._stateScriptDataDoubleEscapedLessThanSign(cp);
        break;
      }
      case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {
        this._stateScriptDataDoubleEscapeEnd(cp);
        break;
      }
      case State.BEFORE_ATTRIBUTE_NAME: {
        this._stateBeforeAttributeName(cp);
        break;
      }
      case State.ATTRIBUTE_NAME: {
        this._stateAttributeName(cp);
        break;
      }
      case State.AFTER_ATTRIBUTE_NAME: {
        this._stateAfterAttributeName(cp);
        break;
      }
      case State.BEFORE_ATTRIBUTE_VALUE: {
        this._stateBeforeAttributeValue(cp);
        break;
      }
      case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
        this._stateAttributeValueDoubleQuoted(cp);
        break;
      }
      case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {
        this._stateAttributeValueSingleQuoted(cp);
        break;
      }
      case State.ATTRIBUTE_VALUE_UNQUOTED: {
        this._stateAttributeValueUnquoted(cp);
        break;
      }
      case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {
        this._stateAfterAttributeValueQuoted(cp);
        break;
      }
      case State.SELF_CLOSING_START_TAG: {
        this._stateSelfClosingStartTag(cp);
        break;
      }
      case State.BOGUS_COMMENT: {
        this._stateBogusComment(cp);
        break;
      }
      case State.MARKUP_DECLARATION_OPEN: {
        this._stateMarkupDeclarationOpen(cp);
        break;
      }
      case State.COMMENT_START: {
        this._stateCommentStart(cp);
        break;
      }
      case State.COMMENT_START_DASH: {
        this._stateCommentStartDash(cp);
        break;
      }
      case State.COMMENT: {
        this._stateComment(cp);
        break;
      }
      case State.COMMENT_LESS_THAN_SIGN: {
        this._stateCommentLessThanSign(cp);
        break;
      }
      case State.COMMENT_LESS_THAN_SIGN_BANG: {
        this._stateCommentLessThanSignBang(cp);
        break;
      }
      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {
        this._stateCommentLessThanSignBangDash(cp);
        break;
      }
      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {
        this._stateCommentLessThanSignBangDashDash(cp);
        break;
      }
      case State.COMMENT_END_DASH: {
        this._stateCommentEndDash(cp);
        break;
      }
      case State.COMMENT_END: {
        this._stateCommentEnd(cp);
        break;
      }
      case State.COMMENT_END_BANG: {
        this._stateCommentEndBang(cp);
        break;
      }
      case State.DOCTYPE: {
        this._stateDoctype(cp);
        break;
      }
      case State.BEFORE_DOCTYPE_NAME: {
        this._stateBeforeDoctypeName(cp);
        break;
      }
      case State.DOCTYPE_NAME: {
        this._stateDoctypeName(cp);
        break;
      }
      case State.AFTER_DOCTYPE_NAME: {
        this._stateAfterDoctypeName(cp);
        break;
      }
      case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {
        this._stateAfterDoctypePublicKeyword(cp);
        break;
      }
      case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {
        this._stateBeforeDoctypePublicIdentifier(cp);
        break;
      }
      case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {
        this._stateDoctypePublicIdentifierDoubleQuoted(cp);
        break;
      }
      case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {
        this._stateDoctypePublicIdentifierSingleQuoted(cp);
        break;
      }
      case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {
        this._stateAfterDoctypePublicIdentifier(cp);
        break;
      }
      case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {
        this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);
        break;
      }
      case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {
        this._stateAfterDoctypeSystemKeyword(cp);
        break;
      }
      case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {
        this._stateBeforeDoctypeSystemIdentifier(cp);
        break;
      }
      case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {
        this._stateDoctypeSystemIdentifierDoubleQuoted(cp);
        break;
      }
      case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {
        this._stateDoctypeSystemIdentifierSingleQuoted(cp);
        break;
      }
      case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {
        this._stateAfterDoctypeSystemIdentifier(cp);
        break;
      }
      case State.BOGUS_DOCTYPE: {
        this._stateBogusDoctype(cp);
        break;
      }
      case State.CDATA_SECTION: {
        this._stateCdataSection(cp);
        break;
      }
      case State.CDATA_SECTION_BRACKET: {
        this._stateCdataSectionBracket(cp);
        break;
      }
      case State.CDATA_SECTION_END: {
        this._stateCdataSectionEnd(cp);
        break;
      }
      case State.CHARACTER_REFERENCE: {
        this._stateCharacterReference(cp);
        break;
      }
      case State.NAMED_CHARACTER_REFERENCE: {
        this._stateNamedCharacterReference(cp);
        break;
      }
      case State.AMBIGUOUS_AMPERSAND: {
        this._stateAmbiguousAmpersand(cp);
        break;
      }
      case State.NUMERIC_CHARACTER_REFERENCE: {
        this._stateNumericCharacterReference(cp);
        break;
      }
      case State.HEXADEMICAL_CHARACTER_REFERENCE_START: {
        this._stateHexademicalCharacterReferenceStart(cp);
        break;
      }
      case State.HEXADEMICAL_CHARACTER_REFERENCE: {
        this._stateHexademicalCharacterReference(cp);
        break;
      }
      case State.DECIMAL_CHARACTER_REFERENCE: {
        this._stateDecimalCharacterReference(cp);
        break;
      }
      case State.NUMERIC_CHARACTER_REFERENCE_END: {
        this._stateNumericCharacterReferenceEnd(cp);
        break;
      }
      default: {
        throw new Error("Unknown state");
      }
    }
  }
  // State machine
  // Data state
  //------------------------------------------------------------------
  _stateData(cp) {
    switch (cp) {
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.TAG_OPEN;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this.returnState = State.DATA;
        this.state = State.CHARACTER_REFERENCE;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitCodePoint(cp);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  //  RCDATA state
  //------------------------------------------------------------------
  _stateRcdata(cp) {
    switch (cp) {
      case CODE_POINTS.AMPERSAND: {
        this.returnState = State.RCDATA;
        this.state = State.CHARACTER_REFERENCE;
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.RCDATA_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // RAWTEXT state
  //------------------------------------------------------------------
  _stateRawtext(cp) {
    switch (cp) {
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.RAWTEXT_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data state
  //------------------------------------------------------------------
  _stateScriptData(cp) {
    switch (cp) {
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // PLAINTEXT state
  //------------------------------------------------------------------
  _statePlaintext(cp) {
    switch (cp) {
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // Tag open state
  //------------------------------------------------------------------
  _stateTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this._createStartTagToken();
      this.state = State.TAG_NAME;
      this._stateTagName(cp);
    } else
      switch (cp) {
        case CODE_POINTS.EXCLAMATION_MARK: {
          this.state = State.MARKUP_DECLARATION_OPEN;
          break;
        }
        case CODE_POINTS.SOLIDUS: {
          this.state = State.END_TAG_OPEN;
          break;
        }
        case CODE_POINTS.QUESTION_MARK: {
          this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
          this._createCommentToken(1);
          this.state = State.BOGUS_COMMENT;
          this._stateBogusComment(cp);
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofBeforeTagName);
          this._emitChars("<");
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.invalidFirstCharacterOfTagName);
          this._emitChars("<");
          this.state = State.DATA;
          this._stateData(cp);
        }
      }
  }
  // End tag open state
  //------------------------------------------------------------------
  _stateEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this._createEndTagToken();
      this.state = State.TAG_NAME;
      this._stateTagName(cp);
    } else
      switch (cp) {
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.missingEndTagName);
          this.state = State.DATA;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofBeforeTagName);
          this._emitChars("</");
          this._emitEOFToken();
          break;
        }
        default: {
          this._err(ERR.invalidFirstCharacterOfTagName);
          this._createCommentToken(2);
          this.state = State.BOGUS_COMMENT;
          this._stateBogusComment(cp);
        }
      }
  }
  // Tag name state
  //------------------------------------------------------------------
  _stateTagName(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case CODE_POINTS.SOLIDUS: {
        this.state = State.SELF_CLOSING_START_TAG;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.tagName += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
      }
    }
  }
  // RCDATA less-than sign state
  //------------------------------------------------------------------
  _stateRcdataLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State.RCDATA_END_TAG_OPEN;
    } else {
      this._emitChars("<");
      this.state = State.RCDATA;
      this._stateRcdata(cp);
    }
  }
  // RCDATA end tag open state
  //------------------------------------------------------------------
  _stateRcdataEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State.RCDATA_END_TAG_NAME;
      this._stateRcdataEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State.RCDATA;
      this._stateRcdata(cp);
    }
  }
  handleSpecialEndTag(_cp) {
    if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {
      return !this._ensureHibernation();
    }
    this._createEndTagToken();
    const token = this.currentToken;
    token.tagName = this.lastStartTagName;
    const cp = this.preprocessor.peek(this.lastStartTagName.length);
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this._advanceBy(this.lastStartTagName.length);
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        return false;
      }
      case CODE_POINTS.SOLIDUS: {
        this._advanceBy(this.lastStartTagName.length);
        this.state = State.SELF_CLOSING_START_TAG;
        return false;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._advanceBy(this.lastStartTagName.length);
        this.emitCurrentTagToken();
        this.state = State.DATA;
        return false;
      }
      default: {
        return !this._ensureHibernation();
      }
    }
  }
  // RCDATA end tag name state
  //------------------------------------------------------------------
  _stateRcdataEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State.RCDATA;
      this._stateRcdata(cp);
    }
  }
  // RAWTEXT less-than sign state
  //------------------------------------------------------------------
  _stateRawtextLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State.RAWTEXT_END_TAG_OPEN;
    } else {
      this._emitChars("<");
      this.state = State.RAWTEXT;
      this._stateRawtext(cp);
    }
  }
  // RAWTEXT end tag open state
  //------------------------------------------------------------------
  _stateRawtextEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State.RAWTEXT_END_TAG_NAME;
      this._stateRawtextEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State.RAWTEXT;
      this._stateRawtext(cp);
    }
  }
  // RAWTEXT end tag name state
  //------------------------------------------------------------------
  _stateRawtextEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State.RAWTEXT;
      this._stateRawtext(cp);
    }
  }
  // Script data less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataLessThanSign(cp) {
    switch (cp) {
      case CODE_POINTS.SOLIDUS: {
        this.state = State.SCRIPT_DATA_END_TAG_OPEN;
        break;
      }
      case CODE_POINTS.EXCLAMATION_MARK: {
        this.state = State.SCRIPT_DATA_ESCAPE_START;
        this._emitChars("<!");
        break;
      }
      default: {
        this._emitChars("<");
        this.state = State.SCRIPT_DATA;
        this._stateScriptData(cp);
      }
    }
  }
  // Script data end tag open state
  //------------------------------------------------------------------
  _stateScriptDataEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State.SCRIPT_DATA_END_TAG_NAME;
      this._stateScriptDataEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  // Script data end tag name state
  //------------------------------------------------------------------
  _stateScriptDataEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  // Script data escape start state
  //------------------------------------------------------------------
  _stateScriptDataEscapeStart(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;
      this._emitChars("-");
    } else {
      this.state = State.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  // Script data escape start dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapeStartDash(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;
      this._emitChars("-");
    } else {
      this.state = State.SCRIPT_DATA;
      this._stateScriptData(cp);
    }
  }
  // Script data escaped state
  //------------------------------------------------------------------
  _stateScriptDataEscaped(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.SCRIPT_DATA_ESCAPED_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data escaped dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapedDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State.SCRIPT_DATA_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State.SCRIPT_DATA_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data escaped dash dash state
  //------------------------------------------------------------------
  _stateScriptDataEscapedDashDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.SCRIPT_DATA;
        this._emitChars(">");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State.SCRIPT_DATA_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State.SCRIPT_DATA_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data escaped less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataEscapedLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;
    } else if (isAsciiLetter(cp)) {
      this._emitChars("<");
      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;
      this._stateScriptDataDoubleEscapeStart(cp);
    } else {
      this._emitChars("<");
      this.state = State.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  // Script data escaped end tag open state
  //------------------------------------------------------------------
  _stateScriptDataEscapedEndTagOpen(cp) {
    if (isAsciiLetter(cp)) {
      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;
      this._stateScriptDataEscapedEndTagName(cp);
    } else {
      this._emitChars("</");
      this.state = State.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  // Script data escaped end tag name state
  //------------------------------------------------------------------
  _stateScriptDataEscapedEndTagName(cp) {
    if (this.handleSpecialEndTag(cp)) {
      this._emitChars("</");
      this.state = State.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  // Script data double escape start state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapeStart(cp) {
    if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
      this._emitCodePoint(cp);
      for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
        this._emitCodePoint(this._consume());
      }
      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
    } else if (!this._ensureHibernation()) {
      this.state = State.SCRIPT_DATA_ESCAPED;
      this._stateScriptDataEscaped(cp);
    }
  }
  // Script data double escaped state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscaped(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
        this._emitChars("<");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data double escaped dash state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
        this._emitChars("<");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data double escaped dash dash state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedDashDash(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this._emitChars("-");
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
        this._emitChars("<");
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.SCRIPT_DATA;
        this._emitChars(">");
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitChars(REPLACEMENT_CHARACTER);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInScriptHtmlCommentLikeText);
        this._emitEOFToken();
        break;
      }
      default: {
        this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
        this._emitCodePoint(cp);
      }
    }
  }
  // Script data double escaped less-than sign state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapedLessThanSign(cp) {
    if (cp === CODE_POINTS.SOLIDUS) {
      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;
      this._emitChars("/");
    } else {
      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
      this._stateScriptDataDoubleEscaped(cp);
    }
  }
  // Script data double escape end state
  //------------------------------------------------------------------
  _stateScriptDataDoubleEscapeEnd(cp) {
    if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
      this._emitCodePoint(cp);
      for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
        this._emitCodePoint(this._consume());
      }
      this.state = State.SCRIPT_DATA_ESCAPED;
    } else if (!this._ensureHibernation()) {
      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
      this._stateScriptDataDoubleEscaped(cp);
    }
  }
  // Before attribute name state
  //------------------------------------------------------------------
  _stateBeforeAttributeName(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.SOLIDUS:
      case CODE_POINTS.GREATER_THAN_SIGN:
      case CODE_POINTS.EOF: {
        this.state = State.AFTER_ATTRIBUTE_NAME;
        this._stateAfterAttributeName(cp);
        break;
      }
      case CODE_POINTS.EQUALS_SIGN: {
        this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
        this._createAttr("=");
        this.state = State.ATTRIBUTE_NAME;
        break;
      }
      default: {
        this._createAttr("");
        this.state = State.ATTRIBUTE_NAME;
        this._stateAttributeName(cp);
      }
    }
  }
  // Attribute name state
  //------------------------------------------------------------------
  _stateAttributeName(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED:
      case CODE_POINTS.SOLIDUS:
      case CODE_POINTS.GREATER_THAN_SIGN:
      case CODE_POINTS.EOF: {
        this._leaveAttrName();
        this.state = State.AFTER_ATTRIBUTE_NAME;
        this._stateAfterAttributeName(cp);
        break;
      }
      case CODE_POINTS.EQUALS_SIGN: {
        this._leaveAttrName();
        this.state = State.BEFORE_ATTRIBUTE_VALUE;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK:
      case CODE_POINTS.APOSTROPHE:
      case CODE_POINTS.LESS_THAN_SIGN: {
        this._err(ERR.unexpectedCharacterInAttributeName);
        this.currentAttr.name += String.fromCodePoint(cp);
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.name += REPLACEMENT_CHARACTER;
        break;
      }
      default: {
        this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
      }
    }
  }
  // After attribute name state
  //------------------------------------------------------------------
  _stateAfterAttributeName(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.SOLIDUS: {
        this.state = State.SELF_CLOSING_START_TAG;
        break;
      }
      case CODE_POINTS.EQUALS_SIGN: {
        this.state = State.BEFORE_ATTRIBUTE_VALUE;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this._createAttr("");
        this.state = State.ATTRIBUTE_NAME;
        this._stateAttributeName(cp);
      }
    }
  }
  // Before attribute value state
  //------------------------------------------------------------------
  _stateBeforeAttributeValue(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingAttributeValue);
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      default: {
        this.state = State.ATTRIBUTE_VALUE_UNQUOTED;
        this._stateAttributeValueUnquoted(cp);
      }
    }
  }
  // Attribute value (double-quoted) state
  //------------------------------------------------------------------
  _stateAttributeValueDoubleQuoted(cp) {
    switch (cp) {
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
        this.state = State.CHARACTER_REFERENCE;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.value += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this.currentAttr.value += String.fromCodePoint(cp);
      }
    }
  }
  // Attribute value (single-quoted) state
  //------------------------------------------------------------------
  _stateAttributeValueSingleQuoted(cp) {
    switch (cp) {
      case CODE_POINTS.APOSTROPHE: {
        this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;
        this.state = State.CHARACTER_REFERENCE;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.value += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this.currentAttr.value += String.fromCodePoint(cp);
      }
    }
  }
  // Attribute value (unquoted) state
  //------------------------------------------------------------------
  _stateAttributeValueUnquoted(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this._leaveAttrValue();
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case CODE_POINTS.AMPERSAND: {
        this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;
        this.state = State.CHARACTER_REFERENCE;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._leaveAttrValue();
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        this.currentAttr.value += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK:
      case CODE_POINTS.APOSTROPHE:
      case CODE_POINTS.LESS_THAN_SIGN:
      case CODE_POINTS.EQUALS_SIGN:
      case CODE_POINTS.GRAVE_ACCENT: {
        this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
        this.currentAttr.value += String.fromCodePoint(cp);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this.currentAttr.value += String.fromCodePoint(cp);
      }
    }
  }
  // After attribute value (quoted) state
  //------------------------------------------------------------------
  _stateAfterAttributeValueQuoted(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this._leaveAttrValue();
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        break;
      }
      case CODE_POINTS.SOLIDUS: {
        this._leaveAttrValue();
        this.state = State.SELF_CLOSING_START_TAG;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._leaveAttrValue();
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingWhitespaceBetweenAttributes);
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        this._stateBeforeAttributeName(cp);
      }
    }
  }
  // Self-closing start tag state
  //------------------------------------------------------------------
  _stateSelfClosingStartTag(cp) {
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        const token = this.currentToken;
        token.selfClosing = true;
        this.state = State.DATA;
        this.emitCurrentTagToken();
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInTag);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.unexpectedSolidusInTag);
        this.state = State.BEFORE_ATTRIBUTE_NAME;
        this._stateBeforeAttributeName(cp);
      }
    }
  }
  // Bogus comment state
  //------------------------------------------------------------------
  _stateBogusComment(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentComment(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.data += REPLACEMENT_CHARACTER;
        break;
      }
      default: {
        token.data += String.fromCodePoint(cp);
      }
    }
  }
  // Markup declaration open state
  //------------------------------------------------------------------
  _stateMarkupDeclarationOpen(cp) {
    if (this._consumeSequenceIfMatch(SEQUENCES.DASH_DASH, true)) {
      this._createCommentToken(SEQUENCES.DASH_DASH.length + 1);
      this.state = State.COMMENT_START;
    } else if (this._consumeSequenceIfMatch(SEQUENCES.DOCTYPE, false)) {
      this.currentLocation = this.getCurrentLocation(SEQUENCES.DOCTYPE.length + 1);
      this.state = State.DOCTYPE;
    } else if (this._consumeSequenceIfMatch(SEQUENCES.CDATA_START, true)) {
      if (this.inForeignNode) {
        this.state = State.CDATA_SECTION;
      } else {
        this._err(ERR.cdataInHtmlContent);
        this._createCommentToken(SEQUENCES.CDATA_START.length + 1);
        this.currentToken.data = "[CDATA[";
        this.state = State.BOGUS_COMMENT;
      }
    } else if (!this._ensureHibernation()) {
      this._err(ERR.incorrectlyOpenedComment);
      this._createCommentToken(2);
      this.state = State.BOGUS_COMMENT;
      this._stateBogusComment(cp);
    }
  }
  // Comment start state
  //------------------------------------------------------------------
  _stateCommentStart(cp) {
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.COMMENT_START_DASH;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptClosingOfEmptyComment);
        this.state = State.DATA;
        const token = this.currentToken;
        this.emitCurrentComment(token);
        break;
      }
      default: {
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // Comment start dash state
  //------------------------------------------------------------------
  _stateCommentStartDash(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.COMMENT_END;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptClosingOfEmptyComment);
        this.state = State.DATA;
        this.emitCurrentComment(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.data += "-";
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // Comment state
  //------------------------------------------------------------------
  _stateComment(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.COMMENT_END_DASH;
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        token.data += "<";
        this.state = State.COMMENT_LESS_THAN_SIGN;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.data += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.data += String.fromCodePoint(cp);
      }
    }
  }
  // Comment less-than sign state
  //------------------------------------------------------------------
  _stateCommentLessThanSign(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.EXCLAMATION_MARK: {
        token.data += "!";
        this.state = State.COMMENT_LESS_THAN_SIGN_BANG;
        break;
      }
      case CODE_POINTS.LESS_THAN_SIGN: {
        token.data += "<";
        break;
      }
      default: {
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // Comment less-than sign bang state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBang(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;
    } else {
      this.state = State.COMMENT;
      this._stateComment(cp);
    }
  }
  // Comment less-than sign bang dash state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBangDash(cp) {
    if (cp === CODE_POINTS.HYPHEN_MINUS) {
      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;
    } else {
      this.state = State.COMMENT_END_DASH;
      this._stateCommentEndDash(cp);
    }
  }
  // Comment less-than sign bang dash dash state
  //------------------------------------------------------------------
  _stateCommentLessThanSignBangDashDash(cp) {
    if (cp !== CODE_POINTS.GREATER_THAN_SIGN && cp !== CODE_POINTS.EOF) {
      this._err(ERR.nestedComment);
    }
    this.state = State.COMMENT_END;
    this._stateCommentEnd(cp);
  }
  // Comment end dash state
  //------------------------------------------------------------------
  _stateCommentEndDash(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        this.state = State.COMMENT_END;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.data += "-";
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // Comment end state
  //------------------------------------------------------------------
  _stateCommentEnd(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentComment(token);
        break;
      }
      case CODE_POINTS.EXCLAMATION_MARK: {
        this.state = State.COMMENT_END_BANG;
        break;
      }
      case CODE_POINTS.HYPHEN_MINUS: {
        token.data += "-";
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.data += "--";
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // Comment end bang state
  //------------------------------------------------------------------
  _stateCommentEndBang(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.HYPHEN_MINUS: {
        token.data += "--!";
        this.state = State.COMMENT_END_DASH;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.incorrectlyClosedComment);
        this.state = State.DATA;
        this.emitCurrentComment(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInComment);
        this.emitCurrentComment(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.data += "--!";
        this.state = State.COMMENT;
        this._stateComment(cp);
      }
    }
  }
  // DOCTYPE state
  //------------------------------------------------------------------
  _stateDoctype(cp) {
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.BEFORE_DOCTYPE_NAME;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.BEFORE_DOCTYPE_NAME;
        this._stateBeforeDoctypeName(cp);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        this._createDoctypeToken(null);
        const token = this.currentToken;
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingWhitespaceBeforeDoctypeName);
        this.state = State.BEFORE_DOCTYPE_NAME;
        this._stateBeforeDoctypeName(cp);
      }
    }
  }
  // Before DOCTYPE name state
  //------------------------------------------------------------------
  _stateBeforeDoctypeName(cp) {
    if (isAsciiUpper(cp)) {
      this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));
      this.state = State.DOCTYPE_NAME;
    } else
      switch (cp) {
        case CODE_POINTS.SPACE:
        case CODE_POINTS.LINE_FEED:
        case CODE_POINTS.TABULATION:
        case CODE_POINTS.FORM_FEED: {
          break;
        }
        case CODE_POINTS.NULL: {
          this._err(ERR.unexpectedNullCharacter);
          this._createDoctypeToken(REPLACEMENT_CHARACTER);
          this.state = State.DOCTYPE_NAME;
          break;
        }
        case CODE_POINTS.GREATER_THAN_SIGN: {
          this._err(ERR.missingDoctypeName);
          this._createDoctypeToken(null);
          const token = this.currentToken;
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this.state = State.DATA;
          break;
        }
        case CODE_POINTS.EOF: {
          this._err(ERR.eofInDoctype);
          this._createDoctypeToken(null);
          const token = this.currentToken;
          token.forceQuirks = true;
          this.emitCurrentDoctype(token);
          this._emitEOFToken();
          break;
        }
        default: {
          this._createDoctypeToken(String.fromCodePoint(cp));
          this.state = State.DOCTYPE_NAME;
        }
      }
  }
  // DOCTYPE name state
  //------------------------------------------------------------------
  _stateDoctypeName(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.AFTER_DOCTYPE_NAME;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.name += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
      }
    }
  }
  // After DOCTYPE name state
  //------------------------------------------------------------------
  _stateAfterDoctypeName(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        if (this._consumeSequenceIfMatch(SEQUENCES.PUBLIC, false)) {
          this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;
        } else if (this._consumeSequenceIfMatch(SEQUENCES.SYSTEM, false)) {
          this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;
        } else if (!this._ensureHibernation()) {
          this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
          token.forceQuirks = true;
          this.state = State.BOGUS_DOCTYPE;
          this._stateBogusDoctype(cp);
        }
      }
    }
  }
  // After DOCTYPE public keyword state
  //------------------------------------------------------------------
  _stateAfterDoctypePublicKeyword(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
        token.publicId = "";
        this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
        token.publicId = "";
        this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.state = State.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // Before DOCTYPE public identifier state
  //------------------------------------------------------------------
  _stateBeforeDoctypePublicIdentifier(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        token.publicId = "";
        this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        token.publicId = "";
        this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.state = State.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // DOCTYPE public identifier (double-quoted) state
  //------------------------------------------------------------------
  _stateDoctypePublicIdentifierDoubleQuoted(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.publicId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.publicId += String.fromCodePoint(cp);
      }
    }
  }
  // DOCTYPE public identifier (single-quoted) state
  //------------------------------------------------------------------
  _stateDoctypePublicIdentifierSingleQuoted(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.APOSTROPHE: {
        this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.publicId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypePublicIdentifier);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.publicId += String.fromCodePoint(cp);
      }
    }
  }
  // After DOCTYPE public identifier state
  //------------------------------------------------------------------
  _stateAfterDoctypePublicIdentifier(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
        token.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
        token.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // Between DOCTYPE public and system identifiers state
  //------------------------------------------------------------------
  _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(token);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        token.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        token.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // After DOCTYPE system keyword state
  //------------------------------------------------------------------
  _stateAfterDoctypeSystemKeyword(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
        token.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
        token.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // Before DOCTYPE system identifier state
  //------------------------------------------------------------------
  _stateBeforeDoctypeSystemIdentifier(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.QUOTATION_MARK: {
        token.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
        break;
      }
      case CODE_POINTS.APOSTROPHE: {
        token.systemId = "";
        this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.missingDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State.DATA;
        this.emitCurrentDoctype(token);
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // DOCTYPE system identifier (double-quoted) state
  //------------------------------------------------------------------
  _stateDoctypeSystemIdentifierDoubleQuoted(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.QUOTATION_MARK: {
        this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.systemId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.systemId += String.fromCodePoint(cp);
      }
    }
  }
  // DOCTYPE system identifier (single-quoted) state
  //------------------------------------------------------------------
  _stateDoctypeSystemIdentifierSingleQuoted(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.APOSTROPHE: {
        this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        token.systemId += REPLACEMENT_CHARACTER;
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this._err(ERR.abruptDoctypeSystemIdentifier);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        token.systemId += String.fromCodePoint(cp);
      }
    }
  }
  // After DOCTYPE system identifier state
  //------------------------------------------------------------------
  _stateAfterDoctypeSystemIdentifier(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.SPACE:
      case CODE_POINTS.LINE_FEED:
      case CODE_POINTS.TABULATION:
      case CODE_POINTS.FORM_FEED: {
        break;
      }
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(token);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInDoctype);
        token.forceQuirks = true;
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default: {
        this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
        this.state = State.BOGUS_DOCTYPE;
        this._stateBogusDoctype(cp);
      }
    }
  }
  // Bogus DOCTYPE state
  //------------------------------------------------------------------
  _stateBogusDoctype(cp) {
    const token = this.currentToken;
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.emitCurrentDoctype(token);
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.NULL: {
        this._err(ERR.unexpectedNullCharacter);
        break;
      }
      case CODE_POINTS.EOF: {
        this.emitCurrentDoctype(token);
        this._emitEOFToken();
        break;
      }
      default:
    }
  }
  // CDATA section state
  //------------------------------------------------------------------
  _stateCdataSection(cp) {
    switch (cp) {
      case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
        this.state = State.CDATA_SECTION_BRACKET;
        break;
      }
      case CODE_POINTS.EOF: {
        this._err(ERR.eofInCdata);
        this._emitEOFToken();
        break;
      }
      default: {
        this._emitCodePoint(cp);
      }
    }
  }
  // CDATA section bracket state
  //------------------------------------------------------------------
  _stateCdataSectionBracket(cp) {
    if (cp === CODE_POINTS.RIGHT_SQUARE_BRACKET) {
      this.state = State.CDATA_SECTION_END;
    } else {
      this._emitChars("]");
      this.state = State.CDATA_SECTION;
      this._stateCdataSection(cp);
    }
  }
  // CDATA section end state
  //------------------------------------------------------------------
  _stateCdataSectionEnd(cp) {
    switch (cp) {
      case CODE_POINTS.GREATER_THAN_SIGN: {
        this.state = State.DATA;
        break;
      }
      case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
        this._emitChars("]");
        break;
      }
      default: {
        this._emitChars("]]");
        this.state = State.CDATA_SECTION;
        this._stateCdataSection(cp);
      }
    }
  }
  // Character reference state
  //------------------------------------------------------------------
  _stateCharacterReference(cp) {
    if (cp === CODE_POINTS.NUMBER_SIGN) {
      this.state = State.NUMERIC_CHARACTER_REFERENCE;
    } else if (isAsciiAlphaNumeric2(cp)) {
      this.state = State.NAMED_CHARACTER_REFERENCE;
      this._stateNamedCharacterReference(cp);
    } else {
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
      this._reconsumeInState(this.returnState, cp);
    }
  }
  // Named character reference state
  //------------------------------------------------------------------
  _stateNamedCharacterReference(cp) {
    const matchResult = this._matchNamedCharacterReference(cp);
    if (this._ensureHibernation()) {
    } else if (matchResult) {
      for (let i = 0; i < matchResult.length; i++) {
        this._flushCodePointConsumedAsCharacterReference(matchResult[i]);
      }
      this.state = this.returnState;
    } else {
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
      this.state = State.AMBIGUOUS_AMPERSAND;
    }
  }
  // Ambiguos ampersand state
  //------------------------------------------------------------------
  _stateAmbiguousAmpersand(cp) {
    if (isAsciiAlphaNumeric2(cp)) {
      this._flushCodePointConsumedAsCharacterReference(cp);
    } else {
      if (cp === CODE_POINTS.SEMICOLON) {
        this._err(ERR.unknownNamedCharacterReference);
      }
      this._reconsumeInState(this.returnState, cp);
    }
  }
  // Numeric character reference state
  //------------------------------------------------------------------
  _stateNumericCharacterReference(cp) {
    this.charRefCode = 0;
    if (cp === CODE_POINTS.LATIN_SMALL_X || cp === CODE_POINTS.LATIN_CAPITAL_X) {
      this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;
    } else if (isAsciiDigit(cp)) {
      this.state = State.DECIMAL_CHARACTER_REFERENCE;
      this._stateDecimalCharacterReference(cp);
    } else {
      this._err(ERR.absenceOfDigitsInNumericCharacterReference);
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
      this._reconsumeInState(this.returnState, cp);
    }
  }
  // Hexademical character reference start state
  //------------------------------------------------------------------
  _stateHexademicalCharacterReferenceStart(cp) {
    if (isAsciiHexDigit(cp)) {
      this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;
      this._stateHexademicalCharacterReference(cp);
    } else {
      this._err(ERR.absenceOfDigitsInNumericCharacterReference);
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
      this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
      this._unconsume(2);
      this.state = this.returnState;
    }
  }
  // Hexademical character reference state
  //------------------------------------------------------------------
  _stateHexademicalCharacterReference(cp) {
    if (isAsciiUpperHexDigit(cp)) {
      this.charRefCode = this.charRefCode * 16 + cp - 55;
    } else if (isAsciiLowerHexDigit(cp)) {
      this.charRefCode = this.charRefCode * 16 + cp - 87;
    } else if (isAsciiDigit(cp)) {
      this.charRefCode = this.charRefCode * 16 + cp - 48;
    } else if (cp === CODE_POINTS.SEMICOLON) {
      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
    } else {
      this._err(ERR.missingSemicolonAfterCharacterReference);
      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
      this._stateNumericCharacterReferenceEnd(cp);
    }
  }
  // Decimal character reference state
  //------------------------------------------------------------------
  _stateDecimalCharacterReference(cp) {
    if (isAsciiDigit(cp)) {
      this.charRefCode = this.charRefCode * 10 + cp - 48;
    } else if (cp === CODE_POINTS.SEMICOLON) {
      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
    } else {
      this._err(ERR.missingSemicolonAfterCharacterReference);
      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
      this._stateNumericCharacterReferenceEnd(cp);
    }
  }
  // Numeric character reference end state
  //------------------------------------------------------------------
  _stateNumericCharacterReferenceEnd(cp) {
    if (this.charRefCode === CODE_POINTS.NULL) {
      this._err(ERR.nullCharacterReference);
      this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
    } else if (this.charRefCode > 1114111) {
      this._err(ERR.characterReferenceOutsideUnicodeRange);
      this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
    } else if (isSurrogate(this.charRefCode)) {
      this._err(ERR.surrogateCharacterReference);
      this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
    } else if (isUndefinedCodePoint(this.charRefCode)) {
      this._err(ERR.noncharacterCharacterReference);
    } else if (isControlCodePoint(this.charRefCode) || this.charRefCode === CODE_POINTS.CARRIAGE_RETURN) {
      this._err(ERR.controlCharacterReference);
      const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);
      if (replacement !== void 0) {
        this.charRefCode = replacement;
      }
    }
    this._flushCodePointConsumedAsCharacterReference(this.charRefCode);
    this._reconsumeInState(this.returnState, cp);
  }
};

// node_modules/parse5/dist/parser/open-element-stack.js
var IMPLICIT_END_TAG_REQUIRED = /* @__PURE__ */ new Set([TAG_ID.DD, TAG_ID.DT, TAG_ID.LI, TAG_ID.OPTGROUP, TAG_ID.OPTION, TAG_ID.P, TAG_ID.RB, TAG_ID.RP, TAG_ID.RT, TAG_ID.RTC]);
var IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = /* @__PURE__ */ new Set([
  ...IMPLICIT_END_TAG_REQUIRED,
  TAG_ID.CAPTION,
  TAG_ID.COLGROUP,
  TAG_ID.TBODY,
  TAG_ID.TD,
  TAG_ID.TFOOT,
  TAG_ID.TH,
  TAG_ID.THEAD,
  TAG_ID.TR
]);
var SCOPING_ELEMENT_NS = /* @__PURE__ */ new Map([
  [TAG_ID.APPLET, NS.HTML],
  [TAG_ID.CAPTION, NS.HTML],
  [TAG_ID.HTML, NS.HTML],
  [TAG_ID.MARQUEE, NS.HTML],
  [TAG_ID.OBJECT, NS.HTML],
  [TAG_ID.TABLE, NS.HTML],
  [TAG_ID.TD, NS.HTML],
  [TAG_ID.TEMPLATE, NS.HTML],
  [TAG_ID.TH, NS.HTML],
  [TAG_ID.ANNOTATION_XML, NS.MATHML],
  [TAG_ID.MI, NS.MATHML],
  [TAG_ID.MN, NS.MATHML],
  [TAG_ID.MO, NS.MATHML],
  [TAG_ID.MS, NS.MATHML],
  [TAG_ID.MTEXT, NS.MATHML],
  [TAG_ID.DESC, NS.SVG],
  [TAG_ID.FOREIGN_OBJECT, NS.SVG],
  [TAG_ID.TITLE, NS.SVG]
]);
var NAMED_HEADERS = [TAG_ID.H1, TAG_ID.H2, TAG_ID.H3, TAG_ID.H4, TAG_ID.H5, TAG_ID.H6];
var TABLE_ROW_CONTEXT = [TAG_ID.TR, TAG_ID.TEMPLATE, TAG_ID.HTML];
var TABLE_BODY_CONTEXT = [TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TEMPLATE, TAG_ID.HTML];
var TABLE_CONTEXT = [TAG_ID.TABLE, TAG_ID.TEMPLATE, TAG_ID.HTML];
var TABLE_CELLS = [TAG_ID.TD, TAG_ID.TH];
var OpenElementStack = class {
  get currentTmplContentOrNode() {
    return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;
  }
  constructor(document2, treeAdapter, handler2) {
    this.treeAdapter = treeAdapter;
    this.handler = handler2;
    this.items = [];
    this.tagIDs = [];
    this.stackTop = -1;
    this.tmplCount = 0;
    this.currentTagId = TAG_ID.UNKNOWN;
    this.current = document2;
  }
  //Index of element
  _indexOf(element2) {
    return this.items.lastIndexOf(element2, this.stackTop);
  }
  //Update current element
  _isInTemplate() {
    return this.currentTagId === TAG_ID.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
  }
  _updateCurrentElement() {
    this.current = this.items[this.stackTop];
    this.currentTagId = this.tagIDs[this.stackTop];
  }
  //Mutations
  push(element2, tagID) {
    this.stackTop++;
    this.items[this.stackTop] = element2;
    this.current = element2;
    this.tagIDs[this.stackTop] = tagID;
    this.currentTagId = tagID;
    if (this._isInTemplate()) {
      this.tmplCount++;
    }
    this.handler.onItemPush(element2, tagID, true);
  }
  pop() {
    const popped = this.current;
    if (this.tmplCount > 0 && this._isInTemplate()) {
      this.tmplCount--;
    }
    this.stackTop--;
    this._updateCurrentElement();
    this.handler.onItemPop(popped, true);
  }
  replace(oldElement, newElement) {
    const idx = this._indexOf(oldElement);
    this.items[idx] = newElement;
    if (idx === this.stackTop) {
      this.current = newElement;
    }
  }
  insertAfter(referenceElement, newElement, newElementID) {
    const insertionIdx = this._indexOf(referenceElement) + 1;
    this.items.splice(insertionIdx, 0, newElement);
    this.tagIDs.splice(insertionIdx, 0, newElementID);
    this.stackTop++;
    if (insertionIdx === this.stackTop) {
      this._updateCurrentElement();
    }
    this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);
  }
  popUntilTagNamePopped(tagName) {
    let targetIdx = this.stackTop + 1;
    do {
      targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);
    } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);
    this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);
  }
  shortenToLength(idx) {
    while (this.stackTop >= idx) {
      const popped = this.current;
      if (this.tmplCount > 0 && this._isInTemplate()) {
        this.tmplCount -= 1;
      }
      this.stackTop--;
      this._updateCurrentElement();
      this.handler.onItemPop(popped, this.stackTop < idx);
    }
  }
  popUntilElementPopped(element2) {
    const idx = this._indexOf(element2);
    this.shortenToLength(idx < 0 ? 0 : idx);
  }
  popUntilPopped(tagNames, targetNS) {
    const idx = this._indexOfTagNames(tagNames, targetNS);
    this.shortenToLength(idx < 0 ? 0 : idx);
  }
  popUntilNumberedHeaderPopped() {
    this.popUntilPopped(NAMED_HEADERS, NS.HTML);
  }
  popUntilTableCellPopped() {
    this.popUntilPopped(TABLE_CELLS, NS.HTML);
  }
  popAllUpToHtmlElement() {
    this.tmplCount = 0;
    this.shortenToLength(1);
  }
  _indexOfTagNames(tagNames, namespace) {
    for (let i = this.stackTop; i >= 0; i--) {
      if (tagNames.includes(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {
        return i;
      }
    }
    return -1;
  }
  clearBackTo(tagNames, targetNS) {
    const idx = this._indexOfTagNames(tagNames, targetNS);
    this.shortenToLength(idx + 1);
  }
  clearBackToTableContext() {
    this.clearBackTo(TABLE_CONTEXT, NS.HTML);
  }
  clearBackToTableBodyContext() {
    this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);
  }
  clearBackToTableRowContext() {
    this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);
  }
  remove(element2) {
    const idx = this._indexOf(element2);
    if (idx >= 0) {
      if (idx === this.stackTop) {
        this.pop();
      } else {
        this.items.splice(idx, 1);
        this.tagIDs.splice(idx, 1);
        this.stackTop--;
        this._updateCurrentElement();
        this.handler.onItemPop(element2, false);
      }
    }
  }
  //Search
  tryPeekProperlyNestedBodyElement() {
    return this.stackTop >= 1 && this.tagIDs[1] === TAG_ID.BODY ? this.items[1] : null;
  }
  contains(element2) {
    return this._indexOf(element2) > -1;
  }
  getCommonAncestor(element2) {
    const elementIdx = this._indexOf(element2) - 1;
    return elementIdx >= 0 ? this.items[elementIdx] : null;
  }
  isRootHtmlElementCurrent() {
    return this.stackTop === 0 && this.tagIDs[0] === TAG_ID.HTML;
  }
  //Element in scope
  hasInScope(tagName) {
    for (let i = this.stackTop; i >= 0; i--) {
      const tn3 = this.tagIDs[i];
      const ns2 = this.treeAdapter.getNamespaceURI(this.items[i]);
      if (tn3 === tagName && ns2 === NS.HTML) {
        return true;
      }
      if (SCOPING_ELEMENT_NS.get(tn3) === ns2) {
        return false;
      }
    }
    return true;
  }
  hasNumberedHeaderInScope() {
    for (let i = this.stackTop; i >= 0; i--) {
      const tn3 = this.tagIDs[i];
      const ns2 = this.treeAdapter.getNamespaceURI(this.items[i]);
      if (isNumberedHeader(tn3) && ns2 === NS.HTML) {
        return true;
      }
      if (SCOPING_ELEMENT_NS.get(tn3) === ns2) {
        return false;
      }
    }
    return true;
  }
  hasInListItemScope(tagName) {
    for (let i = this.stackTop; i >= 0; i--) {
      const tn3 = this.tagIDs[i];
      const ns2 = this.treeAdapter.getNamespaceURI(this.items[i]);
      if (tn3 === tagName && ns2 === NS.HTML) {
        return true;
      }
      if ((tn3 === TAG_ID.UL || tn3 === TAG_ID.OL) && ns2 === NS.HTML || SCOPING_ELEMENT_NS.get(tn3) === ns2) {
        return false;
      }
    }
    return true;
  }
  hasInButtonScope(tagName) {
    for (let i = this.stackTop; i >= 0; i--) {
      const tn3 = this.tagIDs[i];
      const ns2 = this.treeAdapter.getNamespaceURI(this.items[i]);
      if (tn3 === tagName && ns2 === NS.HTML) {
        return true;
      }
      if (tn3 === TAG_ID.BUTTON && ns2 === NS.HTML || SCOPING_ELEMENT_NS.get(tn3) === ns2) {
        return false;
      }
    }
    return true;
  }
  hasInTableScope(tagName) {
    for (let i = this.stackTop; i >= 0; i--) {
      const tn3 = this.tagIDs[i];
      const ns2 = this.treeAdapter.getNamespaceURI(this.items[i]);
      if (ns2 !== NS.HTML) {
        continue;
      }
      if (tn3 === tagName) {
        return true;
      }
      if (tn3 === TAG_ID.TABLE || tn3 === TAG_ID.TEMPLATE || tn3 === TAG_ID.HTML) {
        return false;
      }
    }
    return true;
  }
  hasTableBodyContextInTableScope() {
    for (let i = this.stackTop; i >= 0; i--) {
      const tn3 = this.tagIDs[i];
      const ns2 = this.treeAdapter.getNamespaceURI(this.items[i]);
      if (ns2 !== NS.HTML) {
        continue;
      }
      if (tn3 === TAG_ID.TBODY || tn3 === TAG_ID.THEAD || tn3 === TAG_ID.TFOOT) {
        return true;
      }
      if (tn3 === TAG_ID.TABLE || tn3 === TAG_ID.HTML) {
        return false;
      }
    }
    return true;
  }
  hasInSelectScope(tagName) {
    for (let i = this.stackTop; i >= 0; i--) {
      const tn3 = this.tagIDs[i];
      const ns2 = this.treeAdapter.getNamespaceURI(this.items[i]);
      if (ns2 !== NS.HTML) {
        continue;
      }
      if (tn3 === tagName) {
        return true;
      }
      if (tn3 !== TAG_ID.OPTION && tn3 !== TAG_ID.OPTGROUP) {
        return false;
      }
    }
    return true;
  }
  //Implied end tags
  generateImpliedEndTags() {
    while (IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {
      this.pop();
    }
  }
  generateImpliedEndTagsThoroughly() {
    while (IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
      this.pop();
    }
  }
  generateImpliedEndTagsWithExclusion(exclusionId) {
    while (this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
      this.pop();
    }
  }
};

// node_modules/parse5/dist/parser/formatting-element-list.js
var NOAH_ARK_CAPACITY = 3;
var EntryType;
(function(EntryType2) {
  EntryType2[EntryType2["Marker"] = 0] = "Marker";
  EntryType2[EntryType2["Element"] = 1] = "Element";
})(EntryType = EntryType || (EntryType = {}));
var MARKER = { type: EntryType.Marker };
var FormattingElementList = class {
  constructor(treeAdapter) {
    this.treeAdapter = treeAdapter;
    this.entries = [];
    this.bookmark = null;
  }
  //Noah Ark's condition
  //OPTIMIZATION: at first we try to find possible candidates for exclusion using
  //lightweight heuristics without thorough attributes check.
  _getNoahArkConditionCandidates(newElement, neAttrs) {
    const candidates = [];
    const neAttrsLength = neAttrs.length;
    const neTagName = this.treeAdapter.getTagName(newElement);
    const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
    for (let i = 0; i < this.entries.length; i++) {
      const entry = this.entries[i];
      if (entry.type === EntryType.Marker) {
        break;
      }
      const { element: element2 } = entry;
      if (this.treeAdapter.getTagName(element2) === neTagName && this.treeAdapter.getNamespaceURI(element2) === neNamespaceURI) {
        const elementAttrs = this.treeAdapter.getAttrList(element2);
        if (elementAttrs.length === neAttrsLength) {
          candidates.push({ idx: i, attrs: elementAttrs });
        }
      }
    }
    return candidates;
  }
  _ensureNoahArkCondition(newElement) {
    if (this.entries.length < NOAH_ARK_CAPACITY)
      return;
    const neAttrs = this.treeAdapter.getAttrList(newElement);
    const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);
    if (candidates.length < NOAH_ARK_CAPACITY)
      return;
    const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));
    let validCandidates = 0;
    for (let i = 0; i < candidates.length; i++) {
      const candidate = candidates[i];
      if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {
        validCandidates += 1;
        if (validCandidates >= NOAH_ARK_CAPACITY) {
          this.entries.splice(candidate.idx, 1);
        }
      }
    }
  }
  //Mutations
  insertMarker() {
    this.entries.unshift(MARKER);
  }
  pushElement(element2, token) {
    this._ensureNoahArkCondition(element2);
    this.entries.unshift({
      type: EntryType.Element,
      element: element2,
      token
    });
  }
  insertElementAfterBookmark(element2, token) {
    const bookmarkIdx = this.entries.indexOf(this.bookmark);
    this.entries.splice(bookmarkIdx, 0, {
      type: EntryType.Element,
      element: element2,
      token
    });
  }
  removeEntry(entry) {
    const entryIndex = this.entries.indexOf(entry);
    if (entryIndex >= 0) {
      this.entries.splice(entryIndex, 1);
    }
  }
  /**
   * Clears the list of formatting elements up to the last marker.
   *
   * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker
   */
  clearToLastMarker() {
    const markerIdx = this.entries.indexOf(MARKER);
    if (markerIdx >= 0) {
      this.entries.splice(0, markerIdx + 1);
    } else {
      this.entries.length = 0;
    }
  }
  //Search
  getElementEntryInScopeWithTagName(tagName) {
    const entry = this.entries.find((entry2) => entry2.type === EntryType.Marker || this.treeAdapter.getTagName(entry2.element) === tagName);
    return entry && entry.type === EntryType.Element ? entry : null;
  }
  getElementEntry(element2) {
    return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element2);
  }
};

// node_modules/parse5/dist/tree-adapters/default.js
function createTextNode(value) {
  return {
    nodeName: "#text",
    value,
    parentNode: null
  };
}
var defaultTreeAdapter = {
  //Node construction
  createDocument() {
    return {
      nodeName: "#document",
      mode: DOCUMENT_MODE.NO_QUIRKS,
      childNodes: []
    };
  },
  createDocumentFragment() {
    return {
      nodeName: "#document-fragment",
      childNodes: []
    };
  },
  createElement(tagName, namespaceURI, attrs) {
    return {
      nodeName: tagName,
      tagName,
      attrs,
      namespaceURI,
      childNodes: [],
      parentNode: null
    };
  },
  createCommentNode(data2) {
    return {
      nodeName: "#comment",
      data: data2,
      parentNode: null
    };
  },
  //Tree mutation
  appendChild(parentNode, newNode) {
    parentNode.childNodes.push(newNode);
    newNode.parentNode = parentNode;
  },
  insertBefore(parentNode, newNode, referenceNode) {
    const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
    parentNode.childNodes.splice(insertionIdx, 0, newNode);
    newNode.parentNode = parentNode;
  },
  setTemplateContent(templateElement, contentElement) {
    templateElement.content = contentElement;
  },
  getTemplateContent(templateElement) {
    return templateElement.content;
  },
  setDocumentType(document2, name, publicId, systemId) {
    const doctypeNode = document2.childNodes.find((node) => node.nodeName === "#documentType");
    if (doctypeNode) {
      doctypeNode.name = name;
      doctypeNode.publicId = publicId;
      doctypeNode.systemId = systemId;
    } else {
      const node = {
        nodeName: "#documentType",
        name,
        publicId,
        systemId,
        parentNode: null
      };
      defaultTreeAdapter.appendChild(document2, node);
    }
  },
  setDocumentMode(document2, mode) {
    document2.mode = mode;
  },
  getDocumentMode(document2) {
    return document2.mode;
  },
  detachNode(node) {
    if (node.parentNode) {
      const idx = node.parentNode.childNodes.indexOf(node);
      node.parentNode.childNodes.splice(idx, 1);
      node.parentNode = null;
    }
  },
  insertText(parentNode, text4) {
    if (parentNode.childNodes.length > 0) {
      const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
      if (defaultTreeAdapter.isTextNode(prevNode)) {
        prevNode.value += text4;
        return;
      }
    }
    defaultTreeAdapter.appendChild(parentNode, createTextNode(text4));
  },
  insertTextBefore(parentNode, text4, referenceNode) {
    const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
    if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {
      prevNode.value += text4;
    } else {
      defaultTreeAdapter.insertBefore(parentNode, createTextNode(text4), referenceNode);
    }
  },
  adoptAttributes(recipient, attrs) {
    const recipientAttrsMap = new Set(recipient.attrs.map((attr3) => attr3.name));
    for (let j4 = 0; j4 < attrs.length; j4++) {
      if (!recipientAttrsMap.has(attrs[j4].name)) {
        recipient.attrs.push(attrs[j4]);
      }
    }
  },
  //Tree traversing
  getFirstChild(node) {
    return node.childNodes[0];
  },
  getChildNodes(node) {
    return node.childNodes;
  },
  getParentNode(node) {
    return node.parentNode;
  },
  getAttrList(element2) {
    return element2.attrs;
  },
  //Node data
  getTagName(element2) {
    return element2.tagName;
  },
  getNamespaceURI(element2) {
    return element2.namespaceURI;
  },
  getTextNodeContent(textNode) {
    return textNode.value;
  },
  getCommentNodeContent(commentNode) {
    return commentNode.data;
  },
  getDocumentTypeNodeName(doctypeNode) {
    return doctypeNode.name;
  },
  getDocumentTypeNodePublicId(doctypeNode) {
    return doctypeNode.publicId;
  },
  getDocumentTypeNodeSystemId(doctypeNode) {
    return doctypeNode.systemId;
  },
  //Node types
  isTextNode(node) {
    return node.nodeName === "#text";
  },
  isCommentNode(node) {
    return node.nodeName === "#comment";
  },
  isDocumentTypeNode(node) {
    return node.nodeName === "#documentType";
  },
  isElementNode(node) {
    return Object.prototype.hasOwnProperty.call(node, "tagName");
  },
  // Source code location
  setNodeSourceCodeLocation(node, location) {
    node.sourceCodeLocation = location;
  },
  getNodeSourceCodeLocation(node) {
    return node.sourceCodeLocation;
  },
  updateNodeSourceCodeLocation(node, endLocation) {
    node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };
  }
};

// node_modules/parse5/dist/common/doctype.js
var VALID_DOCTYPE_NAME = "html";
var VALID_SYSTEM_ID = "about:legacy-compat";
var QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";
var QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
  "+//silmaril//dtd html pro v0r11 19970101//",
  "-//as//dtd html 3.0 aswedit + extensions//",
  "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
  "-//ietf//dtd html 2.0 level 1//",
  "-//ietf//dtd html 2.0 level 2//",
  "-//ietf//dtd html 2.0 strict level 1//",
  "-//ietf//dtd html 2.0 strict level 2//",
  "-//ietf//dtd html 2.0 strict//",
  "-//ietf//dtd html 2.0//",
  "-//ietf//dtd html 2.1e//",
  "-//ietf//dtd html 3.0//",
  "-//ietf//dtd html 3.2 final//",
  "-//ietf//dtd html 3.2//",
  "-//ietf//dtd html 3//",
  "-//ietf//dtd html level 0//",
  "-//ietf//dtd html level 1//",
  "-//ietf//dtd html level 2//",
  "-//ietf//dtd html level 3//",
  "-//ietf//dtd html strict level 0//",
  "-//ietf//dtd html strict level 1//",
  "-//ietf//dtd html strict level 2//",
  "-//ietf//dtd html strict level 3//",
  "-//ietf//dtd html strict//",
  "-//ietf//dtd html//",
  "-//metrius//dtd metrius presentational//",
  "-//microsoft//dtd internet explorer 2.0 html strict//",
  "-//microsoft//dtd internet explorer 2.0 html//",
  "-//microsoft//dtd internet explorer 2.0 tables//",
  "-//microsoft//dtd internet explorer 3.0 html strict//",
  "-//microsoft//dtd internet explorer 3.0 html//",
  "-//microsoft//dtd internet explorer 3.0 tables//",
  "-//netscape comm. corp.//dtd html//",
  "-//netscape comm. corp.//dtd strict html//",
  "-//o'reilly and associates//dtd html 2.0//",
  "-//o'reilly and associates//dtd html extended 1.0//",
  "-//o'reilly and associates//dtd html extended relaxed 1.0//",
  "-//sq//dtd html 2.0 hotmetal + extensions//",
  "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
  "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
  "-//spyglass//dtd html 2.0 extended//",
  "-//sun microsystems corp.//dtd hotjava html//",
  "-//sun microsystems corp.//dtd hotjava strict html//",
  "-//w3c//dtd html 3 1995-03-24//",
  "-//w3c//dtd html 3.2 draft//",
  "-//w3c//dtd html 3.2 final//",
  "-//w3c//dtd html 3.2//",
  "-//w3c//dtd html 3.2s draft//",
  "-//w3c//dtd html 4.0 frameset//",
  "-//w3c//dtd html 4.0 transitional//",
  "-//w3c//dtd html experimental 19960712//",
  "-//w3c//dtd html experimental 970421//",
  "-//w3c//dtd w3 html//",
  "-//w3o//dtd w3 html 3.0//",
  "-//webtechs//dtd mozilla html 2.0//",
  "-//webtechs//dtd mozilla html//"
];
var QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
  ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
];
var QUIRKS_MODE_PUBLIC_IDS = /* @__PURE__ */ new Set([
  "-//w3o//dtd w3 html strict 3.0//en//",
  "-/w3c/dtd html 4.0 transitional/en",
  "html"
]);
var LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"];
var LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
  ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
];
function hasPrefix(publicId, prefixes) {
  return prefixes.some((prefix) => publicId.startsWith(prefix));
}
function isConforming(token) {
  return token.name === VALID_DOCTYPE_NAME && token.publicId === null && (token.systemId === null || token.systemId === VALID_SYSTEM_ID);
}
function getDocumentMode(token) {
  if (token.name !== VALID_DOCTYPE_NAME) {
    return DOCUMENT_MODE.QUIRKS;
  }
  const { systemId } = token;
  if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
    return DOCUMENT_MODE.QUIRKS;
  }
  let { publicId } = token;
  if (publicId !== null) {
    publicId = publicId.toLowerCase();
    if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {
      return DOCUMENT_MODE.QUIRKS;
    }
    let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
    if (hasPrefix(publicId, prefixes)) {
      return DOCUMENT_MODE.QUIRKS;
    }
    prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
    if (hasPrefix(publicId, prefixes)) {
      return DOCUMENT_MODE.LIMITED_QUIRKS;
    }
  }
  return DOCUMENT_MODE.NO_QUIRKS;
}

// node_modules/parse5/dist/common/foreign-content.js
var foreign_content_exports = {};
__export(foreign_content_exports, {
  SVG_TAG_NAMES_ADJUSTMENT_MAP: () => SVG_TAG_NAMES_ADJUSTMENT_MAP,
  adjustTokenMathMLAttrs: () => adjustTokenMathMLAttrs,
  adjustTokenSVGAttrs: () => adjustTokenSVGAttrs,
  adjustTokenSVGTagName: () => adjustTokenSVGTagName,
  adjustTokenXMLAttrs: () => adjustTokenXMLAttrs,
  causesExit: () => causesExit,
  isIntegrationPoint: () => isIntegrationPoint
});
var MIME_TYPES = {
  TEXT_HTML: "text/html",
  APPLICATION_XML: "application/xhtml+xml"
};
var DEFINITION_URL_ATTR = "definitionurl";
var ADJUSTED_DEFINITION_URL_ATTR = "definitionURL";
var SVG_ATTRS_ADJUSTMENT_MAP = new Map([
  "attributeName",
  "attributeType",
  "baseFrequency",
  "baseProfile",
  "calcMode",
  "clipPathUnits",
  "diffuseConstant",
  "edgeMode",
  "filterUnits",
  "glyphRef",
  "gradientTransform",
  "gradientUnits",
  "kernelMatrix",
  "kernelUnitLength",
  "keyPoints",
  "keySplines",
  "keyTimes",
  "lengthAdjust",
  "limitingConeAngle",
  "markerHeight",
  "markerUnits",
  "markerWidth",
  "maskContentUnits",
  "maskUnits",
  "numOctaves",
  "pathLength",
  "patternContentUnits",
  "patternTransform",
  "patternUnits",
  "pointsAtX",
  "pointsAtY",
  "pointsAtZ",
  "preserveAlpha",
  "preserveAspectRatio",
  "primitiveUnits",
  "refX",
  "refY",
  "repeatCount",
  "repeatDur",
  "requiredExtensions",
  "requiredFeatures",
  "specularConstant",
  "specularExponent",
  "spreadMethod",
  "startOffset",
  "stdDeviation",
  "stitchTiles",
  "surfaceScale",
  "systemLanguage",
  "tableValues",
  "targetX",
  "targetY",
  "textLength",
  "viewBox",
  "viewTarget",
  "xChannelSelector",
  "yChannelSelector",
  "zoomAndPan"
].map((attr3) => [attr3.toLowerCase(), attr3]));
var XML_ATTRS_ADJUSTMENT_MAP = /* @__PURE__ */ new Map([
  ["xlink:actuate", { prefix: "xlink", name: "actuate", namespace: NS.XLINK }],
  ["xlink:arcrole", { prefix: "xlink", name: "arcrole", namespace: NS.XLINK }],
  ["xlink:href", { prefix: "xlink", name: "href", namespace: NS.XLINK }],
  ["xlink:role", { prefix: "xlink", name: "role", namespace: NS.XLINK }],
  ["xlink:show", { prefix: "xlink", name: "show", namespace: NS.XLINK }],
  ["xlink:title", { prefix: "xlink", name: "title", namespace: NS.XLINK }],
  ["xlink:type", { prefix: "xlink", name: "type", namespace: NS.XLINK }],
  ["xml:base", { prefix: "xml", name: "base", namespace: NS.XML }],
  ["xml:lang", { prefix: "xml", name: "lang", namespace: NS.XML }],
  ["xml:space", { prefix: "xml", name: "space", namespace: NS.XML }],
  ["xmlns", { prefix: "", name: "xmlns", namespace: NS.XMLNS }],
  ["xmlns:xlink", { prefix: "xmlns", name: "xlink", namespace: NS.XMLNS }]
]);
var SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "textPath"
].map((tn3) => [tn3.toLowerCase(), tn3]));
var EXITS_FOREIGN_CONTENT = /* @__PURE__ */ new Set([
  TAG_ID.B,
  TAG_ID.BIG,
  TAG_ID.BLOCKQUOTE,
  TAG_ID.BODY,
  TAG_ID.BR,
  TAG_ID.CENTER,
  TAG_ID.CODE,
  TAG_ID.DD,
  TAG_ID.DIV,
  TAG_ID.DL,
  TAG_ID.DT,
  TAG_ID.EM,
  TAG_ID.EMBED,
  TAG_ID.H1,
  TAG_ID.H2,
  TAG_ID.H3,
  TAG_ID.H4,
  TAG_ID.H5,
  TAG_ID.H6,
  TAG_ID.HEAD,
  TAG_ID.HR,
  TAG_ID.I,
  TAG_ID.IMG,
  TAG_ID.LI,
  TAG_ID.LISTING,
  TAG_ID.MENU,
  TAG_ID.META,
  TAG_ID.NOBR,
  TAG_ID.OL,
  TAG_ID.P,
  TAG_ID.PRE,
  TAG_ID.RUBY,
  TAG_ID.S,
  TAG_ID.SMALL,
  TAG_ID.SPAN,
  TAG_ID.STRONG,
  TAG_ID.STRIKE,
  TAG_ID.SUB,
  TAG_ID.SUP,
  TAG_ID.TABLE,
  TAG_ID.TT,
  TAG_ID.U,
  TAG_ID.UL,
  TAG_ID.VAR
]);
function causesExit(startTagToken) {
  const tn3 = startTagToken.tagID;
  const isFontWithAttrs = tn3 === TAG_ID.FONT && startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);
  return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn3);
}
function adjustTokenMathMLAttrs(token) {
  for (let i = 0; i < token.attrs.length; i++) {
    if (token.attrs[i].name === DEFINITION_URL_ATTR) {
      token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
      break;
    }
  }
}
function adjustTokenSVGAttrs(token) {
  for (let i = 0; i < token.attrs.length; i++) {
    const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
    if (adjustedAttrName != null) {
      token.attrs[i].name = adjustedAttrName;
    }
  }
}
function adjustTokenXMLAttrs(token) {
  for (let i = 0; i < token.attrs.length; i++) {
    const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
    if (adjustedAttrEntry) {
      token.attrs[i].prefix = adjustedAttrEntry.prefix;
      token.attrs[i].name = adjustedAttrEntry.name;
      token.attrs[i].namespace = adjustedAttrEntry.namespace;
    }
  }
}
function adjustTokenSVGTagName(token) {
  const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);
  if (adjustedTagName != null) {
    token.tagName = adjustedTagName;
    token.tagID = getTagID(token.tagName);
  }
}
function isMathMLTextIntegrationPoint(tn3, ns2) {
  return ns2 === NS.MATHML && (tn3 === TAG_ID.MI || tn3 === TAG_ID.MO || tn3 === TAG_ID.MN || tn3 === TAG_ID.MS || tn3 === TAG_ID.MTEXT);
}
function isHtmlIntegrationPoint(tn3, ns2, attrs) {
  if (ns2 === NS.MATHML && tn3 === TAG_ID.ANNOTATION_XML) {
    for (let i = 0; i < attrs.length; i++) {
      if (attrs[i].name === ATTRS.ENCODING) {
        const value = attrs[i].value.toLowerCase();
        return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
      }
    }
  }
  return ns2 === NS.SVG && (tn3 === TAG_ID.FOREIGN_OBJECT || tn3 === TAG_ID.DESC || tn3 === TAG_ID.TITLE);
}
function isIntegrationPoint(tn3, ns2, attrs, foreignNS) {
  return (!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn3, ns2, attrs) || (!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn3, ns2);
}

// node_modules/parse5/dist/parser/index.js
var HIDDEN_INPUT_TYPE = "hidden";
var AA_OUTER_LOOP_ITER = 8;
var AA_INNER_LOOP_ITER = 3;
var InsertionMode;
(function(InsertionMode2) {
  InsertionMode2[InsertionMode2["INITIAL"] = 0] = "INITIAL";
  InsertionMode2[InsertionMode2["BEFORE_HTML"] = 1] = "BEFORE_HTML";
  InsertionMode2[InsertionMode2["BEFORE_HEAD"] = 2] = "BEFORE_HEAD";
  InsertionMode2[InsertionMode2["IN_HEAD"] = 3] = "IN_HEAD";
  InsertionMode2[InsertionMode2["IN_HEAD_NO_SCRIPT"] = 4] = "IN_HEAD_NO_SCRIPT";
  InsertionMode2[InsertionMode2["AFTER_HEAD"] = 5] = "AFTER_HEAD";
  InsertionMode2[InsertionMode2["IN_BODY"] = 6] = "IN_BODY";
  InsertionMode2[InsertionMode2["TEXT"] = 7] = "TEXT";
  InsertionMode2[InsertionMode2["IN_TABLE"] = 8] = "IN_TABLE";
  InsertionMode2[InsertionMode2["IN_TABLE_TEXT"] = 9] = "IN_TABLE_TEXT";
  InsertionMode2[InsertionMode2["IN_CAPTION"] = 10] = "IN_CAPTION";
  InsertionMode2[InsertionMode2["IN_COLUMN_GROUP"] = 11] = "IN_COLUMN_GROUP";
  InsertionMode2[InsertionMode2["IN_TABLE_BODY"] = 12] = "IN_TABLE_BODY";
  InsertionMode2[InsertionMode2["IN_ROW"] = 13] = "IN_ROW";
  InsertionMode2[InsertionMode2["IN_CELL"] = 14] = "IN_CELL";
  InsertionMode2[InsertionMode2["IN_SELECT"] = 15] = "IN_SELECT";
  InsertionMode2[InsertionMode2["IN_SELECT_IN_TABLE"] = 16] = "IN_SELECT_IN_TABLE";
  InsertionMode2[InsertionMode2["IN_TEMPLATE"] = 17] = "IN_TEMPLATE";
  InsertionMode2[InsertionMode2["AFTER_BODY"] = 18] = "AFTER_BODY";
  InsertionMode2[InsertionMode2["IN_FRAMESET"] = 19] = "IN_FRAMESET";
  InsertionMode2[InsertionMode2["AFTER_FRAMESET"] = 20] = "AFTER_FRAMESET";
  InsertionMode2[InsertionMode2["AFTER_AFTER_BODY"] = 21] = "AFTER_AFTER_BODY";
  InsertionMode2[InsertionMode2["AFTER_AFTER_FRAMESET"] = 22] = "AFTER_AFTER_FRAMESET";
})(InsertionMode || (InsertionMode = {}));
var BASE_LOC = {
  startLine: -1,
  startCol: -1,
  startOffset: -1,
  endLine: -1,
  endCol: -1,
  endOffset: -1
};
var TABLE_STRUCTURE_TAGS = /* @__PURE__ */ new Set([TAG_ID.TABLE, TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TR]);
var defaultParserOptions = {
  scriptingEnabled: true,
  sourceCodeLocationInfo: false,
  treeAdapter: defaultTreeAdapter,
  onParseError: null
};
var Parser = class {
  constructor(options, document2, fragmentContext = null, scriptHandler = null) {
    this.fragmentContext = fragmentContext;
    this.scriptHandler = scriptHandler;
    this.currentToken = null;
    this.stopped = false;
    this.insertionMode = InsertionMode.INITIAL;
    this.originalInsertionMode = InsertionMode.INITIAL;
    this.headElement = null;
    this.formElement = null;
    this.currentNotInHTML = false;
    this.tmplInsertionModeStack = [];
    this.pendingCharacterTokens = [];
    this.hasNonWhitespacePendingCharacterToken = false;
    this.framesetOk = true;
    this.skipNextNewLine = false;
    this.fosterParentingEnabled = false;
    this.options = {
      ...defaultParserOptions,
      ...options
    };
    this.treeAdapter = this.options.treeAdapter;
    this.onParseError = this.options.onParseError;
    if (this.onParseError) {
      this.options.sourceCodeLocationInfo = true;
    }
    this.document = document2 !== null && document2 !== void 0 ? document2 : this.treeAdapter.createDocument();
    this.tokenizer = new Tokenizer(this.options, this);
    this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
    this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : TAG_ID.UNKNOWN;
    this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);
    this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);
  }
  // API
  static parse(html3, options) {
    const parser = new this(options);
    parser.tokenizer.write(html3, true);
    return parser.document;
  }
  static getFragmentParser(fragmentContext, options) {
    const opts = {
      ...defaultParserOptions,
      ...options
    };
    fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : fragmentContext = opts.treeAdapter.createElement(TAG_NAMES.TEMPLATE, NS.HTML, []);
    const documentMock = opts.treeAdapter.createElement("documentmock", NS.HTML, []);
    const parser = new this(opts, documentMock, fragmentContext);
    if (parser.fragmentContextID === TAG_ID.TEMPLATE) {
      parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
    }
    parser._initTokenizerForFragmentParsing();
    parser._insertFakeRootElement();
    parser._resetInsertionMode();
    parser._findFormInFragmentContext();
    return parser;
  }
  getFragment() {
    const rootElement = this.treeAdapter.getFirstChild(this.document);
    const fragment = this.treeAdapter.createDocumentFragment();
    this._adoptNodes(rootElement, fragment);
    return fragment;
  }
  //Errors
  _err(token, code, beforeToken) {
    var _a3;
    if (!this.onParseError)
      return;
    const loc = (_a3 = token.location) !== null && _a3 !== void 0 ? _a3 : BASE_LOC;
    const err = {
      code,
      startLine: loc.startLine,
      startCol: loc.startCol,
      startOffset: loc.startOffset,
      endLine: beforeToken ? loc.startLine : loc.endLine,
      endCol: beforeToken ? loc.startCol : loc.endCol,
      endOffset: beforeToken ? loc.startOffset : loc.endOffset
    };
    this.onParseError(err);
  }
  //Stack events
  onItemPush(node, tid, isTop) {
    var _a3, _b;
    (_b = (_a3 = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a3, node);
    if (isTop && this.openElements.stackTop > 0)
      this._setContextModes(node, tid);
  }
  onItemPop(node, isTop) {
    var _a3, _b;
    if (this.options.sourceCodeLocationInfo) {
      this._setEndLocation(node, this.currentToken);
    }
    (_b = (_a3 = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a3, node, this.openElements.current);
    if (isTop) {
      let current;
      let currentTagId;
      if (this.openElements.stackTop === 0 && this.fragmentContext) {
        current = this.fragmentContext;
        currentTagId = this.fragmentContextID;
      } else {
        ({ current, currentTagId } = this.openElements);
      }
      this._setContextModes(current, currentTagId);
    }
  }
  _setContextModes(current, tid) {
    const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;
    this.currentNotInHTML = !isHTML;
    this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);
  }
  _switchToTextParsing(currentToken, nextTokenizerState) {
    this._insertElement(currentToken, NS.HTML);
    this.tokenizer.state = nextTokenizerState;
    this.originalInsertionMode = this.insertionMode;
    this.insertionMode = InsertionMode.TEXT;
  }
  switchToPlaintextParsing() {
    this.insertionMode = InsertionMode.TEXT;
    this.originalInsertionMode = InsertionMode.IN_BODY;
    this.tokenizer.state = TokenizerMode.PLAINTEXT;
  }
  //Fragment parsing
  _getAdjustedCurrentElement() {
    return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
  }
  _findFormInFragmentContext() {
    let node = this.fragmentContext;
    while (node) {
      if (this.treeAdapter.getTagName(node) === TAG_NAMES.FORM) {
        this.formElement = node;
        break;
      }
      node = this.treeAdapter.getParentNode(node);
    }
  }
  _initTokenizerForFragmentParsing() {
    if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {
      return;
    }
    switch (this.fragmentContextID) {
      case TAG_ID.TITLE:
      case TAG_ID.TEXTAREA: {
        this.tokenizer.state = TokenizerMode.RCDATA;
        break;
      }
      case TAG_ID.STYLE:
      case TAG_ID.XMP:
      case TAG_ID.IFRAME:
      case TAG_ID.NOEMBED:
      case TAG_ID.NOFRAMES:
      case TAG_ID.NOSCRIPT: {
        this.tokenizer.state = TokenizerMode.RAWTEXT;
        break;
      }
      case TAG_ID.SCRIPT: {
        this.tokenizer.state = TokenizerMode.SCRIPT_DATA;
        break;
      }
      case TAG_ID.PLAINTEXT: {
        this.tokenizer.state = TokenizerMode.PLAINTEXT;
        break;
      }
      default:
    }
  }
  //Tree mutation
  _setDocumentType(token) {
    const name = token.name || "";
    const publicId = token.publicId || "";
    const systemId = token.systemId || "";
    this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
    if (token.location) {
      const documentChildren = this.treeAdapter.getChildNodes(this.document);
      const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));
      if (docTypeNode) {
        this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);
      }
    }
  }
  _attachElementToTree(element2, location) {
    if (this.options.sourceCodeLocationInfo) {
      const loc = location && {
        ...location,
        startTag: location
      };
      this.treeAdapter.setNodeSourceCodeLocation(element2, loc);
    }
    if (this._shouldFosterParentOnInsertion()) {
      this._fosterParentElement(element2);
    } else {
      const parent2 = this.openElements.currentTmplContentOrNode;
      this.treeAdapter.appendChild(parent2, element2);
    }
  }
  _appendElement(token, namespaceURI) {
    const element2 = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
    this._attachElementToTree(element2, token.location);
  }
  _insertElement(token, namespaceURI) {
    const element2 = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
    this._attachElementToTree(element2, token.location);
    this.openElements.push(element2, token.tagID);
  }
  _insertFakeElement(tagName, tagID) {
    const element2 = this.treeAdapter.createElement(tagName, NS.HTML, []);
    this._attachElementToTree(element2, null);
    this.openElements.push(element2, tagID);
  }
  _insertTemplate(token) {
    const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
    const content = this.treeAdapter.createDocumentFragment();
    this.treeAdapter.setTemplateContent(tmpl, content);
    this._attachElementToTree(tmpl, token.location);
    this.openElements.push(tmpl, token.tagID);
    if (this.options.sourceCodeLocationInfo)
      this.treeAdapter.setNodeSourceCodeLocation(content, null);
  }
  _insertFakeRootElement() {
    const element2 = this.treeAdapter.createElement(TAG_NAMES.HTML, NS.HTML, []);
    if (this.options.sourceCodeLocationInfo)
      this.treeAdapter.setNodeSourceCodeLocation(element2, null);
    this.treeAdapter.appendChild(this.openElements.current, element2);
    this.openElements.push(element2, TAG_ID.HTML);
  }
  _appendCommentNode(token, parent2) {
    const commentNode = this.treeAdapter.createCommentNode(token.data);
    this.treeAdapter.appendChild(parent2, commentNode);
    if (this.options.sourceCodeLocationInfo) {
      this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
    }
  }
  _insertCharacters(token) {
    let parent2;
    let beforeElement;
    if (this._shouldFosterParentOnInsertion()) {
      ({ parent: parent2, beforeElement } = this._findFosterParentingLocation());
      if (beforeElement) {
        this.treeAdapter.insertTextBefore(parent2, token.chars, beforeElement);
      } else {
        this.treeAdapter.insertText(parent2, token.chars);
      }
    } else {
      parent2 = this.openElements.currentTmplContentOrNode;
      this.treeAdapter.insertText(parent2, token.chars);
    }
    if (!token.location)
      return;
    const siblings2 = this.treeAdapter.getChildNodes(parent2);
    const textNodeIdx = beforeElement ? siblings2.lastIndexOf(beforeElement) : siblings2.length;
    const textNode = siblings2[textNodeIdx - 1];
    const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
    if (tnLoc) {
      const { endLine, endCol, endOffset } = token.location;
      this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
    } else if (this.options.sourceCodeLocationInfo) {
      this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
    }
  }
  _adoptNodes(donor, recipient) {
    for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
      this.treeAdapter.detachNode(child);
      this.treeAdapter.appendChild(recipient, child);
    }
  }
  _setEndLocation(element2, closingToken) {
    if (this.treeAdapter.getNodeSourceCodeLocation(element2) && closingToken.location) {
      const ctLoc = closingToken.location;
      const tn3 = this.treeAdapter.getTagName(element2);
      const endLoc = (
        // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
        // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.
        closingToken.type === TokenType.END_TAG && tn3 === closingToken.tagName ? {
          endTag: { ...ctLoc },
          endLine: ctLoc.endLine,
          endCol: ctLoc.endCol,
          endOffset: ctLoc.endOffset
        } : {
          endLine: ctLoc.startLine,
          endCol: ctLoc.startCol,
          endOffset: ctLoc.startOffset
        }
      );
      this.treeAdapter.updateNodeSourceCodeLocation(element2, endLoc);
    }
  }
  //Token processing
  shouldProcessStartTagTokenInForeignContent(token) {
    if (!this.currentNotInHTML)
      return false;
    let current;
    let currentTagId;
    if (this.openElements.stackTop === 0 && this.fragmentContext) {
      current = this.fragmentContext;
      currentTagId = this.fragmentContextID;
    } else {
      ({ current, currentTagId } = this.openElements);
    }
    if (token.tagID === TAG_ID.SVG && this.treeAdapter.getTagName(current) === TAG_NAMES.ANNOTATION_XML && this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {
      return false;
    }
    return (
      // Check that `current` is not an integration point for HTML or MathML elements.
      this.tokenizer.inForeignNode || // If it _is_ an integration point, then we might have to check that it is not an HTML
      // integration point.
      (token.tagID === TAG_ID.MGLYPH || token.tagID === TAG_ID.MALIGNMARK) && !this._isIntegrationPoint(currentTagId, current, NS.HTML)
    );
  }
  _processToken(token) {
    switch (token.type) {
      case TokenType.CHARACTER: {
        this.onCharacter(token);
        break;
      }
      case TokenType.NULL_CHARACTER: {
        this.onNullCharacter(token);
        break;
      }
      case TokenType.COMMENT: {
        this.onComment(token);
        break;
      }
      case TokenType.DOCTYPE: {
        this.onDoctype(token);
        break;
      }
      case TokenType.START_TAG: {
        this._processStartTag(token);
        break;
      }
      case TokenType.END_TAG: {
        this.onEndTag(token);
        break;
      }
      case TokenType.EOF: {
        this.onEof(token);
        break;
      }
      case TokenType.WHITESPACE_CHARACTER: {
        this.onWhitespaceCharacter(token);
        break;
      }
    }
  }
  //Integration points
  _isIntegrationPoint(tid, element2, foreignNS) {
    const ns2 = this.treeAdapter.getNamespaceURI(element2);
    const attrs = this.treeAdapter.getAttrList(element2);
    return isIntegrationPoint(tid, ns2, attrs, foreignNS);
  }
  //Active formatting elements reconstruction
  _reconstructActiveFormattingElements() {
    const listLength = this.activeFormattingElements.entries.length;
    if (listLength) {
      const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));
      const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;
      for (let i = unopenIdx; i >= 0; i--) {
        const entry = this.activeFormattingElements.entries[i];
        this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
        entry.element = this.openElements.current;
      }
    }
  }
  //Close elements
  _closeTableCell() {
    this.openElements.generateImpliedEndTags();
    this.openElements.popUntilTableCellPopped();
    this.activeFormattingElements.clearToLastMarker();
    this.insertionMode = InsertionMode.IN_ROW;
  }
  _closePElement() {
    this.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.P);
    this.openElements.popUntilTagNamePopped(TAG_ID.P);
  }
  //Insertion modes
  _resetInsertionMode() {
    for (let i = this.openElements.stackTop; i >= 0; i--) {
      switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {
        case TAG_ID.TR: {
          this.insertionMode = InsertionMode.IN_ROW;
          return;
        }
        case TAG_ID.TBODY:
        case TAG_ID.THEAD:
        case TAG_ID.TFOOT: {
          this.insertionMode = InsertionMode.IN_TABLE_BODY;
          return;
        }
        case TAG_ID.CAPTION: {
          this.insertionMode = InsertionMode.IN_CAPTION;
          return;
        }
        case TAG_ID.COLGROUP: {
          this.insertionMode = InsertionMode.IN_COLUMN_GROUP;
          return;
        }
        case TAG_ID.TABLE: {
          this.insertionMode = InsertionMode.IN_TABLE;
          return;
        }
        case TAG_ID.BODY: {
          this.insertionMode = InsertionMode.IN_BODY;
          return;
        }
        case TAG_ID.FRAMESET: {
          this.insertionMode = InsertionMode.IN_FRAMESET;
          return;
        }
        case TAG_ID.SELECT: {
          this._resetInsertionModeForSelect(i);
          return;
        }
        case TAG_ID.TEMPLATE: {
          this.insertionMode = this.tmplInsertionModeStack[0];
          return;
        }
        case TAG_ID.HTML: {
          this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;
          return;
        }
        case TAG_ID.TD:
        case TAG_ID.TH: {
          if (i > 0) {
            this.insertionMode = InsertionMode.IN_CELL;
            return;
          }
          break;
        }
        case TAG_ID.HEAD: {
          if (i > 0) {
            this.insertionMode = InsertionMode.IN_HEAD;
            return;
          }
          break;
        }
      }
    }
    this.insertionMode = InsertionMode.IN_BODY;
  }
  _resetInsertionModeForSelect(selectIdx) {
    if (selectIdx > 0) {
      for (let i = selectIdx - 1; i > 0; i--) {
        const tn3 = this.openElements.tagIDs[i];
        if (tn3 === TAG_ID.TEMPLATE) {
          break;
        } else if (tn3 === TAG_ID.TABLE) {
          this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;
          return;
        }
      }
    }
    this.insertionMode = InsertionMode.IN_SELECT;
  }
  //Foster parenting
  _isElementCausesFosterParenting(tn3) {
    return TABLE_STRUCTURE_TAGS.has(tn3);
  }
  _shouldFosterParentOnInsertion() {
    return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);
  }
  _findFosterParentingLocation() {
    for (let i = this.openElements.stackTop; i >= 0; i--) {
      const openElement = this.openElements.items[i];
      switch (this.openElements.tagIDs[i]) {
        case TAG_ID.TEMPLATE: {
          if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {
            return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };
          }
          break;
        }
        case TAG_ID.TABLE: {
          const parent2 = this.treeAdapter.getParentNode(openElement);
          if (parent2) {
            return { parent: parent2, beforeElement: openElement };
          }
          return { parent: this.openElements.items[i - 1], beforeElement: null };
        }
        default:
      }
    }
    return { parent: this.openElements.items[0], beforeElement: null };
  }
  _fosterParentElement(element2) {
    const location = this._findFosterParentingLocation();
    if (location.beforeElement) {
      this.treeAdapter.insertBefore(location.parent, element2, location.beforeElement);
    } else {
      this.treeAdapter.appendChild(location.parent, element2);
    }
  }
  //Special elements
  _isSpecialElement(element2, id) {
    const ns2 = this.treeAdapter.getNamespaceURI(element2);
    return SPECIAL_ELEMENTS[ns2].has(id);
  }
  onCharacter(token) {
    this.skipNextNewLine = false;
    if (this.tokenizer.inForeignNode) {
      characterInForeignContent(this, token);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        tokenBeforeHtml(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        tokenBeforeHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD: {
        tokenInHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        tokenInHeadNoScript(this, token);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        tokenAfterHead(this, token);
        break;
      }
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_TEMPLATE: {
        characterInBody(this, token);
        break;
      }
      case InsertionMode.TEXT:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE: {
        this._insertCharacters(token);
        break;
      }
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW: {
        characterInTable(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        characterInTableText(this, token);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        tokenInColumnGroup(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        tokenAfterBody(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        tokenAfterAfterBody(this, token);
        break;
      }
      default:
    }
  }
  onNullCharacter(token) {
    this.skipNextNewLine = false;
    if (this.tokenizer.inForeignNode) {
      nullCharacterInForeignContent(this, token);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        tokenBeforeHtml(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        tokenBeforeHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD: {
        tokenInHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        tokenInHeadNoScript(this, token);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        tokenAfterHead(this, token);
        break;
      }
      case InsertionMode.TEXT: {
        this._insertCharacters(token);
        break;
      }
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW: {
        characterInTable(this, token);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        tokenInColumnGroup(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        tokenAfterBody(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        tokenAfterAfterBody(this, token);
        break;
      }
      default:
    }
  }
  onComment(token) {
    this.skipNextNewLine = false;
    if (this.currentNotInHTML) {
      appendComment(this, token);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.INITIAL:
      case InsertionMode.BEFORE_HTML:
      case InsertionMode.BEFORE_HEAD:
      case InsertionMode.IN_HEAD:
      case InsertionMode.IN_HEAD_NO_SCRIPT:
      case InsertionMode.AFTER_HEAD:
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_COLUMN_GROUP:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE:
      case InsertionMode.IN_TEMPLATE:
      case InsertionMode.IN_FRAMESET:
      case InsertionMode.AFTER_FRAMESET: {
        appendComment(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        appendCommentToRootHtmlElement(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY:
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        appendCommentToDocument(this, token);
        break;
      }
      default:
    }
  }
  onDoctype(token) {
    this.skipNextNewLine = false;
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        doctypeInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD:
      case InsertionMode.IN_HEAD:
      case InsertionMode.IN_HEAD_NO_SCRIPT:
      case InsertionMode.AFTER_HEAD: {
        this._err(token, ERR.misplacedDoctype);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token);
        break;
      }
      default:
    }
  }
  onStartTag(token) {
    this.skipNextNewLine = false;
    this.currentToken = token;
    this._processStartTag(token);
    if (token.selfClosing && !token.ackSelfClosing) {
      this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
    }
  }
  /**
   * Processes a given start tag.
   *
   * `onStartTag` checks if a self-closing tag was recognized. When a token
   * is moved inbetween multiple insertion modes, this check for self-closing
   * could lead to false positives. To avoid this, `_processStartTag` is used
   * for nested calls.
   *
   * @param token The token to process.
   */
  _processStartTag(token) {
    if (this.shouldProcessStartTagTokenInForeignContent(token)) {
      startTagInForeignContent(this, token);
    } else {
      this._startTagOutsideForeignContent(token);
    }
  }
  _startTagOutsideForeignContent(token) {
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        startTagBeforeHtml(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        startTagBeforeHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD: {
        startTagInHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        startTagInHeadNoScript(this, token);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        startTagAfterHead(this, token);
        break;
      }
      case InsertionMode.IN_BODY: {
        startTagInBody(this, token);
        break;
      }
      case InsertionMode.IN_TABLE: {
        startTagInTable(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token);
        break;
      }
      case InsertionMode.IN_CAPTION: {
        startTagInCaption(this, token);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        startTagInColumnGroup(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_BODY: {
        startTagInTableBody(this, token);
        break;
      }
      case InsertionMode.IN_ROW: {
        startTagInRow(this, token);
        break;
      }
      case InsertionMode.IN_CELL: {
        startTagInCell(this, token);
        break;
      }
      case InsertionMode.IN_SELECT: {
        startTagInSelect(this, token);
        break;
      }
      case InsertionMode.IN_SELECT_IN_TABLE: {
        startTagInSelectInTable(this, token);
        break;
      }
      case InsertionMode.IN_TEMPLATE: {
        startTagInTemplate(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        startTagAfterBody(this, token);
        break;
      }
      case InsertionMode.IN_FRAMESET: {
        startTagInFrameset(this, token);
        break;
      }
      case InsertionMode.AFTER_FRAMESET: {
        startTagAfterFrameset(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        startTagAfterAfterBody(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        startTagAfterAfterFrameset(this, token);
        break;
      }
      default:
    }
  }
  onEndTag(token) {
    this.skipNextNewLine = false;
    this.currentToken = token;
    if (this.currentNotInHTML) {
      endTagInForeignContent(this, token);
    } else {
      this._endTagOutsideForeignContent(token);
    }
  }
  _endTagOutsideForeignContent(token) {
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        endTagBeforeHtml(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        endTagBeforeHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD: {
        endTagInHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        endTagInHeadNoScript(this, token);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        endTagAfterHead(this, token);
        break;
      }
      case InsertionMode.IN_BODY: {
        endTagInBody(this, token);
        break;
      }
      case InsertionMode.TEXT: {
        endTagInText(this, token);
        break;
      }
      case InsertionMode.IN_TABLE: {
        endTagInTable(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token);
        break;
      }
      case InsertionMode.IN_CAPTION: {
        endTagInCaption(this, token);
        break;
      }
      case InsertionMode.IN_COLUMN_GROUP: {
        endTagInColumnGroup(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_BODY: {
        endTagInTableBody(this, token);
        break;
      }
      case InsertionMode.IN_ROW: {
        endTagInRow(this, token);
        break;
      }
      case InsertionMode.IN_CELL: {
        endTagInCell(this, token);
        break;
      }
      case InsertionMode.IN_SELECT: {
        endTagInSelect(this, token);
        break;
      }
      case InsertionMode.IN_SELECT_IN_TABLE: {
        endTagInSelectInTable(this, token);
        break;
      }
      case InsertionMode.IN_TEMPLATE: {
        endTagInTemplate(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY: {
        endTagAfterBody(this, token);
        break;
      }
      case InsertionMode.IN_FRAMESET: {
        endTagInFrameset(this, token);
        break;
      }
      case InsertionMode.AFTER_FRAMESET: {
        endTagAfterFrameset(this, token);
        break;
      }
      case InsertionMode.AFTER_AFTER_BODY: {
        tokenAfterAfterBody(this, token);
        break;
      }
      default:
    }
  }
  onEof(token) {
    switch (this.insertionMode) {
      case InsertionMode.INITIAL: {
        tokenInInitialMode(this, token);
        break;
      }
      case InsertionMode.BEFORE_HTML: {
        tokenBeforeHtml(this, token);
        break;
      }
      case InsertionMode.BEFORE_HEAD: {
        tokenBeforeHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD: {
        tokenInHead(this, token);
        break;
      }
      case InsertionMode.IN_HEAD_NO_SCRIPT: {
        tokenInHeadNoScript(this, token);
        break;
      }
      case InsertionMode.AFTER_HEAD: {
        tokenAfterHead(this, token);
        break;
      }
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_COLUMN_GROUP:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE: {
        eofInBody(this, token);
        break;
      }
      case InsertionMode.TEXT: {
        eofInText(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        tokenInTableText(this, token);
        break;
      }
      case InsertionMode.IN_TEMPLATE: {
        eofInTemplate(this, token);
        break;
      }
      case InsertionMode.AFTER_BODY:
      case InsertionMode.IN_FRAMESET:
      case InsertionMode.AFTER_FRAMESET:
      case InsertionMode.AFTER_AFTER_BODY:
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        stopParsing(this, token);
        break;
      }
      default:
    }
  }
  onWhitespaceCharacter(token) {
    if (this.skipNextNewLine) {
      this.skipNextNewLine = false;
      if (token.chars.charCodeAt(0) === CODE_POINTS.LINE_FEED) {
        if (token.chars.length === 1) {
          return;
        }
        token.chars = token.chars.substr(1);
      }
    }
    if (this.tokenizer.inForeignNode) {
      this._insertCharacters(token);
      return;
    }
    switch (this.insertionMode) {
      case InsertionMode.IN_HEAD:
      case InsertionMode.IN_HEAD_NO_SCRIPT:
      case InsertionMode.AFTER_HEAD:
      case InsertionMode.TEXT:
      case InsertionMode.IN_COLUMN_GROUP:
      case InsertionMode.IN_SELECT:
      case InsertionMode.IN_SELECT_IN_TABLE:
      case InsertionMode.IN_FRAMESET:
      case InsertionMode.AFTER_FRAMESET: {
        this._insertCharacters(token);
        break;
      }
      case InsertionMode.IN_BODY:
      case InsertionMode.IN_CAPTION:
      case InsertionMode.IN_CELL:
      case InsertionMode.IN_TEMPLATE:
      case InsertionMode.AFTER_BODY:
      case InsertionMode.AFTER_AFTER_BODY:
      case InsertionMode.AFTER_AFTER_FRAMESET: {
        whitespaceCharacterInBody(this, token);
        break;
      }
      case InsertionMode.IN_TABLE:
      case InsertionMode.IN_TABLE_BODY:
      case InsertionMode.IN_ROW: {
        characterInTable(this, token);
        break;
      }
      case InsertionMode.IN_TABLE_TEXT: {
        whitespaceCharacterInTableText(this, token);
        break;
      }
      default:
    }
  }
};
function aaObtainFormattingElementEntry(p, token) {
  let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
  if (formattingElementEntry) {
    if (!p.openElements.contains(formattingElementEntry.element)) {
      p.activeFormattingElements.removeEntry(formattingElementEntry);
      formattingElementEntry = null;
    } else if (!p.openElements.hasInScope(token.tagID)) {
      formattingElementEntry = null;
    }
  } else {
    genericEndTagInBody(p, token);
  }
  return formattingElementEntry;
}
function aaObtainFurthestBlock(p, formattingElementEntry) {
  let furthestBlock = null;
  let idx = p.openElements.stackTop;
  for (; idx >= 0; idx--) {
    const element2 = p.openElements.items[idx];
    if (element2 === formattingElementEntry.element) {
      break;
    }
    if (p._isSpecialElement(element2, p.openElements.tagIDs[idx])) {
      furthestBlock = element2;
    }
  }
  if (!furthestBlock) {
    p.openElements.shortenToLength(idx < 0 ? 0 : idx);
    p.activeFormattingElements.removeEntry(formattingElementEntry);
  }
  return furthestBlock;
}
function aaInnerLoop(p, furthestBlock, formattingElement) {
  let lastElement = furthestBlock;
  let nextElement = p.openElements.getCommonAncestor(furthestBlock);
  for (let i = 0, element2 = nextElement; element2 !== formattingElement; i++, element2 = nextElement) {
    nextElement = p.openElements.getCommonAncestor(element2);
    const elementEntry = p.activeFormattingElements.getElementEntry(element2);
    const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
    const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
    if (shouldRemoveFromOpenElements) {
      if (counterOverflow) {
        p.activeFormattingElements.removeEntry(elementEntry);
      }
      p.openElements.remove(element2);
    } else {
      element2 = aaRecreateElementFromEntry(p, elementEntry);
      if (lastElement === furthestBlock) {
        p.activeFormattingElements.bookmark = elementEntry;
      }
      p.treeAdapter.detachNode(lastElement);
      p.treeAdapter.appendChild(element2, lastElement);
      lastElement = element2;
    }
  }
  return lastElement;
}
function aaRecreateElementFromEntry(p, elementEntry) {
  const ns2 = p.treeAdapter.getNamespaceURI(elementEntry.element);
  const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns2, elementEntry.token.attrs);
  p.openElements.replace(elementEntry.element, newElement);
  elementEntry.element = newElement;
  return newElement;
}
function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
  const tn3 = p.treeAdapter.getTagName(commonAncestor);
  const tid = getTagID(tn3);
  if (p._isElementCausesFosterParenting(tid)) {
    p._fosterParentElement(lastElement);
  } else {
    const ns2 = p.treeAdapter.getNamespaceURI(commonAncestor);
    if (tid === TAG_ID.TEMPLATE && ns2 === NS.HTML) {
      commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
    }
    p.treeAdapter.appendChild(commonAncestor, lastElement);
  }
}
function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
  const ns2 = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
  const { token } = formattingElementEntry;
  const newElement = p.treeAdapter.createElement(token.tagName, ns2, token.attrs);
  p._adoptNodes(furthestBlock, newElement);
  p.treeAdapter.appendChild(furthestBlock, newElement);
  p.activeFormattingElements.insertElementAfterBookmark(newElement, token);
  p.activeFormattingElements.removeEntry(formattingElementEntry);
  p.openElements.remove(formattingElementEntry.element);
  p.openElements.insertAfter(furthestBlock, newElement, token.tagID);
}
function callAdoptionAgency(p, token) {
  for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
    const formattingElementEntry = aaObtainFormattingElementEntry(p, token);
    if (!formattingElementEntry) {
      break;
    }
    const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
    if (!furthestBlock) {
      break;
    }
    p.activeFormattingElements.bookmark = formattingElementEntry;
    const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
    const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
    p.treeAdapter.detachNode(lastElement);
    if (commonAncestor)
      aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
    aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
  }
}
function appendComment(p, token) {
  p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);
}
function appendCommentToRootHtmlElement(p, token) {
  p._appendCommentNode(token, p.openElements.items[0]);
}
function appendCommentToDocument(p, token) {
  p._appendCommentNode(token, p.document);
}
function stopParsing(p, token) {
  p.stopped = true;
  if (token.location) {
    const target = p.fragmentContext ? 0 : 2;
    for (let i = p.openElements.stackTop; i >= target; i--) {
      p._setEndLocation(p.openElements.items[i], token);
    }
    if (!p.fragmentContext && p.openElements.stackTop >= 0) {
      const htmlElement = p.openElements.items[0];
      const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);
      if (htmlLocation && !htmlLocation.endTag) {
        p._setEndLocation(htmlElement, token);
        if (p.openElements.stackTop >= 1) {
          const bodyElement = p.openElements.items[1];
          const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);
          if (bodyLocation && !bodyLocation.endTag) {
            p._setEndLocation(bodyElement, token);
          }
        }
      }
    }
  }
}
function doctypeInInitialMode(p, token) {
  p._setDocumentType(token);
  const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : getDocumentMode(token);
  if (!isConforming(token)) {
    p._err(token, ERR.nonConformingDoctype);
  }
  p.treeAdapter.setDocumentMode(p.document, mode);
  p.insertionMode = InsertionMode.BEFORE_HTML;
}
function tokenInInitialMode(p, token) {
  p._err(token, ERR.missingDoctype, true);
  p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);
  p.insertionMode = InsertionMode.BEFORE_HTML;
  p._processToken(token);
}
function startTagBeforeHtml(p, token) {
  if (token.tagID === TAG_ID.HTML) {
    p._insertElement(token, NS.HTML);
    p.insertionMode = InsertionMode.BEFORE_HEAD;
  } else {
    tokenBeforeHtml(p, token);
  }
}
function endTagBeforeHtml(p, token) {
  const tn3 = token.tagID;
  if (tn3 === TAG_ID.HTML || tn3 === TAG_ID.HEAD || tn3 === TAG_ID.BODY || tn3 === TAG_ID.BR) {
    tokenBeforeHtml(p, token);
  }
}
function tokenBeforeHtml(p, token) {
  p._insertFakeRootElement();
  p.insertionMode = InsertionMode.BEFORE_HEAD;
  p._processToken(token);
}
function startTagBeforeHead(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.HEAD: {
      p._insertElement(token, NS.HTML);
      p.headElement = p.openElements.current;
      p.insertionMode = InsertionMode.IN_HEAD;
      break;
    }
    default: {
      tokenBeforeHead(p, token);
    }
  }
}
function endTagBeforeHead(p, token) {
  const tn3 = token.tagID;
  if (tn3 === TAG_ID.HEAD || tn3 === TAG_ID.BODY || tn3 === TAG_ID.HTML || tn3 === TAG_ID.BR) {
    tokenBeforeHead(p, token);
  } else {
    p._err(token, ERR.endTagWithoutMatchingOpenElement);
  }
}
function tokenBeforeHead(p, token) {
  p._insertFakeElement(TAG_NAMES.HEAD, TAG_ID.HEAD);
  p.headElement = p.openElements.current;
  p.insertionMode = InsertionMode.IN_HEAD;
  p._processToken(token);
}
function startTagInHead(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.BASE:
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.LINK:
    case TAG_ID.META: {
      p._appendElement(token, NS.HTML);
      token.ackSelfClosing = true;
      break;
    }
    case TAG_ID.TITLE: {
      p._switchToTextParsing(token, TokenizerMode.RCDATA);
      break;
    }
    case TAG_ID.NOSCRIPT: {
      if (p.options.scriptingEnabled) {
        p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
      } else {
        p._insertElement(token, NS.HTML);
        p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;
      }
      break;
    }
    case TAG_ID.NOFRAMES:
    case TAG_ID.STYLE: {
      p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
      break;
    }
    case TAG_ID.SCRIPT: {
      p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);
      break;
    }
    case TAG_ID.TEMPLATE: {
      p._insertTemplate(token);
      p.activeFormattingElements.insertMarker();
      p.framesetOk = false;
      p.insertionMode = InsertionMode.IN_TEMPLATE;
      p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
      break;
    }
    case TAG_ID.HEAD: {
      p._err(token, ERR.misplacedStartTagForHeadElement);
      break;
    }
    default: {
      tokenInHead(p, token);
    }
  }
}
function endTagInHead(p, token) {
  switch (token.tagID) {
    case TAG_ID.HEAD: {
      p.openElements.pop();
      p.insertionMode = InsertionMode.AFTER_HEAD;
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.BR:
    case TAG_ID.HTML: {
      tokenInHead(p, token);
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    default: {
      p._err(token, ERR.endTagWithoutMatchingOpenElement);
    }
  }
}
function templateEndTagInHead(p, token) {
  if (p.openElements.tmplCount > 0) {
    p.openElements.generateImpliedEndTagsThoroughly();
    if (p.openElements.currentTagId !== TAG_ID.TEMPLATE) {
      p._err(token, ERR.closingOfElementWithOpenChildElements);
    }
    p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
    p.activeFormattingElements.clearToLastMarker();
    p.tmplInsertionModeStack.shift();
    p._resetInsertionMode();
  } else {
    p._err(token, ERR.endTagWithoutMatchingOpenElement);
  }
}
function tokenInHead(p, token) {
  p.openElements.pop();
  p.insertionMode = InsertionMode.AFTER_HEAD;
  p._processToken(token);
}
function startTagInHeadNoScript(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.HEAD:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.NOFRAMES:
    case TAG_ID.STYLE: {
      startTagInHead(p, token);
      break;
    }
    case TAG_ID.NOSCRIPT: {
      p._err(token, ERR.nestedNoscriptInHead);
      break;
    }
    default: {
      tokenInHeadNoScript(p, token);
    }
  }
}
function endTagInHeadNoScript(p, token) {
  switch (token.tagID) {
    case TAG_ID.NOSCRIPT: {
      p.openElements.pop();
      p.insertionMode = InsertionMode.IN_HEAD;
      break;
    }
    case TAG_ID.BR: {
      tokenInHeadNoScript(p, token);
      break;
    }
    default: {
      p._err(token, ERR.endTagWithoutMatchingOpenElement);
    }
  }
}
function tokenInHeadNoScript(p, token) {
  const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
  p._err(token, errCode);
  p.openElements.pop();
  p.insertionMode = InsertionMode.IN_HEAD;
  p._processToken(token);
}
function startTagAfterHead(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.BODY: {
      p._insertElement(token, NS.HTML);
      p.framesetOk = false;
      p.insertionMode = InsertionMode.IN_BODY;
      break;
    }
    case TAG_ID.FRAMESET: {
      p._insertElement(token, NS.HTML);
      p.insertionMode = InsertionMode.IN_FRAMESET;
      break;
    }
    case TAG_ID.BASE:
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.NOFRAMES:
    case TAG_ID.SCRIPT:
    case TAG_ID.STYLE:
    case TAG_ID.TEMPLATE:
    case TAG_ID.TITLE: {
      p._err(token, ERR.abandonedHeadElementChild);
      p.openElements.push(p.headElement, TAG_ID.HEAD);
      startTagInHead(p, token);
      p.openElements.remove(p.headElement);
      break;
    }
    case TAG_ID.HEAD: {
      p._err(token, ERR.misplacedStartTagForHeadElement);
      break;
    }
    default: {
      tokenAfterHead(p, token);
    }
  }
}
function endTagAfterHead(p, token) {
  switch (token.tagID) {
    case TAG_ID.BODY:
    case TAG_ID.HTML:
    case TAG_ID.BR: {
      tokenAfterHead(p, token);
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    default: {
      p._err(token, ERR.endTagWithoutMatchingOpenElement);
    }
  }
}
function tokenAfterHead(p, token) {
  p._insertFakeElement(TAG_NAMES.BODY, TAG_ID.BODY);
  p.insertionMode = InsertionMode.IN_BODY;
  modeInBody(p, token);
}
function modeInBody(p, token) {
  switch (token.type) {
    case TokenType.CHARACTER: {
      characterInBody(p, token);
      break;
    }
    case TokenType.WHITESPACE_CHARACTER: {
      whitespaceCharacterInBody(p, token);
      break;
    }
    case TokenType.COMMENT: {
      appendComment(p, token);
      break;
    }
    case TokenType.START_TAG: {
      startTagInBody(p, token);
      break;
    }
    case TokenType.END_TAG: {
      endTagInBody(p, token);
      break;
    }
    case TokenType.EOF: {
      eofInBody(p, token);
      break;
    }
    default:
  }
}
function whitespaceCharacterInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertCharacters(token);
}
function characterInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertCharacters(token);
  p.framesetOk = false;
}
function htmlStartTagInBody(p, token) {
  if (p.openElements.tmplCount === 0) {
    p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
  }
}
function bodyStartTagInBody(p, token) {
  const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
  if (bodyElement && p.openElements.tmplCount === 0) {
    p.framesetOk = false;
    p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
  }
}
function framesetStartTagInBody(p, token) {
  const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
  if (p.framesetOk && bodyElement) {
    p.treeAdapter.detachNode(bodyElement);
    p.openElements.popAllUpToHtmlElement();
    p._insertElement(token, NS.HTML);
    p.insertionMode = InsertionMode.IN_FRAMESET;
  }
}
function addressStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._insertElement(token, NS.HTML);
}
function numberedHeaderStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  if (isNumberedHeader(p.openElements.currentTagId)) {
    p.openElements.pop();
  }
  p._insertElement(token, NS.HTML);
}
function preStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._insertElement(token, NS.HTML);
  p.skipNextNewLine = true;
  p.framesetOk = false;
}
function formStartTagInBody(p, token) {
  const inTemplate = p.openElements.tmplCount > 0;
  if (!p.formElement || inTemplate) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
      p._closePElement();
    }
    p._insertElement(token, NS.HTML);
    if (!inTemplate) {
      p.formElement = p.openElements.current;
    }
  }
}
function listItemStartTagInBody(p, token) {
  p.framesetOk = false;
  const tn3 = token.tagID;
  for (let i = p.openElements.stackTop; i >= 0; i--) {
    const elementId = p.openElements.tagIDs[i];
    if (tn3 === TAG_ID.LI && elementId === TAG_ID.LI || (tn3 === TAG_ID.DD || tn3 === TAG_ID.DT) && (elementId === TAG_ID.DD || elementId === TAG_ID.DT)) {
      p.openElements.generateImpliedEndTagsWithExclusion(elementId);
      p.openElements.popUntilTagNamePopped(elementId);
      break;
    }
    if (elementId !== TAG_ID.ADDRESS && elementId !== TAG_ID.DIV && elementId !== TAG_ID.P && p._isSpecialElement(p.openElements.items[i], elementId)) {
      break;
    }
  }
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._insertElement(token, NS.HTML);
}
function plaintextStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._insertElement(token, NS.HTML);
  p.tokenizer.state = TokenizerMode.PLAINTEXT;
}
function buttonStartTagInBody(p, token) {
  if (p.openElements.hasInScope(TAG_ID.BUTTON)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(TAG_ID.BUTTON);
  }
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
  p.framesetOk = false;
}
function aStartTagInBody(p, token) {
  const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TAG_NAMES.A);
  if (activeElementEntry) {
    callAdoptionAgency(p, token);
    p.openElements.remove(activeElementEntry.element);
    p.activeFormattingElements.removeEntry(activeElementEntry);
  }
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
  p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function bStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
  p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function nobrStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  if (p.openElements.hasInScope(TAG_ID.NOBR)) {
    callAdoptionAgency(p, token);
    p._reconstructActiveFormattingElements();
  }
  p._insertElement(token, NS.HTML);
  p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function appletStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
  p.activeFormattingElements.insertMarker();
  p.framesetOk = false;
}
function tableStartTagInBody(p, token) {
  if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._insertElement(token, NS.HTML);
  p.framesetOk = false;
  p.insertionMode = InsertionMode.IN_TABLE;
}
function areaStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._appendElement(token, NS.HTML);
  p.framesetOk = false;
  token.ackSelfClosing = true;
}
function isHiddenInput(token) {
  const inputType = getTokenAttr(token, ATTRS.TYPE);
  return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;
}
function inputStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._appendElement(token, NS.HTML);
  if (!isHiddenInput(token)) {
    p.framesetOk = false;
  }
  token.ackSelfClosing = true;
}
function paramStartTagInBody(p, token) {
  p._appendElement(token, NS.HTML);
  token.ackSelfClosing = true;
}
function hrStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._appendElement(token, NS.HTML);
  p.framesetOk = false;
  token.ackSelfClosing = true;
}
function imageStartTagInBody(p, token) {
  token.tagName = TAG_NAMES.IMG;
  token.tagID = TAG_ID.IMG;
  areaStartTagInBody(p, token);
}
function textareaStartTagInBody(p, token) {
  p._insertElement(token, NS.HTML);
  p.skipNextNewLine = true;
  p.tokenizer.state = TokenizerMode.RCDATA;
  p.originalInsertionMode = p.insertionMode;
  p.framesetOk = false;
  p.insertionMode = InsertionMode.TEXT;
}
function xmpStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._closePElement();
  }
  p._reconstructActiveFormattingElements();
  p.framesetOk = false;
  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
}
function iframeStartTagInBody(p, token) {
  p.framesetOk = false;
  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
}
function noembedStartTagInBody(p, token) {
  p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
}
function selectStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
  p.framesetOk = false;
  p.insertionMode = p.insertionMode === InsertionMode.IN_TABLE || p.insertionMode === InsertionMode.IN_CAPTION || p.insertionMode === InsertionMode.IN_TABLE_BODY || p.insertionMode === InsertionMode.IN_ROW || p.insertionMode === InsertionMode.IN_CELL ? InsertionMode.IN_SELECT_IN_TABLE : InsertionMode.IN_SELECT;
}
function optgroupStartTagInBody(p, token) {
  if (p.openElements.currentTagId === TAG_ID.OPTION) {
    p.openElements.pop();
  }
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
}
function rbStartTagInBody(p, token) {
  if (p.openElements.hasInScope(TAG_ID.RUBY)) {
    p.openElements.generateImpliedEndTags();
  }
  p._insertElement(token, NS.HTML);
}
function rtStartTagInBody(p, token) {
  if (p.openElements.hasInScope(TAG_ID.RUBY)) {
    p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.RTC);
  }
  p._insertElement(token, NS.HTML);
}
function mathStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  adjustTokenMathMLAttrs(token);
  adjustTokenXMLAttrs(token);
  if (token.selfClosing) {
    p._appendElement(token, NS.MATHML);
  } else {
    p._insertElement(token, NS.MATHML);
  }
  token.ackSelfClosing = true;
}
function svgStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  adjustTokenSVGAttrs(token);
  adjustTokenXMLAttrs(token);
  if (token.selfClosing) {
    p._appendElement(token, NS.SVG);
  } else {
    p._insertElement(token, NS.SVG);
  }
  token.ackSelfClosing = true;
}
function genericStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();
  p._insertElement(token, NS.HTML);
}
function startTagInBody(p, token) {
  switch (token.tagID) {
    case TAG_ID.I:
    case TAG_ID.S:
    case TAG_ID.B:
    case TAG_ID.U:
    case TAG_ID.EM:
    case TAG_ID.TT:
    case TAG_ID.BIG:
    case TAG_ID.CODE:
    case TAG_ID.FONT:
    case TAG_ID.SMALL:
    case TAG_ID.STRIKE:
    case TAG_ID.STRONG: {
      bStartTagInBody(p, token);
      break;
    }
    case TAG_ID.A: {
      aStartTagInBody(p, token);
      break;
    }
    case TAG_ID.H1:
    case TAG_ID.H2:
    case TAG_ID.H3:
    case TAG_ID.H4:
    case TAG_ID.H5:
    case TAG_ID.H6: {
      numberedHeaderStartTagInBody(p, token);
      break;
    }
    case TAG_ID.P:
    case TAG_ID.DL:
    case TAG_ID.OL:
    case TAG_ID.UL:
    case TAG_ID.DIV:
    case TAG_ID.DIR:
    case TAG_ID.NAV:
    case TAG_ID.MAIN:
    case TAG_ID.MENU:
    case TAG_ID.ASIDE:
    case TAG_ID.CENTER:
    case TAG_ID.FIGURE:
    case TAG_ID.FOOTER:
    case TAG_ID.HEADER:
    case TAG_ID.HGROUP:
    case TAG_ID.DIALOG:
    case TAG_ID.DETAILS:
    case TAG_ID.ADDRESS:
    case TAG_ID.ARTICLE:
    case TAG_ID.SECTION:
    case TAG_ID.SUMMARY:
    case TAG_ID.FIELDSET:
    case TAG_ID.BLOCKQUOTE:
    case TAG_ID.FIGCAPTION: {
      addressStartTagInBody(p, token);
      break;
    }
    case TAG_ID.LI:
    case TAG_ID.DD:
    case TAG_ID.DT: {
      listItemStartTagInBody(p, token);
      break;
    }
    case TAG_ID.BR:
    case TAG_ID.IMG:
    case TAG_ID.WBR:
    case TAG_ID.AREA:
    case TAG_ID.EMBED:
    case TAG_ID.KEYGEN: {
      areaStartTagInBody(p, token);
      break;
    }
    case TAG_ID.HR: {
      hrStartTagInBody(p, token);
      break;
    }
    case TAG_ID.RB:
    case TAG_ID.RTC: {
      rbStartTagInBody(p, token);
      break;
    }
    case TAG_ID.RT:
    case TAG_ID.RP: {
      rtStartTagInBody(p, token);
      break;
    }
    case TAG_ID.PRE:
    case TAG_ID.LISTING: {
      preStartTagInBody(p, token);
      break;
    }
    case TAG_ID.XMP: {
      xmpStartTagInBody(p, token);
      break;
    }
    case TAG_ID.SVG: {
      svgStartTagInBody(p, token);
      break;
    }
    case TAG_ID.HTML: {
      htmlStartTagInBody(p, token);
      break;
    }
    case TAG_ID.BASE:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.STYLE:
    case TAG_ID.TITLE:
    case TAG_ID.SCRIPT:
    case TAG_ID.BGSOUND:
    case TAG_ID.BASEFONT:
    case TAG_ID.TEMPLATE: {
      startTagInHead(p, token);
      break;
    }
    case TAG_ID.BODY: {
      bodyStartTagInBody(p, token);
      break;
    }
    case TAG_ID.FORM: {
      formStartTagInBody(p, token);
      break;
    }
    case TAG_ID.NOBR: {
      nobrStartTagInBody(p, token);
      break;
    }
    case TAG_ID.MATH: {
      mathStartTagInBody(p, token);
      break;
    }
    case TAG_ID.TABLE: {
      tableStartTagInBody(p, token);
      break;
    }
    case TAG_ID.INPUT: {
      inputStartTagInBody(p, token);
      break;
    }
    case TAG_ID.PARAM:
    case TAG_ID.TRACK:
    case TAG_ID.SOURCE: {
      paramStartTagInBody(p, token);
      break;
    }
    case TAG_ID.IMAGE: {
      imageStartTagInBody(p, token);
      break;
    }
    case TAG_ID.BUTTON: {
      buttonStartTagInBody(p, token);
      break;
    }
    case TAG_ID.APPLET:
    case TAG_ID.OBJECT:
    case TAG_ID.MARQUEE: {
      appletStartTagInBody(p, token);
      break;
    }
    case TAG_ID.IFRAME: {
      iframeStartTagInBody(p, token);
      break;
    }
    case TAG_ID.SELECT: {
      selectStartTagInBody(p, token);
      break;
    }
    case TAG_ID.OPTION:
    case TAG_ID.OPTGROUP: {
      optgroupStartTagInBody(p, token);
      break;
    }
    case TAG_ID.NOEMBED: {
      noembedStartTagInBody(p, token);
      break;
    }
    case TAG_ID.FRAMESET: {
      framesetStartTagInBody(p, token);
      break;
    }
    case TAG_ID.TEXTAREA: {
      textareaStartTagInBody(p, token);
      break;
    }
    case TAG_ID.NOSCRIPT: {
      if (p.options.scriptingEnabled) {
        noembedStartTagInBody(p, token);
      } else {
        genericStartTagInBody(p, token);
      }
      break;
    }
    case TAG_ID.PLAINTEXT: {
      plaintextStartTagInBody(p, token);
      break;
    }
    case TAG_ID.COL:
    case TAG_ID.TH:
    case TAG_ID.TD:
    case TAG_ID.TR:
    case TAG_ID.HEAD:
    case TAG_ID.FRAME:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD:
    case TAG_ID.CAPTION:
    case TAG_ID.COLGROUP: {
      break;
    }
    default: {
      genericStartTagInBody(p, token);
    }
  }
}
function bodyEndTagInBody(p, token) {
  if (p.openElements.hasInScope(TAG_ID.BODY)) {
    p.insertionMode = InsertionMode.AFTER_BODY;
    if (p.options.sourceCodeLocationInfo) {
      const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
      if (bodyElement) {
        p._setEndLocation(bodyElement, token);
      }
    }
  }
}
function htmlEndTagInBody(p, token) {
  if (p.openElements.hasInScope(TAG_ID.BODY)) {
    p.insertionMode = InsertionMode.AFTER_BODY;
    endTagAfterBody(p, token);
  }
}
function addressEndTagInBody(p, token) {
  const tn3 = token.tagID;
  if (p.openElements.hasInScope(tn3)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(tn3);
  }
}
function formEndTagInBody(p) {
  const inTemplate = p.openElements.tmplCount > 0;
  const { formElement } = p;
  if (!inTemplate) {
    p.formElement = null;
  }
  if ((formElement || inTemplate) && p.openElements.hasInScope(TAG_ID.FORM)) {
    p.openElements.generateImpliedEndTags();
    if (inTemplate) {
      p.openElements.popUntilTagNamePopped(TAG_ID.FORM);
    } else if (formElement) {
      p.openElements.remove(formElement);
    }
  }
}
function pEndTagInBody(p) {
  if (!p.openElements.hasInButtonScope(TAG_ID.P)) {
    p._insertFakeElement(TAG_NAMES.P, TAG_ID.P);
  }
  p._closePElement();
}
function liEndTagInBody(p) {
  if (p.openElements.hasInListItemScope(TAG_ID.LI)) {
    p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.LI);
    p.openElements.popUntilTagNamePopped(TAG_ID.LI);
  }
}
function ddEndTagInBody(p, token) {
  const tn3 = token.tagID;
  if (p.openElements.hasInScope(tn3)) {
    p.openElements.generateImpliedEndTagsWithExclusion(tn3);
    p.openElements.popUntilTagNamePopped(tn3);
  }
}
function numberedHeaderEndTagInBody(p) {
  if (p.openElements.hasNumberedHeaderInScope()) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilNumberedHeaderPopped();
  }
}
function appletEndTagInBody(p, token) {
  const tn3 = token.tagID;
  if (p.openElements.hasInScope(tn3)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(tn3);
    p.activeFormattingElements.clearToLastMarker();
  }
}
function brEndTagInBody(p) {
  p._reconstructActiveFormattingElements();
  p._insertFakeElement(TAG_NAMES.BR, TAG_ID.BR);
  p.openElements.pop();
  p.framesetOk = false;
}
function genericEndTagInBody(p, token) {
  const tn3 = token.tagName;
  const tid = token.tagID;
  for (let i = p.openElements.stackTop; i > 0; i--) {
    const element2 = p.openElements.items[i];
    const elementId = p.openElements.tagIDs[i];
    if (tid === elementId && (tid !== TAG_ID.UNKNOWN || p.treeAdapter.getTagName(element2) === tn3)) {
      p.openElements.generateImpliedEndTagsWithExclusion(tid);
      if (p.openElements.stackTop >= i)
        p.openElements.shortenToLength(i);
      break;
    }
    if (p._isSpecialElement(element2, elementId)) {
      break;
    }
  }
}
function endTagInBody(p, token) {
  switch (token.tagID) {
    case TAG_ID.A:
    case TAG_ID.B:
    case TAG_ID.I:
    case TAG_ID.S:
    case TAG_ID.U:
    case TAG_ID.EM:
    case TAG_ID.TT:
    case TAG_ID.BIG:
    case TAG_ID.CODE:
    case TAG_ID.FONT:
    case TAG_ID.NOBR:
    case TAG_ID.SMALL:
    case TAG_ID.STRIKE:
    case TAG_ID.STRONG: {
      callAdoptionAgency(p, token);
      break;
    }
    case TAG_ID.P: {
      pEndTagInBody(p);
      break;
    }
    case TAG_ID.DL:
    case TAG_ID.UL:
    case TAG_ID.OL:
    case TAG_ID.DIR:
    case TAG_ID.DIV:
    case TAG_ID.NAV:
    case TAG_ID.PRE:
    case TAG_ID.MAIN:
    case TAG_ID.MENU:
    case TAG_ID.ASIDE:
    case TAG_ID.BUTTON:
    case TAG_ID.CENTER:
    case TAG_ID.FIGURE:
    case TAG_ID.FOOTER:
    case TAG_ID.HEADER:
    case TAG_ID.HGROUP:
    case TAG_ID.DIALOG:
    case TAG_ID.ADDRESS:
    case TAG_ID.ARTICLE:
    case TAG_ID.DETAILS:
    case TAG_ID.SECTION:
    case TAG_ID.SUMMARY:
    case TAG_ID.LISTING:
    case TAG_ID.FIELDSET:
    case TAG_ID.BLOCKQUOTE:
    case TAG_ID.FIGCAPTION: {
      addressEndTagInBody(p, token);
      break;
    }
    case TAG_ID.LI: {
      liEndTagInBody(p);
      break;
    }
    case TAG_ID.DD:
    case TAG_ID.DT: {
      ddEndTagInBody(p, token);
      break;
    }
    case TAG_ID.H1:
    case TAG_ID.H2:
    case TAG_ID.H3:
    case TAG_ID.H4:
    case TAG_ID.H5:
    case TAG_ID.H6: {
      numberedHeaderEndTagInBody(p);
      break;
    }
    case TAG_ID.BR: {
      brEndTagInBody(p);
      break;
    }
    case TAG_ID.BODY: {
      bodyEndTagInBody(p, token);
      break;
    }
    case TAG_ID.HTML: {
      htmlEndTagInBody(p, token);
      break;
    }
    case TAG_ID.FORM: {
      formEndTagInBody(p);
      break;
    }
    case TAG_ID.APPLET:
    case TAG_ID.OBJECT:
    case TAG_ID.MARQUEE: {
      appletEndTagInBody(p, token);
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    default: {
      genericEndTagInBody(p, token);
    }
  }
}
function eofInBody(p, token) {
  if (p.tmplInsertionModeStack.length > 0) {
    eofInTemplate(p, token);
  } else {
    stopParsing(p, token);
  }
}
function endTagInText(p, token) {
  var _a3;
  if (token.tagID === TAG_ID.SCRIPT) {
    (_a3 = p.scriptHandler) === null || _a3 === void 0 ? void 0 : _a3.call(p, p.openElements.current);
  }
  p.openElements.pop();
  p.insertionMode = p.originalInsertionMode;
}
function eofInText(p, token) {
  p._err(token, ERR.eofInElementThatCanContainOnlyText);
  p.openElements.pop();
  p.insertionMode = p.originalInsertionMode;
  p.onEof(token);
}
function characterInTable(p, token) {
  if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {
    p.pendingCharacterTokens.length = 0;
    p.hasNonWhitespacePendingCharacterToken = false;
    p.originalInsertionMode = p.insertionMode;
    p.insertionMode = InsertionMode.IN_TABLE_TEXT;
    switch (token.type) {
      case TokenType.CHARACTER: {
        characterInTableText(p, token);
        break;
      }
      case TokenType.WHITESPACE_CHARACTER: {
        whitespaceCharacterInTableText(p, token);
        break;
      }
    }
  } else {
    tokenInTable(p, token);
  }
}
function captionStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p.activeFormattingElements.insertMarker();
  p._insertElement(token, NS.HTML);
  p.insertionMode = InsertionMode.IN_CAPTION;
}
function colgroupStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p._insertElement(token, NS.HTML);
  p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
}
function colStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p._insertFakeElement(TAG_NAMES.COLGROUP, TAG_ID.COLGROUP);
  p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
  startTagInColumnGroup(p, token);
}
function tbodyStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p._insertElement(token, NS.HTML);
  p.insertionMode = InsertionMode.IN_TABLE_BODY;
}
function tdStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p._insertFakeElement(TAG_NAMES.TBODY, TAG_ID.TBODY);
  p.insertionMode = InsertionMode.IN_TABLE_BODY;
  startTagInTableBody(p, token);
}
function tableStartTagInTable(p, token) {
  if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
    p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
    p._resetInsertionMode();
    p._processStartTag(token);
  }
}
function inputStartTagInTable(p, token) {
  if (isHiddenInput(token)) {
    p._appendElement(token, NS.HTML);
  } else {
    tokenInTable(p, token);
  }
  token.ackSelfClosing = true;
}
function formStartTagInTable(p, token) {
  if (!p.formElement && p.openElements.tmplCount === 0) {
    p._insertElement(token, NS.HTML);
    p.formElement = p.openElements.current;
    p.openElements.pop();
  }
}
function startTagInTable(p, token) {
  switch (token.tagID) {
    case TAG_ID.TD:
    case TAG_ID.TH:
    case TAG_ID.TR: {
      tdStartTagInTable(p, token);
      break;
    }
    case TAG_ID.STYLE:
    case TAG_ID.SCRIPT:
    case TAG_ID.TEMPLATE: {
      startTagInHead(p, token);
      break;
    }
    case TAG_ID.COL: {
      colStartTagInTable(p, token);
      break;
    }
    case TAG_ID.FORM: {
      formStartTagInTable(p, token);
      break;
    }
    case TAG_ID.TABLE: {
      tableStartTagInTable(p, token);
      break;
    }
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      tbodyStartTagInTable(p, token);
      break;
    }
    case TAG_ID.INPUT: {
      inputStartTagInTable(p, token);
      break;
    }
    case TAG_ID.CAPTION: {
      captionStartTagInTable(p, token);
      break;
    }
    case TAG_ID.COLGROUP: {
      colgroupStartTagInTable(p, token);
      break;
    }
    default: {
      tokenInTable(p, token);
    }
  }
}
function endTagInTable(p, token) {
  switch (token.tagID) {
    case TAG_ID.TABLE: {
      if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
        p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
        p._resetInsertionMode();
      }
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TBODY:
    case TAG_ID.TD:
    case TAG_ID.TFOOT:
    case TAG_ID.TH:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      break;
    }
    default: {
      tokenInTable(p, token);
    }
  }
}
function tokenInTable(p, token) {
  const savedFosterParentingState = p.fosterParentingEnabled;
  p.fosterParentingEnabled = true;
  modeInBody(p, token);
  p.fosterParentingEnabled = savedFosterParentingState;
}
function whitespaceCharacterInTableText(p, token) {
  p.pendingCharacterTokens.push(token);
}
function characterInTableText(p, token) {
  p.pendingCharacterTokens.push(token);
  p.hasNonWhitespacePendingCharacterToken = true;
}
function tokenInTableText(p, token) {
  let i = 0;
  if (p.hasNonWhitespacePendingCharacterToken) {
    for (; i < p.pendingCharacterTokens.length; i++) {
      tokenInTable(p, p.pendingCharacterTokens[i]);
    }
  } else {
    for (; i < p.pendingCharacterTokens.length; i++) {
      p._insertCharacters(p.pendingCharacterTokens[i]);
    }
  }
  p.insertionMode = p.originalInsertionMode;
  p._processToken(token);
}
var TABLE_VOID_ELEMENTS = /* @__PURE__ */ new Set([TAG_ID.CAPTION, TAG_ID.COL, TAG_ID.COLGROUP, TAG_ID.TBODY, TAG_ID.TD, TAG_ID.TFOOT, TAG_ID.TH, TAG_ID.THEAD, TAG_ID.TR]);
function startTagInCaption(p, token) {
  const tn3 = token.tagID;
  if (TABLE_VOID_ELEMENTS.has(tn3)) {
    if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
      p.activeFormattingElements.clearToLastMarker();
      p.insertionMode = InsertionMode.IN_TABLE;
      startTagInTable(p, token);
    }
  } else {
    startTagInBody(p, token);
  }
}
function endTagInCaption(p, token) {
  const tn3 = token.tagID;
  switch (tn3) {
    case TAG_ID.CAPTION:
    case TAG_ID.TABLE: {
      if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
        p.activeFormattingElements.clearToLastMarker();
        p.insertionMode = InsertionMode.IN_TABLE;
        if (tn3 === TAG_ID.TABLE) {
          endTagInTable(p, token);
        }
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TBODY:
    case TAG_ID.TD:
    case TAG_ID.TFOOT:
    case TAG_ID.TH:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      break;
    }
    default: {
      endTagInBody(p, token);
    }
  }
}
function startTagInColumnGroup(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.COL: {
      p._appendElement(token, NS.HTML);
      token.ackSelfClosing = true;
      break;
    }
    case TAG_ID.TEMPLATE: {
      startTagInHead(p, token);
      break;
    }
    default: {
      tokenInColumnGroup(p, token);
    }
  }
}
function endTagInColumnGroup(p, token) {
  switch (token.tagID) {
    case TAG_ID.COLGROUP: {
      if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE;
      }
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    case TAG_ID.COL: {
      break;
    }
    default: {
      tokenInColumnGroup(p, token);
    }
  }
}
function tokenInColumnGroup(p, token) {
  if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
    p.openElements.pop();
    p.insertionMode = InsertionMode.IN_TABLE;
    p._processToken(token);
  }
}
function startTagInTableBody(p, token) {
  switch (token.tagID) {
    case TAG_ID.TR: {
      p.openElements.clearBackToTableBodyContext();
      p._insertElement(token, NS.HTML);
      p.insertionMode = InsertionMode.IN_ROW;
      break;
    }
    case TAG_ID.TH:
    case TAG_ID.TD: {
      p.openElements.clearBackToTableBodyContext();
      p._insertFakeElement(TAG_NAMES.TR, TAG_ID.TR);
      p.insertionMode = InsertionMode.IN_ROW;
      startTagInRow(p, token);
      break;
    }
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      if (p.openElements.hasTableBodyContextInTableScope()) {
        p.openElements.clearBackToTableBodyContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE;
        startTagInTable(p, token);
      }
      break;
    }
    default: {
      startTagInTable(p, token);
    }
  }
}
function endTagInTableBody(p, token) {
  const tn3 = token.tagID;
  switch (token.tagID) {
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      if (p.openElements.hasInTableScope(tn3)) {
        p.openElements.clearBackToTableBodyContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE;
      }
      break;
    }
    case TAG_ID.TABLE: {
      if (p.openElements.hasTableBodyContextInTableScope()) {
        p.openElements.clearBackToTableBodyContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE;
        endTagInTable(p, token);
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TD:
    case TAG_ID.TH:
    case TAG_ID.TR: {
      break;
    }
    default: {
      endTagInTable(p, token);
    }
  }
}
function startTagInRow(p, token) {
  switch (token.tagID) {
    case TAG_ID.TH:
    case TAG_ID.TD: {
      p.openElements.clearBackToTableRowContext();
      p._insertElement(token, NS.HTML);
      p.insertionMode = InsertionMode.IN_CELL;
      p.activeFormattingElements.insertMarker();
      break;
    }
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      if (p.openElements.hasInTableScope(TAG_ID.TR)) {
        p.openElements.clearBackToTableRowContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE_BODY;
        startTagInTableBody(p, token);
      }
      break;
    }
    default: {
      startTagInTable(p, token);
    }
  }
}
function endTagInRow(p, token) {
  switch (token.tagID) {
    case TAG_ID.TR: {
      if (p.openElements.hasInTableScope(TAG_ID.TR)) {
        p.openElements.clearBackToTableRowContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE_BODY;
      }
      break;
    }
    case TAG_ID.TABLE: {
      if (p.openElements.hasInTableScope(TAG_ID.TR)) {
        p.openElements.clearBackToTableRowContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE_BODY;
        endTagInTableBody(p, token);
      }
      break;
    }
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope(TAG_ID.TR)) {
        p.openElements.clearBackToTableRowContext();
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE_BODY;
        endTagInTableBody(p, token);
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML:
    case TAG_ID.TD:
    case TAG_ID.TH: {
      break;
    }
    default: {
      endTagInTable(p, token);
    }
  }
}
function startTagInCell(p, token) {
  const tn3 = token.tagID;
  if (TABLE_VOID_ELEMENTS.has(tn3)) {
    if (p.openElements.hasInTableScope(TAG_ID.TD) || p.openElements.hasInTableScope(TAG_ID.TH)) {
      p._closeTableCell();
      startTagInRow(p, token);
    }
  } else {
    startTagInBody(p, token);
  }
}
function endTagInCell(p, token) {
  const tn3 = token.tagID;
  switch (tn3) {
    case TAG_ID.TD:
    case TAG_ID.TH: {
      if (p.openElements.hasInTableScope(tn3)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(tn3);
        p.activeFormattingElements.clearToLastMarker();
        p.insertionMode = InsertionMode.IN_ROW;
      }
      break;
    }
    case TAG_ID.TABLE:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD:
    case TAG_ID.TR: {
      if (p.openElements.hasInTableScope(tn3)) {
        p._closeTableCell();
        endTagInRow(p, token);
      }
      break;
    }
    case TAG_ID.BODY:
    case TAG_ID.CAPTION:
    case TAG_ID.COL:
    case TAG_ID.COLGROUP:
    case TAG_ID.HTML: {
      break;
    }
    default: {
      endTagInBody(p, token);
    }
  }
}
function startTagInSelect(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.OPTION: {
      if (p.openElements.currentTagId === TAG_ID.OPTION) {
        p.openElements.pop();
      }
      p._insertElement(token, NS.HTML);
      break;
    }
    case TAG_ID.OPTGROUP: {
      if (p.openElements.currentTagId === TAG_ID.OPTION) {
        p.openElements.pop();
      }
      if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
        p.openElements.pop();
      }
      p._insertElement(token, NS.HTML);
      break;
    }
    case TAG_ID.INPUT:
    case TAG_ID.KEYGEN:
    case TAG_ID.TEXTAREA:
    case TAG_ID.SELECT: {
      if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
        p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
        p._resetInsertionMode();
        if (token.tagID !== TAG_ID.SELECT) {
          p._processStartTag(token);
        }
      }
      break;
    }
    case TAG_ID.SCRIPT:
    case TAG_ID.TEMPLATE: {
      startTagInHead(p, token);
      break;
    }
    default:
  }
}
function endTagInSelect(p, token) {
  switch (token.tagID) {
    case TAG_ID.OPTGROUP: {
      if (p.openElements.stackTop > 0 && p.openElements.currentTagId === TAG_ID.OPTION && p.openElements.tagIDs[p.openElements.stackTop - 1] === TAG_ID.OPTGROUP) {
        p.openElements.pop();
      }
      if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
        p.openElements.pop();
      }
      break;
    }
    case TAG_ID.OPTION: {
      if (p.openElements.currentTagId === TAG_ID.OPTION) {
        p.openElements.pop();
      }
      break;
    }
    case TAG_ID.SELECT: {
      if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
        p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
        p._resetInsertionMode();
      }
      break;
    }
    case TAG_ID.TEMPLATE: {
      templateEndTagInHead(p, token);
      break;
    }
    default:
  }
}
function startTagInSelectInTable(p, token) {
  const tn3 = token.tagID;
  if (tn3 === TAG_ID.CAPTION || tn3 === TAG_ID.TABLE || tn3 === TAG_ID.TBODY || tn3 === TAG_ID.TFOOT || tn3 === TAG_ID.THEAD || tn3 === TAG_ID.TR || tn3 === TAG_ID.TD || tn3 === TAG_ID.TH) {
    p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
    p._resetInsertionMode();
    p._processStartTag(token);
  } else {
    startTagInSelect(p, token);
  }
}
function endTagInSelectInTable(p, token) {
  const tn3 = token.tagID;
  if (tn3 === TAG_ID.CAPTION || tn3 === TAG_ID.TABLE || tn3 === TAG_ID.TBODY || tn3 === TAG_ID.TFOOT || tn3 === TAG_ID.THEAD || tn3 === TAG_ID.TR || tn3 === TAG_ID.TD || tn3 === TAG_ID.TH) {
    if (p.openElements.hasInTableScope(tn3)) {
      p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
      p._resetInsertionMode();
      p.onEndTag(token);
    }
  } else {
    endTagInSelect(p, token);
  }
}
function startTagInTemplate(p, token) {
  switch (token.tagID) {
    case TAG_ID.BASE:
    case TAG_ID.BASEFONT:
    case TAG_ID.BGSOUND:
    case TAG_ID.LINK:
    case TAG_ID.META:
    case TAG_ID.NOFRAMES:
    case TAG_ID.SCRIPT:
    case TAG_ID.STYLE:
    case TAG_ID.TEMPLATE:
    case TAG_ID.TITLE: {
      startTagInHead(p, token);
      break;
    }
    case TAG_ID.CAPTION:
    case TAG_ID.COLGROUP:
    case TAG_ID.TBODY:
    case TAG_ID.TFOOT:
    case TAG_ID.THEAD: {
      p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;
      p.insertionMode = InsertionMode.IN_TABLE;
      startTagInTable(p, token);
      break;
    }
    case TAG_ID.COL: {
      p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;
      p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
      startTagInColumnGroup(p, token);
      break;
    }
    case TAG_ID.TR: {
      p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;
      p.insertionMode = InsertionMode.IN_TABLE_BODY;
      startTagInTableBody(p, token);
      break;
    }
    case TAG_ID.TD:
    case TAG_ID.TH: {
      p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;
      p.insertionMode = InsertionMode.IN_ROW;
      startTagInRow(p, token);
      break;
    }
    default: {
      p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;
      p.insertionMode = InsertionMode.IN_BODY;
      startTagInBody(p, token);
    }
  }
}
function endTagInTemplate(p, token) {
  if (token.tagID === TAG_ID.TEMPLATE) {
    templateEndTagInHead(p, token);
  }
}
function eofInTemplate(p, token) {
  if (p.openElements.tmplCount > 0) {
    p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
    p.activeFormattingElements.clearToLastMarker();
    p.tmplInsertionModeStack.shift();
    p._resetInsertionMode();
    p.onEof(token);
  } else {
    stopParsing(p, token);
  }
}
function startTagAfterBody(p, token) {
  if (token.tagID === TAG_ID.HTML) {
    startTagInBody(p, token);
  } else {
    tokenAfterBody(p, token);
  }
}
function endTagAfterBody(p, token) {
  var _a3;
  if (token.tagID === TAG_ID.HTML) {
    if (!p.fragmentContext) {
      p.insertionMode = InsertionMode.AFTER_AFTER_BODY;
    }
    if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === TAG_ID.HTML) {
      p._setEndLocation(p.openElements.items[0], token);
      const bodyElement = p.openElements.items[1];
      if (bodyElement && !((_a3 = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a3 === void 0 ? void 0 : _a3.endTag)) {
        p._setEndLocation(bodyElement, token);
      }
    }
  } else {
    tokenAfterBody(p, token);
  }
}
function tokenAfterBody(p, token) {
  p.insertionMode = InsertionMode.IN_BODY;
  modeInBody(p, token);
}
function startTagInFrameset(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.FRAMESET: {
      p._insertElement(token, NS.HTML);
      break;
    }
    case TAG_ID.FRAME: {
      p._appendElement(token, NS.HTML);
      token.ackSelfClosing = true;
      break;
    }
    case TAG_ID.NOFRAMES: {
      startTagInHead(p, token);
      break;
    }
    default:
  }
}
function endTagInFrameset(p, token) {
  if (token.tagID === TAG_ID.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
    p.openElements.pop();
    if (!p.fragmentContext && p.openElements.currentTagId !== TAG_ID.FRAMESET) {
      p.insertionMode = InsertionMode.AFTER_FRAMESET;
    }
  }
}
function startTagAfterFrameset(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.NOFRAMES: {
      startTagInHead(p, token);
      break;
    }
    default:
  }
}
function endTagAfterFrameset(p, token) {
  if (token.tagID === TAG_ID.HTML) {
    p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;
  }
}
function startTagAfterAfterBody(p, token) {
  if (token.tagID === TAG_ID.HTML) {
    startTagInBody(p, token);
  } else {
    tokenAfterAfterBody(p, token);
  }
}
function tokenAfterAfterBody(p, token) {
  p.insertionMode = InsertionMode.IN_BODY;
  modeInBody(p, token);
}
function startTagAfterAfterFrameset(p, token) {
  switch (token.tagID) {
    case TAG_ID.HTML: {
      startTagInBody(p, token);
      break;
    }
    case TAG_ID.NOFRAMES: {
      startTagInHead(p, token);
      break;
    }
    default:
  }
}
function nullCharacterInForeignContent(p, token) {
  token.chars = REPLACEMENT_CHARACTER;
  p._insertCharacters(token);
}
function characterInForeignContent(p, token) {
  p._insertCharacters(token);
  p.framesetOk = false;
}
function popUntilHtmlOrIntegrationPoint(p) {
  while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {
    p.openElements.pop();
  }
}
function startTagInForeignContent(p, token) {
  if (causesExit(token)) {
    popUntilHtmlOrIntegrationPoint(p);
    p._startTagOutsideForeignContent(token);
  } else {
    const current = p._getAdjustedCurrentElement();
    const currentNs = p.treeAdapter.getNamespaceURI(current);
    if (currentNs === NS.MATHML) {
      adjustTokenMathMLAttrs(token);
    } else if (currentNs === NS.SVG) {
      adjustTokenSVGTagName(token);
      adjustTokenSVGAttrs(token);
    }
    adjustTokenXMLAttrs(token);
    if (token.selfClosing) {
      p._appendElement(token, currentNs);
    } else {
      p._insertElement(token, currentNs);
    }
    token.ackSelfClosing = true;
  }
}
function endTagInForeignContent(p, token) {
  if (token.tagID === TAG_ID.P || token.tagID === TAG_ID.BR) {
    popUntilHtmlOrIntegrationPoint(p);
    p._endTagOutsideForeignContent(token);
    return;
  }
  for (let i = p.openElements.stackTop; i > 0; i--) {
    const element2 = p.openElements.items[i];
    if (p.treeAdapter.getNamespaceURI(element2) === NS.HTML) {
      p._endTagOutsideForeignContent(token);
      break;
    }
    const tagName = p.treeAdapter.getTagName(element2);
    if (tagName.toLowerCase() === token.tagName) {
      token.tagName = tagName;
      p.openElements.shortenToLength(i);
      break;
    }
  }
}

// node_modules/parse5/dist/serializer/index.js
var VOID_ELEMENTS = /* @__PURE__ */ new Set([
  TAG_NAMES.AREA,
  TAG_NAMES.BASE,
  TAG_NAMES.BASEFONT,
  TAG_NAMES.BGSOUND,
  TAG_NAMES.BR,
  TAG_NAMES.COL,
  TAG_NAMES.EMBED,
  TAG_NAMES.FRAME,
  TAG_NAMES.HR,
  TAG_NAMES.IMG,
  TAG_NAMES.INPUT,
  TAG_NAMES.KEYGEN,
  TAG_NAMES.LINK,
  TAG_NAMES.META,
  TAG_NAMES.PARAM,
  TAG_NAMES.SOURCE,
  TAG_NAMES.TRACK,
  TAG_NAMES.WBR
]);
function isVoidElement(node, options) {
  return options.treeAdapter.isElementNode(node) && options.treeAdapter.getNamespaceURI(node) === NS.HTML && VOID_ELEMENTS.has(options.treeAdapter.getTagName(node));
}
var defaultOpts3 = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };
function serializeOuter(node, options) {
  const opts = { ...defaultOpts3, ...options };
  return serializeNode(node, opts);
}
function serializeChildNodes(parentNode, options) {
  let html3 = "";
  const container = options.treeAdapter.isElementNode(parentNode) && options.treeAdapter.getTagName(parentNode) === TAG_NAMES.TEMPLATE && options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML ? options.treeAdapter.getTemplateContent(parentNode) : parentNode;
  const childNodes = options.treeAdapter.getChildNodes(container);
  if (childNodes) {
    for (const currentNode of childNodes) {
      html3 += serializeNode(currentNode, options);
    }
  }
  return html3;
}
function serializeNode(node, options) {
  if (options.treeAdapter.isElementNode(node)) {
    return serializeElement(node, options);
  }
  if (options.treeAdapter.isTextNode(node)) {
    return serializeTextNode(node, options);
  }
  if (options.treeAdapter.isCommentNode(node)) {
    return serializeCommentNode(node, options);
  }
  if (options.treeAdapter.isDocumentTypeNode(node)) {
    return serializeDocumentTypeNode(node, options);
  }
  return "";
}
function serializeElement(node, options) {
  const tn3 = options.treeAdapter.getTagName(node);
  return `<${tn3}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? "" : `${serializeChildNodes(node, options)}</${tn3}>`}`;
}
function serializeAttributes(node, { treeAdapter }) {
  let html3 = "";
  for (const attr3 of treeAdapter.getAttrList(node)) {
    html3 += " ";
    if (!attr3.namespace) {
      html3 += attr3.name;
    } else
      switch (attr3.namespace) {
        case NS.XML: {
          html3 += `xml:${attr3.name}`;
          break;
        }
        case NS.XMLNS: {
          if (attr3.name !== "xmlns") {
            html3 += "xmlns:";
          }
          html3 += attr3.name;
          break;
        }
        case NS.XLINK: {
          html3 += `xlink:${attr3.name}`;
          break;
        }
        default: {
          html3 += `${attr3.prefix}:${attr3.name}`;
        }
      }
    html3 += `="${escapeAttribute(attr3.value)}"`;
  }
  return html3;
}
function serializeTextNode(node, options) {
  const { treeAdapter } = options;
  const content = treeAdapter.getTextNodeContent(node);
  const parent2 = treeAdapter.getParentNode(node);
  const parentTn = parent2 && treeAdapter.isElementNode(parent2) && treeAdapter.getTagName(parent2);
  return parentTn && treeAdapter.getNamespaceURI(parent2) === NS.HTML && hasUnescapedText(parentTn, options.scriptingEnabled) ? content : escapeText(content);
}
function serializeCommentNode(node, { treeAdapter }) {
  return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;
}
function serializeDocumentTypeNode(node, { treeAdapter }) {
  return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;
}

// node_modules/parse5/dist/index.js
function parse5(html3, options) {
  return Parser.parse(html3, options);
}
function parseFragment(fragmentContext, html3, options) {
  if (typeof fragmentContext === "string") {
    options = html3;
    html3 = fragmentContext;
    fragmentContext = null;
  }
  const parser = Parser.getFragmentParser(fragmentContext, options);
  parser.tokenizer.write(html3, true);
  return parser.getFragment();
}

// node_modules/parse5-htmlparser2-tree-adapter/dist/index.js
function createTextNode2(value) {
  return new Text2(value);
}
function enquoteDoctypeId(id) {
  const quote = id.includes('"') ? "'" : '"';
  return quote + id + quote;
}
function serializeDoctypeContent(name, publicId, systemId) {
  let str = "!DOCTYPE ";
  if (name) {
    str += name;
  }
  if (publicId) {
    str += ` PUBLIC ${enquoteDoctypeId(publicId)}`;
  } else if (systemId) {
    str += " SYSTEM";
  }
  if (systemId) {
    str += ` ${enquoteDoctypeId(systemId)}`;
  }
  return str;
}
var adapter = {
  // Re-exports from domhandler
  isCommentNode: isComment,
  isElementNode: isTag2,
  isTextNode: isText,
  //Node construction
  createDocument() {
    const node = new Document([]);
    node["x-mode"] = html_exports2.DOCUMENT_MODE.NO_QUIRKS;
    return node;
  },
  createDocumentFragment() {
    return new Document([]);
  },
  createElement(tagName, namespaceURI, attrs) {
    const attribs = /* @__PURE__ */ Object.create(null);
    const attribsNamespace = /* @__PURE__ */ Object.create(null);
    const attribsPrefix = /* @__PURE__ */ Object.create(null);
    for (let i = 0; i < attrs.length; i++) {
      const attrName = attrs[i].name;
      attribs[attrName] = attrs[i].value;
      attribsNamespace[attrName] = attrs[i].namespace;
      attribsPrefix[attrName] = attrs[i].prefix;
    }
    const node = new Element(tagName, attribs, []);
    node.namespace = namespaceURI;
    node["x-attribsNamespace"] = attribsNamespace;
    node["x-attribsPrefix"] = attribsPrefix;
    return node;
  },
  createCommentNode(data2) {
    return new Comment2(data2);
  },
  //Tree mutation
  appendChild(parentNode, newNode) {
    const prev2 = parentNode.children[parentNode.children.length - 1];
    if (prev2) {
      prev2.next = newNode;
      newNode.prev = prev2;
    }
    parentNode.children.push(newNode);
    newNode.parent = parentNode;
  },
  insertBefore(parentNode, newNode, referenceNode) {
    const insertionIdx = parentNode.children.indexOf(referenceNode);
    const { prev: prev2 } = referenceNode;
    if (prev2) {
      prev2.next = newNode;
      newNode.prev = prev2;
    }
    referenceNode.prev = newNode;
    newNode.next = referenceNode;
    parentNode.children.splice(insertionIdx, 0, newNode);
    newNode.parent = parentNode;
  },
  setTemplateContent(templateElement, contentElement) {
    adapter.appendChild(templateElement, contentElement);
  },
  getTemplateContent(templateElement) {
    return templateElement.children[0];
  },
  setDocumentType(document2, name, publicId, systemId) {
    const data2 = serializeDoctypeContent(name, publicId, systemId);
    let doctypeNode = document2.children.find((node) => isDirective(node) && node.name === "!doctype");
    if (doctypeNode) {
      doctypeNode.data = data2 !== null && data2 !== void 0 ? data2 : null;
    } else {
      doctypeNode = new ProcessingInstruction("!doctype", data2);
      adapter.appendChild(document2, doctypeNode);
    }
    doctypeNode["x-name"] = name !== null && name !== void 0 ? name : void 0;
    doctypeNode["x-publicId"] = publicId !== null && publicId !== void 0 ? publicId : void 0;
    doctypeNode["x-systemId"] = systemId !== null && systemId !== void 0 ? systemId : void 0;
  },
  setDocumentMode(document2, mode) {
    document2["x-mode"] = mode;
  },
  getDocumentMode(document2) {
    return document2["x-mode"];
  },
  detachNode(node) {
    if (node.parent) {
      const idx = node.parent.children.indexOf(node);
      const { prev: prev2, next: next2 } = node;
      node.prev = null;
      node.next = null;
      if (prev2) {
        prev2.next = next2;
      }
      if (next2) {
        next2.prev = prev2;
      }
      node.parent.children.splice(idx, 1);
      node.parent = null;
    }
  },
  insertText(parentNode, text4) {
    const lastChild = parentNode.children[parentNode.children.length - 1];
    if (lastChild && isText(lastChild)) {
      lastChild.data += text4;
    } else {
      adapter.appendChild(parentNode, createTextNode2(text4));
    }
  },
  insertTextBefore(parentNode, text4, referenceNode) {
    const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];
    if (prevNode && isText(prevNode)) {
      prevNode.data += text4;
    } else {
      adapter.insertBefore(parentNode, createTextNode2(text4), referenceNode);
    }
  },
  adoptAttributes(recipient, attrs) {
    for (let i = 0; i < attrs.length; i++) {
      const attrName = attrs[i].name;
      if (typeof recipient.attribs[attrName] === "undefined") {
        recipient.attribs[attrName] = attrs[i].value;
        recipient["x-attribsNamespace"][attrName] = attrs[i].namespace;
        recipient["x-attribsPrefix"][attrName] = attrs[i].prefix;
      }
    }
  },
  //Tree traversing
  getFirstChild(node) {
    return node.children[0];
  },
  getChildNodes(node) {
    return node.children;
  },
  getParentNode(node) {
    return node.parent;
  },
  getAttrList(element2) {
    return element2.attributes;
  },
  //Node data
  getTagName(element2) {
    return element2.name;
  },
  getNamespaceURI(element2) {
    return element2.namespace;
  },
  getTextNodeContent(textNode) {
    return textNode.data;
  },
  getCommentNodeContent(commentNode) {
    return commentNode.data;
  },
  getDocumentTypeNodeName(doctypeNode) {
    var _a3;
    return (_a3 = doctypeNode["x-name"]) !== null && _a3 !== void 0 ? _a3 : "";
  },
  getDocumentTypeNodePublicId(doctypeNode) {
    var _a3;
    return (_a3 = doctypeNode["x-publicId"]) !== null && _a3 !== void 0 ? _a3 : "";
  },
  getDocumentTypeNodeSystemId(doctypeNode) {
    var _a3;
    return (_a3 = doctypeNode["x-systemId"]) !== null && _a3 !== void 0 ? _a3 : "";
  },
  //Node types
  isDocumentTypeNode(node) {
    return isDirective(node) && node.name === "!doctype";
  },
  // Source code location
  setNodeSourceCodeLocation(node, location) {
    if (location) {
      node.startIndex = location.startOffset;
      node.endIndex = location.endOffset;
    }
    node.sourceCodeLocation = location;
  },
  getNodeSourceCodeLocation(node) {
    return node.sourceCodeLocation;
  },
  updateNodeSourceCodeLocation(node, endLocation) {
    if (endLocation.endOffset != null)
      node.endIndex = endLocation.endOffset;
    node.sourceCodeLocation = {
      ...node.sourceCodeLocation,
      ...endLocation
    };
  }
};

// node_modules/cheerio/lib/esm/parsers/parse5-adapter.js
function parseWithParse5(content, options, isDocument2, context) {
  const opts = {
    scriptingEnabled: typeof options.scriptingEnabled === "boolean" ? options.scriptingEnabled : true,
    treeAdapter: adapter,
    sourceCodeLocationInfo: options.sourceCodeLocationInfo
  };
  return isDocument2 ? parse5(content, opts) : parseFragment(context, content, opts);
}
var renderOpts = { treeAdapter: adapter };
function renderWithParse5(dom) {
  const nodes = "length" in dom ? dom : [dom];
  for (let index2 = 0; index2 < nodes.length; index2 += 1) {
    const node = nodes[index2];
    if (isDocument(node)) {
      Array.prototype.splice.call(nodes, index2, 1, ...node.children);
    }
  }
  let result = "";
  for (let index2 = 0; index2 < nodes.length; index2 += 1) {
    const node = nodes[index2];
    result += serializeOuter(node, renderOpts);
  }
  return result;
}

// node_modules/htmlparser2/lib/esm/Tokenizer.js
var CharCodes2;
(function(CharCodes3) {
  CharCodes3[CharCodes3["Tab"] = 9] = "Tab";
  CharCodes3[CharCodes3["NewLine"] = 10] = "NewLine";
  CharCodes3[CharCodes3["FormFeed"] = 12] = "FormFeed";
  CharCodes3[CharCodes3["CarriageReturn"] = 13] = "CarriageReturn";
  CharCodes3[CharCodes3["Space"] = 32] = "Space";
  CharCodes3[CharCodes3["ExclamationMark"] = 33] = "ExclamationMark";
  CharCodes3[CharCodes3["Number"] = 35] = "Number";
  CharCodes3[CharCodes3["Amp"] = 38] = "Amp";
  CharCodes3[CharCodes3["SingleQuote"] = 39] = "SingleQuote";
  CharCodes3[CharCodes3["DoubleQuote"] = 34] = "DoubleQuote";
  CharCodes3[CharCodes3["Dash"] = 45] = "Dash";
  CharCodes3[CharCodes3["Slash"] = 47] = "Slash";
  CharCodes3[CharCodes3["Zero"] = 48] = "Zero";
  CharCodes3[CharCodes3["Nine"] = 57] = "Nine";
  CharCodes3[CharCodes3["Semi"] = 59] = "Semi";
  CharCodes3[CharCodes3["Lt"] = 60] = "Lt";
  CharCodes3[CharCodes3["Eq"] = 61] = "Eq";
  CharCodes3[CharCodes3["Gt"] = 62] = "Gt";
  CharCodes3[CharCodes3["Questionmark"] = 63] = "Questionmark";
  CharCodes3[CharCodes3["UpperA"] = 65] = "UpperA";
  CharCodes3[CharCodes3["LowerA"] = 97] = "LowerA";
  CharCodes3[CharCodes3["UpperF"] = 70] = "UpperF";
  CharCodes3[CharCodes3["LowerF"] = 102] = "LowerF";
  CharCodes3[CharCodes3["UpperZ"] = 90] = "UpperZ";
  CharCodes3[CharCodes3["LowerZ"] = 122] = "LowerZ";
  CharCodes3[CharCodes3["LowerX"] = 120] = "LowerX";
  CharCodes3[CharCodes3["OpeningSquareBracket"] = 91] = "OpeningSquareBracket";
})(CharCodes2 || (CharCodes2 = {}));
var State2;
(function(State3) {
  State3[State3["Text"] = 1] = "Text";
  State3[State3["BeforeTagName"] = 2] = "BeforeTagName";
  State3[State3["InTagName"] = 3] = "InTagName";
  State3[State3["InSelfClosingTag"] = 4] = "InSelfClosingTag";
  State3[State3["BeforeClosingTagName"] = 5] = "BeforeClosingTagName";
  State3[State3["InClosingTagName"] = 6] = "InClosingTagName";
  State3[State3["AfterClosingTagName"] = 7] = "AfterClosingTagName";
  State3[State3["BeforeAttributeName"] = 8] = "BeforeAttributeName";
  State3[State3["InAttributeName"] = 9] = "InAttributeName";
  State3[State3["AfterAttributeName"] = 10] = "AfterAttributeName";
  State3[State3["BeforeAttributeValue"] = 11] = "BeforeAttributeValue";
  State3[State3["InAttributeValueDq"] = 12] = "InAttributeValueDq";
  State3[State3["InAttributeValueSq"] = 13] = "InAttributeValueSq";
  State3[State3["InAttributeValueNq"] = 14] = "InAttributeValueNq";
  State3[State3["BeforeDeclaration"] = 15] = "BeforeDeclaration";
  State3[State3["InDeclaration"] = 16] = "InDeclaration";
  State3[State3["InProcessingInstruction"] = 17] = "InProcessingInstruction";
  State3[State3["BeforeComment"] = 18] = "BeforeComment";
  State3[State3["CDATASequence"] = 19] = "CDATASequence";
  State3[State3["InSpecialComment"] = 20] = "InSpecialComment";
  State3[State3["InCommentLike"] = 21] = "InCommentLike";
  State3[State3["BeforeSpecialS"] = 22] = "BeforeSpecialS";
  State3[State3["SpecialStartSequence"] = 23] = "SpecialStartSequence";
  State3[State3["InSpecialTag"] = 24] = "InSpecialTag";
  State3[State3["BeforeEntity"] = 25] = "BeforeEntity";
  State3[State3["BeforeNumericEntity"] = 26] = "BeforeNumericEntity";
  State3[State3["InNamedEntity"] = 27] = "InNamedEntity";
  State3[State3["InNumericEntity"] = 28] = "InNumericEntity";
  State3[State3["InHexEntity"] = 29] = "InHexEntity";
})(State2 || (State2 = {}));
function isWhitespace3(c) {
  return c === CharCodes2.Space || c === CharCodes2.NewLine || c === CharCodes2.Tab || c === CharCodes2.FormFeed || c === CharCodes2.CarriageReturn;
}
function isEndOfTagSection(c) {
  return c === CharCodes2.Slash || c === CharCodes2.Gt || isWhitespace3(c);
}
function isNumber2(c) {
  return c >= CharCodes2.Zero && c <= CharCodes2.Nine;
}
function isASCIIAlpha(c) {
  return c >= CharCodes2.LowerA && c <= CharCodes2.LowerZ || c >= CharCodes2.UpperA && c <= CharCodes2.UpperZ;
}
function isHexDigit(c) {
  return c >= CharCodes2.UpperA && c <= CharCodes2.UpperF || c >= CharCodes2.LowerA && c <= CharCodes2.LowerF;
}
var QuoteType;
(function(QuoteType2) {
  QuoteType2[QuoteType2["NoValue"] = 0] = "NoValue";
  QuoteType2[QuoteType2["Unquoted"] = 1] = "Unquoted";
  QuoteType2[QuoteType2["Single"] = 2] = "Single";
  QuoteType2[QuoteType2["Double"] = 3] = "Double";
})(QuoteType || (QuoteType = {}));
var Sequences = {
  Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
  CdataEnd: new Uint8Array([93, 93, 62]),
  CommentEnd: new Uint8Array([45, 45, 62]),
  ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
  StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
  TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101])
  // `</title`
};
var Tokenizer2 = class {
  constructor({ xmlMode = false, decodeEntities = true }, cbs) {
    this.cbs = cbs;
    this.state = State2.Text;
    this.buffer = "";
    this.sectionStart = 0;
    this.index = 0;
    this.baseState = State2.Text;
    this.isSpecial = false;
    this.running = true;
    this.offset = 0;
    this.currentSequence = void 0;
    this.sequenceIndex = 0;
    this.trieIndex = 0;
    this.trieCurrent = 0;
    this.entityResult = 0;
    this.entityExcess = 0;
    this.xmlMode = xmlMode;
    this.decodeEntities = decodeEntities;
    this.entityTrie = xmlMode ? decode_data_xml_default : decode_data_html_default;
  }
  reset() {
    this.state = State2.Text;
    this.buffer = "";
    this.sectionStart = 0;
    this.index = 0;
    this.baseState = State2.Text;
    this.currentSequence = void 0;
    this.running = true;
    this.offset = 0;
  }
  write(chunk) {
    this.offset += this.buffer.length;
    this.buffer = chunk;
    this.parse();
  }
  end() {
    if (this.running)
      this.finish();
  }
  pause() {
    this.running = false;
  }
  resume() {
    this.running = true;
    if (this.index < this.buffer.length + this.offset) {
      this.parse();
    }
  }
  /**
   * The current index within all of the written data.
   */
  getIndex() {
    return this.index;
  }
  /**
   * The start of the current section.
   */
  getSectionStart() {
    return this.sectionStart;
  }
  stateText(c) {
    if (c === CharCodes2.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes2.Lt)) {
      if (this.index > this.sectionStart) {
        this.cbs.ontext(this.sectionStart, this.index);
      }
      this.state = State2.BeforeTagName;
      this.sectionStart = this.index;
    } else if (this.decodeEntities && c === CharCodes2.Amp) {
      this.state = State2.BeforeEntity;
    }
  }
  stateSpecialStartSequence(c) {
    const isEnd = this.sequenceIndex === this.currentSequence.length;
    const isMatch = isEnd ? (
      // If we are at the end of the sequence, make sure the tag name has ended
      isEndOfTagSection(c)
    ) : (
      // Otherwise, do a case-insensitive comparison
      (c | 32) === this.currentSequence[this.sequenceIndex]
    );
    if (!isMatch) {
      this.isSpecial = false;
    } else if (!isEnd) {
      this.sequenceIndex++;
      return;
    }
    this.sequenceIndex = 0;
    this.state = State2.InTagName;
    this.stateInTagName(c);
  }
  /** Look for an end tag. For <title> tags, also decode entities. */
  stateInSpecialTag(c) {
    if (this.sequenceIndex === this.currentSequence.length) {
      if (c === CharCodes2.Gt || isWhitespace3(c)) {
        const endOfText = this.index - this.currentSequence.length;
        if (this.sectionStart < endOfText) {
          const actualIndex = this.index;
          this.index = endOfText;
          this.cbs.ontext(this.sectionStart, endOfText);
          this.index = actualIndex;
        }
        this.isSpecial = false;
        this.sectionStart = endOfText + 2;
        this.stateInClosingTagName(c);
        return;
      }
      this.sequenceIndex = 0;
    }
    if ((c | 32) === this.currentSequence[this.sequenceIndex]) {
      this.sequenceIndex += 1;
    } else if (this.sequenceIndex === 0) {
      if (this.currentSequence === Sequences.TitleEnd) {
        if (this.decodeEntities && c === CharCodes2.Amp) {
          this.state = State2.BeforeEntity;
        }
      } else if (this.fastForwardTo(CharCodes2.Lt)) {
        this.sequenceIndex = 1;
      }
    } else {
      this.sequenceIndex = Number(c === CharCodes2.Lt);
    }
  }
  stateCDATASequence(c) {
    if (c === Sequences.Cdata[this.sequenceIndex]) {
      if (++this.sequenceIndex === Sequences.Cdata.length) {
        this.state = State2.InCommentLike;
        this.currentSequence = Sequences.CdataEnd;
        this.sequenceIndex = 0;
        this.sectionStart = this.index + 1;
      }
    } else {
      this.sequenceIndex = 0;
      this.state = State2.InDeclaration;
      this.stateInDeclaration(c);
    }
  }
  /**
   * When we wait for one specific character, we can speed things up
   * by skipping through the buffer until we find it.
   *
   * @returns Whether the character was found.
   */
  fastForwardTo(c) {
    while (++this.index < this.buffer.length + this.offset) {
      if (this.buffer.charCodeAt(this.index - this.offset) === c) {
        return true;
      }
    }
    this.index = this.buffer.length + this.offset - 1;
    return false;
  }
  /**
   * Comments and CDATA end with `-->` and `]]>`.
   *
   * Their common qualities are:
   * - Their end sequences have a distinct character they start with.
   * - That character is then repeated, so we have to check multiple repeats.
   * - All characters but the start character of the sequence can be skipped.
   */
  stateInCommentLike(c) {
    if (c === this.currentSequence[this.sequenceIndex]) {
      if (++this.sequenceIndex === this.currentSequence.length) {
        if (this.currentSequence === Sequences.CdataEnd) {
          this.cbs.oncdata(this.sectionStart, this.index, 2);
        } else {
          this.cbs.oncomment(this.sectionStart, this.index, 2);
        }
        this.sequenceIndex = 0;
        this.sectionStart = this.index + 1;
        this.state = State2.Text;
      }
    } else if (this.sequenceIndex === 0) {
      if (this.fastForwardTo(this.currentSequence[0])) {
        this.sequenceIndex = 1;
      }
    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {
      this.sequenceIndex = 0;
    }
  }
  /**
   * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.
   *
   * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).
   * We allow anything that wouldn't end the tag.
   */
  isTagStartChar(c) {
    return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);
  }
  startSpecial(sequence, offset) {
    this.isSpecial = true;
    this.currentSequence = sequence;
    this.sequenceIndex = offset;
    this.state = State2.SpecialStartSequence;
  }
  stateBeforeTagName(c) {
    if (c === CharCodes2.ExclamationMark) {
      this.state = State2.BeforeDeclaration;
      this.sectionStart = this.index + 1;
    } else if (c === CharCodes2.Questionmark) {
      this.state = State2.InProcessingInstruction;
      this.sectionStart = this.index + 1;
    } else if (this.isTagStartChar(c)) {
      const lower = c | 32;
      this.sectionStart = this.index;
      if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {
        this.startSpecial(Sequences.TitleEnd, 3);
      } else {
        this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State2.BeforeSpecialS : State2.InTagName;
      }
    } else if (c === CharCodes2.Slash) {
      this.state = State2.BeforeClosingTagName;
    } else {
      this.state = State2.Text;
      this.stateText(c);
    }
  }
  stateInTagName(c) {
    if (isEndOfTagSection(c)) {
      this.cbs.onopentagname(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.state = State2.BeforeAttributeName;
      this.stateBeforeAttributeName(c);
    }
  }
  stateBeforeClosingTagName(c) {
    if (isWhitespace3(c)) {
    } else if (c === CharCodes2.Gt) {
      this.state = State2.Text;
    } else {
      this.state = this.isTagStartChar(c) ? State2.InClosingTagName : State2.InSpecialComment;
      this.sectionStart = this.index;
    }
  }
  stateInClosingTagName(c) {
    if (c === CharCodes2.Gt || isWhitespace3(c)) {
      this.cbs.onclosetag(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.state = State2.AfterClosingTagName;
      this.stateAfterClosingTagName(c);
    }
  }
  stateAfterClosingTagName(c) {
    if (c === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
      this.state = State2.Text;
      this.baseState = State2.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeAttributeName(c) {
    if (c === CharCodes2.Gt) {
      this.cbs.onopentagend(this.index);
      if (this.isSpecial) {
        this.state = State2.InSpecialTag;
        this.sequenceIndex = 0;
      } else {
        this.state = State2.Text;
      }
      this.baseState = this.state;
      this.sectionStart = this.index + 1;
    } else if (c === CharCodes2.Slash) {
      this.state = State2.InSelfClosingTag;
    } else if (!isWhitespace3(c)) {
      this.state = State2.InAttributeName;
      this.sectionStart = this.index;
    }
  }
  stateInSelfClosingTag(c) {
    if (c === CharCodes2.Gt) {
      this.cbs.onselfclosingtag(this.index);
      this.state = State2.Text;
      this.baseState = State2.Text;
      this.sectionStart = this.index + 1;
      this.isSpecial = false;
    } else if (!isWhitespace3(c)) {
      this.state = State2.BeforeAttributeName;
      this.stateBeforeAttributeName(c);
    }
  }
  stateInAttributeName(c) {
    if (c === CharCodes2.Eq || isEndOfTagSection(c)) {
      this.cbs.onattribname(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.state = State2.AfterAttributeName;
      this.stateAfterAttributeName(c);
    }
  }
  stateAfterAttributeName(c) {
    if (c === CharCodes2.Eq) {
      this.state = State2.BeforeAttributeValue;
    } else if (c === CharCodes2.Slash || c === CharCodes2.Gt) {
      this.cbs.onattribend(QuoteType.NoValue, this.index);
      this.state = State2.BeforeAttributeName;
      this.stateBeforeAttributeName(c);
    } else if (!isWhitespace3(c)) {
      this.cbs.onattribend(QuoteType.NoValue, this.index);
      this.state = State2.InAttributeName;
      this.sectionStart = this.index;
    }
  }
  stateBeforeAttributeValue(c) {
    if (c === CharCodes2.DoubleQuote) {
      this.state = State2.InAttributeValueDq;
      this.sectionStart = this.index + 1;
    } else if (c === CharCodes2.SingleQuote) {
      this.state = State2.InAttributeValueSq;
      this.sectionStart = this.index + 1;
    } else if (!isWhitespace3(c)) {
      this.sectionStart = this.index;
      this.state = State2.InAttributeValueNq;
      this.stateInAttributeValueNoQuotes(c);
    }
  }
  handleInAttributeValue(c, quote) {
    if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {
      this.cbs.onattribdata(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.cbs.onattribend(quote === CharCodes2.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);
      this.state = State2.BeforeAttributeName;
    } else if (this.decodeEntities && c === CharCodes2.Amp) {
      this.baseState = this.state;
      this.state = State2.BeforeEntity;
    }
  }
  stateInAttributeValueDoubleQuotes(c) {
    this.handleInAttributeValue(c, CharCodes2.DoubleQuote);
  }
  stateInAttributeValueSingleQuotes(c) {
    this.handleInAttributeValue(c, CharCodes2.SingleQuote);
  }
  stateInAttributeValueNoQuotes(c) {
    if (isWhitespace3(c) || c === CharCodes2.Gt) {
      this.cbs.onattribdata(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.cbs.onattribend(QuoteType.Unquoted, this.index);
      this.state = State2.BeforeAttributeName;
      this.stateBeforeAttributeName(c);
    } else if (this.decodeEntities && c === CharCodes2.Amp) {
      this.baseState = this.state;
      this.state = State2.BeforeEntity;
    }
  }
  stateBeforeDeclaration(c) {
    if (c === CharCodes2.OpeningSquareBracket) {
      this.state = State2.CDATASequence;
      this.sequenceIndex = 0;
    } else {
      this.state = c === CharCodes2.Dash ? State2.BeforeComment : State2.InDeclaration;
    }
  }
  stateInDeclaration(c) {
    if (c === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
      this.cbs.ondeclaration(this.sectionStart, this.index);
      this.state = State2.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateInProcessingInstruction(c) {
    if (c === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
      this.cbs.onprocessinginstruction(this.sectionStart, this.index);
      this.state = State2.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeComment(c) {
    if (c === CharCodes2.Dash) {
      this.state = State2.InCommentLike;
      this.currentSequence = Sequences.CommentEnd;
      this.sequenceIndex = 2;
      this.sectionStart = this.index + 1;
    } else {
      this.state = State2.InDeclaration;
    }
  }
  stateInSpecialComment(c) {
    if (c === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
      this.cbs.oncomment(this.sectionStart, this.index, 0);
      this.state = State2.Text;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeSpecialS(c) {
    const lower = c | 32;
    if (lower === Sequences.ScriptEnd[3]) {
      this.startSpecial(Sequences.ScriptEnd, 4);
    } else if (lower === Sequences.StyleEnd[3]) {
      this.startSpecial(Sequences.StyleEnd, 4);
    } else {
      this.state = State2.InTagName;
      this.stateInTagName(c);
    }
  }
  stateBeforeEntity(c) {
    this.entityExcess = 1;
    this.entityResult = 0;
    if (c === CharCodes2.Number) {
      this.state = State2.BeforeNumericEntity;
    } else if (c === CharCodes2.Amp) {
    } else {
      this.trieIndex = 0;
      this.trieCurrent = this.entityTrie[0];
      this.state = State2.InNamedEntity;
      this.stateInNamedEntity(c);
    }
  }
  stateInNamedEntity(c) {
    this.entityExcess += 1;
    this.trieIndex = determineBranch(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);
    if (this.trieIndex < 0) {
      this.emitNamedEntity();
      this.index--;
      return;
    }
    this.trieCurrent = this.entityTrie[this.trieIndex];
    const masked = this.trieCurrent & BinTrieFlags.VALUE_LENGTH;
    if (masked) {
      const valueLength = (masked >> 14) - 1;
      if (!this.allowLegacyEntity() && c !== CharCodes2.Semi) {
        this.trieIndex += valueLength;
      } else {
        const entityStart = this.index - this.entityExcess + 1;
        if (entityStart > this.sectionStart) {
          this.emitPartial(this.sectionStart, entityStart);
        }
        this.entityResult = this.trieIndex;
        this.trieIndex += valueLength;
        this.entityExcess = 0;
        this.sectionStart = this.index + 1;
        if (valueLength === 0) {
          this.emitNamedEntity();
        }
      }
    }
  }
  emitNamedEntity() {
    this.state = this.baseState;
    if (this.entityResult === 0) {
      return;
    }
    const valueLength = (this.entityTrie[this.entityResult] & BinTrieFlags.VALUE_LENGTH) >> 14;
    switch (valueLength) {
      case 1: {
        this.emitCodePoint(this.entityTrie[this.entityResult] & ~BinTrieFlags.VALUE_LENGTH);
        break;
      }
      case 2: {
        this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
        break;
      }
      case 3: {
        this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
        this.emitCodePoint(this.entityTrie[this.entityResult + 2]);
      }
    }
  }
  stateBeforeNumericEntity(c) {
    if ((c | 32) === CharCodes2.LowerX) {
      this.entityExcess++;
      this.state = State2.InHexEntity;
    } else {
      this.state = State2.InNumericEntity;
      this.stateInNumericEntity(c);
    }
  }
  emitNumericEntity(strict) {
    const entityStart = this.index - this.entityExcess - 1;
    const numberStart = entityStart + 2 + Number(this.state === State2.InHexEntity);
    if (numberStart !== this.index) {
      if (entityStart > this.sectionStart) {
        this.emitPartial(this.sectionStart, entityStart);
      }
      this.sectionStart = this.index + Number(strict);
      this.emitCodePoint(replaceCodePoint(this.entityResult));
    }
    this.state = this.baseState;
  }
  stateInNumericEntity(c) {
    if (c === CharCodes2.Semi) {
      this.emitNumericEntity(true);
    } else if (isNumber2(c)) {
      this.entityResult = this.entityResult * 10 + (c - CharCodes2.Zero);
      this.entityExcess++;
    } else {
      if (this.allowLegacyEntity()) {
        this.emitNumericEntity(false);
      } else {
        this.state = this.baseState;
      }
      this.index--;
    }
  }
  stateInHexEntity(c) {
    if (c === CharCodes2.Semi) {
      this.emitNumericEntity(true);
    } else if (isNumber2(c)) {
      this.entityResult = this.entityResult * 16 + (c - CharCodes2.Zero);
      this.entityExcess++;
    } else if (isHexDigit(c)) {
      this.entityResult = this.entityResult * 16 + ((c | 32) - CharCodes2.LowerA + 10);
      this.entityExcess++;
    } else {
      if (this.allowLegacyEntity()) {
        this.emitNumericEntity(false);
      } else {
        this.state = this.baseState;
      }
      this.index--;
    }
  }
  allowLegacyEntity() {
    return !this.xmlMode && (this.baseState === State2.Text || this.baseState === State2.InSpecialTag);
  }
  /**
   * Remove data that has already been consumed from the buffer.
   */
  cleanup() {
    if (this.running && this.sectionStart !== this.index) {
      if (this.state === State2.Text || this.state === State2.InSpecialTag && this.sequenceIndex === 0) {
        this.cbs.ontext(this.sectionStart, this.index);
        this.sectionStart = this.index;
      } else if (this.state === State2.InAttributeValueDq || this.state === State2.InAttributeValueSq || this.state === State2.InAttributeValueNq) {
        this.cbs.onattribdata(this.sectionStart, this.index);
        this.sectionStart = this.index;
      }
    }
  }
  shouldContinue() {
    return this.index < this.buffer.length + this.offset && this.running;
  }
  /**
   * Iterates through the buffer, calling the function corresponding to the current state.
   *
   * States that are more likely to be hit are higher up, as a performance improvement.
   */
  parse() {
    while (this.shouldContinue()) {
      const c = this.buffer.charCodeAt(this.index - this.offset);
      switch (this.state) {
        case State2.Text: {
          this.stateText(c);
          break;
        }
        case State2.SpecialStartSequence: {
          this.stateSpecialStartSequence(c);
          break;
        }
        case State2.InSpecialTag: {
          this.stateInSpecialTag(c);
          break;
        }
        case State2.CDATASequence: {
          this.stateCDATASequence(c);
          break;
        }
        case State2.InAttributeValueDq: {
          this.stateInAttributeValueDoubleQuotes(c);
          break;
        }
        case State2.InAttributeName: {
          this.stateInAttributeName(c);
          break;
        }
        case State2.InCommentLike: {
          this.stateInCommentLike(c);
          break;
        }
        case State2.InSpecialComment: {
          this.stateInSpecialComment(c);
          break;
        }
        case State2.BeforeAttributeName: {
          this.stateBeforeAttributeName(c);
          break;
        }
        case State2.InTagName: {
          this.stateInTagName(c);
          break;
        }
        case State2.InClosingTagName: {
          this.stateInClosingTagName(c);
          break;
        }
        case State2.BeforeTagName: {
          this.stateBeforeTagName(c);
          break;
        }
        case State2.AfterAttributeName: {
          this.stateAfterAttributeName(c);
          break;
        }
        case State2.InAttributeValueSq: {
          this.stateInAttributeValueSingleQuotes(c);
          break;
        }
        case State2.BeforeAttributeValue: {
          this.stateBeforeAttributeValue(c);
          break;
        }
        case State2.BeforeClosingTagName: {
          this.stateBeforeClosingTagName(c);
          break;
        }
        case State2.AfterClosingTagName: {
          this.stateAfterClosingTagName(c);
          break;
        }
        case State2.BeforeSpecialS: {
          this.stateBeforeSpecialS(c);
          break;
        }
        case State2.InAttributeValueNq: {
          this.stateInAttributeValueNoQuotes(c);
          break;
        }
        case State2.InSelfClosingTag: {
          this.stateInSelfClosingTag(c);
          break;
        }
        case State2.InDeclaration: {
          this.stateInDeclaration(c);
          break;
        }
        case State2.BeforeDeclaration: {
          this.stateBeforeDeclaration(c);
          break;
        }
        case State2.BeforeComment: {
          this.stateBeforeComment(c);
          break;
        }
        case State2.InProcessingInstruction: {
          this.stateInProcessingInstruction(c);
          break;
        }
        case State2.InNamedEntity: {
          this.stateInNamedEntity(c);
          break;
        }
        case State2.BeforeEntity: {
          this.stateBeforeEntity(c);
          break;
        }
        case State2.InHexEntity: {
          this.stateInHexEntity(c);
          break;
        }
        case State2.InNumericEntity: {
          this.stateInNumericEntity(c);
          break;
        }
        default: {
          this.stateBeforeNumericEntity(c);
        }
      }
      this.index++;
    }
    this.cleanup();
  }
  finish() {
    if (this.state === State2.InNamedEntity) {
      this.emitNamedEntity();
    }
    if (this.sectionStart < this.index) {
      this.handleTrailingData();
    }
    this.cbs.onend();
  }
  /** Handle any trailing data. */
  handleTrailingData() {
    const endIndex = this.buffer.length + this.offset;
    if (this.state === State2.InCommentLike) {
      if (this.currentSequence === Sequences.CdataEnd) {
        this.cbs.oncdata(this.sectionStart, endIndex, 0);
      } else {
        this.cbs.oncomment(this.sectionStart, endIndex, 0);
      }
    } else if (this.state === State2.InNumericEntity && this.allowLegacyEntity()) {
      this.emitNumericEntity(false);
    } else if (this.state === State2.InHexEntity && this.allowLegacyEntity()) {
      this.emitNumericEntity(false);
    } else if (this.state === State2.InTagName || this.state === State2.BeforeAttributeName || this.state === State2.BeforeAttributeValue || this.state === State2.AfterAttributeName || this.state === State2.InAttributeName || this.state === State2.InAttributeValueSq || this.state === State2.InAttributeValueDq || this.state === State2.InAttributeValueNq || this.state === State2.InClosingTagName) {
    } else {
      this.cbs.ontext(this.sectionStart, endIndex);
    }
  }
  emitPartial(start, endIndex) {
    if (this.baseState !== State2.Text && this.baseState !== State2.InSpecialTag) {
      this.cbs.onattribdata(start, endIndex);
    } else {
      this.cbs.ontext(start, endIndex);
    }
  }
  emitCodePoint(cp) {
    if (this.baseState !== State2.Text && this.baseState !== State2.InSpecialTag) {
      this.cbs.onattribentity(cp);
    } else {
      this.cbs.ontextentity(cp);
    }
  }
};

// node_modules/htmlparser2/lib/esm/Parser.js
var formTags = /* @__PURE__ */ new Set([
  "input",
  "option",
  "optgroup",
  "select",
  "button",
  "datalist",
  "textarea"
]);
var pTag = /* @__PURE__ */ new Set(["p"]);
var tableSectionTags = /* @__PURE__ */ new Set(["thead", "tbody"]);
var ddtTags = /* @__PURE__ */ new Set(["dd", "dt"]);
var rtpTags = /* @__PURE__ */ new Set(["rt", "rp"]);
var openImpliesClose = /* @__PURE__ */ new Map([
  ["tr", /* @__PURE__ */ new Set(["tr", "th", "td"])],
  ["th", /* @__PURE__ */ new Set(["th"])],
  ["td", /* @__PURE__ */ new Set(["thead", "th", "td"])],
  ["body", /* @__PURE__ */ new Set(["head", "link", "script"])],
  ["li", /* @__PURE__ */ new Set(["li"])],
  ["p", pTag],
  ["h1", pTag],
  ["h2", pTag],
  ["h3", pTag],
  ["h4", pTag],
  ["h5", pTag],
  ["h6", pTag],
  ["select", formTags],
  ["input", formTags],
  ["output", formTags],
  ["button", formTags],
  ["datalist", formTags],
  ["textarea", formTags],
  ["option", /* @__PURE__ */ new Set(["option"])],
  ["optgroup", /* @__PURE__ */ new Set(["optgroup", "option"])],
  ["dd", ddtTags],
  ["dt", ddtTags],
  ["address", pTag],
  ["article", pTag],
  ["aside", pTag],
  ["blockquote", pTag],
  ["details", pTag],
  ["div", pTag],
  ["dl", pTag],
  ["fieldset", pTag],
  ["figcaption", pTag],
  ["figure", pTag],
  ["footer", pTag],
  ["form", pTag],
  ["header", pTag],
  ["hr", pTag],
  ["main", pTag],
  ["nav", pTag],
  ["ol", pTag],
  ["pre", pTag],
  ["section", pTag],
  ["table", pTag],
  ["ul", pTag],
  ["rt", rtpTags],
  ["rp", rtpTags],
  ["tbody", tableSectionTags],
  ["tfoot", tableSectionTags]
]);
var voidElements = /* @__PURE__ */ new Set([
  "area",
  "base",
  "basefont",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
var foreignContextElements = /* @__PURE__ */ new Set(["math", "svg"]);
var htmlIntegrationElements = /* @__PURE__ */ new Set([
  "mi",
  "mo",
  "mn",
  "ms",
  "mtext",
  "annotation-xml",
  "foreignobject",
  "desc",
  "title"
]);
var reNameEnd = /\s|\//;
var Parser2 = class {
  constructor(cbs, options = {}) {
    var _a3, _b, _c, _d, _e4;
    this.options = options;
    this.startIndex = 0;
    this.endIndex = 0;
    this.openTagStart = 0;
    this.tagname = "";
    this.attribname = "";
    this.attribvalue = "";
    this.attribs = null;
    this.stack = [];
    this.foreignContext = [];
    this.buffers = [];
    this.bufferOffset = 0;
    this.writeIndex = 0;
    this.ended = false;
    this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
    this.lowerCaseTagNames = (_a3 = options.lowerCaseTags) !== null && _a3 !== void 0 ? _a3 : !options.xmlMode;
    this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
    this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer2)(this.options, this);
    (_e4 = (_d = this.cbs).onparserinit) === null || _e4 === void 0 ? void 0 : _e4.call(_d, this);
  }
  // Tokenizer event handlers
  /** @internal */
  ontext(start, endIndex) {
    var _a3, _b;
    const data2 = this.getSlice(start, endIndex);
    this.endIndex = endIndex - 1;
    (_b = (_a3 = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a3, data2);
    this.startIndex = endIndex;
  }
  /** @internal */
  ontextentity(cp) {
    var _a3, _b;
    const index2 = this.tokenizer.getSectionStart();
    this.endIndex = index2 - 1;
    (_b = (_a3 = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a3, fromCodePoint(cp));
    this.startIndex = index2;
  }
  isVoidElement(name) {
    return !this.options.xmlMode && voidElements.has(name);
  }
  /** @internal */
  onopentagname(start, endIndex) {
    this.endIndex = endIndex;
    let name = this.getSlice(start, endIndex);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    this.emitOpenTag(name);
  }
  emitOpenTag(name) {
    var _a3, _b, _c, _d;
    this.openTagStart = this.startIndex;
    this.tagname = name;
    const impliesClose = !this.options.xmlMode && openImpliesClose.get(name);
    if (impliesClose) {
      while (this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])) {
        const element2 = this.stack.pop();
        (_b = (_a3 = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a3, element2, true);
      }
    }
    if (!this.isVoidElement(name)) {
      this.stack.push(name);
      if (foreignContextElements.has(name)) {
        this.foreignContext.push(true);
      } else if (htmlIntegrationElements.has(name)) {
        this.foreignContext.push(false);
      }
    }
    (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);
    if (this.cbs.onopentag)
      this.attribs = {};
  }
  endOpenTag(isImplied) {
    var _a3, _b;
    this.startIndex = this.openTagStart;
    if (this.attribs) {
      (_b = (_a3 = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a3, this.tagname, this.attribs, isImplied);
      this.attribs = null;
    }
    if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
      this.cbs.onclosetag(this.tagname, true);
    }
    this.tagname = "";
  }
  /** @internal */
  onopentagend(endIndex) {
    this.endIndex = endIndex;
    this.endOpenTag(false);
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  onclosetag(start, endIndex) {
    var _a3, _b, _c, _d, _e4, _f;
    this.endIndex = endIndex;
    let name = this.getSlice(start, endIndex);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {
      this.foreignContext.pop();
    }
    if (!this.isVoidElement(name)) {
      const pos = this.stack.lastIndexOf(name);
      if (pos !== -1) {
        if (this.cbs.onclosetag) {
          let count = this.stack.length - pos;
          while (count--) {
            this.cbs.onclosetag(this.stack.pop(), count !== 0);
          }
        } else
          this.stack.length = pos;
      } else if (!this.options.xmlMode && name === "p") {
        this.emitOpenTag("p");
        this.closeCurrentTag(true);
      }
    } else if (!this.options.xmlMode && name === "br") {
      (_b = (_a3 = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a3, "br");
      (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, "br", {}, true);
      (_f = (_e4 = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e4, "br", false);
    }
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  onselfclosingtag(endIndex) {
    this.endIndex = endIndex;
    if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {
      this.closeCurrentTag(false);
      this.startIndex = endIndex + 1;
    } else {
      this.onopentagend(endIndex);
    }
  }
  closeCurrentTag(isOpenImplied) {
    var _a3, _b;
    const name = this.tagname;
    this.endOpenTag(isOpenImplied);
    if (this.stack[this.stack.length - 1] === name) {
      (_b = (_a3 = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a3, name, !isOpenImplied);
      this.stack.pop();
    }
  }
  /** @internal */
  onattribname(start, endIndex) {
    this.startIndex = start;
    const name = this.getSlice(start, endIndex);
    this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;
  }
  /** @internal */
  onattribdata(start, endIndex) {
    this.attribvalue += this.getSlice(start, endIndex);
  }
  /** @internal */
  onattribentity(cp) {
    this.attribvalue += fromCodePoint(cp);
  }
  /** @internal */
  onattribend(quote, endIndex) {
    var _a3, _b;
    this.endIndex = endIndex;
    (_b = (_a3 = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a3, this.attribname, this.attribvalue, quote === QuoteType.Double ? '"' : quote === QuoteType.Single ? "'" : quote === QuoteType.NoValue ? void 0 : null);
    if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
      this.attribs[this.attribname] = this.attribvalue;
    }
    this.attribvalue = "";
  }
  getInstructionName(value) {
    const index2 = value.search(reNameEnd);
    let name = index2 < 0 ? value : value.substr(0, index2);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    return name;
  }
  /** @internal */
  ondeclaration(start, endIndex) {
    this.endIndex = endIndex;
    const value = this.getSlice(start, endIndex);
    if (this.cbs.onprocessinginstruction) {
      const name = this.getInstructionName(value);
      this.cbs.onprocessinginstruction(`!${name}`, `!${value}`);
    }
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  onprocessinginstruction(start, endIndex) {
    this.endIndex = endIndex;
    const value = this.getSlice(start, endIndex);
    if (this.cbs.onprocessinginstruction) {
      const name = this.getInstructionName(value);
      this.cbs.onprocessinginstruction(`?${name}`, `?${value}`);
    }
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  oncomment(start, endIndex, offset) {
    var _a3, _b, _c, _d;
    this.endIndex = endIndex;
    (_b = (_a3 = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a3, this.getSlice(start, endIndex - offset));
    (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  oncdata(start, endIndex, offset) {
    var _a3, _b, _c, _d, _e4, _f, _g, _h, _j, _k;
    this.endIndex = endIndex;
    const value = this.getSlice(start, endIndex - offset);
    if (this.options.xmlMode || this.options.recognizeCDATA) {
      (_b = (_a3 = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a3);
      (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
      (_f = (_e4 = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e4);
    } else {
      (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, `[CDATA[${value}]]`);
      (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
    }
    this.startIndex = endIndex + 1;
  }
  /** @internal */
  onend() {
    var _a3, _b;
    if (this.cbs.onclosetag) {
      this.endIndex = this.startIndex;
      for (let index2 = this.stack.length; index2 > 0; this.cbs.onclosetag(this.stack[--index2], true))
        ;
    }
    (_b = (_a3 = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a3);
  }
  /**
   * Resets the parser to a blank state, ready to parse a new HTML document
   */
  reset() {
    var _a3, _b, _c, _d;
    (_b = (_a3 = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a3);
    this.tokenizer.reset();
    this.tagname = "";
    this.attribname = "";
    this.attribs = null;
    this.stack.length = 0;
    this.startIndex = 0;
    this.endIndex = 0;
    (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
    this.buffers.length = 0;
    this.bufferOffset = 0;
    this.writeIndex = 0;
    this.ended = false;
  }
  /**
   * Resets the parser, then parses a complete document and
   * pushes it to the handler.
   *
   * @param data Document to parse.
   */
  parseComplete(data2) {
    this.reset();
    this.end(data2);
  }
  getSlice(start, end2) {
    while (start - this.bufferOffset >= this.buffers[0].length) {
      this.shiftBuffer();
    }
    let slice2 = this.buffers[0].slice(start - this.bufferOffset, end2 - this.bufferOffset);
    while (end2 - this.bufferOffset > this.buffers[0].length) {
      this.shiftBuffer();
      slice2 += this.buffers[0].slice(0, end2 - this.bufferOffset);
    }
    return slice2;
  }
  shiftBuffer() {
    this.bufferOffset += this.buffers[0].length;
    this.writeIndex--;
    this.buffers.shift();
  }
  /**
   * Parses a chunk of data and calls the corresponding callbacks.
   *
   * @param chunk Chunk to parse.
   */
  write(chunk) {
    var _a3, _b;
    if (this.ended) {
      (_b = (_a3 = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a3, new Error(".write() after done!"));
      return;
    }
    this.buffers.push(chunk);
    if (this.tokenizer.running) {
      this.tokenizer.write(chunk);
      this.writeIndex++;
    }
  }
  /**
   * Parses the end of the buffer and clears the stack, calls onend.
   *
   * @param chunk Optional final chunk to parse.
   */
  end(chunk) {
    var _a3, _b;
    if (this.ended) {
      (_b = (_a3 = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a3, new Error(".end() after done!"));
      return;
    }
    if (chunk)
      this.write(chunk);
    this.ended = true;
    this.tokenizer.end();
  }
  /**
   * Pauses parsing. The parser won't emit events until `resume` is called.
   */
  pause() {
    this.tokenizer.pause();
  }
  /**
   * Resumes parsing after `pause` was called.
   */
  resume() {
    this.tokenizer.resume();
    while (this.tokenizer.running && this.writeIndex < this.buffers.length) {
      this.tokenizer.write(this.buffers[this.writeIndex++]);
    }
    if (this.ended)
      this.tokenizer.end();
  }
  /**
   * Alias of `write`, for backwards compatibility.
   *
   * @param chunk Chunk to parse.
   * @deprecated
   */
  parseChunk(chunk) {
    this.write(chunk);
  }
  /**
   * Alias of `end`, for backwards compatibility.
   *
   * @param chunk Optional final chunk to parse.
   * @deprecated
   */
  done(chunk) {
    this.end(chunk);
  }
};

// node_modules/htmlparser2/lib/esm/index.js
function parseDocument(data2, options) {
  const handler2 = new DomHandler(void 0, options);
  new Parser2(handler2, options).end(data2);
  return handler2.root;
}

// node_modules/cheerio/lib/esm/index.js
var parse6 = getParse((content, options, isDocument2, context) => options.xmlMode || options._useHtmlParser2 ? parseDocument(content, options) : parseWithParse5(content, options, isDocument2, context));
var load = getLoad(parse6, (dom, options) => options.xmlMode || options._useHtmlParser2 ? esm_default(dom, options) : renderWithParse5(dom));
var esm_default2 = load([]);
var { contains: contains2 } = static_exports;
var { merge: merge3 } = static_exports;
var { parseHTML: parseHTML2 } = static_exports;
var { root: root2 } = static_exports;

// src/main.ts
var LivecodesPlugin = class extends import_obsidian19.Plugin {
  constructor(app2, manifest) {
    super(app2, manifest);
    this.state = "initial";
    this.delay = 1500;
    this.d = new Date();
    this.logDebug = true;
    // async copyStringToClipboard(text:string, topic:string|undefined=undefined) {
    //   navigator.clipboard
    //     .writeText(text)
    //     .then(function () {
    //       showNotice((topic !== undefined ? topic + " " : "Text ") + "copied to clipboard", 2500, 'success');
    //     })
    //     .catch(function (error) {
    //       console.error('Failed to copy to clipboard: ', error)
    //     })
    // }
    this.createText = async (fileContent) => {
      return fileContent == null ? void 0 : fileContent.trim();
    };
  }
  async onload() {
    await this.loadSettings();
    if (import_obsidian19.Platform.isDesktop) {
      this.register(
        onElement(
          document,
          "contextmenu",
          "div",
          this.onClickCodeblock.bind(this)
        )
      );
    }
    this.registerView(
      VIEW_TYPE_PLAYGROUND,
      (leaf) => new PlaygroundView(this.app, leaf, this.settings.jsonTemplate, this.settings)
    );
    this.registerView(
      VIEW_TYPE_PLAYGROUND_SEARCH,
      (leaf) => new LivecodesSearchView(this.app, leaf, this.settings)
    );
    this.addCommand({
      id: "open-livecodes-search",
      name: "Search playgrounds",
      callback: async () => {
        await this.activateSearchView();
      }
    });
    this.addRibbonIcon("file-code-2", "Open playground", async () => {
      new PlaygroundSelectModal(this).open();
    });
    this.addRibbonIcon("code", "Quick playground", async () => {
      await this.newLivecodesPlayground(false, null);
    });
    this.addRibbonIcon("search-code", "Search playgrounds", async () => {
      await this.activateSearchView();
    });
    this.addCommand({
      id: "open-playground-select-modal",
      name: "Open playground",
      callback: async () => {
        new PlaygroundSelectModal(this).open();
      }
    });
    this.addCommand({
      id: "open-starter-select-modal",
      name: "Open starter playground",
      callback: async () => {
        new StarterSelectModal(this).open();
      }
    });
    this.addCommand({
      id: "open-language-select-modal",
      name: "New playground",
      callback: async () => {
        let conf = {
          title: "",
          markup: "html",
          style: "css",
          twcss: false,
          lightningcss: false,
          windicss: false,
          unocss: false,
          script: "javascript"
        };
        let cb = async (res) => {
          await this.newLanguageSelectPlayground(res);
        };
        new LanguageSelectModal(this.app, this.plugin, "New playground", conf, cb).open();
      }
    });
    this.addCommand({
      id: "new-playground-in-livecodes",
      name: "Quick playground",
      callback: async () => {
        await this.newLivecodesPlayground(false, null);
      }
    });
    this.addCommand({
      id: "open-codeblocks-in-livecodes",
      name: "Open codeblocks in Livecodes",
      editorCheckCallback: (checking, editor, view) => {
        let res = this.checkForCodeblocks(editor);
        if (res) {
          if (!checking) {
            this.newLivecodesPlaygroundFromCodeblocks();
          }
          return true;
        }
        return false;
      }
    });
    this.addCommand({
      id: "open-livecodes-playground-from-codepen",
      name: "New playground from CodePen",
      callback: async () => {
        try {
          await codepenUrlModal(this.app, "CodePen URL", "", "", "e.g. https://codepen.io/chriscoyier/pen/DELgOJ", false).then(async (cpUrl) => {
            if ((cpUrl == null ? void 0 : cpUrl.length) === 0) {
              return;
            }
            let regex = /https:\/\/codepen\.io\/[a-zA-Z0-9_\-]{1,50}\/pen\/[a-zA-z0-9]{1,50}/g;
            if (!regex.test(cpUrl)) {
              showNotice("Error: Unable to validate as CodePen.io URL. See the developer console for error details. Click this message to dismiss", 0, "error");
              return;
            }
            showNotice(`Fetching pen from ${cpUrl}`, 1e4, "loading");
            await (0, import_obsidian19.requestUrl)(cpUrl).then(
              async (f2) => {
                let htmlContent = f2.text;
                let cnf = { title: "", markup: { content: "", language: "" }, style: { content: "", language: "" }, script: { content: "", language: "" } };
                try {
                  const $4 = load(htmlContent);
                  let content = "";
                  $4('textarea[id="init-data"]').each((i, el2) => {
                    var _a3;
                    content = (_a3 = $4(el2).text()) == null ? void 0 : _a3.trim();
                  });
                  if (content === "") {
                    showNotice("Error importing CodePen: content not found. Click this message to dismiss.", 0, "error");
                    return;
                  }
                  let penJson = JSON.parse(content);
                  let itemJson = JSON.parse(penJson.__item);
                  await saveAsModal(this.app, "New livecodes playground", "Save as:", itemJson.title !== "" ? itemJson.title : "Untitled", "e.g. New Playground", false).then(
                    async (fName) => {
                      if ((fName == null ? void 0 : fName.length) === 0) {
                        return;
                      }
                      cnf.title = fName;
                      cnf.description = itemJson.description !== "" ? itemJson.description : "";
                      cnf.tags = itemJson.tags.length ? itemJson.tags : [];
                      let extStylesheets = [];
                      let extScripts = [];
                      if (itemJson.resources.length) {
                        itemJson.resources.forEach((resource) => {
                          if (resource.resource_type === "css") {
                            extStylesheets = [...extStylesheets, resource.url];
                          }
                          if (resource.resource_type === "js") {
                            extScripts = [...extScripts, resource.url];
                          }
                        });
                        if (extStylesheets.length) {
                          cnf.stylesheets = extStylesheets;
                        }
                        if (extScripts.length) {
                          cnf.scripts = extScripts;
                        }
                      }
                      if (itemJson.css_pre_processor !== "" && ["scss", "less", "stylus"].contains(itemJson.css_pre_processor)) {
                        cnf.style.language = itemJson.css_pre_processor;
                      } else {
                        cnf.style.language = "css";
                      }
                      if (itemJson.css_starter !== "") {
                        switch (itemJson.css_starter) {
                          case "reset":
                            cnf.cssPreset = "reset-css";
                            break;
                          case "normalize":
                            cnf.cssPreset = "normalize.css";
                            break;
                        }
                      }
                      cnf.style.content = itemJson.css;
                      if (itemJson.js_library !== "") {
                        switch (itemJson.js_library) {
                          case "jquery":
                            cnf.head = blankPlayground.head + '\n<script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"><\/script>';
                            break;
                        }
                      }
                      if (itemJson.js_pre_processor !== "" && ["coffeescript", "typescript", "livescript", "babel"].contains(itemJson.js_pre_processor)) {
                        cnf.script.language = itemJson.js_pre_processor;
                      } else {
                        cnf.script.language = "javascript";
                      }
                      cnf.script.content = itemJson.js;
                      if (itemJson.html_pre_processor !== "" && ["pug", "markdown"].contains(itemJson.html_pre_processor)) {
                        cnf.markup.language = itemJson.html_pre_processor;
                      } else {
                        cnf.markup.language = "html";
                      }
                      cnf.markup.content = "<!-- source: " + cpUrl + " -->\n\n" + itemJson.html;
                      if (itemJson.head !== "") {
                        if (cnf.head !== void 0) {
                          cnf.head = cnf.head + "\n" + itemJson.head;
                        } else {
                          cnf.head = blankPlayground.head + "\n" + itemJson.head;
                        }
                      }
                      if (itemJson.html_classes !== "") {
                        cnf.htmlAttrs = `lang="en" class="${itemJson.html_classes}"`;
                      }
                      let newPlayground = { ...blankPlayground, ...cnf };
                      newPlayground.appUrl = this.settings.appUrl;
                      newPlayground.fontFamily = this.settings.fontFamily;
                      newPlayground.fontSize = this.settings.fontSize;
                      newPlayground.editor = this.settings.editor;
                      newPlayground.editorTheme = this.settings.editorTheme;
                      newPlayground.lineNumbers = this.settings.lineNumbers;
                      newPlayground.theme = this.settings.darkTheme ? "dark" : "light";
                      newPlayground.layout = this.settings.layout;
                      newPlayground.useTabs = this.settings.useTabs;
                      newPlayground.tabSize = this.settings.tabSize;
                      newPlayground.closeBrackets = this.settings.closeBrackets;
                      newPlayground.semicolons = this.settings.semicolons;
                      newPlayground.singleQuote = this.settings.singleQuote;
                      newPlayground.trailingComma = this.settings.trailingComma;
                      newPlayground.wordWrap = this.settings.wordWrap;
                      newPlayground.enableAI = this.settings.enableAI;
                      newPlayground.autoupdate = this.settings.autoUpdate;
                      newPlayground.delay = this.settings.delay;
                      let prettyCfg = JSON.stringify(newPlayground, null, 2);
                      try {
                        await this.app.vault.create(
                          this.settings.playgroundFolder + "/" + fName + ".json",
                          await this.createText(
                            prettyCfg
                          )
                        ).then(
                          async (f3) => {
                            this.settings.jsonTemplate = f3;
                            await this.saveSettings();
                            await this.activatePlaygroundView(true);
                          }
                        );
                        showNotice("New playground saved as: " + this.settings.playgroundFolder + "/" + fName + ".json", 3e3, "success");
                      } catch (error) {
                        showNotice(this.settings.playgroundFolder + "/" + fName + ".json - " + error + " Click this message to dismiss.", 0, "error");
                      }
                    }
                  );
                } catch (error) {
                  throw error;
                }
              }
            );
          });
        } catch (error) {
          showNotice(error + " Click this message to dismiss.", 0, "error");
          console.log(error);
        }
      }
    });
    this.registerObsidianProtocolHandler("playground", async (e) => {
      const parameters = e;
      if (parameters.playgroundPath) {
        try {
          const f2 = this.app.vault.getFileByPath(parameters.playgroundPath);
          if (f2) {
            this.settings.jsonTemplate = f2;
            await this.saveSettings();
            await this.activatePlaygroundView();
          }
        } catch (error) {
          showNotice("Error: " + error + " Click this message to dismiss.", 0, "error");
        }
      } else if (parameters.gistUrl) {
        showNotice("Requesting gist from Github\u2026", 5e3, "loading");
        try {
          let requestResults = await (0, import_obsidian19.requestUrl)(parameters.gistUrl);
          await this.newLivecodesPlaygroundFromGist(JSON.stringify(requestResults.json));
        } catch (error) {
          showNotice("Error: " + error + " Click this message to dismiss.", 0, "error");
        }
      }
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        const f2 = this.app.vault.getFileByPath(file.path);
        if (f2 && f2.extension.toLowerCase() === "json" && f2.path.contains(this.settings.playgroundFolder)) {
          menu.addSeparator();
          menu.addItem((item) => {
            item.setTitle("Open playground").setIcon("code").onClick(async () => {
              this.settings.jsonTemplate = f2;
              await this.saveSettings();
              await this.activatePlaygroundView();
            });
          });
          menu.addItem((item) => {
            item.setTitle("Copy markdown link to playground").setIcon("link").onClick(async () => {
              let playgroundPath = (0, import_obsidian19.normalizePath)(f2.path);
              await copyStringToClipboard("[" + f2.name + "](obsidian://playground?vault=" + encodeURIComponent(this.app.vault.getName()) + "&playgroundPath=" + encodeURIComponent(playgroundPath) + ")");
            });
          });
          menu.addItem((item) => {
            item.setTitle("Copy Obsidian URL to playground").setIcon("link").onClick(async () => {
              let playgroundPath = (0, import_obsidian19.normalizePath)(f2.path);
              await copyStringToClipboard("obsidian://playground?vault=" + encodeURIComponent(this.app.vault.getName()) + "&playgroundPath=" + encodeURIComponent(playgroundPath));
            });
          });
          menu.addSeparator();
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", async (menu, file) => {
        const f2 = this.app.vault.getFolderByPath(file.path);
        if (f2 && f2.children.length > 1 && f2.children.length <= 3) {
          let showMenu = false;
          f2.children.forEach((f3) => {
            let fileExt = f3.name.split(".").pop();
            if (ALLOWED_EXTS.includes(fileExt)) {
              showMenu = true;
              return;
            }
          });
          if (showMenu) {
            menu.addSeparator();
            menu.addItem((item) => {
              item.setTitle("Open in Livecodes").setIcon("file-code-2").onClick(async () => {
                await this.newLivecodesPlayground(true, f2);
              });
            });
            menu.addSeparator();
          }
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", async (menu, file) => {
        const f2 = this.app.vault.getFileByPath(file.path);
        if (f2) {
          let showMenu = false;
          let fileExt = f2.name.split(".").pop();
          if (ALLOWED_EXTS.includes(fileExt)) {
            showMenu = true;
          }
          if (showMenu) {
            menu.addSeparator();
            menu.addItem((item) => {
              item.setTitle("Open in Livecodes").setIcon("file-code-2").onClick(async () => {
                await this.newLivecodesPlayground(true, f2);
                return;
              });
            });
            menu.addSeparator();
          }
        }
      })
    );
    this.addSettingTab(new LivecodesSettingsTab(this.app, this));
    this.state = "loaded";
    console.log(this.manifest.name, "(v" + this.manifest.version + ")", this.state);
  }
  onunload() {
    this.state = "unloaded";
    console.log(this.manifest.name, "(v" + this.manifest.version + ")", this.state);
  }
  checkForCodeblocks(editor) {
    const PATTERN = /^([A-Za-z \t]*)```([A-Za-z]*)?\n([\s\S]*?)```([A-Za-z \t]*)*$/gm;
    let markdown = editor.getValue();
    let matches;
    do {
      matches = PATTERN.exec(markdown);
      if (matches && [...ALLOWED_LANGS, ...["js", "ts"]].includes(matches[2])) {
        return true;
      }
    } while (matches);
    return false;
  }
  async activatePlaygroundView(skipNotice = false) {
    if (!skipNotice) {
      showNotice("Loading playground\u2026", 5e3, "loading");
    }
    await this.app.workspace.getLeaf(true).setViewState({
      type: VIEW_TYPE_PLAYGROUND,
      active: true
    });
    const leaf = this.app.workspace.getMostRecentLeaf();
    if ((leaf == null ? void 0 : leaf.view) instanceof PlaygroundView) {
      this.app.workspace.revealLeaf(leaf);
    }
  }
  async activateSearchView() {
    const { workspace } = this.app;
    let leaf;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_PLAYGROUND_SEARCH);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({ type: VIEW_TYPE_PLAYGROUND_SEARCH, active: true });
    }
    workspace.revealLeaf(leaf);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /*/
  async onExternalSettingsChange(): Promise<void> {
    console.log('onExternalSettingsChange');
    await this.loadSettings();
  }
  /**/
  async newLanguageSelectPlayground(res) {
    var _a3;
    if (((_a3 = res.title) == null ? void 0 : _a3.length) === 0) {
      return;
    }
    let newPlayground = blankPlayground;
    newPlayground.markup.language = res.markup;
    newPlayground.markup.content = "";
    newPlayground.style.language = res.style;
    newPlayground.style.content = "";
    newPlayground.script.language = res.script;
    newPlayground.script.content = "";
    let processors = [];
    if (res.twcss) {
      newPlayground.customSettings = JSON.stringify({ "imports": {}, "tailwindcss": { "plugins": ["@tailwindcss/forms", "@tailwindcss/typography", "@tailwindcss/aspect-ratio", "@tailwindcss/line-clamp"], "theme": { "extend": { "colors": { "sky": { "50": "#f0f9ff", "100": "#e0f2fe", "200": "#bae6fd", "300": "#7dd3fc", "400": "#38bdf8", "500": "#0ea5e9", "600": "#0284c7", "700": "#0369a1", "800": "#075985", "900": "#0c4a6e" }, "cyan": { "50": "#ecfeff", "100": "#cffafe", "200": "#a5f3fc", "300": "#67e8f9", "400": "#22d3ee", "500": "#06b6d4", "600": "#0891b2", "700": "#0e7490", "800": "#155e75", "900": "#164e63" } } } } } });
      newPlayground.style.content = "@tailwind base;\n@tailwind components;\n@tailwind utilities;";
      processors.push("tailwindcss");
    }
    if (res.lightningcss) {
      processors.push("lightningcss");
    }
    if (res.unocss) {
      processors.push("unocss");
    }
    if (res.windicss) {
      processors.push("windicss");
    }
    newPlayground.processors = processors;
    newPlayground.title = res.title;
    newPlayground.appUrl = this.settings.appUrl;
    newPlayground.fontFamily = this.settings.fontFamily;
    newPlayground.fontSize = this.settings.fontSize;
    newPlayground.editor = this.settings.editor;
    newPlayground.editorTheme = this.settings.editorTheme;
    newPlayground.lineNumbers = this.settings.lineNumbers;
    newPlayground.theme = this.settings.darkTheme ? "dark" : "light";
    newPlayground.layout = this.settings.layout;
    newPlayground.useTabs = this.settings.useTabs;
    newPlayground.tabSize = this.settings.tabSize;
    newPlayground.closeBrackets = this.settings.closeBrackets;
    newPlayground.semicolons = this.settings.semicolons;
    newPlayground.singleQuote = this.settings.singleQuote;
    newPlayground.trailingComma = this.settings.trailingComma;
    newPlayground.wordWrap = this.settings.wordWrap;
    newPlayground.enableAI = this.settings.enableAI;
    newPlayground.autoupdate = this.settings.autoUpdate;
    newPlayground.delay = this.settings.delay;
    let prettyCfg = JSON.stringify(newPlayground, null, 2);
    try {
      await this.app.vault.create(
        this.settings.playgroundFolder + "/" + res.title + ".json",
        await this.createText(
          prettyCfg
        )
      ).then(
        async (f2) => {
          this.settings.jsonTemplate = f2;
          await this.saveSettings();
          await this.activatePlaygroundView();
        }
      );
      showNotice("New playground saved as: " + this.settings.playgroundFolder + "/" + res.title + ".json", 3e3, "success");
    } catch (error) {
      showNotice(this.settings.playgroundFolder + "/" + res.title + ".json - " + error + " Click this message to dismiss.", 0, "error");
    }
  }
  async newLivecodesPlayground(fromMenu = false, file) {
    await saveAsModal(this.app, "New livecodes playground", "Save as:", "", "e.g. New Playground", false).then(async (fName) => {
      if ((fName == null ? void 0 : fName.length) === 0) {
        return;
      }
      let newPlayground = blankPlayground;
      if (fromMenu && file !== null && (file instanceof import_obsidian19.TFile || file instanceof import_obsidian19.TFolder)) {
        let foundMarkup = false;
        let foundStyle = false;
        let foundScript = false;
        let newMarkupFile = "";
        let newMarkupExtension = "";
        let newStyleFile = "";
        let newStyleExtension = "";
        let newScriptFile = "";
        let newScriptExtension = "";
        if (file instanceof import_obsidian19.TFile) {
          let fileExt = file.extension;
          foundMarkup = fileExt === "html" || fileExt === "mdx" || fileExt === "astro";
          foundStyle = fileExt === "css" || fileExt === "scss";
          foundScript = fileExt === "js" || fileExt === "jsx" || fileExt === "tsx" || fileExt === "ts" || fileExt === "svelte";
          if (fileExt === "html" || fileExt === "mdx" || fileExt === "astro") {
            newMarkupExtension = fileExt;
          } else if (fileExt === "css" || fileExt === "scss") {
            newStyleExtension = fileExt;
          } else if (fileExt === "js" || fileExt === "jsx" || fileExt === "tsx" || fileExt === "ts" || fileExt === "svelte") {
            newScriptExtension = fileExt;
          }
        } else if (file instanceof import_obsidian19.TFolder) {
          file.children.forEach((f2) => {
            if (f2.extension === "html" || f2.extension === "mdx" || f2.extension === "astro") {
              newMarkupFile = (0, import_obsidian19.normalizePath)(f2.path);
              newMarkupExtension = f2.extension;
              foundMarkup = true;
            }
            if (f2.extension === "css" || f2.extension === "scss") {
              newStyleFile = (0, import_obsidian19.normalizePath)(f2.path);
              newStyleExtension = f2.extension;
              foundStyle = true;
            }
            if (f2.extension === "js" || f2.extension === "jsx" || f2.extension === "tsx" || f2.extension === "ts" || f2.extension === "svelte") {
              newScriptFile = (0, import_obsidian19.normalizePath)(f2.path);
              newScriptExtension = f2.extension;
              foundScript = true;
            }
          });
        }
        newPlayground.markup.language = "html";
        newPlayground.markup.content = "";
        newPlayground.style.language = "css";
        newPlayground.style.content = "";
        newPlayground.script.language = "javascript";
        newPlayground.script.content = "";
        if (foundMarkup) {
          let f2 = file instanceof import_obsidian19.TFolder ? this.app.vault.getFileByPath(newMarkupFile) : this.app.vault.getFileByPath(file.path);
          let code = await this.app.vault.read(f2);
          newPlayground.markup.content = code;
          newPlayground.markup.language = newMarkupExtension;
        }
        if (foundStyle) {
          let f2 = file instanceof import_obsidian19.TFolder ? this.app.vault.getFileByPath(newStyleFile) : this.app.vault.getFileByPath(file.path);
          let code = await this.app.vault.read(f2);
          newPlayground.style.content = code;
          newPlayground.style.language = newStyleExtension;
        }
        if (foundScript) {
          let f2 = file instanceof import_obsidian19.TFolder ? this.app.vault.getFileByPath(newScriptFile) : this.app.vault.getFileByPath(file.path);
          let code = await this.app.vault.read(f2);
          newPlayground.script.content = code;
          newPlayground.script.language = newScriptExtension;
        }
      } else {
        newPlayground.markup.content = "";
        newPlayground.style.content = "";
        newPlayground.script.content = "";
        newPlayground.markup.language = this.settings.quickPlaygroundMarkup || "";
        newPlayground.style.language = this.settings.quickPlaygroundStyle || "";
        newPlayground.script.language = this.settings.quickPlaygroundScript || "";
        newPlayground.activeEditor = "";
        newPlayground.stylesheets = "[]";
        newPlayground.cssPreset = "";
        newPlayground.scripts = "[]";
      }
      newPlayground.title = fName;
      newPlayground.appUrl = this.settings.appUrl;
      newPlayground.fontFamily = this.settings.fontFamily;
      newPlayground.fontSize = this.settings.fontSize;
      newPlayground.editor = this.settings.editor;
      newPlayground.editorTheme = this.settings.editorTheme;
      newPlayground.lineNumbers = this.settings.lineNumbers;
      newPlayground.theme = this.settings.darkTheme ? "dark" : "light";
      newPlayground.layout = this.settings.layout;
      newPlayground.useTabs = this.settings.useTabs;
      newPlayground.tabSize = this.settings.tabSize;
      newPlayground.closeBrackets = this.settings.closeBrackets;
      newPlayground.semicolons = this.settings.semicolons;
      newPlayground.singleQuote = this.settings.singleQuote;
      newPlayground.trailingComma = this.settings.trailingComma;
      newPlayground.wordWrap = this.settings.wordWrap;
      newPlayground.enableAI = this.settings.enableAI;
      newPlayground.autoupdate = this.settings.autoUpdate;
      newPlayground.delay = this.settings.delay;
      let prettyCfg = JSON.stringify(newPlayground, null, 2);
      try {
        await this.app.vault.create(
          this.settings.playgroundFolder + "/" + fName + ".json",
          await this.createText(
            prettyCfg
          )
        ).then(
          async (f2) => {
            this.settings.jsonTemplate = f2;
            await this.saveSettings();
            await this.activatePlaygroundView();
          }
        );
        showNotice("New playground saved as: " + this.settings.playgroundFolder + "/" + fName + ".json", 3e3, "success");
      } catch (error) {
        showNotice(this.settings.playgroundFolder + "/" + fName + ".json - " + error + " Click this message to dismiss.", 0, "error");
      }
    });
  }
  async newLivecodesPlaygroundFromGist(tpl) {
    let newTemplate = JSON.parse(tpl);
    await saveAsModal(this.app, "New livecodes playground", "Save as:", newTemplate.title, "e.g. New Playground", false).then(async (fName) => {
      if ((fName == null ? void 0 : fName.length) === 0) {
        return;
      }
      let newPlayground = newTemplate;
      let prettyCfg = JSON.stringify(newPlayground, null, 2);
      try {
        await this.app.vault.create(
          this.settings.playgroundFolder + "/" + fName + ".json",
          await this.createText(
            prettyCfg
          )
        ).then(
          async (f2) => {
            this.settings.jsonTemplate = f2;
            await this.saveSettings();
            await this.activatePlaygroundView();
          }
        );
        showNotice("New playground saved as: " + this.settings.playgroundFolder + "/" + fName + ".json", 3e3, "success");
      } catch (error) {
        showNotice(this.settings.playgroundFolder + "/" + fName + ".json - " + error + " Click this message to dismiss.", 0, "error");
      }
    });
  }
  async newLivecodesPlaygroundFromCodeblock(language, code) {
    await saveAsModal(this.app, "New livecodes playground", "Save as:", "", "e.g. New Playground", false).then(async (fName) => {
      if ((fName == null ? void 0 : fName.length) === 0) {
        return;
      }
      let newPlayground = blankPlayground;
      let foundMarkup = false;
      let foundStyle = false;
      let foundScript = false;
      codeBlockLanguages().markup.forEach((l) => {
        if (l.name === language) {
          foundMarkup = true;
          return;
        }
      });
      codeBlockLanguages().style.forEach((l) => {
        if (l.name === language) {
          foundStyle = true;
          return;
        }
      });
      codeBlockLanguages().script.forEach((l) => {
        if (l.name === language) {
          foundScript = true;
          return;
        }
      });
      if (foundMarkup) {
        newPlayground.style.content = "";
        newPlayground.style.language = "css";
        newPlayground.script.content = "";
        newPlayground.script.language = "javascript";
        newPlayground.markup.content = code;
        newPlayground.markup.language = language;
        newPlayground.activeEditor = "markup";
      }
      if (foundStyle) {
        newPlayground.markup.content = "";
        newPlayground.markup.language = "html";
        newPlayground.script.language = "javascript";
        newPlayground.script.content = "";
        newPlayground.style.content = code;
        newPlayground.style.language = language;
        newPlayground.activeEditor = "style";
        if (language === "tailwindcss" || language === "unocss" || language === "windicss" || language === "lightningcss") {
          let processors = [];
          processors.push(language);
          ;
          newPlayground.processors = processors;
          if (language === "tailwindcss") {
            newPlayground.style.content = "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n" + code;
            newPlayground.style.language = "tailwindcss";
          }
        }
      }
      if (foundScript) {
        newPlayground.markup.content = "";
        newPlayground.markup.language = "html";
        newPlayground.style.content = "";
        newPlayground.style.language = "css";
        newPlayground.script.content = code;
        newPlayground.script.language = language;
        newPlayground.activeEditor = "script";
      }
      newPlayground.title = fName;
      newPlayground.appUrl = this.settings.appUrl;
      newPlayground.fontFamily = this.settings.fontFamily;
      newPlayground.fontSize = this.settings.fontSize;
      newPlayground.editor = this.settings.editor;
      newPlayground.editorTheme = this.settings.editorTheme;
      newPlayground.lineNumbers = this.settings.lineNumbers;
      newPlayground.theme = this.settings.darkTheme ? "dark" : "light";
      newPlayground.layout = this.settings.layout;
      newPlayground.useTabs = this.settings.useTabs;
      newPlayground.tabSize = this.settings.tabSize;
      newPlayground.closeBrackets = this.settings.closeBrackets;
      newPlayground.semicolons = this.settings.semicolons;
      newPlayground.singleQuote = this.settings.singleQuote;
      newPlayground.trailingComma = this.settings.trailingComma;
      newPlayground.wordWrap = this.settings.wordWrap;
      newPlayground.enableAI = this.settings.enableAI;
      newPlayground.autoupdate = this.settings.autoUpdate;
      newPlayground.delay = this.settings.delay;
      let prettyCfg = JSON.stringify(newPlayground, null, 2);
      try {
        await this.app.vault.create(
          this.settings.playgroundFolder + "/" + fName + ".json",
          await this.createText(
            prettyCfg
          )
        ).then(
          async (f2) => {
            this.settings.jsonTemplate = f2;
            await this.saveSettings();
            await this.activatePlaygroundView();
          }
        );
        showNotice("New playground saved as: " + this.settings.playgroundFolder + "/" + fName + ".json", 3e3, "success");
      } catch (error) {
        showNotice(this.settings.playgroundFolder + "/" + fName + ".json - " + error + " Click this message to dismiss.", 0, "error");
      }
    });
  }
  async newLivecodesPlaygroundFromCodeblocks() {
    var _a3, _b;
    let view = this.app.workspace.getActiveViewOfType(import_obsidian19.MarkdownView);
    if (view == null ? void 0 : view.file) {
      let fCache = this.app.metadataCache.getFileCache(view.file);
      let cnf = { markup: { content: "", language: "" }, style: { content: "", language: "" }, script: { content: "", language: "" } };
      let cacheRead = await this.app.vault.cachedRead(view == null ? void 0 : view.file);
      let codeSections = ((_a3 = fCache == null ? void 0 : fCache.sections) == null ? void 0 : _a3.filter((section) => section.type === "code")) || [];
      for (let section of codeSections) {
        let start = section.position.start.offset;
        let end2 = section.position.end.offset;
        let extracted = cacheRead.substring(start, end2);
        let rows = extracted.split("\n").filter((row) => row.length > 0);
        let codeLanguage = rows[0].replace("```", "");
        let code = extracted.replace(/^(.*)\n/, "").replace(/\n.*$/, "").trim();
        if (codeLanguage === "html" || codeLanguage === "mdx" || codeLanguage === "astro") {
          cnf.markup.content = code;
          cnf.markup.language = codeLanguage;
          cnf.activeEditor = "markup";
        }
        if (codeLanguage === "css" || codeLanguage === "scss") {
          cnf.style.content = code;
          cnf.style.language = codeLanguage;
        }
        if (codeLanguage === "javascript" || codeLanguage === "js" || codeLanguage === "jsx" || codeLanguage === "tsx" || codeLanguage === "ts" || codeLanguage === "typescript" || codeLanguage === "svelte") {
          cnf.script.content = code;
          if (codeLanguage === "js" || codeLanguage === "ts") {
            cnf.script.language = codeLanguage === "js" ? "javascript" : "typescript";
          } else {
            cnf.script.language = codeLanguage;
          }
        }
      }
      let codeSource = ((_b = fCache == null ? void 0 : fCache.frontmatter) == null ? void 0 : _b.source) || null;
      await saveAsModal(this.app, "New livecodes playground", "Save as:", view.file.name.replace(".md", ""), "e.g. New Playground", false).then(async (fName) => {
        if ((fName == null ? void 0 : fName.length) === 0) {
          return;
        }
        let newPlayground = { ...blankPlayground, ...cnf };
        if (codeSource) {
          newPlayground.description = "Source: " + codeSource;
        }
        newPlayground.title = fName;
        newPlayground.appUrl = this.settings.appUrl;
        newPlayground.fontFamily = this.settings.fontFamily;
        newPlayground.fontSize = this.settings.fontSize;
        newPlayground.editor = this.settings.editor;
        newPlayground.editorTheme = this.settings.editorTheme;
        newPlayground.lineNumbers = this.settings.lineNumbers;
        newPlayground.theme = this.settings.darkTheme ? "dark" : "light";
        newPlayground.layout = this.settings.layout;
        newPlayground.useTabs = this.settings.useTabs;
        newPlayground.tabSize = this.settings.tabSize;
        newPlayground.closeBrackets = this.settings.closeBrackets;
        newPlayground.semicolons = this.settings.semicolons;
        newPlayground.singleQuote = this.settings.singleQuote;
        newPlayground.trailingComma = this.settings.trailingComma;
        newPlayground.wordWrap = this.settings.wordWrap;
        newPlayground.enableAI = this.settings.enableAI;
        newPlayground.autoupdate = this.settings.autoUpdate;
        newPlayground.delay = this.settings.delay;
        let prettyCfg = JSON.stringify(newPlayground, null, 2);
        try {
          await this.app.vault.create(
            this.settings.playgroundFolder + "/" + fName + ".json",
            await this.createText(
              prettyCfg
            )
          ).then(
            async (f2) => {
              this.settings.jsonTemplate = f2;
              await this.saveSettings();
              await this.activatePlaygroundView();
            }
          );
          showNotice("New playground saved as: " + this.settings.playgroundFolder + "/" + fName + ".json", 3e3, "success");
        } catch (error) {
          showNotice(this.settings.playgroundFolder + "/" + fName + ".json - " + error + " Click this message to dismiss.", 0, "error");
        }
      });
    }
  }
  onClickCodeblock(event) {
    let target = event.target;
    let nodeType = target.localName;
    if (nodeType !== "code" && !(target.parentElement instanceof HTMLPreElement)) {
      return;
    }
    let lang = "text";
    let LANG_REGEX = /^language-/;
    target.classList.forEach((val2, key) => {
      if (LANG_REGEX.test(val2)) {
        lang = val2.replace(`language-`, "");
        return;
      }
    });
    let menu = new import_obsidian19.Menu();
    if (ALLOWED_LANGS.includes(lang)) {
      menu.addItem(
        (item) => item.setIcon("code").setTitle("Open in Livecodes").onClick(async (ele) => {
          var _a3;
          let code = "";
          if (nodeType === "code") {
            code = target.textContent;
          } else {
            code = (_a3 = target.firstChild) == null ? void 0 : _a3.textContent;
          }
          await this.newLivecodesPlaygroundFromCodeblock(lang, code);
        })
      );
    }
    let offset = 0;
    menu.showAtPosition({
      x: event.pageX + offset,
      y: event.pageY + offset
    });
    this.app.workspace.trigger("html-contextmenu:contextmenu", menu);
  }
};
/*! Bundled license information:

nunjucks/browser/nunjucks.js:
  (*! Browser bundle of nunjucks 3.2.4  *)
*/

/* nosourcemap */